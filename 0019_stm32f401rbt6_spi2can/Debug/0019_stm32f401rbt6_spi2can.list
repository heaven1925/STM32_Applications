
0019_stm32f401rbt6_spi2can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056bc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800587c  0800587c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005884  08005884  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005884  08005884  00015884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800588c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000010  08005898  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  2000038c  08005898  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001342e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000252a  00000000  00000000  0003346a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00035998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  000368a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177fb  00000000  00000000  000376d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ed2  00000000  00000000  0004eecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091390  00000000  00000000  00060d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f212d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f68  00000000  00000000  000f2180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005838 	.word	0x08005838

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08005838 	.word	0x08005838

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f002 fdcf 	bl	8003080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f849 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f969 	bl	80007bc <MX_GPIO_Init>
  MX_SPI1_Init();
 80004ea:	f000 f8af 	bl	800064c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f93b 	bl	8000768 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004f2:	f000 f8e1 	bl	80006b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Construction function of protocol */

  	EEM_CTOR(&protocol /* Main protocol Class Construct */
 80004f6:	4b19      	ldr	r3, [pc, #100]	; (800055c <main+0x84>)
 80004f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80004fa:	4819      	ldr	r0, [pc, #100]	; (8000560 <main+0x88>)
 80004fc:	f000 fdab 	bl	8001056 <EEM_CTOR>
  /* Only works for spi2can */
  #endif
  	);

  	/* Init protocol settings in order to 250KBps Bit Rate */
  	protocol.ops.EEM_INIT(&protocol.obj);
 8000500:	4b17      	ldr	r3, [pc, #92]	; (8000560 <main+0x88>)
 8000502:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000506:	4816      	ldr	r0, [pc, #88]	; (8000560 <main+0x88>)
 8000508:	4798      	blx	r3

  	/* Send Test Data */
  	const char testData[ EEM_MAX_SIZE ] = { 0xEE , 0x00 , 0xEE , 0x00 , 0xEE , 0x00 , 0xEE , 0x00 };
 800050a:	4a16      	ldr	r2, [pc, #88]	; (8000564 <main+0x8c>)
 800050c:	463b      	mov	r3, r7
 800050e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000512:	e883 0003 	stmia.w	r3, {r0, r1}
  	memcpy(&protocol.obj.canPacket.DATA[0] , &testData[0] , 8);
 8000516:	463b      	mov	r3, r7
 8000518:	2208      	movs	r2, #8
 800051a:	4619      	mov	r1, r3
 800051c:	4812      	ldr	r0, [pc, #72]	; (8000568 <main+0x90>)
 800051e:	f005 f975 	bl	800580c <memcpy>
  	protocol.obj.canPacket.EXTENDED_ID.identifier = 0x1CFFFFFF;
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <main+0x88>)
 8000524:	f06f 4263 	mvn.w	r2, #3808428032	; 0xe3000000
 8000528:	61da      	str	r2, [r3, #28]
  	protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <main+0x88>)
 800052c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000530:	2100      	movs	r1, #0
 8000532:	480e      	ldr	r0, [pc, #56]	; (800056c <main+0x94>)
 8000534:	4798      	blx	r3
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  EEM_PERIODIC(&protocol.obj.canPacket);
 8000536:	480d      	ldr	r0, [pc, #52]	; (800056c <main+0x94>)
 8000538:	f000 febe 	bl	80012b8 <EEM_PERIODIC>

	  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message03.payload[0] , 8);
 800053c:	2208      	movs	r2, #8
 800053e:	490c      	ldr	r1, [pc, #48]	; (8000570 <main+0x98>)
 8000540:	4809      	ldr	r0, [pc, #36]	; (8000568 <main+0x90>)
 8000542:	f005 f963 	bl	800580c <memcpy>
	  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message03_ID;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <main+0x9c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a05      	ldr	r2, [pc, #20]	; (8000560 <main+0x88>)
 800054c:	61d3      	str	r3, [r2, #28]
	  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 800054e:	4b04      	ldr	r3, [pc, #16]	; (8000560 <main+0x88>)
 8000550:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000554:	2100      	movs	r1, #0
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <main+0x94>)
 8000558:	4798      	blx	r3
	  EEM_PERIODIC(&protocol.obj.canPacket);
 800055a:	e7ec      	b.n	8000536 <main+0x5e>
 800055c:	08005870 	.word	0x08005870
 8000560:	20000110 	.word	0x20000110
 8000564:	08005850 	.word	0x08005850
 8000568:	20000130 	.word	0x20000130
 800056c:	2000012c 	.word	0x2000012c
 8000570:	20000254 	.word	0x20000254
 8000574:	20000250 	.word	0x20000250

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f005 f94e 	bl	8005828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b28      	ldr	r3, [pc, #160]	; (8000644 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a27      	ldr	r2, [pc, #156]	; (8000644 <SystemClock_Config+0xcc>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b25      	ldr	r3, [pc, #148]	; (8000644 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b22      	ldr	r3, [pc, #136]	; (8000648 <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c4:	4a20      	ldr	r2, [pc, #128]	; (8000648 <SystemClock_Config+0xd0>)
 80005c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005f0:	2354      	movs	r3, #84	; 0x54
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f003 f883 	bl	800370c <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800060c:	f000 f930 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fae5 	bl	8003bfc <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000638:	f000 f91a 	bl	8000870 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3750      	adds	r7, #80	; 0x50
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <MX_SPI1_Init+0x68>)
 8000654:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800065c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_SPI1_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000680:	2228      	movs	r2, #40	; 0x28
 8000682:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_SPI1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000698:	220a      	movs	r2, #10
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_SPI1_Init+0x64>)
 800069e:	f003 fc8d 	bl	8003fbc <HAL_SPI_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006a8:	f000 f8e2 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000002c 	.word	0x2000002c
 80006b4:	40013000 	.word	0x40013000

080006b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
 80006d6:	615a      	str	r2, [r3, #20]
 80006d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <MX_TIM2_Init+0xac>)
 80006dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 80006e2:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_TIM2_Init+0xac>)
 80006e4:	f240 3247 	movw	r2, #839	; 0x347
 80006e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_TIM2_Init+0xac>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_TIM2_Init+0xac>)
 80006f2:	2214      	movs	r2, #20
 80006f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_TIM2_Init+0xac>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_TIM2_Init+0xac>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000702:	4818      	ldr	r0, [pc, #96]	; (8000764 <MX_TIM2_Init+0xac>)
 8000704:	f004 fa10 	bl	8004b28 <HAL_TIM_PWM_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800070e:	f000 f8af 	bl	8000870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000712:	2300      	movs	r3, #0
 8000714:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	4619      	mov	r1, r3
 8000720:	4810      	ldr	r0, [pc, #64]	; (8000764 <MX_TIM2_Init+0xac>)
 8000722:	f004 fd1f 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800072c:	f000 f8a0 	bl	8000870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000730:	2360      	movs	r3, #96	; 0x60
 8000732:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	4619      	mov	r1, r3
 8000746:	4807      	ldr	r0, [pc, #28]	; (8000764 <MX_TIM2_Init+0xac>)
 8000748:	f004 fa3e 	bl	8004bc8 <HAL_TIM_PWM_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000752:	f000 f88d 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <MX_TIM2_Init+0xac>)
 8000758:	f000 f920 	bl	800099c <HAL_TIM_MspPostInit>

}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000084 	.word	0x20000084

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f004 fd4e 	bl	8005240 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f861 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000cc 	.word	0x200000cc
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_GPIO_Init+0xa8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <MX_GPIO_Init+0xa8>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_GPIO_Init+0xa8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_GPIO_Init+0xa8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <MX_GPIO_Init+0xa8>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_GPIO_Init+0xa8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2110      	movs	r1, #16
 800080e:	4816      	ldr	r0, [pc, #88]	; (8000868 <MX_GPIO_Init+0xac>)
 8000810:	f002 ff3e 	bl	8003690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000814:	2310      	movs	r3, #16
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	480f      	ldr	r0, [pc, #60]	; (8000868 <MX_GPIO_Init+0xac>)
 800082c:	f002 fdac 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000830:	2304      	movs	r3, #4
 8000832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000834:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4619      	mov	r1, r3
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <MX_GPIO_Init+0xb0>)
 8000846:	f002 fd9f 	bl	8003388 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2008      	movs	r0, #8
 8000850:	f002 fd63 	bl	800331a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000854:	2008      	movs	r0, #8
 8000856:	f002 fd7c 	bl	8003352 <HAL_NVIC_EnableIRQ>

}
 800085a:	bf00      	nop
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	40020400 	.word	0x40020400

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <HAL_MspInit+0x4c>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000890:	6453      	str	r3, [r2, #68]	; 0x44
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a19      	ldr	r2, [pc, #100]	; (8000950 <HAL_SPI_MspInit+0x84>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d12b      	bne.n	8000946 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <HAL_SPI_MspInit+0x88>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <HAL_SPI_MspInit+0x88>)
 80008f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008fc:	6453      	str	r3, [r2, #68]	; 0x44
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_SPI_MspInit+0x88>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_SPI_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <HAL_SPI_MspInit+0x88>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_SPI_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000926:	23e0      	movs	r3, #224	; 0xe0
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000936:	2305      	movs	r3, #5
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <HAL_SPI_MspInit+0x8c>)
 8000942:	f002 fd21 	bl	8003388 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40013000 	.word	0x40013000
 8000954:	40023800 	.word	0x40023800
 8000958:	40020000 	.word	0x40020000

0800095c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800096c:	d10d      	bne.n	800098a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_TIM_PWM_MspInit+0x3c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_TIM_PWM_MspInit+0x3c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_TIM_PWM_MspInit+0x3c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009bc:	d11d      	bne.n	80009fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_TIM_MspPostInit+0x68>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <HAL_TIM_MspPostInit+0x68>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_TIM_MspPostInit+0x68>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009da:	2301      	movs	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <HAL_TIM_MspPostInit+0x6c>)
 80009f6:	f002 fcc7 	bl	8003388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009fa:	bf00      	nop
 80009fc:	3720      	adds	r7, #32
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_UART_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12b      	bne.n	8000a86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a66:	230c      	movs	r3, #12
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a76:	2307      	movs	r3, #7
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_UART_MspInit+0x8c>)
 8000a82:	f002 fc81 	bl	8003388 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f002 fb1c 	bl	8003124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000af4:	2004      	movs	r0, #4
 8000af6:	f002 fde5 	bl	80036c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b2a:	490e      	ldr	r1, [pc, #56]	; (8000b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b40:	4c0b      	ldr	r4, [pc, #44]	; (8000b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b4e:	f7ff ffd7 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b52:	f004 fe37 	bl	80057c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b56:	f7ff fcbf 	bl	80004d8 <main>
  bx  lr    
 8000b5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b68:	0800588c 	.word	0x0800588c
  ldr r2, =_sbss
 8000b6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b70:	2000038c 	.word	0x2000038c

08000b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC_IRQHandler>

08000b76 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b088      	sub	sp, #32
 8000b7a:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000b80:	2300      	movs	r3, #0
 8000b82:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000b84:	2300      	movs	r3, #0
 8000b86:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000b90:	2300      	movs	r3, #0
 8000b92:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000b94:	2300      	movs	r3, #0
 8000b96:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8000bac:	2300      	movs	r3, #0
 8000bae:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000be0:	2300      	movs	r3, #0
 8000be2:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 8000bec:	2300      	movs	r3, #0
 8000bee:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 8000bfc:	f002 f88a 	bl	8002d14 <MCP2515_Initialize>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f083 0301 	eor.w	r3, r3, #1
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d002      	beq.n	8000c12 <CANSPI_Initialize+0x9c>
    return -1;
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	e060      	b.n	8000cd4 <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8000c12:	f002 f8a1 	bl	8002d58 <MCP2515_SetConfigMode>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f083 0301 	eor.w	r3, r3, #1
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <CANSPI_Initialize+0xb2>
    return -2;
 8000c22:	f06f 0301 	mvn.w	r3, #1
 8000c26:	e055      	b.n	8000cd4 <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2123      	movs	r1, #35	; 0x23
 8000c2e:	2020      	movs	r0, #32
 8000c30:	f002 f936 	bl	8002ea0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000c34:	463b      	mov	r3, r7
 8000c36:	461a      	mov	r2, r3
 8000c38:	2127      	movs	r1, #39	; 0x27
 8000c3a:	2024      	movs	r0, #36	; 0x24
 8000c3c:	f002 f930 	bl	8002ea0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	461a      	mov	r2, r3
 8000c46:	2103      	movs	r1, #3
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f002 f929 	bl	8002ea0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000c4e:	f107 0318 	add.w	r3, r7, #24
 8000c52:	461a      	mov	r2, r3
 8000c54:	2107      	movs	r1, #7
 8000c56:	2004      	movs	r0, #4
 8000c58:	f002 f922 	bl	8002ea0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	461a      	mov	r2, r3
 8000c62:	210b      	movs	r1, #11
 8000c64:	2008      	movs	r0, #8
 8000c66:	f002 f91b 	bl	8002ea0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	461a      	mov	r2, r3
 8000c70:	2113      	movs	r1, #19
 8000c72:	2010      	movs	r0, #16
 8000c74:	f002 f914 	bl	8002ea0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	2117      	movs	r1, #23
 8000c80:	2014      	movs	r0, #20
 8000c82:	f002 f90d 	bl	8002ea0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	211b      	movs	r1, #27
 8000c8e:	2018      	movs	r0, #24
 8000c90:	f002 f906 	bl	8002ea0 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000c94:	2104      	movs	r1, #4
 8000c96:	2060      	movs	r0, #96	; 0x60
 8000c98:	f002 f8de 	bl	8002e58 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	2070      	movs	r0, #112	; 0x70
 8000ca0:	f002 f8da 	bl	8002e58 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	202a      	movs	r0, #42	; 0x2a
 8000ca8:	f002 f8d6 	bl	8002e58 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000cac:	21e5      	movs	r1, #229	; 0xe5
 8000cae:	2029      	movs	r0, #41	; 0x29
 8000cb0:	f002 f8d2 	bl	8002e58 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000cb4:	2183      	movs	r1, #131	; 0x83
 8000cb6:	2028      	movs	r0, #40	; 0x28
 8000cb8:	f002 f8ce 	bl	8002e58 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000cbc:	f002 f86a 	bl	8002d94 <MCP2515_SetNormalMode>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f083 0301 	eor.w	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d002      	beq.n	8000cd2 <CANSPI_Initialize+0x15c>
    return -3;
 8000ccc:	f06f 0302 	mvn.w	r3, #2
 8000cd0:	e000      	b.n	8000cd4 <CANSPI_Initialize+0x15e>

  return 1;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000ce8:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <CANSPI_Transmit+0xec>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000cee:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <CANSPI_Transmit+0xec>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000cf4:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <CANSPI_Transmit+0xec>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000cfa:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <CANSPI_Transmit+0xec>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000d00:	f002 f93c 	bl	8002f7c <MCP2515_ReadStatus>
 8000d04:	4603      	mov	r3, r0
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b30      	ldr	r3, [pc, #192]	; (8000dcc <CANSPI_Transmit+0xf0>)
 8000d0a:	701a      	strb	r2, [r3, #0]

  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8000d0c:	4b2f      	ldr	r3, [pc, #188]	; (8000dcc <CANSPI_Transmit+0xf0>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d116      	bne.n	8000d48 <CANSPI_Transmit+0x6c>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4a28      	ldr	r2, [pc, #160]	; (8000dc8 <CANSPI_Transmit+0xec>)
 8000d26:	4619      	mov	r1, r3
 8000d28:	f000 f92b 	bl	8000f82 <convertCANid2Reg>

    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	795a      	ldrb	r2, [r3, #5]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3306      	adds	r3, #6
 8000d34:	4924      	ldr	r1, [pc, #144]	; (8000dc8 <CANSPI_Transmit+0xec>)
 8000d36:	2040      	movs	r0, #64	; 0x40
 8000d38:	f002 f8dc 	bl	8002ef4 <MCP2515_LoadTxSequence>

    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000d3c:	2081      	movs	r0, #129	; 0x81
 8000d3e:	f002 f903 	bl	8002f48 <MCP2515_RequestToSend>

    returnValue = 1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e03a      	b.n	8000dbe <CANSPI_Transmit+0xe2>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <CANSPI_Transmit+0xf0>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d116      	bne.n	8000d84 <CANSPI_Transmit+0xa8>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <CANSPI_Transmit+0xec>)
 8000d62:	4619      	mov	r1, r3
 8000d64:	f000 f90d 	bl	8000f82 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	795a      	ldrb	r2, [r3, #5]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3306      	adds	r3, #6
 8000d70:	4915      	ldr	r1, [pc, #84]	; (8000dc8 <CANSPI_Transmit+0xec>)
 8000d72:	2042      	movs	r0, #66	; 0x42
 8000d74:	f002 f8be 	bl	8002ef4 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000d78:	2082      	movs	r0, #130	; 0x82
 8000d7a:	f002 f8e5 	bl	8002f48 <MCP2515_RequestToSend>

    returnValue = 1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
 8000d82:	e01c      	b.n	8000dbe <CANSPI_Transmit+0xe2>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <CANSPI_Transmit+0xf0>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d115      	bne.n	8000dbe <CANSPI_Transmit+0xe2>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <CANSPI_Transmit+0xec>)
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f000 f8ef 	bl	8000f82 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	795a      	ldrb	r2, [r3, #5]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3306      	adds	r3, #6
 8000dac:	4906      	ldr	r1, [pc, #24]	; (8000dc8 <CANSPI_Transmit+0xec>)
 8000dae:	2044      	movs	r0, #68	; 0x44
 8000db0:	f002 f8a0 	bl	8002ef4 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000db4:	2084      	movs	r0, #132	; 0x84
 8000db6:	f002 f8c7 	bl	8002f48 <MCP2515_RequestToSend>

    returnValue = 1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000248 	.word	0x20000248
 8000dcc:	20000244 	.word	0x20000244

08000dd0 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000ddc:	f002 f8ea 	bl	8002fb4 <MCP2515_GetRxStatus>
 8000de0:	4603      	mov	r3, r0
 8000de2:	733b      	strb	r3, [r7, #12]

  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 8000de4:	7b3b      	ldrb	r3, [r7, #12]
 8000de6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d068      	beq.n	8000ec2 <CANSPI_Receive+0xf2>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000df0:	7b3b      	ldrb	r3, [r7, #12]
 8000df2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b40      	cmp	r3, #64	; 0x40
 8000dfa:	bf0c      	ite	eq
 8000dfc:	2301      	moveq	r3, #1
 8000dfe:	2300      	movne	r3, #0
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	7b3b      	ldrb	r3, [r7, #12]
 8000e04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2bc0      	cmp	r3, #192	; 0xc0
 8000e0c:	bf0c      	ite	eq
 8000e0e:	2301      	moveq	r3, #1
 8000e10:	2300      	movne	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d007      	beq.n	8000e2c <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	220d      	movs	r2, #13
 8000e22:	4619      	mov	r1, r3
 8000e24:	2090      	movs	r0, #144	; 0x90
 8000e26:	f001 fff5 	bl	8002e14 <MCP2515_ReadRxSequence>
 8000e2a:	e00c      	b.n	8000e46 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000e2c:	7b3b      	ldrb	r3, [r7, #12]
 8000e2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b80      	cmp	r3, #128	; 0x80
 8000e36:	d106      	bne.n	8000e46 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	220d      	movs	r2, #13
 8000e3e:	4619      	mov	r1, r3
 8000e40:	2094      	movs	r0, #148	; 0x94
 8000e42:	f001 ffe7 	bl	8002e14 <MCP2515_ReadRxSequence>
    }

    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000e46:	7b3b      	ldrb	r3, [r7, #12]
 8000e48:	f003 0318 	and.w	r3, r3, #24
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b10      	cmp	r3, #16
 8000e50:	d10d      	bne.n	8000e6e <CANSPI_Receive+0x9e>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2202      	movs	r2, #2
 8000e56:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000e58:	7cb8      	ldrb	r0, [r7, #18]
 8000e5a:	7cf9      	ldrb	r1, [r7, #19]
 8000e5c:	7c3a      	ldrb	r2, [r7, #16]
 8000e5e:	7c7b      	ldrb	r3, [r7, #17]
 8000e60:	f000 f834 	bl	8000ecc <convertReg2ExtendedCANid>
 8000e64:	4602      	mov	r2, r0
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f8c3 2001 	str.w	r2, [r3, #1]
 8000e6c:	e00c      	b.n	8000e88 <CANSPI_Receive+0xb8>
    }
    else
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000e74:	7c3b      	ldrb	r3, [r7, #16]
 8000e76:	7c7a      	ldrb	r2, [r7, #17]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f864 	bl	8000f48 <convertReg2StandardCANid>
 8000e80:	4602      	mov	r2, r0
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f8c3 2001 	str.w	r2, [r3, #1]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000e88:	7d3a      	ldrb	r2, [r7, #20]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	715a      	strb	r2, [r3, #5]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000e8e:	7d7a      	ldrb	r2, [r7, #21]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	719a      	strb	r2, [r3, #6]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000e94:	7dba      	ldrb	r2, [r7, #22]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	71da      	strb	r2, [r3, #7]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8000e9a:	7dfa      	ldrb	r2, [r7, #23]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000ea0:	7e3a      	ldrb	r2, [r7, #24]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8000ea6:	7e7a      	ldrb	r2, [r7, #25]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000eac:	7eba      	ldrb	r2, [r7, #26]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000eb2:	7efa      	ldrb	r2, [r7, #27]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000eb8:	7f3a      	ldrb	r2, [r7, #28]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	735a      	strb	r2, [r3, #13]

    returnValue = 1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 8000ec2:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000ecc:	b490      	push	{r4, r7}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4623      	mov	r3, r4
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71bb      	strb	r3, [r7, #6]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	717b      	strb	r3, [r7, #5]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8000ef2:	793b      	ldrb	r3, [r7, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8000efa:	793b      	ldrb	r3, [r7, #4]
 8000efc:	095b      	lsrs	r3, r3, #5
 8000efe:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000f00:	797b      	ldrb	r3, [r7, #5]
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000f06:	7bbb      	ldrb	r3, [r7, #14]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4413      	add	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4413      	add	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4413      	add	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000f3c:	697b      	ldr	r3, [r7, #20]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc90      	pop	{r4, r7}
 8000f46:	4770      	bx	lr

08000f48 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	460a      	mov	r2, r1
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	4613      	mov	r3, r2
 8000f56:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	095b      	lsrs	r3, r3, #5
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8000f74:	68fb      	ldr	r3, [r7, #12]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b087      	sub	sp, #28
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d12e      	bne.n	8000ff8 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	f023 031f 	bic.w	r3, r3, #31
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000fd6:	7dfb      	ldrb	r3, [r7, #23]
 8000fd8:	3308      	adds	r3, #8
 8000fda:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	f023 0314 	bic.w	r3, r3, #20
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8000ff6:	e013      	b.n	8001020 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	015b      	lsls	r3, r3, #5
 8001008:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	701a      	strb	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <EEM_SPI2CAN_PeriphBase_CTOR>:
	 @return  :
	 @date	  :
	 @INFO	  :
********************************************************************************/
void EEM_SPI2CAN_PeriphBase_CTOR(EEM_SPI2CAN_PeriphBase_st* param )
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	memset( &param->txMessage , 0x00 , sizeof(uCAN_MSG) );
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	220e      	movs	r2, #14
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f004 fbf4 	bl	8005828 <memset>
	memset( &param->rxMessage , 0x00 , sizeof(uCAN_MSG) );
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	330e      	adds	r3, #14
 8001044:	220e      	movs	r2, #14
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f004 fbed 	bl	8005828 <memset>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <EEM_CTOR>:
	, FDCAN_HandleTypeDef* _fdcan
#else
/* Only works for spi2can */
#endif
)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	4638      	mov	r0, r7
 8001060:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/* Construct methods */
	param->ops = _ops ;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800106a:	463a      	mov	r2, r7
 800106c:	ca07      	ldmia	r2, {r0, r1, r2}
 800106e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EEM_FDCAN_PeriphBase_CTOR(&param->obj.fdHandle , _fdcan);

#else
#if defined(SPI2CAN_Protocol)

	EEM_SPI2CAN_PeriphBase_CTOR(&param->obj.spi2canHandle);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffd9 	bl	800102c <EEM_SPI2CAN_PeriphBase_CTOR>
//ERROR
#endif
#endif

	/* Construct other objects */
	memset(&param->obj.canPacket , 0x00 , sizeof(EEM_CAN_Packet_st));
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	331c      	adds	r3, #28
 800107e:	2214      	movs	r2, #20
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f004 fbd0 	bl	8005828 <memset>
	memset(&param->obj.ringBuffer , 0x00 , sizeof(EEM_RING_Buffer_st));
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3330      	adds	r3, #48	; 0x30
 800108c:	22f8      	movs	r2, #248	; 0xf8
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f004 fbc9 	bl	8005828 <memset>

}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <EEM_INIT>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T EEM_INIT( EEM_Protocol_obj_st*  param )
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
	
	EEM_ERR_T result = EEM_EOK;
 80010a6:	2301      	movs	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
#endif

#endif
/* Ring Buffer Init Sequance */

	param->ringBuffer.head = 0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	param->ringBuffer.tail = 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
	param->ringBuffer.full = EEM_FALSE;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126

#if defined(SPI2CAN_Protocol)

	EEM_U8 ret;

	ret = CANSPI_Initialize();
 80010c2:	f7ff fd58 	bl	8000b76 <CANSPI_Initialize>
 80010c6:	4603      	mov	r3, r0
 80010c8:	73bb      	strb	r3, [r7, #14]

#endif

	/* Filtering Configurations */

	EEM_SET_IDENTIFIERS();
 80010ca:	f001 fb79 	bl	80027c0 <EEM_SET_IDENTIFIERS>
#error /* failed define */
#endif

#endif

	return result;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <EEM_PUSH>:
	 @return  : 
	 @date	  : 
	 @INFO	  :
********************************************************************************/
void   EEM_PUSH( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 80010d8:	b490      	push	{r4, r7}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e011      	b.n	8001110 <EEM_PUSH+0x38>
	{
		ringBuf->data[ ringBuf->tail ][ loopVal ] = param->DATA[ loopVal ];
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 80010f4:	461c      	mov	r4, r3
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	6839      	ldr	r1, [r7, #0]
 80010fa:	440a      	add	r2, r1
 80010fc:	7910      	ldrb	r0, [r2, #4]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	00e2      	lsls	r2, r4, #3
 8001102:	440a      	add	r2, r1
 8001104:	4413      	add	r3, r2
 8001106:	4602      	mov	r2, r0
 8001108:	701a      	strb	r2, [r3, #0]
	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	3301      	adds	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b07      	cmp	r3, #7
 8001114:	d9ea      	bls.n	80010ec <EEM_PUSH+0x14>
	}
	ringBuf->id[ ringBuf->tail ].identifier = param->EXTENDED_ID.identifier;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800111c:	461a      	mov	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	6819      	ldr	r1, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3228      	adds	r2, #40	; 0x28
 8001126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ringBuf->byte_count++;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	ringBuf->tail = ( ringBuf->tail + 1 ) % EEM_BUFFER_SIZE ;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <EEM_PUSH+0xa8>)
 8001142:	fb83 1302 	smull	r1, r3, r3, r2
 8001146:	10d9      	asrs	r1, r3, #3
 8001148:	17d3      	asrs	r3, r2, #31
 800114a:	1ac9      	subs	r1, r1, r3
 800114c:	460b      	mov	r3, r1
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	1ad1      	subs	r1, r2, r3
 8001156:	b2ca      	uxtb	r2, r1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
	
	if( ringBuf->tail == ringBuf->head )
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800116a:	429a      	cmp	r2, r3
 800116c:	d103      	bne.n	8001176 <EEM_PUSH+0x9e>
	{
		ringBuf->full = EEM_TRUE ;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
	}
	
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bc90      	pop	{r4, r7}
 800117e:	4770      	bx	lr
 8001180:	66666667 	.word	0x66666667

08001184 <EEM_POP>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void	EEM_POP( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal <= 8 ; loopVal++)
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	e011      	b.n	80011bc <EEM_POP+0x38>
	{
		param->DATA[ loopVal ] = ringBuf->data[ ringBuf->head ][ loopVal ];
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800119e:	4619      	mov	r1, r3
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	00c9      	lsls	r1, r1, #3
 80011a8:	4401      	add	r1, r0
 80011aa:	440a      	add	r2, r1
 80011ac:	7811      	ldrb	r1, [r2, #0]
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	4413      	add	r3, r2
 80011b2:	460a      	mov	r2, r1
 80011b4:	711a      	strb	r2, [r3, #4]
	for(loopVal = 0 ; loopVal <= 8 ; loopVal++)
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	3301      	adds	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d9ea      	bls.n	8001198 <EEM_POP+0x14>
	}
	param->EXTENDED_ID.identifier = ringBuf->id[ ringBuf->head ].identifier;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80011c8:	461a      	mov	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3228      	adds	r2, #40	; 0x28
 80011ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	601a      	str	r2, [r3, #0]
	ringBuf->byte_count++;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	
	ringBuf->head = (ringBuf->head + 1) % EEM_BUFFER_SIZE ;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <EEM_POP+0x9c>)
 80011ee:	fb83 1302 	smull	r1, r3, r3, r2
 80011f2:	10d9      	asrs	r1, r3, #3
 80011f4:	17d3      	asrs	r3, r2, #31
 80011f6:	1ac9      	subs	r1, r1, r3
 80011f8:	460b      	mov	r3, r1
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	1ad1      	subs	r1, r2, r3
 8001202:	b2ca      	uxtb	r2, r1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	ringBuf->full = EEM_FALSE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6


}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	66666667 	.word	0x66666667

08001224 <EEM_TX>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 		EEM_TX( EEM_CAN_Packet_st* param, EEM_U32 period )
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	EEM_ERR_T result = EEM_EOK;
 800122e:	2301      	movs	r3, #1
 8001230:	75fb      	strb	r3, [r7, #23]
#else

#if defined(SPI2CAN_Protocol)

	uCAN_MSG txPacked;
	txPacked.frame.idType = dEXTENDED_CAN_MSG_ID_2_0B ;
 8001232:	2302      	movs	r3, #2
 8001234:	723b      	strb	r3, [r7, #8]
	txPacked.frame.dlc	  = EEM_MAX_SIZE;
 8001236:	2308      	movs	r3, #8
 8001238:	737b      	strb	r3, [r7, #13]
	txPacked.frame.id	  = param->EXTENDED_ID.identifier;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f8c7 3009 	str.w	r3, [r7, #9]

	memcpy(&txPacked.frame.data0 , &param->DATA[0] , EEM_MAX_SIZE );
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	1d19      	adds	r1, r3, #4
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	3306      	adds	r3, #6
 800124c:	2208      	movs	r2, #8
 800124e:	4618      	mov	r0, r3
 8001250:	f004 fadc 	bl	800580c <memcpy>

	CANSPI_Transmit(&txPacked);
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd3f 	bl	8000cdc <CANSPI_Transmit>

#endif

#endif

	return result;
 800125e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <EEM_RX>:
#if defined(SPI2CAN_Protocol)
						uCAN_MSG*			rxPacked      ,
#endif
#endif
						EEM_U8*				rxData	  	   )
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
	EEM_ERR_T result = EEM_EOK;
 8001274:	2301      	movs	r3, #1
 8001276:	75fb      	strb	r3, [r7, #23]
#else

#if defined(SPI2CAN_Protocol)

	/* That library used polling method */
	if( CANSPI_Receive(rxPacked) )
 8001278:	68b8      	ldr	r0, [r7, #8]
 800127a:	f7ff fda9 	bl	8000dd0 <CANSPI_Receive>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d012      	beq.n	80012aa <EEM_RX+0x42>
	{
		memcpy(&param->DATA[0] , &rxPacked->frame.data0 , EEM_MAX_SIZE  );
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1d18      	adds	r0, r3, #4
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	3306      	adds	r3, #6
 800128c:	2208      	movs	r2, #8
 800128e:	4619      	mov	r1, r3
 8001290:	f004 fabc 	bl	800580c <memcpy>
		param->EXTENDED_ID.identifier = rxPacked->frame.id ;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	601a      	str	r2, [r3, #0]
#endif

#endif

	/* Received Data Handled Push Ring Buffer */
	EEM_PUSH( &protocol.obj.ringBuffer , param);
 800129e:	68f9      	ldr	r1, [r7, #12]
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <EEM_RX+0x4c>)
 80012a2:	f7ff ff19 	bl	80010d8 <EEM_PUSH>

	return result;
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	e000      	b.n	80012ac <EEM_RX+0x44>
		return EEM_ERROR;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000140 	.word	0x20000140

080012b8 <EEM_PERIODIC>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 	EEM_PERIODIC( EEM_CAN_Packet_st*  param )
{
 80012b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012bc:	b0c4      	sub	sp, #272	; 0x110
 80012be:	af00      	add	r7, sp, #0
 80012c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	EEM_ERR_T 	   result 	= EEM_EOK;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol)) || (defined(STM32H750xx) && defined(FDCAN_Protocol))
	//bxCAN ve FDCAN IRQ Handler'da recv yapmaktadir.
#elif defined(SPI2CAN_Protocol)

	uCAN_MSG rxHandle = {0};
 80012ca:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80012ce:	2300      	movs	r3, #0
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	6053      	str	r3, [r2, #4]
 80012d4:	6093      	str	r3, [r2, #8]
 80012d6:	8193      	strh	r3, [r2, #12]

	result = EEM_RX(param, &rxHandle, NULL);
 80012d8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80012e4:	f7ff ffc0 	bl	8001268 <EEM_RX>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if( result != EEM_EOK ) return result;
 80012ee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d008      	beq.n	8001308 <EEM_PERIODIC+0x50>
 80012f6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012fa:	f001 ba37 	b.w	800276c <EEM_PERIODIC+0x14b4>
	/* Select Protocol  */
#endif

	while( !EEM_IS_EMPTY(&protocol.obj.ringBuffer) )
	{
	   EEM_POP(&protocol.obj.ringBuffer, param);
 80012fe:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8001302:	48ae      	ldr	r0, [pc, #696]	; (80015bc <EEM_PERIODIC+0x304>)
 8001304:	f7ff ff3e 	bl	8001184 <EEM_POP>
	while( !EEM_IS_EMPTY(&protocol.obj.ringBuffer) )
 8001308:	48ac      	ldr	r0, [pc, #688]	; (80015bc <EEM_PERIODIC+0x304>)
 800130a:	f001 fa3d 	bl	8002788 <EEM_IS_EMPTY>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f4      	beq.n	80012fe <EEM_PERIODIC+0x46>
	EEM_DEBUG_PRINT(&debug , &debugText[0]);
#endif
	}

	
	switch( param->EXTENDED_ID.Pages.messageID )
 8001314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001318:	789b      	ldrb	r3, [r3, #2]
 800131a:	3b01      	subs	r3, #1
 800131c:	2b22      	cmp	r3, #34	; 0x22
 800131e:	f201 8223 	bhi.w	8002768 <EEM_PERIODIC+0x14b0>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <EEM_PERIODIC+0x70>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	080013b5 	.word	0x080013b5
 800132c:	080015c5 	.word	0x080015c5
 8001330:	080017a3 	.word	0x080017a3
 8001334:	080017d9 	.word	0x080017d9
 8001338:	080019f7 	.word	0x080019f7
 800133c:	08001a71 	.word	0x08001a71
 8001340:	08001ae5 	.word	0x08001ae5
 8001344:	08001b59 	.word	0x08001b59
 8001348:	08001bcd 	.word	0x08001bcd
 800134c:	08002769 	.word	0x08002769
 8001350:	08002769 	.word	0x08002769
 8001354:	08002769 	.word	0x08002769
 8001358:	08002769 	.word	0x08002769
 800135c:	08002769 	.word	0x08002769
 8001360:	08002769 	.word	0x08002769
 8001364:	08001c41 	.word	0x08001c41
 8001368:	08001cb5 	.word	0x08001cb5
 800136c:	08001ce7 	.word	0x08001ce7
 8001370:	08001d21 	.word	0x08001d21
 8001374:	08001f6b 	.word	0x08001f6b
 8001378:	08001fe1 	.word	0x08001fe1
 800137c:	08002185 	.word	0x08002185
 8001380:	080023cf 	.word	0x080023cf
 8001384:	08002449 	.word	0x08002449
 8001388:	080025ab 	.word	0x080025ab
 800138c:	08002769 	.word	0x08002769
 8001390:	08002769 	.word	0x08002769
 8001394:	08002769 	.word	0x08002769
 8001398:	08002769 	.word	0x08002769
 800139c:	08002769 	.word	0x08002769
 80013a0:	08002769 	.word	0x08002769
 80013a4:	080025b9 	.word	0x080025b9
 80013a8:	080025c7 	.word	0x080025c7
 80013ac:	080026c5 	.word	0x080026c5
 80013b0:	08002717 	.word	0x08002717
	{
//#if defined(BCM_MODULE)

	case MESSAGE01 :

		HVAC_MSG.Message01.SPN.HVAC_led01_u1 = ( param->DATA[0] & 0x01 );
 80013b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013b8:	791b      	ldrb	r3, [r3, #4]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	b2d9      	uxtb	r1, r3
 80013c0:	4a7f      	ldr	r2, [pc, #508]	; (80015c0 <EEM_PERIODIC+0x308>)
 80013c2:	7913      	ldrb	r3, [r2, #4]
 80013c4:	f361 0300 	bfi	r3, r1, #0, #1
 80013c8:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led02_u1 = (( param->DATA[0] & 0x02 ) >> 1 );
 80013ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013ce:	791b      	ldrb	r3, [r3, #4]
 80013d0:	105b      	asrs	r3, r3, #1
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	b2d9      	uxtb	r1, r3
 80013d8:	4a79      	ldr	r2, [pc, #484]	; (80015c0 <EEM_PERIODIC+0x308>)
 80013da:	7913      	ldrb	r3, [r2, #4]
 80013dc:	f361 0341 	bfi	r3, r1, #1, #1
 80013e0:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led03_u1 = (( param->DATA[0] & 0x04 ) >> 2 );
 80013e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013e6:	791b      	ldrb	r3, [r3, #4]
 80013e8:	109b      	asrs	r3, r3, #2
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	b2d9      	uxtb	r1, r3
 80013f0:	4a73      	ldr	r2, [pc, #460]	; (80015c0 <EEM_PERIODIC+0x308>)
 80013f2:	7913      	ldrb	r3, [r2, #4]
 80013f4:	f361 0382 	bfi	r3, r1, #2, #1
 80013f8:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led04_u1 = (( param->DATA[0] & 0x08 ) >> 3 );
 80013fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013fe:	791b      	ldrb	r3, [r3, #4]
 8001400:	10db      	asrs	r3, r3, #3
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	b2d9      	uxtb	r1, r3
 8001408:	4a6d      	ldr	r2, [pc, #436]	; (80015c0 <EEM_PERIODIC+0x308>)
 800140a:	7913      	ldrb	r3, [r2, #4]
 800140c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001410:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led05_u1 = (( param->DATA[0] & 0x10 ) >> 4 );
 8001412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001416:	791b      	ldrb	r3, [r3, #4]
 8001418:	111b      	asrs	r3, r3, #4
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	b2d9      	uxtb	r1, r3
 8001420:	4a67      	ldr	r2, [pc, #412]	; (80015c0 <EEM_PERIODIC+0x308>)
 8001422:	7913      	ldrb	r3, [r2, #4]
 8001424:	f361 1304 	bfi	r3, r1, #4, #1
 8001428:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led06_u1 = (( param->DATA[0] & 0x20 ) >> 5 );
 800142a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800142e:	791b      	ldrb	r3, [r3, #4]
 8001430:	115b      	asrs	r3, r3, #5
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	b2d9      	uxtb	r1, r3
 8001438:	4a61      	ldr	r2, [pc, #388]	; (80015c0 <EEM_PERIODIC+0x308>)
 800143a:	7913      	ldrb	r3, [r2, #4]
 800143c:	f361 1345 	bfi	r3, r1, #5, #1
 8001440:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led07_u1 = (( param->DATA[0] & 0x40 ) >> 6 );
 8001442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001446:	791b      	ldrb	r3, [r3, #4]
 8001448:	119b      	asrs	r3, r3, #6
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	b2d9      	uxtb	r1, r3
 8001450:	4a5b      	ldr	r2, [pc, #364]	; (80015c0 <EEM_PERIODIC+0x308>)
 8001452:	7913      	ldrb	r3, [r2, #4]
 8001454:	f361 1386 	bfi	r3, r1, #6, #1
 8001458:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led08_u1 = (( param->DATA[0] & 0x80 ) >> 7 );
 800145a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800145e:	791b      	ldrb	r3, [r3, #4]
 8001460:	09db      	lsrs	r3, r3, #7
 8001462:	b2db      	uxtb	r3, r3
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	b2d9      	uxtb	r1, r3
 800146a:	4a55      	ldr	r2, [pc, #340]	; (80015c0 <EEM_PERIODIC+0x308>)
 800146c:	7913      	ldrb	r3, [r2, #4]
 800146e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001472:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led09_u1 = ( param->DATA[1] & 0x01 );
 8001474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001478:	795b      	ldrb	r3, [r3, #5]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	b2d9      	uxtb	r1, r3
 8001480:	4a4f      	ldr	r2, [pc, #316]	; (80015c0 <EEM_PERIODIC+0x308>)
 8001482:	7953      	ldrb	r3, [r2, #5]
 8001484:	f361 0300 	bfi	r3, r1, #0, #1
 8001488:	7153      	strb	r3, [r2, #5]
		HVAC_MSG.Message01.SPN.HVAC_led10_u1 = (( param->DATA[1] & 0x02 ) >> 1 );
 800148a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800148e:	795b      	ldrb	r3, [r3, #5]
 8001490:	105b      	asrs	r3, r3, #1
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	b2d9      	uxtb	r1, r3
 8001498:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <EEM_PERIODIC+0x308>)
 800149a:	7953      	ldrb	r3, [r2, #5]
 800149c:	f361 0341 	bfi	r3, r1, #1, #1
 80014a0:	7153      	strb	r3, [r2, #5]
		HVAC_MSG.Message01.SPN.HVAC_led11_u1 = (( param->DATA[1] & 0x04 ) >> 2 );
 80014a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014a6:	795b      	ldrb	r3, [r3, #5]
 80014a8:	109b      	asrs	r3, r3, #2
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	b2d9      	uxtb	r1, r3
 80014b0:	4a43      	ldr	r2, [pc, #268]	; (80015c0 <EEM_PERIODIC+0x308>)
 80014b2:	7953      	ldrb	r3, [r2, #5]
 80014b4:	f361 0382 	bfi	r3, r1, #2, #1
 80014b8:	7153      	strb	r3, [r2, #5]
		HVAC_MSG.Message01.SPN.HVAC_led12_u1 = (( param->DATA[1] & 0x08 ) >> 3 );
 80014ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014be:	795b      	ldrb	r3, [r3, #5]
 80014c0:	10db      	asrs	r3, r3, #3
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	b2d9      	uxtb	r1, r3
 80014c8:	4a3d      	ldr	r2, [pc, #244]	; (80015c0 <EEM_PERIODIC+0x308>)
 80014ca:	7953      	ldrb	r3, [r2, #5]
 80014cc:	f361 03c3 	bfi	r3, r1, #3, #1
 80014d0:	7153      	strb	r3, [r2, #5]

		HVAC_MSG.Message01.SPN.HVAC_pressureVal_u8 			= (EEM_U8)( (EEM_U8)( (param->DATA[1] & 0xF0) >> 4 )  |
 80014d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014d6:	795b      	ldrb	r3, [r3, #5]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	b2da      	uxtb	r2, r3
												   	    				(EEM_U8)( (param->DATA[2] & 0x0F) << 4 )  );
 80014dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014e0:	799b      	ldrb	r3, [r3, #6]
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	b2db      	uxtb	r3, r3
		HVAC_MSG.Message01.SPN.HVAC_pressureVal_u8 			= (EEM_U8)( (EEM_U8)( (param->DATA[1] & 0xF0) >> 4 )  |
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <EEM_PERIODIC+0x308>)
 80014ec:	719a      	strb	r2, [r3, #6]

		HVAC_MSG.Message01.SPN.HVAC_indoorTempVal_u8 		= (EEM_U8)( (EEM_U8)( (param->DATA[2] & 0xF0) >> 4 ) |
 80014ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014f2:	799b      	ldrb	r3, [r3, #6]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	b2da      	uxtb	r2, r3
													 					(EEM_U8)( (param->DATA[3] & 0x0F) << 4 ) );
 80014f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014fc:	79db      	ldrb	r3, [r3, #7]
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	b2db      	uxtb	r3, r3
		HVAC_MSG.Message01.SPN.HVAC_indoorTempVal_u8 		= (EEM_U8)( (EEM_U8)( (param->DATA[2] & 0xF0) >> 4 ) |
 8001502:	4313      	orrs	r3, r2
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <EEM_PERIODIC+0x308>)
 8001508:	71da      	strb	r2, [r3, #7]

		HVAC_MSG.Message01.SPN.HVAC_indoorHumidVal_u8 		= (EEM_U8)( (EEM_U8)( (param->DATA[3] & 0xF0) >> 4 ) |
 800150a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800150e:	79db      	ldrb	r3, [r3, #7]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	b2da      	uxtb	r2, r3
				 	 	 	 	 	 	 	 	 	 	  				(EEM_U8)( (param->DATA[4] & 0x0F) << 4 ) );
 8001514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001518:	7a1b      	ldrb	r3, [r3, #8]
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	b2db      	uxtb	r3, r3
		HVAC_MSG.Message01.SPN.HVAC_indoorHumidVal_u8 		= (EEM_U8)( (EEM_U8)( (param->DATA[3] & 0xF0) >> 4 ) |
 800151e:	4313      	orrs	r3, r2
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <EEM_PERIODIC+0x308>)
 8001524:	721a      	strb	r2, [r3, #8]

		HVAC_MSG.Message01.SPN.HVAC_rtcCalib_u1 			= (EEM_U8)( ( param->DATA[4] & 0x10) >> 4 );
 8001526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800152a:	7a1b      	ldrb	r3, [r3, #8]
 800152c:	111b      	asrs	r3, r3, #4
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	b2d9      	uxtb	r1, r3
 8001534:	4a22      	ldr	r2, [pc, #136]	; (80015c0 <EEM_PERIODIC+0x308>)
 8001536:	7a53      	ldrb	r3, [r2, #9]
 8001538:	f361 0300 	bfi	r3, r1, #0, #1
 800153c:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewSecond_u8 		= (EEM_U8)( ( param->DATA[4] & 0x20) >> 5 );
 800153e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001542:	7a1b      	ldrb	r3, [r3, #8]
 8001544:	115b      	asrs	r3, r3, #5
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	b2d9      	uxtb	r1, r3
 800154c:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <EEM_PERIODIC+0x308>)
 800154e:	7a53      	ldrb	r3, [r2, #9]
 8001550:	f361 0341 	bfi	r3, r1, #1, #1
 8001554:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewMinutes_u8 		= (EEM_U8)( ( param->DATA[4] & 0x40) >> 6 );
 8001556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800155a:	7a1b      	ldrb	r3, [r3, #8]
 800155c:	119b      	asrs	r3, r3, #6
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	b2d9      	uxtb	r1, r3
 8001564:	4a16      	ldr	r2, [pc, #88]	; (80015c0 <EEM_PERIODIC+0x308>)
 8001566:	7a53      	ldrb	r3, [r2, #9]
 8001568:	f361 0382 	bfi	r3, r1, #2, #1
 800156c:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewHour_u8 			= (EEM_U8)( ( param->DATA[4] & 0x80) >> 7 );
 800156e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001572:	7a1b      	ldrb	r3, [r3, #8]
 8001574:	09db      	lsrs	r3, r3, #7
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	b2d9      	uxtb	r1, r3
 800157e:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <EEM_PERIODIC+0x308>)
 8001580:	7a53      	ldrb	r3, [r2, #9]
 8001582:	f361 03c3 	bfi	r3, r1, #3, #1
 8001586:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewDay_u8 			= (EEM_U8)(   param->DATA[5] & 0x01 );
 8001588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800158c:	7a5b      	ldrb	r3, [r3, #9]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	b2d9      	uxtb	r1, r3
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <EEM_PERIODIC+0x308>)
 8001596:	7a53      	ldrb	r3, [r2, #9]
 8001598:	f361 1304 	bfi	r3, r1, #4, #1
 800159c:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewMonth_u8 			= (EEM_U8)( ( param->DATA[5] & 0x02 ) >> 1 );
 800159e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015a2:	7a5b      	ldrb	r3, [r3, #9]
 80015a4:	105b      	asrs	r3, r3, #1
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	b2d9      	uxtb	r1, r3
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <EEM_PERIODIC+0x308>)
 80015ae:	7a53      	ldrb	r3, [r2, #9]
 80015b0:	f361 1345 	bfi	r3, r1, #5, #1
 80015b4:	7253      	strb	r3, [r2, #9]


	break;
 80015b6:	f001 b8d7 	b.w	8002768 <EEM_PERIODIC+0x14b0>
 80015ba:	bf00      	nop
 80015bc:	20000140 	.word	0x20000140
 80015c0:	200002b8 	.word	0x200002b8

	case MESSAGE02 :

		HVAC_MSG.Message02.SPN.HVAC_tempVal_u8 			 = param->DATA[0] ;
 80015c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015c8:	791a      	ldrb	r2, [r3, #4]
 80015ca:	4b81      	ldr	r3, [pc, #516]	; (80017d0 <EEM_PERIODIC+0x518>)
 80015cc:	751a      	strb	r2, [r3, #20]
		HVAC_MSG.Message02.SPN.HVAC_humidityVal_u8 		 = param->DATA[1];
 80015ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015d2:	795a      	ldrb	r2, [r3, #5]
 80015d4:	4b7e      	ldr	r3, [pc, #504]	; (80017d0 <EEM_PERIODIC+0x518>)
 80015d6:	755a      	strb	r2, [r3, #21]
		HVAC_MSG.Message02.SPN.HVAC_smokeVal_u4 		 = (EEM_U8)( param->DATA[2] & 0x0F );
 80015d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015dc:	799b      	ldrb	r3, [r3, #6]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	b2d9      	uxtb	r1, r3
 80015e4:	4a7a      	ldr	r2, [pc, #488]	; (80017d0 <EEM_PERIODIC+0x518>)
 80015e6:	7d93      	ldrb	r3, [r2, #22]
 80015e8:	f361 0303 	bfi	r3, r1, #0, #4
 80015ec:	7593      	strb	r3, [r2, #22]
		HVAC_MSG.Message02.SPN.HVAC_windPressure1_u4 	 = (EEM_U8)(( param->DATA[2] & 0xF0 ) >> 4 );
 80015ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015f2:	799b      	ldrb	r3, [r3, #6]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	b2d9      	uxtb	r1, r3
 80015fe:	4a74      	ldr	r2, [pc, #464]	; (80017d0 <EEM_PERIODIC+0x518>)
 8001600:	7d93      	ldrb	r3, [r2, #22]
 8001602:	f361 1307 	bfi	r3, r1, #4, #4
 8001606:	7593      	strb	r3, [r2, #22]
		HVAC_MSG.Message02.SPN.HVAC_windPressure2_u4 	 = (EEM_U8)( param->DATA[3] & 0x0F );
 8001608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800160c:	79db      	ldrb	r3, [r3, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	b2d9      	uxtb	r1, r3
 8001614:	4a6e      	ldr	r2, [pc, #440]	; (80017d0 <EEM_PERIODIC+0x518>)
 8001616:	7dd3      	ldrb	r3, [r2, #23]
 8001618:	f361 0303 	bfi	r3, r1, #0, #4
 800161c:	75d3      	strb	r3, [r2, #23]

		HVAC_MSG.Message02.SPN.HVAC_leftFrontWheel_xy_u8 = (EEM_U8)((EEM_U8)( param->DATA[3] & 0xF0 ) >> 4 ) |
 800161e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001622:	79db      	ldrb	r3, [r3, #7]
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	b2db      	uxtb	r3, r3
 8001628:	b25a      	sxtb	r2, r3
																    (EEM_U8)( param->DATA[4] & 0x0F );
 800162a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800162e:	7a1b      	ldrb	r3, [r3, #8]
 8001630:	b25b      	sxtb	r3, r3
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	b25b      	sxtb	r3, r3
		HVAC_MSG.Message02.SPN.HVAC_leftFrontWheel_xy_u8 = (EEM_U8)((EEM_U8)( param->DATA[3] & 0xF0 ) >> 4 ) |
 8001638:	4313      	orrs	r3, r2
 800163a:	b25b      	sxtb	r3, r3
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b64      	ldr	r3, [pc, #400]	; (80017d0 <EEM_PERIODIC+0x518>)
 8001640:	761a      	strb	r2, [r3, #24]

		HVAC_MSG.Message02.SPN.HVAC_rightFrontWheel_xy_u8 = (EEM_U8)((EEM_U8)( param->DATA[4] & 0xF0 ) >> 4 ) |
 8001642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001646:	7a1b      	ldrb	r3, [r3, #8]
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	b2db      	uxtb	r3, r3
 800164c:	b25a      	sxtb	r2, r3
																	 (EEM_U8)( param->DATA[5] & 0x0F );
 800164e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001652:	7a5b      	ldrb	r3, [r3, #9]
 8001654:	b25b      	sxtb	r3, r3
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	b25b      	sxtb	r3, r3
		HVAC_MSG.Message02.SPN.HVAC_rightFrontWheel_xy_u8 = (EEM_U8)((EEM_U8)( param->DATA[4] & 0xF0 ) >> 4 ) |
 800165c:	4313      	orrs	r3, r2
 800165e:	b25b      	sxtb	r3, r3
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b5b      	ldr	r3, [pc, #364]	; (80017d0 <EEM_PERIODIC+0x518>)
 8001664:	765a      	strb	r2, [r3, #25]

		HVAC_MSG.Message02.SPN.HVAC_status00_u1 = (EEM_U8)(( param->DATA[5] & 0x10 ) >> 4 );
 8001666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800166a:	7a5b      	ldrb	r3, [r3, #9]
 800166c:	111b      	asrs	r3, r3, #4
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	b2d9      	uxtb	r1, r3
 8001674:	4a56      	ldr	r2, [pc, #344]	; (80017d0 <EEM_PERIODIC+0x518>)
 8001676:	7e93      	ldrb	r3, [r2, #26]
 8001678:	f361 0300 	bfi	r3, r1, #0, #1
 800167c:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status01_u1 = (EEM_U8)(( param->DATA[5] & 0x20 ) >> 5 );
 800167e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001682:	7a5b      	ldrb	r3, [r3, #9]
 8001684:	115b      	asrs	r3, r3, #5
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	b2d9      	uxtb	r1, r3
 800168c:	4a50      	ldr	r2, [pc, #320]	; (80017d0 <EEM_PERIODIC+0x518>)
 800168e:	7e93      	ldrb	r3, [r2, #26]
 8001690:	f361 0341 	bfi	r3, r1, #1, #1
 8001694:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status02_u1 = (EEM_U8)(( param->DATA[5] & 0x40 ) >> 6 );
 8001696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800169a:	7a5b      	ldrb	r3, [r3, #9]
 800169c:	119b      	asrs	r3, r3, #6
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	b2d9      	uxtb	r1, r3
 80016a4:	4a4a      	ldr	r2, [pc, #296]	; (80017d0 <EEM_PERIODIC+0x518>)
 80016a6:	7e93      	ldrb	r3, [r2, #26]
 80016a8:	f361 0382 	bfi	r3, r1, #2, #1
 80016ac:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status03_u1 = (EEM_U8)(( param->DATA[5] & 0x80 ) >> 7 );
 80016ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016b2:	7a5b      	ldrb	r3, [r3, #9]
 80016b4:	09db      	lsrs	r3, r3, #7
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	b2d9      	uxtb	r1, r3
 80016be:	4a44      	ldr	r2, [pc, #272]	; (80017d0 <EEM_PERIODIC+0x518>)
 80016c0:	7e93      	ldrb	r3, [r2, #26]
 80016c2:	f361 03c3 	bfi	r3, r1, #3, #1
 80016c6:	7693      	strb	r3, [r2, #26]

		HVAC_MSG.Message02.SPN.HVAC_status04_u1 = (EEM_U8)( param->DATA[6] & 0x01 );
 80016c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016cc:	7a9b      	ldrb	r3, [r3, #10]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	b2d9      	uxtb	r1, r3
 80016d4:	4a3e      	ldr	r2, [pc, #248]	; (80017d0 <EEM_PERIODIC+0x518>)
 80016d6:	7e93      	ldrb	r3, [r2, #26]
 80016d8:	f361 1304 	bfi	r3, r1, #4, #1
 80016dc:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status05_u1 = (EEM_U8)(( param->DATA[6] & 0x02 ) >> 1 );
 80016de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016e2:	7a9b      	ldrb	r3, [r3, #10]
 80016e4:	105b      	asrs	r3, r3, #1
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	b2d9      	uxtb	r1, r3
 80016ec:	4a38      	ldr	r2, [pc, #224]	; (80017d0 <EEM_PERIODIC+0x518>)
 80016ee:	7e93      	ldrb	r3, [r2, #26]
 80016f0:	f361 1345 	bfi	r3, r1, #5, #1
 80016f4:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status06_u1 = (EEM_U8)(( param->DATA[6] & 0x04 ) >> 2 );
 80016f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016fa:	7a9b      	ldrb	r3, [r3, #10]
 80016fc:	109b      	asrs	r3, r3, #2
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	b2d9      	uxtb	r1, r3
 8001704:	4a32      	ldr	r2, [pc, #200]	; (80017d0 <EEM_PERIODIC+0x518>)
 8001706:	7e93      	ldrb	r3, [r2, #26]
 8001708:	f361 1386 	bfi	r3, r1, #6, #1
 800170c:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status07_u1 = (EEM_U8)(( param->DATA[6] & 0x08 ) >> 3 );
 800170e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001712:	7a9b      	ldrb	r3, [r3, #10]
 8001714:	10db      	asrs	r3, r3, #3
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	b2d9      	uxtb	r1, r3
 800171c:	4a2c      	ldr	r2, [pc, #176]	; (80017d0 <EEM_PERIODIC+0x518>)
 800171e:	7e93      	ldrb	r3, [r2, #26]
 8001720:	f361 13c7 	bfi	r3, r1, #7, #1
 8001724:	7693      	strb	r3, [r2, #26]

		HVAC_MSG.Message02.SPN.HVAC_Hgear_cmd_u3 = (EEM_U8)( param->DATA[6] & 0x07 );
 8001726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800172a:	7a9b      	ldrb	r3, [r3, #10]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	b2d9      	uxtb	r1, r3
 8001732:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <EEM_PERIODIC+0x518>)
 8001734:	7ed3      	ldrb	r3, [r2, #27]
 8001736:	f361 0302 	bfi	r3, r1, #0, #3
 800173a:	76d3      	strb	r3, [r2, #27]
		HVAC_MSG.Message02.SPN.HVAC_Gear_cmd_u2 = (EEM_U8)(( param->DATA[6] & 0x18) >> 3 );
 800173c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001740:	7a9b      	ldrb	r3, [r3, #10]
 8001742:	10db      	asrs	r3, r3, #3
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	b2d9      	uxtb	r1, r3
 800174a:	4a21      	ldr	r2, [pc, #132]	; (80017d0 <EEM_PERIODIC+0x518>)
 800174c:	7ed3      	ldrb	r3, [r2, #27]
 800174e:	f361 03c4 	bfi	r3, r1, #3, #2
 8001752:	76d3      	strb	r3, [r2, #27]
		HVAC_MSG.Message02.SPN.HVAC_cmdbit05_u1 = (EEM_U8)(( param->DATA[6] & 0x20 ) >> 5 );
 8001754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001758:	7a9b      	ldrb	r3, [r3, #10]
 800175a:	115b      	asrs	r3, r3, #5
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	b2d9      	uxtb	r1, r3
 8001762:	4a1b      	ldr	r2, [pc, #108]	; (80017d0 <EEM_PERIODIC+0x518>)
 8001764:	7ed3      	ldrb	r3, [r2, #27]
 8001766:	f361 1345 	bfi	r3, r1, #5, #1
 800176a:	76d3      	strb	r3, [r2, #27]
		HVAC_MSG.Message02.SPN.HVAC_cmdbit06_u1 = (EEM_U8)(( param->DATA[6] & 0x40 ) >> 6 );
 800176c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001770:	7a9b      	ldrb	r3, [r3, #10]
 8001772:	119b      	asrs	r3, r3, #6
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	b2d9      	uxtb	r1, r3
 800177a:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <EEM_PERIODIC+0x518>)
 800177c:	7ed3      	ldrb	r3, [r2, #27]
 800177e:	f361 1386 	bfi	r3, r1, #6, #1
 8001782:	76d3      	strb	r3, [r2, #27]
		HVAC_MSG.Message02.SPN.HVAC_cmdbit07_u1 = (EEM_U8)(( param->DATA[6] & 0x80 ) >> 7 );
 8001784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001788:	7a9b      	ldrb	r3, [r3, #10]
 800178a:	09db      	lsrs	r3, r3, #7
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	b2d9      	uxtb	r1, r3
 8001794:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <EEM_PERIODIC+0x518>)
 8001796:	7ed3      	ldrb	r3, [r2, #27]
 8001798:	f361 13c7 	bfi	r3, r1, #7, #1
 800179c:	76d3      	strb	r3, [r2, #27]


	break;
 800179e:	f000 bfe3 	b.w	8002768 <EEM_PERIODIC+0x14b0>

	case MESSAGE03 :

		BCM_MSG.Message03.SPN.BCM_differantialSpeed_u64 =
				(EEM_U64)( ((EEM_U64)param->DATA[0] 	  )	|
 80017a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017a6:	791b      	ldrb	r3, [r3, #4]
 80017a8:	461a      	mov	r2, r3
						   ((EEM_U64)param->DATA[1] << 8  )	|
 80017aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017ae:	795b      	ldrb	r3, [r3, #5]
 80017b0:	021b      	lsls	r3, r3, #8
				(EEM_U64)( ((EEM_U64)param->DATA[0] 	  )	|
 80017b2:	431a      	orrs	r2, r3
						   ((EEM_U64)param->DATA[2] << 16 ) |
 80017b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017b8:	799b      	ldrb	r3, [r3, #6]
 80017ba:	041b      	lsls	r3, r3, #16
						   ((EEM_U64)param->DATA[1] << 8  )	|
 80017bc:	431a      	orrs	r2, r3
						   ((EEM_U64)param->DATA[3] << 24 ) |
 80017be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017c2:	79db      	ldrb	r3, [r3, #7]
 80017c4:	061b      	lsls	r3, r3, #24
						   ((EEM_U64)param->DATA[2] << 16 ) |
 80017c6:	4313      	orrs	r3, r2
		BCM_MSG.Message03.SPN.BCM_differantialSpeed_u64 =
 80017c8:	4a02      	ldr	r2, [pc, #8]	; (80017d4 <EEM_PERIODIC+0x51c>)
 80017ca:	6053      	str	r3, [r2, #4]
						   ((EEM_U64)param->DATA[5] << 40 ) |
						   ((EEM_U64)param->DATA[6] << 48 ) |
						   ((EEM_U64)param->DATA[7] << 56 ) );


	break;
 80017cc:	f000 bfcc 	b.w	8002768 <EEM_PERIODIC+0x14b0>
 80017d0:	200002b8 	.word	0x200002b8
 80017d4:	20000250 	.word	0x20000250

	case MESSAGE04 :
	    BCM_MSG.Message04.SPN.BCM_SCB_startRecord_u1 	=  (EEM_BOOL_T)(param->DATA[0]&0x01);
 80017d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017dc:	791b      	ldrb	r3, [r3, #4]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	b2d9      	uxtb	r1, r3
 80017e4:	4aa1      	ldr	r2, [pc, #644]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 80017e6:	7c13      	ldrb	r3, [r2, #16]
 80017e8:	f361 0300 	bfi	r3, r1, #0, #1
 80017ec:	7413      	strb	r3, [r2, #16]
	    BCM_MSG.Message04.SPN.BCM_SCB_stopRecord_u1		=  (EEM_BOOL_T)((param->DATA[0]&0x02)>>1);
 80017ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017f2:	791b      	ldrb	r3, [r3, #4]
 80017f4:	105b      	asrs	r3, r3, #1
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	b2d9      	uxtb	r1, r3
 80017fc:	4a9b      	ldr	r2, [pc, #620]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 80017fe:	7c13      	ldrb	r3, [r2, #16]
 8001800:	f361 0341 	bfi	r3, r1, #1, #1
 8001804:	7413      	strb	r3, [r2, #16]
	    BCM_MSG.Message04.SPN.BCM_SCB_deleteRecord_u1   =  (EEM_BOOL_T)((param->DATA[0]&0x04)>>2);
 8001806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800180a:	791b      	ldrb	r3, [r3, #4]
 800180c:	109b      	asrs	r3, r3, #2
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	b2d9      	uxtb	r1, r3
 8001814:	4a95      	ldr	r2, [pc, #596]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 8001816:	7c13      	ldrb	r3, [r2, #16]
 8001818:	f361 0382 	bfi	r3, r1, #2, #1
 800181c:	7413      	strb	r3, [r2, #16]
	    BCM_MSG.Message04.SPN.BCM_SCB_sdCardErase_u1    =  (EEM_BOOL_T)((param->DATA[0]&0x08)>>3);
 800181e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001822:	791b      	ldrb	r3, [r3, #4]
 8001824:	10db      	asrs	r3, r3, #3
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	b2d9      	uxtb	r1, r3
 800182c:	4a8f      	ldr	r2, [pc, #572]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 800182e:	7c13      	ldrb	r3, [r2, #16]
 8001830:	f361 03c3 	bfi	r3, r1, #3, #1
 8001834:	7413      	strb	r3, [r2, #16]
	    BCM_MSG.Message04.SPN.BCM_SCB_sdCardSave_u1     =  (EEM_BOOL_T)((param->DATA[0]&0x10)>>4);
 8001836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800183a:	791b      	ldrb	r3, [r3, #4]
 800183c:	111b      	asrs	r3, r3, #4
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	b2d9      	uxtb	r1, r3
 8001844:	4a89      	ldr	r2, [pc, #548]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 8001846:	7c13      	ldrb	r3, [r2, #16]
 8001848:	f361 1304 	bfi	r3, r1, #4, #1
 800184c:	7413      	strb	r3, [r2, #16]
	    BCM_MSG.Message04.SPN.BCM_SCB_dashBoardState_u1 =  (EEM_BOOL_T)((param->DATA[0]&0x20)>>5);
 800184e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001852:	791b      	ldrb	r3, [r3, #4]
 8001854:	115b      	asrs	r3, r3, #5
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	b2d9      	uxtb	r1, r3
 800185c:	4a83      	ldr	r2, [pc, #524]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 800185e:	7c13      	ldrb	r3, [r2, #16]
 8001860:	f361 1345 	bfi	r3, r1, #5, #1
 8001864:	7413      	strb	r3, [r2, #16]
	    BCM_MSG.Message04.SPN.BCM_SCB_dashBoardCmd01_u1 =  (EEM_BOOL_T)((param->DATA[0]&0x30)>>6);
 8001866:	4a81      	ldr	r2, [pc, #516]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 8001868:	7c13      	ldrb	r3, [r2, #16]
 800186a:	f36f 1386 	bfc	r3, #6, #1
 800186e:	7413      	strb	r3, [r2, #16]
	    BCM_MSG.Message04.SPN.BCM_SCB_dashBoardCmd02_u1 =  (EEM_BOOL_T)((param->DATA[0]&0x80)>>7);
 8001870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001874:	791b      	ldrb	r3, [r3, #4]
 8001876:	09db      	lsrs	r3, r3, #7
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	b2d9      	uxtb	r1, r3
 8001880:	4a7a      	ldr	r2, [pc, #488]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 8001882:	7c13      	ldrb	r3, [r2, #16]
 8001884:	f361 13c7 	bfi	r3, r1, #7, #1
 8001888:	7413      	strb	r3, [r2, #16]

	    BCM_MSG.Message04.SPN.BCM_SCB_dashBoardCmd03_u1 =  (EEM_BOOL_T)((param->DATA[1]&0x01));
 800188a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800188e:	795b      	ldrb	r3, [r3, #5]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	b2d9      	uxtb	r1, r3
 8001896:	4a75      	ldr	r2, [pc, #468]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 8001898:	7c53      	ldrb	r3, [r2, #17]
 800189a:	f361 0300 	bfi	r3, r1, #0, #1
 800189e:	7453      	strb	r3, [r2, #17]
	    BCM_MSG.Message04.SPN.BCM_SCB_dashBoardCmd04_u1 =  (EEM_BOOL_T)((param->DATA[1]&0x02)>>1);
 80018a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80018a4:	795b      	ldrb	r3, [r3, #5]
 80018a6:	105b      	asrs	r3, r3, #1
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	b2d9      	uxtb	r1, r3
 80018ae:	4a6f      	ldr	r2, [pc, #444]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 80018b0:	7c53      	ldrb	r3, [r2, #17]
 80018b2:	f361 0341 	bfi	r3, r1, #1, #1
 80018b6:	7453      	strb	r3, [r2, #17]

	    BCM_MSG.Message04.SPN.BCM_SCB_ignitionStatus_u1 =  (EEM_BOOL_T)((param->DATA[1]&0x08)>>3);
 80018b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80018bc:	795b      	ldrb	r3, [r3, #5]
 80018be:	10db      	asrs	r3, r3, #3
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	b2d9      	uxtb	r1, r3
 80018c6:	4a69      	ldr	r2, [pc, #420]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 80018c8:	7c53      	ldrb	r3, [r2, #17]
 80018ca:	f361 03c3 	bfi	r3, r1, #3, #1
 80018ce:	7453      	strb	r3, [r2, #17]
	    BCM_MSG.Message04.SPN.BCM_SCB_leftSignal_u1     =  (EEM_BOOL_T)((param->DATA[1]&0x20)>>5);
 80018d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80018d4:	795b      	ldrb	r3, [r3, #5]
 80018d6:	115b      	asrs	r3, r3, #5
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	b2d9      	uxtb	r1, r3
 80018de:	4a63      	ldr	r2, [pc, #396]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 80018e0:	7c53      	ldrb	r3, [r2, #17]
 80018e2:	f361 1345 	bfi	r3, r1, #5, #1
 80018e6:	7453      	strb	r3, [r2, #17]
	    BCM_MSG.Message04.SPN.BCM_SCB_rightSignal_u1    =  (EEM_BOOL_T)((param->DATA[1]&0x40)>>6);
 80018e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80018ec:	795b      	ldrb	r3, [r3, #5]
 80018ee:	119b      	asrs	r3, r3, #6
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	b2d9      	uxtb	r1, r3
 80018f6:	4a5d      	ldr	r2, [pc, #372]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 80018f8:	7c53      	ldrb	r3, [r2, #17]
 80018fa:	f361 1386 	bfi	r3, r1, #6, #1
 80018fe:	7453      	strb	r3, [r2, #17]
	    BCM_MSG.Message04.SPN.BCM_SCB_frontLight_u1     =  (EEM_BOOL_T)((param->DATA[1]&0x80)>>7);
 8001900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001904:	795b      	ldrb	r3, [r3, #5]
 8001906:	09db      	lsrs	r3, r3, #7
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	b2d9      	uxtb	r1, r3
 8001910:	4a56      	ldr	r2, [pc, #344]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 8001912:	7c53      	ldrb	r3, [r2, #17]
 8001914:	f361 13c7 	bfi	r3, r1, #7, #1
 8001918:	7453      	strb	r3, [r2, #17]

	    BCM_MSG.Message04.SPN.BCM_SCB_backLight_u1       = (EEM_BOOL_T)(param->DATA[2]&0x01);
 800191a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800191e:	799b      	ldrb	r3, [r3, #6]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	b2d9      	uxtb	r1, r3
 8001926:	4a51      	ldr	r2, [pc, #324]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 8001928:	7c93      	ldrb	r3, [r2, #18]
 800192a:	f361 0300 	bfi	r3, r1, #0, #1
 800192e:	7493      	strb	r3, [r2, #18]
	    BCM_MSG.Message04.SPN.BCM_SCB_signalLight_u1     = (EEM_BOOL_T)(param->DATA[2]&0x02);
 8001930:	4a4e      	ldr	r2, [pc, #312]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 8001932:	7c93      	ldrb	r3, [r2, #18]
 8001934:	f36f 0341 	bfc	r3, #1, #1
 8001938:	7493      	strb	r3, [r2, #18]
	    BCM_MSG.Message04.SPN.BCM_SCB_spinnerAngle_u16	 = (EEM_U16)(((param->DATA[2]&0xF8)>>3)|(param->DATA[3]<<5) |((param->DATA[4]&0x07)<<13));
 800193a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800193e:	799b      	ldrb	r3, [r3, #6]
 8001940:	08db      	lsrs	r3, r3, #3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	b21a      	sxth	r2, r3
 8001946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800194a:	79db      	ldrb	r3, [r3, #7]
 800194c:	015b      	lsls	r3, r3, #5
 800194e:	b21b      	sxth	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b21a      	sxth	r2, r3
 8001954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001958:	7a1b      	ldrb	r3, [r3, #8]
 800195a:	035b      	lsls	r3, r3, #13
 800195c:	b21b      	sxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b21b      	sxth	r3, r3
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 8001966:	829a      	strh	r2, [r3, #20]

	    BCM_MSG.Message04.SPN.BCM_SCB_gasPedalAnalog_u16 = (EEM_U16)(((param->DATA[4]&0xF8)>>3)| (param->DATA[5]<<5) |(param->DATA[6]&0x07<<13));
 8001968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800196c:	7a1b      	ldrb	r3, [r3, #8]
 800196e:	08db      	lsrs	r3, r3, #3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	b21a      	sxth	r2, r3
 8001974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001978:	7a5b      	ldrb	r3, [r3, #9]
 800197a:	015b      	lsls	r3, r3, #5
 800197c:	b21b      	sxth	r3, r3
 800197e:	4313      	orrs	r3, r2
 8001980:	b21a      	sxth	r2, r3
 8001982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001986:	7a9b      	ldrb	r3, [r3, #10]
 8001988:	b21b      	sxth	r3, r3
 800198a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800198e:	f023 031f 	bic.w	r3, r3, #31
 8001992:	b21b      	sxth	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	b21b      	sxth	r3, r3
 8001998:	b29a      	uxth	r2, r3
 800199a:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 800199c:	82da      	strh	r2, [r3, #22]
	    BCM_MSG.Message04.SPN.BCM_SCB_leftDirection_u1 =    (EEM_U16)(((param->DATA[6]&0xF8)>>3)| param->DATA[7] |(param->DATA[8]&0x07<<13));
 800199e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019a2:	7a9b      	ldrb	r3, [r3, #10]
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019ac:	7adb      	ldrb	r3, [r3, #11]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	b2d9      	uxtb	r1, r3
 80019b8:	4a2c      	ldr	r2, [pc, #176]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 80019ba:	7e93      	ldrb	r3, [r2, #26]
 80019bc:	f361 0300 	bfi	r3, r1, #0, #1
 80019c0:	7693      	strb	r3, [r2, #26]
	    BCM_MSG.Message04.SPN.BCM_SCB_leftDirection_u1 =    (EEM_BOOL_T)((param->DATA[8]&0x08)>>3);
 80019c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019c6:	7b1b      	ldrb	r3, [r3, #12]
 80019c8:	10db      	asrs	r3, r3, #3
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	b2d9      	uxtb	r1, r3
 80019d0:	4a26      	ldr	r2, [pc, #152]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 80019d2:	7e93      	ldrb	r3, [r2, #26]
 80019d4:	f361 0300 	bfi	r3, r1, #0, #1
 80019d8:	7693      	strb	r3, [r2, #26]
		BCM_MSG.Message04.SPN.BCM_SCB_leftDirection_u1=      (EEM_BOOL_T)((param->DATA[8]&0x10)>>4);
 80019da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019de:	7b1b      	ldrb	r3, [r3, #12]
 80019e0:	111b      	asrs	r3, r3, #4
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	b2d9      	uxtb	r1, r3
 80019e8:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 80019ea:	7e93      	ldrb	r3, [r2, #26]
 80019ec:	f361 0300 	bfi	r3, r1, #0, #1
 80019f0:	7693      	strb	r3, [r2, #26]

	break;
 80019f2:	f000 beb9 	b.w	8002768 <EEM_PERIODIC+0x14b0>

	case MESSAGE05 :

		BCM_MSG.Message05.SPN.BCM_leftGyro_u16= (EEM_U16)((param->DATA[0])|(param->DATA[1]<<8));
 80019f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019fa:	791b      	ldrb	r3, [r3, #4]
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a02:	795b      	ldrb	r3, [r3, #5]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 8001a10:	841a      	strh	r2, [r3, #32]
		BCM_MSG.Message05.SPN.BCM_leftAcc_u16 = (EEM_U16)((param->DATA[1])|(param->DATA[2]<<8));
 8001a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a16:	795b      	ldrb	r3, [r3, #5]
 8001a18:	b21a      	sxth	r2, r3
 8001a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a1e:	799b      	ldrb	r3, [r3, #6]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 8001a2c:	845a      	strh	r2, [r3, #34]	; 0x22
		BCM_MSG.Message05.SPN.BCM_rightAcc_u16=(EEM_U16)((param->DATA[3])|(param->DATA[4]<<8));
 8001a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a32:	79db      	ldrb	r3, [r3, #7]
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a3a:	7a1b      	ldrb	r3, [r3, #8]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 8001a48:	84da      	strh	r2, [r3, #38]	; 0x26
		BCM_MSG.Message05.SPN.BCM_rightGyro_u16=(EEM_U16)((param->DATA[5])|(param->DATA[6]<<8));
 8001a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a4e:	7a5b      	ldrb	r3, [r3, #9]
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a56:	7a9b      	ldrb	r3, [r3, #10]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <EEM_PERIODIC+0x7b4>)
 8001a64:	849a      	strh	r2, [r3, #36]	; 0x24

	break;
 8001a66:	f000 be7f 	b.w	8002768 <EEM_PERIODIC+0x14b0>
 8001a6a:	bf00      	nop
 8001a6c:	20000250 	.word	0x20000250

	case MESSAGE06 :

        BMS_MSG.Message06.SPN.BMS_cell01Voltage_u16= (EEM_U16)((param->DATA[0])|(param->DATA[1]<<8));
 8001a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a74:	791b      	ldrb	r3, [r3, #4]
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a7c:	795b      	ldrb	r3, [r3, #5]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	4313      	orrs	r3, r2
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	4ba3      	ldr	r3, [pc, #652]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001a8a:	809a      	strh	r2, [r3, #4]
        BMS_MSG.Message06.SPN.BMS_cell02Voltage_u16= (EEM_U16)((param->DATA[1])|(param->DATA[2]<<8));
 8001a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a90:	795b      	ldrb	r3, [r3, #5]
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a98:	799b      	ldrb	r3, [r3, #6]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	4b9c      	ldr	r3, [pc, #624]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001aa6:	80da      	strh	r2, [r3, #6]
        BMS_MSG.Message06.SPN.BMS_cell03Voltage_u16= (EEM_U16)((param->DATA[3])|(param->DATA[4]<<8));
 8001aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001aac:	79db      	ldrb	r3, [r3, #7]
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ab4:	7a1b      	ldrb	r3, [r3, #8]
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	4b95      	ldr	r3, [pc, #596]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001ac2:	811a      	strh	r2, [r3, #8]
        BMS_MSG.Message06.SPN.BMS_cell04Voltage_u16= (EEM_U16)((param->DATA[5])|(param->DATA[6]<<8));
 8001ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ac8:	7a5b      	ldrb	r3, [r3, #9]
 8001aca:	b21a      	sxth	r2, r3
 8001acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ad0:	7a9b      	ldrb	r3, [r3, #10]
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	b21b      	sxth	r3, r3
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	4b8e      	ldr	r3, [pc, #568]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001ade:	815a      	strh	r2, [r3, #10]


	break;
 8001ae0:	f000 be42 	b.w	8002768 <EEM_PERIODIC+0x14b0>


	case MESSAGE07 :

		 BMS_MSG.Message07.SPN.BMS_cell05Voltage_u16= (EEM_U16)((param->DATA[0])|(param->DATA[1]<<8));
 8001ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ae8:	791b      	ldrb	r3, [r3, #4]
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001af0:	795b      	ldrb	r3, [r3, #5]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	4313      	orrs	r3, r2
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	4b86      	ldr	r3, [pc, #536]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001afe:	821a      	strh	r2, [r3, #16]
		 BMS_MSG.Message07.SPN.BMS_cell06Voltage_u16= (EEM_U16)((param->DATA[1])|(param->DATA[2]<<8));
 8001b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b04:	795b      	ldrb	r3, [r3, #5]
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b0c:	799b      	ldrb	r3, [r3, #6]
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	4b7f      	ldr	r3, [pc, #508]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001b1a:	825a      	strh	r2, [r3, #18]
		 BMS_MSG.Message07.SPN.BMS_cell07Voltage_u16= (EEM_U16)((param->DATA[3])|(param->DATA[4]<<8));
 8001b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b20:	79db      	ldrb	r3, [r3, #7]
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b28:	7a1b      	ldrb	r3, [r3, #8]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	4b78      	ldr	r3, [pc, #480]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001b36:	829a      	strh	r2, [r3, #20]
		 BMS_MSG.Message07.SPN.BMS_cell08Voltage_u16= (EEM_U16)((param->DATA[5])|(param->DATA[6]<<8));
 8001b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b3c:	7a5b      	ldrb	r3, [r3, #9]
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b44:	7a9b      	ldrb	r3, [r3, #10]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	4b71      	ldr	r3, [pc, #452]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001b52:	82da      	strh	r2, [r3, #22]



	break;
 8001b54:	f000 be08 	b.w	8002768 <EEM_PERIODIC+0x14b0>

	case MESSAGE08 :

		 BMS_MSG.Message08.SPN.BMS_cell09Voltage_u16= (EEM_U16)((param->DATA[0])|(param->DATA[1]<<8));
 8001b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b5c:	791b      	ldrb	r3, [r3, #4]
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b64:	795b      	ldrb	r3, [r3, #5]
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b69      	ldr	r3, [pc, #420]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001b72:	839a      	strh	r2, [r3, #28]
		 BMS_MSG.Message08.SPN.BMS_cell10Voltage_u16= (EEM_U16)((param->DATA[1])|(param->DATA[2]<<8));
 8001b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b78:	795b      	ldrb	r3, [r3, #5]
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b80:	799b      	ldrb	r3, [r3, #6]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	4313      	orrs	r3, r2
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	4b62      	ldr	r3, [pc, #392]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001b8e:	83da      	strh	r2, [r3, #30]
		 BMS_MSG.Message08.SPN.BMS_cell11Voltage_u16= (EEM_U16)((param->DATA[3])|(param->DATA[4]<<8));
 8001b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b94:	79db      	ldrb	r3, [r3, #7]
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b9c:	7a1b      	ldrb	r3, [r3, #8]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	b21b      	sxth	r3, r3
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	4b5b      	ldr	r3, [pc, #364]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001baa:	841a      	strh	r2, [r3, #32]
		 BMS_MSG.Message08.SPN.BMS_cell12Voltage_u16= (EEM_U16)((param->DATA[5])|(param->DATA[6]<<8));
 8001bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bb0:	7a5b      	ldrb	r3, [r3, #9]
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bb8:	7a9b      	ldrb	r3, [r3, #10]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b54      	ldr	r3, [pc, #336]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001bc6:	845a      	strh	r2, [r3, #34]	; 0x22

	break;
 8001bc8:	f000 bdce 	b.w	8002768 <EEM_PERIODIC+0x14b0>

	case MESSAGE09 :

		 BMS_MSG.Message09.SPN.BMS_cell13Voltage_u16= (EEM_U16)((param->DATA[0])|(param->DATA[1]<<8));
 8001bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bd0:	791b      	ldrb	r3, [r3, #4]
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bd8:	795b      	ldrb	r3, [r3, #5]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	4313      	orrs	r3, r2
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	4b4c      	ldr	r3, [pc, #304]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001be6:	851a      	strh	r2, [r3, #40]	; 0x28
		 BMS_MSG.Message09.SPN.BMS_cell14Voltage_u16= (EEM_U16)((param->DATA[1])|(param->DATA[2]<<8));
 8001be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bec:	795b      	ldrb	r3, [r3, #5]
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bf4:	799b      	ldrb	r3, [r3, #6]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	4b45      	ldr	r3, [pc, #276]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001c02:	855a      	strh	r2, [r3, #42]	; 0x2a
		 BMS_MSG.Message09.SPN.BMS_cell15Voltage_u16= (EEM_U16)((param->DATA[3])|(param->DATA[4]<<8));
 8001c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c08:	79db      	ldrb	r3, [r3, #7]
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c10:	7a1b      	ldrb	r3, [r3, #8]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001c1e:	859a      	strh	r2, [r3, #44]	; 0x2c
		 BMS_MSG.Message09.SPN.BMS_cell16Voltage_u16= (EEM_U16)((param->DATA[5])|(param->DATA[6]<<8));
 8001c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c24:	7a5b      	ldrb	r3, [r3, #9]
 8001c26:	b21a      	sxth	r2, r3
 8001c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c2c:	7a9b      	ldrb	r3, [r3, #10]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	4313      	orrs	r3, r2
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b37      	ldr	r3, [pc, #220]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001c3a:	85da      	strh	r2, [r3, #46]	; 0x2e


	break;
 8001c3c:	f000 bd94 	b.w	8002768 <EEM_PERIODIC+0x14b0>

	case MESSAGE10 :

		BMS_MSG.Message10.SPN.BMS_cell17Voltage_u16=(EEM_U16)((param->DATA[0])|(param->DATA[1]<<8));
 8001c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c44:	791b      	ldrb	r3, [r3, #4]
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c4c:	795b      	ldrb	r3, [r3, #5]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	b21b      	sxth	r3, r3
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001c5a:	869a      	strh	r2, [r3, #52]	; 0x34
		BMS_MSG.Message10.SPN.BMS_cell18Voltage_u16=(EEM_U16)((param->DATA[2])|(param->DATA[3]<<8));
 8001c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c60:	799b      	ldrb	r3, [r3, #6]
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c68:	79db      	ldrb	r3, [r3, #7]
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001c76:	86da      	strh	r2, [r3, #54]	; 0x36
		BMS_MSG.Message10.SPN.BMS_temperatureVal_u16=(EEM_U16)((param->DATA[4])|(param->DATA[5]<<8));
 8001c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c7c:	7a1b      	ldrb	r3, [r3, #8]
 8001c7e:	b21a      	sxth	r2, r3
 8001c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c84:	7a5b      	ldrb	r3, [r3, #9]
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001c92:	875a      	strh	r2, [r3, #58]	; 0x3a
		BMS_MSG.Message10.SPN.BMS_lineCurrent_u16  =(EEM_U16)((param->DATA[6])|(param->DATA[7]<<8));
 8001c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c98:	7a9b      	ldrb	r3, [r3, #10]
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ca0:	7adb      	ldrb	r3, [r3, #11]
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <EEM_PERIODIC+0xa60>)
 8001cae:	871a      	strh	r2, [r3, #56]	; 0x38

	break;
 8001cb0:	f000 bd5a 	b.w	8002768 <EEM_PERIODIC+0x14b0>

	case MESSAGE11 :

		BCM_MSG.Message11.SPN.BCM_MS1_Speed=(EEM_U16)(param->DATA[0]|
 8001cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cb8:	791b      	ldrb	r3, [r3, #4]
 8001cba:	b21a      	sxth	r2, r3
				                             (EEM_U16)(param->DATA[1])<<8);
 8001cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cc0:	795b      	ldrb	r3, [r3, #5]
 8001cc2:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message11.SPN.BCM_MS1_Speed=(EEM_U16)(param->DATA[0]|
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001cd4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <EEM_PERIODIC+0xa64>)
 8001cda:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8001cde:	e9c3 120c 	strd	r1, r2, [r3, #48]	; 0x30

		break;
 8001ce2:	f000 bd41 	b.w	8002768 <EEM_PERIODIC+0x14b0>

	case MESSAGE12 :

		BCM_MSG.Message12.SPN.BCM_MS2_Speed=(EEM_U16)(param->DATA[0]|
 8001ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cea:	791b      	ldrb	r3, [r3, #4]
 8001cec:	b21a      	sxth	r2, r3
                                             (EEM_U16)(param->DATA[1])<<8);
 8001cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cf2:	795b      	ldrb	r3, [r3, #5]
 8001cf4:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message12.SPN.BCM_MS2_Speed=(EEM_U16)(param->DATA[0]|
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2200      	movs	r2, #0
 8001d02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001d06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <EEM_PERIODIC+0xa64>)
 8001d0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8001d10:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

		break;
 8001d14:	f000 bd28 	b.w	8002768 <EEM_PERIODIC+0x14b0>
 8001d18:	200002e4 	.word	0x200002e4
 8001d1c:	20000250 	.word	0x20000250

	case MESSAGE13 :

		MS1_MSG.Message13.SPN.MS1_Mode=(EEM_U8)(param->DATA[0]);
 8001d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d24:	791a      	ldrb	r2, [r3, #4]
 8001d26:	4bad      	ldr	r3, [pc, #692]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001d28:	711a      	strb	r2, [r3, #4]
		MS1_MSG.Message13.SPN.MS1_temperature=(EEM_U16)(param->DATA[1])|
 8001d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d2e:	795b      	ldrb	r3, [r3, #5]
 8001d30:	b29a      	uxth	r2, r3
				                       (EEM_U16)((param->DATA[2])<<8);
 8001d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d36:	799b      	ldrb	r3, [r3, #6]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	b29b      	uxth	r3, r3
		MS1_MSG.Message13.SPN.MS1_temperature=(EEM_U16)(param->DATA[1])|
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	4ba6      	ldr	r3, [pc, #664]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001d44:	80da      	strh	r2, [r3, #6]

		MS1_MSG.Message13.SPN.MS1_warningFlag01=(EEM_BOOL_T)(param->DATA[3]&0x01);
 8001d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d4a:	79db      	ldrb	r3, [r3, #7]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	b2d9      	uxtb	r1, r3
 8001d52:	4aa2      	ldr	r2, [pc, #648]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001d54:	7a13      	ldrb	r3, [r2, #8]
 8001d56:	f361 0300 	bfi	r3, r1, #0, #1
 8001d5a:	7213      	strb	r3, [r2, #8]
		MS1_MSG.Message13.SPN.MS1_warningFlag02=(EEM_BOOL_T)((param->DATA[3]&0x02)>>1);
 8001d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d60:	79db      	ldrb	r3, [r3, #7]
 8001d62:	105b      	asrs	r3, r3, #1
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	b2d9      	uxtb	r1, r3
 8001d6a:	4a9c      	ldr	r2, [pc, #624]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001d6c:	7a13      	ldrb	r3, [r2, #8]
 8001d6e:	f361 0341 	bfi	r3, r1, #1, #1
 8001d72:	7213      	strb	r3, [r2, #8]
		MS1_MSG.Message13.SPN.MS1_warningFlag03=(EEM_BOOL_T)((param->DATA[3]&0x04)>>2);
 8001d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d78:	79db      	ldrb	r3, [r3, #7]
 8001d7a:	109b      	asrs	r3, r3, #2
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	b2d9      	uxtb	r1, r3
 8001d82:	4a96      	ldr	r2, [pc, #600]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001d84:	7a13      	ldrb	r3, [r2, #8]
 8001d86:	f361 0382 	bfi	r3, r1, #2, #1
 8001d8a:	7213      	strb	r3, [r2, #8]
		MS1_MSG.Message13.SPN.MS1_warningFlag04=(EEM_BOOL_T)((param->DATA[3]&0x08)>>3);
 8001d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d90:	79db      	ldrb	r3, [r3, #7]
 8001d92:	10db      	asrs	r3, r3, #3
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	b2d9      	uxtb	r1, r3
 8001d9a:	4a90      	ldr	r2, [pc, #576]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001d9c:	7a13      	ldrb	r3, [r2, #8]
 8001d9e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001da2:	7213      	strb	r3, [r2, #8]
		MS1_MSG.Message13.SPN.MS1_warningFlag05=(EEM_BOOL_T)((param->DATA[3]&0x10)>>4);
 8001da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001da8:	79db      	ldrb	r3, [r3, #7]
 8001daa:	111b      	asrs	r3, r3, #4
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	b2d9      	uxtb	r1, r3
 8001db2:	4a8a      	ldr	r2, [pc, #552]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001db4:	7a13      	ldrb	r3, [r2, #8]
 8001db6:	f361 1304 	bfi	r3, r1, #4, #1
 8001dba:	7213      	strb	r3, [r2, #8]
		MS1_MSG.Message13.SPN.MS1_warningFlag06=(EEM_BOOL_T)((param->DATA[3]&0x20)>>5);
 8001dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dc0:	79db      	ldrb	r3, [r3, #7]
 8001dc2:	115b      	asrs	r3, r3, #5
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	b2d9      	uxtb	r1, r3
 8001dca:	4a84      	ldr	r2, [pc, #528]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001dcc:	7a13      	ldrb	r3, [r2, #8]
 8001dce:	f361 1345 	bfi	r3, r1, #5, #1
 8001dd2:	7213      	strb	r3, [r2, #8]
		MS1_MSG.Message13.SPN.MS1_warningFlag07=(EEM_BOOL_T)((param->DATA[3]&0x30)>>6);
 8001dd4:	4a81      	ldr	r2, [pc, #516]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001dd6:	7a13      	ldrb	r3, [r2, #8]
 8001dd8:	f36f 1386 	bfc	r3, #6, #1
 8001ddc:	7213      	strb	r3, [r2, #8]
		MS1_MSG.Message13.SPN.MS1_warningFlag08=(EEM_BOOL_T)((param->DATA[3]&0x40)>>7);
 8001dde:	4a7f      	ldr	r2, [pc, #508]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001de0:	7a13      	ldrb	r3, [r2, #8]
 8001de2:	f36f 13c7 	bfc	r3, #7, #1
 8001de6:	7213      	strb	r3, [r2, #8]

		MS1_MSG.Message13.SPN.MS1_errorFlag01=  (EEM_BOOL_T)(param->DATA[4]&0x01);
 8001de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dec:	7a1b      	ldrb	r3, [r3, #8]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	b2d9      	uxtb	r1, r3
 8001df4:	4a79      	ldr	r2, [pc, #484]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001df6:	7a53      	ldrb	r3, [r2, #9]
 8001df8:	f361 0300 	bfi	r3, r1, #0, #1
 8001dfc:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message13.SPN.MS1_errorFlag02=  (EEM_BOOL_T)((param->DATA[4]&0x02)>>1);
 8001dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e02:	7a1b      	ldrb	r3, [r3, #8]
 8001e04:	105b      	asrs	r3, r3, #1
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	b2d9      	uxtb	r1, r3
 8001e0c:	4a73      	ldr	r2, [pc, #460]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001e0e:	7a53      	ldrb	r3, [r2, #9]
 8001e10:	f361 0341 	bfi	r3, r1, #1, #1
 8001e14:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message13.SPN.MS1_errorFlag03=  (EEM_BOOL_T)((param->DATA[4]&0x04)>>2);
 8001e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e1a:	7a1b      	ldrb	r3, [r3, #8]
 8001e1c:	109b      	asrs	r3, r3, #2
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	b2d9      	uxtb	r1, r3
 8001e24:	4a6d      	ldr	r2, [pc, #436]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001e26:	7a53      	ldrb	r3, [r2, #9]
 8001e28:	f361 0382 	bfi	r3, r1, #2, #1
 8001e2c:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message13.SPN.MS1_errorFlag04=  (EEM_BOOL_T)((param->DATA[4]&0x08)>>3);
 8001e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e32:	7a1b      	ldrb	r3, [r3, #8]
 8001e34:	10db      	asrs	r3, r3, #3
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	b2d9      	uxtb	r1, r3
 8001e3c:	4a67      	ldr	r2, [pc, #412]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001e3e:	7a53      	ldrb	r3, [r2, #9]
 8001e40:	f361 03c3 	bfi	r3, r1, #3, #1
 8001e44:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message13.SPN.MS1_errorFlag05=  (EEM_BOOL_T)((param->DATA[4]&0x10)>>4);
 8001e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e4a:	7a1b      	ldrb	r3, [r3, #8]
 8001e4c:	111b      	asrs	r3, r3, #4
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	b2d9      	uxtb	r1, r3
 8001e54:	4a61      	ldr	r2, [pc, #388]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001e56:	7a53      	ldrb	r3, [r2, #9]
 8001e58:	f361 1304 	bfi	r3, r1, #4, #1
 8001e5c:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message13.SPN.MS1_errorFlag06=  (EEM_BOOL_T)((param->DATA[4]&0x20)>>5);
 8001e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e62:	7a1b      	ldrb	r3, [r3, #8]
 8001e64:	115b      	asrs	r3, r3, #5
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	b2d9      	uxtb	r1, r3
 8001e6c:	4a5b      	ldr	r2, [pc, #364]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001e6e:	7a53      	ldrb	r3, [r2, #9]
 8001e70:	f361 1345 	bfi	r3, r1, #5, #1
 8001e74:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message13.SPN.MS1_errorFlag07=  (EEM_BOOL_T)((param->DATA[4]&0x40)>>6);
 8001e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e7a:	7a1b      	ldrb	r3, [r3, #8]
 8001e7c:	119b      	asrs	r3, r3, #6
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	b2d9      	uxtb	r1, r3
 8001e84:	4a55      	ldr	r2, [pc, #340]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001e86:	7a53      	ldrb	r3, [r2, #9]
 8001e88:	f361 1386 	bfi	r3, r1, #6, #1
 8001e8c:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message13.SPN.MS1_errorFlag08=  (EEM_BOOL_T)((param->DATA[4]&0x80)>>7);
 8001e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e92:	7a1b      	ldrb	r3, [r3, #8]
 8001e94:	09db      	lsrs	r3, r3, #7
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	b2d9      	uxtb	r1, r3
 8001e9e:	4a4f      	ldr	r2, [pc, #316]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001ea0:	7a53      	ldrb	r3, [r2, #9]
 8001ea2:	f361 13c7 	bfi	r3, r1, #7, #1
 8001ea6:	7253      	strb	r3, [r2, #9]

		MS1_MSG.Message13.SPN.MS1_statusBit01 =  (EEM_BOOL_T)(param->DATA[5]&0x01);
 8001ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eac:	7a5b      	ldrb	r3, [r3, #9]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	b2d9      	uxtb	r1, r3
 8001eb4:	4a49      	ldr	r2, [pc, #292]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001eb6:	7a93      	ldrb	r3, [r2, #10]
 8001eb8:	f361 0300 	bfi	r3, r1, #0, #1
 8001ebc:	7293      	strb	r3, [r2, #10]
		MS1_MSG.Message13.SPN.MS1_statusBit02 =  (EEM_BOOL_T)((param->DATA[5]&0x02)>>1);
 8001ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ec2:	7a5b      	ldrb	r3, [r3, #9]
 8001ec4:	105b      	asrs	r3, r3, #1
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	b2d9      	uxtb	r1, r3
 8001ecc:	4a43      	ldr	r2, [pc, #268]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001ece:	7a93      	ldrb	r3, [r2, #10]
 8001ed0:	f361 0341 	bfi	r3, r1, #1, #1
 8001ed4:	7293      	strb	r3, [r2, #10]
		MS1_MSG.Message13.SPN.MS1_statusBit03 =  (EEM_BOOL_T)((param->DATA[5]&0x04)>>2);
 8001ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eda:	7a5b      	ldrb	r3, [r3, #9]
 8001edc:	109b      	asrs	r3, r3, #2
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	b2d9      	uxtb	r1, r3
 8001ee4:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001ee6:	7a93      	ldrb	r3, [r2, #10]
 8001ee8:	f361 0382 	bfi	r3, r1, #2, #1
 8001eec:	7293      	strb	r3, [r2, #10]
		MS1_MSG.Message13.SPN.MS1_statusBit04 =  (EEM_BOOL_T)((param->DATA[5]&0x08)>>3);
 8001eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ef2:	7a5b      	ldrb	r3, [r3, #9]
 8001ef4:	10db      	asrs	r3, r3, #3
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	b2d9      	uxtb	r1, r3
 8001efc:	4a37      	ldr	r2, [pc, #220]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001efe:	7a93      	ldrb	r3, [r2, #10]
 8001f00:	f361 03c3 	bfi	r3, r1, #3, #1
 8001f04:	7293      	strb	r3, [r2, #10]
		MS1_MSG.Message13.SPN.MS1_statusBit05 =  (EEM_BOOL_T)((param->DATA[5]&0x10)>>4);
 8001f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f0a:	7a5b      	ldrb	r3, [r3, #9]
 8001f0c:	111b      	asrs	r3, r3, #4
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	b2d9      	uxtb	r1, r3
 8001f14:	4a31      	ldr	r2, [pc, #196]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001f16:	7a93      	ldrb	r3, [r2, #10]
 8001f18:	f361 1304 	bfi	r3, r1, #4, #1
 8001f1c:	7293      	strb	r3, [r2, #10]
		MS1_MSG.Message13.SPN.MS1_statusBit06 =  (EEM_BOOL_T)((param->DATA[5]&0x20)>>5);
 8001f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f22:	7a5b      	ldrb	r3, [r3, #9]
 8001f24:	115b      	asrs	r3, r3, #5
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	b2d9      	uxtb	r1, r3
 8001f2c:	4a2b      	ldr	r2, [pc, #172]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001f2e:	7a93      	ldrb	r3, [r2, #10]
 8001f30:	f361 1345 	bfi	r3, r1, #5, #1
 8001f34:	7293      	strb	r3, [r2, #10]
		MS1_MSG.Message13.SPN.MS1_statusBit07 =  (EEM_BOOL_T)((param->DATA[5]&0x40)>>6);
 8001f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f3a:	7a5b      	ldrb	r3, [r3, #9]
 8001f3c:	119b      	asrs	r3, r3, #6
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	b2d9      	uxtb	r1, r3
 8001f44:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001f46:	7a93      	ldrb	r3, [r2, #10]
 8001f48:	f361 1386 	bfi	r3, r1, #6, #1
 8001f4c:	7293      	strb	r3, [r2, #10]
        MS1_MSG.Message13.SPN.MS1_statusBit08 =  (EEM_BOOL_T)((param->DATA[5]&0x80)>>7);
 8001f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f52:	7a5b      	ldrb	r3, [r3, #9]
 8001f54:	09db      	lsrs	r3, r3, #7
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	b2d9      	uxtb	r1, r3
 8001f5e:	4a1f      	ldr	r2, [pc, #124]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001f60:	7a93      	ldrb	r3, [r2, #10]
 8001f62:	f361 13c7 	bfi	r3, r1, #7, #1
 8001f66:	7293      	strb	r3, [r2, #10]


		break;
 8001f68:	e3fe      	b.n	8002768 <EEM_PERIODIC+0x14b0>

	case MESSAGE14 :
		MS1_MSG.Message14.SPN.MS1_voltage        = (EEM_U16)(param->DATA[0])|
 8001f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f6e:	791b      	ldrb	r3, [r3, #4]
 8001f70:	b29a      	uxth	r2, r3
		                                 (EEM_U16)(param->DATA[1]<<8);
 8001f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f76:	795b      	ldrb	r3, [r3, #5]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	b29b      	uxth	r3, r3
		MS1_MSG.Message14.SPN.MS1_voltage        = (EEM_U16)(param->DATA[0])|
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001f84:	821a      	strh	r2, [r3, #16]

		MS1_MSG.Message14.SPN.MS1_PhaseUCurrent  = (EEM_U16)(param->DATA[1])|
 8001f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f8a:	795b      	ldrb	r3, [r3, #5]
 8001f8c:	b29a      	uxth	r2, r3
	                                   (EEM_U16)(param->DATA[2]<<8);
 8001f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f92:	799b      	ldrb	r3, [r3, #6]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	b29b      	uxth	r3, r3
		MS1_MSG.Message14.SPN.MS1_PhaseUCurrent  = (EEM_U16)(param->DATA[1])|
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001fa0:	825a      	strh	r2, [r3, #18]

		MS1_MSG.Message14.SPN.MS1_PhaseVCurrent  = (EEM_U16)((param->DATA[3])|
 8001fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fa6:	79db      	ldrb	r3, [r3, #7]
 8001fa8:	b29a      	uxth	r2, r3
		                                   (EEM_U16)(param->DATA[4]<<8));
 8001faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fae:	7a1b      	ldrb	r3, [r3, #8]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	b29b      	uxth	r3, r3
		MS1_MSG.Message14.SPN.MS1_PhaseVCurrent  = (EEM_U16)((param->DATA[3])|
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001fbc:	829a      	strh	r2, [r3, #20]

		MS1_MSG.Message14.SPN.MS1_PhaseWCurrent  = (EEM_U16)((param->DATA[5])|
 8001fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fc2:	7a5b      	ldrb	r3, [r3, #9]
 8001fc4:	b29a      	uxth	r2, r3
				                                   (EEM_U16)(param->DATA[6]<<8));
 8001fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fca:	7a9b      	ldrb	r3, [r3, #10]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	b29b      	uxth	r3, r3
		MS1_MSG.Message14.SPN.MS1_PhaseWCurrent  = (EEM_U16)((param->DATA[5])|
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	4b01      	ldr	r3, [pc, #4]	; (8001fdc <EEM_PERIODIC+0xd24>)
 8001fd8:	82da      	strh	r2, [r3, #22]

		break;
 8001fda:	e3c5      	b.n	8002768 <EEM_PERIODIC+0x14b0>
 8001fdc:	20000320 	.word	0x20000320
	case MESSAGE15 :

		MS1_MSG.Message15.SPN.MS1_SpeedVal=
				(EEM_U64)( ((EEM_U64)param->DATA[0] 	  )	|
 8001fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fe4:	791b      	ldrb	r3, [r3, #4]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001fee:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
						   ((EEM_U64)param->DATA[1] << 8  )	|
 8001ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ff6:	795b      	ldrb	r3, [r3, #5]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	4698      	mov	r8, r3
 8001ffe:	4691      	mov	r9, r2
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	f04f 0300 	mov.w	r3, #0
 8002008:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800200c:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8002010:	ea4f 2208 	mov.w	r2, r8, lsl #8
				(EEM_U64)( ((EEM_U64)param->DATA[0] 	  )	|
 8002014:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002018:	4621      	mov	r1, r4
 800201a:	4311      	orrs	r1, r2
 800201c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8002020:	4629      	mov	r1, r5
 8002022:	4319      	orrs	r1, r3
 8002024:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
						   ((EEM_U64)param->DATA[2] << 16 ) |
 8002028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800202c:	799b      	ldrb	r3, [r3, #6]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2200      	movs	r2, #0
 8002032:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002036:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002046:	4629      	mov	r1, r5
 8002048:	040b      	lsls	r3, r1, #16
 800204a:	4621      	mov	r1, r4
 800204c:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002050:	4621      	mov	r1, r4
 8002052:	040a      	lsls	r2, r1, #16
						   ((EEM_U64)param->DATA[1] << 8  )	|
 8002054:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002058:	4621      	mov	r1, r4
 800205a:	4311      	orrs	r1, r2
 800205c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8002060:	4629      	mov	r1, r5
 8002062:	4319      	orrs	r1, r3
 8002064:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
						   ((EEM_U64)param->DATA[3] << 24 ) |
 8002068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800206c:	79db      	ldrb	r3, [r3, #7]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2200      	movs	r2, #0
 8002072:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002076:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800207a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800207e:	460b      	mov	r3, r1
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002086:	460b      	mov	r3, r1
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						   ((EEM_U64)param->DATA[2] << 16 ) |
 800208e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002092:	4623      	mov	r3, r4
 8002094:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002098:	4602      	mov	r2, r0
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020a0:	462b      	mov	r3, r5
 80020a2:	460a      	mov	r2, r1
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
						   ((EEM_U64)param->DATA[4] << 32 ) |
 80020aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020ae:	7a1b      	ldrb	r3, [r3, #8]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2200      	movs	r2, #0
 80020b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80020c8:	000b      	movs	r3, r1
 80020ca:	2200      	movs	r2, #0
						   ((EEM_U64)param->DATA[3] << 24 ) |
 80020cc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80020d0:	4621      	mov	r1, r4
 80020d2:	4311      	orrs	r1, r2
 80020d4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80020d8:	4629      	mov	r1, r5
 80020da:	4319      	orrs	r1, r3
 80020dc:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
						   ((EEM_U64)param->DATA[5] << 40 ) |
 80020e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020e4:	7a5b      	ldrb	r3, [r3, #9]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2200      	movs	r2, #0
 80020ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020ee:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80020fe:	020b      	lsls	r3, r1, #8
 8002100:	2200      	movs	r2, #0
						   ((EEM_U64)param->DATA[4] << 32 ) |
 8002102:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8002106:	4621      	mov	r1, r4
 8002108:	4311      	orrs	r1, r2
 800210a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800210e:	4629      	mov	r1, r5
 8002110:	4319      	orrs	r1, r3
 8002112:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
						   ((EEM_U64)param->DATA[6] << 48 ) |
 8002116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800211a:	7a9b      	ldrb	r3, [r3, #10]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2200      	movs	r2, #0
 8002120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002124:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002134:	040b      	lsls	r3, r1, #16
 8002136:	2200      	movs	r2, #0
						   ((EEM_U64)param->DATA[5] << 40 ) |
 8002138:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800213c:	4621      	mov	r1, r4
 800213e:	4311      	orrs	r1, r2
 8002140:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002144:	4629      	mov	r1, r5
 8002146:	4319      	orrs	r1, r3
 8002148:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
						   ((EEM_U64)param->DATA[7] << 56 ) );
 800214c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002150:	7adb      	ldrb	r3, [r3, #11]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2200      	movs	r2, #0
 8002156:	67bb      	str	r3, [r7, #120]	; 0x78
 8002158:	67fa      	str	r2, [r7, #124]	; 0x7c
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002164:	060b      	lsls	r3, r1, #24
 8002166:	2200      	movs	r2, #0
				(EEM_U64)( ((EEM_U64)param->DATA[0] 	  )	|
 8002168:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800216c:	4621      	mov	r1, r4
 800216e:	4311      	orrs	r1, r2
 8002170:	6739      	str	r1, [r7, #112]	; 0x70
 8002172:	4629      	mov	r1, r5
 8002174:	4319      	orrs	r1, r3
 8002176:	6779      	str	r1, [r7, #116]	; 0x74
		MS1_MSG.Message15.SPN.MS1_SpeedVal=
 8002178:	4bb1      	ldr	r3, [pc, #708]	; (8002440 <EEM_PERIODIC+0x1188>)
 800217a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800217e:	e9c3 1208 	strd	r1, r2, [r3, #32]

		break;
 8002182:	e2f1      	b.n	8002768 <EEM_PERIODIC+0x14b0>


	case MESSAGE16 :
		MS2_MSG.Message16.SPN.MS2_Mode		=(EEM_U8)(param->DATA[0]);
 8002184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002188:	791a      	ldrb	r2, [r3, #4]
 800218a:	4bae      	ldr	r3, [pc, #696]	; (8002444 <EEM_PERIODIC+0x118c>)
 800218c:	711a      	strb	r2, [r3, #4]
		MS2_MSG.Message16.SPN.MS2_temperature=(EEM_U16)(param->DATA[1])|(EEM_U16)((param->DATA[2])<<8);
 800218e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002192:	795b      	ldrb	r3, [r3, #5]
 8002194:	b29a      	uxth	r2, r3
 8002196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800219a:	799b      	ldrb	r3, [r3, #6]
 800219c:	b29b      	uxth	r3, r3
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	4ba7      	ldr	r3, [pc, #668]	; (8002444 <EEM_PERIODIC+0x118c>)
 80021a8:	80da      	strh	r2, [r3, #6]

		MS2_MSG.Message16.SPN.MS2_warningFlag01=(EEM_BOOL_T)(param->DATA[3]&0x01);
 80021aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ae:	79db      	ldrb	r3, [r3, #7]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	b2d9      	uxtb	r1, r3
 80021b6:	4aa3      	ldr	r2, [pc, #652]	; (8002444 <EEM_PERIODIC+0x118c>)
 80021b8:	7a13      	ldrb	r3, [r2, #8]
 80021ba:	f361 0300 	bfi	r3, r1, #0, #1
 80021be:	7213      	strb	r3, [r2, #8]
		MS2_MSG.Message16.SPN.MS2_warningFlag02=(EEM_BOOL_T)((param->DATA[3]&0x02)>>1);
 80021c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021c4:	79db      	ldrb	r3, [r3, #7]
 80021c6:	105b      	asrs	r3, r3, #1
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	b2d9      	uxtb	r1, r3
 80021ce:	4a9d      	ldr	r2, [pc, #628]	; (8002444 <EEM_PERIODIC+0x118c>)
 80021d0:	7a13      	ldrb	r3, [r2, #8]
 80021d2:	f361 0341 	bfi	r3, r1, #1, #1
 80021d6:	7213      	strb	r3, [r2, #8]
		MS2_MSG.Message16.SPN.MS2_warningFlag03=(EEM_BOOL_T)((param->DATA[3]&0x04)>>2);
 80021d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021dc:	79db      	ldrb	r3, [r3, #7]
 80021de:	109b      	asrs	r3, r3, #2
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	b2d9      	uxtb	r1, r3
 80021e6:	4a97      	ldr	r2, [pc, #604]	; (8002444 <EEM_PERIODIC+0x118c>)
 80021e8:	7a13      	ldrb	r3, [r2, #8]
 80021ea:	f361 0382 	bfi	r3, r1, #2, #1
 80021ee:	7213      	strb	r3, [r2, #8]
		MS2_MSG.Message16.SPN.MS2_warningFlag04=(EEM_BOOL_T)((param->DATA[3]&0x08)>>3);
 80021f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021f4:	79db      	ldrb	r3, [r3, #7]
 80021f6:	10db      	asrs	r3, r3, #3
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	b2d9      	uxtb	r1, r3
 80021fe:	4a91      	ldr	r2, [pc, #580]	; (8002444 <EEM_PERIODIC+0x118c>)
 8002200:	7a13      	ldrb	r3, [r2, #8]
 8002202:	f361 03c3 	bfi	r3, r1, #3, #1
 8002206:	7213      	strb	r3, [r2, #8]
		MS2_MSG.Message16.SPN.MS2_warningFlag05=(EEM_BOOL_T)((param->DATA[3]&0x10)>>4);
 8002208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800220c:	79db      	ldrb	r3, [r3, #7]
 800220e:	111b      	asrs	r3, r3, #4
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	b2d9      	uxtb	r1, r3
 8002216:	4a8b      	ldr	r2, [pc, #556]	; (8002444 <EEM_PERIODIC+0x118c>)
 8002218:	7a13      	ldrb	r3, [r2, #8]
 800221a:	f361 1304 	bfi	r3, r1, #4, #1
 800221e:	7213      	strb	r3, [r2, #8]
		MS2_MSG.Message16.SPN.MS2_warningFlag06=(EEM_BOOL_T)((param->DATA[3]&0x20)>>5);
 8002220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002224:	79db      	ldrb	r3, [r3, #7]
 8002226:	115b      	asrs	r3, r3, #5
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	b2d9      	uxtb	r1, r3
 800222e:	4a85      	ldr	r2, [pc, #532]	; (8002444 <EEM_PERIODIC+0x118c>)
 8002230:	7a13      	ldrb	r3, [r2, #8]
 8002232:	f361 1345 	bfi	r3, r1, #5, #1
 8002236:	7213      	strb	r3, [r2, #8]
		MS2_MSG.Message16.SPN.MS2_warningFlag07=(EEM_BOOL_T)((param->DATA[3]&0x30)>>6);
 8002238:	4a82      	ldr	r2, [pc, #520]	; (8002444 <EEM_PERIODIC+0x118c>)
 800223a:	7a13      	ldrb	r3, [r2, #8]
 800223c:	f36f 1386 	bfc	r3, #6, #1
 8002240:	7213      	strb	r3, [r2, #8]
		MS2_MSG.Message16.SPN.MS2_warningFlag08=(EEM_BOOL_T)((param->DATA[3]&0x40)>>7);
 8002242:	4a80      	ldr	r2, [pc, #512]	; (8002444 <EEM_PERIODIC+0x118c>)
 8002244:	7a13      	ldrb	r3, [r2, #8]
 8002246:	f36f 13c7 	bfc	r3, #7, #1
 800224a:	7213      	strb	r3, [r2, #8]

		MS2_MSG.Message16.SPN.MS2_errorFlag01=  (EEM_BOOL_T)(param->DATA[4]&0x01);
 800224c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002250:	7a1b      	ldrb	r3, [r3, #8]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	b2d9      	uxtb	r1, r3
 8002258:	4a7a      	ldr	r2, [pc, #488]	; (8002444 <EEM_PERIODIC+0x118c>)
 800225a:	7a53      	ldrb	r3, [r2, #9]
 800225c:	f361 0300 	bfi	r3, r1, #0, #1
 8002260:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message16.SPN.MS2_errorFlag02=  (EEM_BOOL_T)((param->DATA[4]&0x02)>>1);
 8002262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002266:	7a1b      	ldrb	r3, [r3, #8]
 8002268:	105b      	asrs	r3, r3, #1
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	b2d9      	uxtb	r1, r3
 8002270:	4a74      	ldr	r2, [pc, #464]	; (8002444 <EEM_PERIODIC+0x118c>)
 8002272:	7a53      	ldrb	r3, [r2, #9]
 8002274:	f361 0341 	bfi	r3, r1, #1, #1
 8002278:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message16.SPN.MS2_errorFlag03=  (EEM_BOOL_T)((param->DATA[4]&0x04)>>2);
 800227a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800227e:	7a1b      	ldrb	r3, [r3, #8]
 8002280:	109b      	asrs	r3, r3, #2
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	b2d9      	uxtb	r1, r3
 8002288:	4a6e      	ldr	r2, [pc, #440]	; (8002444 <EEM_PERIODIC+0x118c>)
 800228a:	7a53      	ldrb	r3, [r2, #9]
 800228c:	f361 0382 	bfi	r3, r1, #2, #1
 8002290:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message16.SPN.MS2_errorFlag04=  (EEM_BOOL_T)((param->DATA[4]&0x08)>>3);
 8002292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002296:	7a1b      	ldrb	r3, [r3, #8]
 8002298:	10db      	asrs	r3, r3, #3
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	b2d9      	uxtb	r1, r3
 80022a0:	4a68      	ldr	r2, [pc, #416]	; (8002444 <EEM_PERIODIC+0x118c>)
 80022a2:	7a53      	ldrb	r3, [r2, #9]
 80022a4:	f361 03c3 	bfi	r3, r1, #3, #1
 80022a8:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message16.SPN.MS2_errorFlag05=  (EEM_BOOL_T)((param->DATA[4]&0x10)>>4);
 80022aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ae:	7a1b      	ldrb	r3, [r3, #8]
 80022b0:	111b      	asrs	r3, r3, #4
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	b2d9      	uxtb	r1, r3
 80022b8:	4a62      	ldr	r2, [pc, #392]	; (8002444 <EEM_PERIODIC+0x118c>)
 80022ba:	7a53      	ldrb	r3, [r2, #9]
 80022bc:	f361 1304 	bfi	r3, r1, #4, #1
 80022c0:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message16.SPN.MS2_errorFlag06=  (EEM_BOOL_T)((param->DATA[4]&0x20)>>5);
 80022c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022c6:	7a1b      	ldrb	r3, [r3, #8]
 80022c8:	115b      	asrs	r3, r3, #5
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	b2d9      	uxtb	r1, r3
 80022d0:	4a5c      	ldr	r2, [pc, #368]	; (8002444 <EEM_PERIODIC+0x118c>)
 80022d2:	7a53      	ldrb	r3, [r2, #9]
 80022d4:	f361 1345 	bfi	r3, r1, #5, #1
 80022d8:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message16.SPN.MS2_errorFlag07=  (EEM_BOOL_T)((param->DATA[4]&0x40)>>6);
 80022da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022de:	7a1b      	ldrb	r3, [r3, #8]
 80022e0:	119b      	asrs	r3, r3, #6
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	b2d9      	uxtb	r1, r3
 80022e8:	4a56      	ldr	r2, [pc, #344]	; (8002444 <EEM_PERIODIC+0x118c>)
 80022ea:	7a53      	ldrb	r3, [r2, #9]
 80022ec:	f361 1386 	bfi	r3, r1, #6, #1
 80022f0:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message16.SPN.MS2_errorFlag08=  (EEM_BOOL_T)((param->DATA[4]&0x80)>>7);
 80022f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022f6:	7a1b      	ldrb	r3, [r3, #8]
 80022f8:	09db      	lsrs	r3, r3, #7
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	b2d9      	uxtb	r1, r3
 8002302:	4a50      	ldr	r2, [pc, #320]	; (8002444 <EEM_PERIODIC+0x118c>)
 8002304:	7a53      	ldrb	r3, [r2, #9]
 8002306:	f361 13c7 	bfi	r3, r1, #7, #1
 800230a:	7253      	strb	r3, [r2, #9]

		MS2_MSG.Message16.SPN.MS2_statusBit01 =  (EEM_BOOL_T)(param->DATA[5]&0x01);
 800230c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002310:	7a5b      	ldrb	r3, [r3, #9]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	b2d9      	uxtb	r1, r3
 8002318:	4a4a      	ldr	r2, [pc, #296]	; (8002444 <EEM_PERIODIC+0x118c>)
 800231a:	7a93      	ldrb	r3, [r2, #10]
 800231c:	f361 0300 	bfi	r3, r1, #0, #1
 8002320:	7293      	strb	r3, [r2, #10]
		MS2_MSG.Message16.SPN.MS2_statusBit02 =  (EEM_BOOL_T)((param->DATA[5]&0x02)>>1);
 8002322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002326:	7a5b      	ldrb	r3, [r3, #9]
 8002328:	105b      	asrs	r3, r3, #1
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	b2d9      	uxtb	r1, r3
 8002330:	4a44      	ldr	r2, [pc, #272]	; (8002444 <EEM_PERIODIC+0x118c>)
 8002332:	7a93      	ldrb	r3, [r2, #10]
 8002334:	f361 0341 	bfi	r3, r1, #1, #1
 8002338:	7293      	strb	r3, [r2, #10]
		MS2_MSG.Message16.SPN.MS2_statusBit03 =  (EEM_BOOL_T)((param->DATA[5]&0x04)>>2);
 800233a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800233e:	7a5b      	ldrb	r3, [r3, #9]
 8002340:	109b      	asrs	r3, r3, #2
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	b2d9      	uxtb	r1, r3
 8002348:	4a3e      	ldr	r2, [pc, #248]	; (8002444 <EEM_PERIODIC+0x118c>)
 800234a:	7a93      	ldrb	r3, [r2, #10]
 800234c:	f361 0382 	bfi	r3, r1, #2, #1
 8002350:	7293      	strb	r3, [r2, #10]
		MS2_MSG.Message16.SPN.MS2_statusBit04 =  (EEM_BOOL_T)((param->DATA[5]&0x08)>>3);
 8002352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002356:	7a5b      	ldrb	r3, [r3, #9]
 8002358:	10db      	asrs	r3, r3, #3
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	b2d9      	uxtb	r1, r3
 8002360:	4a38      	ldr	r2, [pc, #224]	; (8002444 <EEM_PERIODIC+0x118c>)
 8002362:	7a93      	ldrb	r3, [r2, #10]
 8002364:	f361 03c3 	bfi	r3, r1, #3, #1
 8002368:	7293      	strb	r3, [r2, #10]
		MS2_MSG.Message16.SPN.MS2_statusBit05 =  (EEM_BOOL_T)((param->DATA[5]&0x10)>>4);
 800236a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800236e:	7a5b      	ldrb	r3, [r3, #9]
 8002370:	111b      	asrs	r3, r3, #4
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	b2d9      	uxtb	r1, r3
 8002378:	4a32      	ldr	r2, [pc, #200]	; (8002444 <EEM_PERIODIC+0x118c>)
 800237a:	7a93      	ldrb	r3, [r2, #10]
 800237c:	f361 1304 	bfi	r3, r1, #4, #1
 8002380:	7293      	strb	r3, [r2, #10]
		MS2_MSG.Message16.SPN.MS2_statusBit06 =  (EEM_BOOL_T)((param->DATA[5]&0x20)>>5);
 8002382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002386:	7a5b      	ldrb	r3, [r3, #9]
 8002388:	115b      	asrs	r3, r3, #5
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	b2d9      	uxtb	r1, r3
 8002390:	4a2c      	ldr	r2, [pc, #176]	; (8002444 <EEM_PERIODIC+0x118c>)
 8002392:	7a93      	ldrb	r3, [r2, #10]
 8002394:	f361 1345 	bfi	r3, r1, #5, #1
 8002398:	7293      	strb	r3, [r2, #10]
		MS2_MSG.Message16.SPN.MS2_statusBit07 =  (EEM_BOOL_T)((param->DATA[5]&0x40)>>6);
 800239a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800239e:	7a5b      	ldrb	r3, [r3, #9]
 80023a0:	119b      	asrs	r3, r3, #6
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	b2d9      	uxtb	r1, r3
 80023a8:	4a26      	ldr	r2, [pc, #152]	; (8002444 <EEM_PERIODIC+0x118c>)
 80023aa:	7a93      	ldrb	r3, [r2, #10]
 80023ac:	f361 1386 	bfi	r3, r1, #6, #1
 80023b0:	7293      	strb	r3, [r2, #10]
		MS2_MSG.Message16.SPN.MS2_statusBit08 =  (EEM_BOOL_T)((param->DATA[5]&0x80)>>7);
 80023b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023b6:	7a5b      	ldrb	r3, [r3, #9]
 80023b8:	09db      	lsrs	r3, r3, #7
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	b2d9      	uxtb	r1, r3
 80023c2:	4a20      	ldr	r2, [pc, #128]	; (8002444 <EEM_PERIODIC+0x118c>)
 80023c4:	7a93      	ldrb	r3, [r2, #10]
 80023c6:	f361 13c7 	bfi	r3, r1, #7, #1
 80023ca:	7293      	strb	r3, [r2, #10]

	break;
 80023cc:	e1cc      	b.n	8002768 <EEM_PERIODIC+0x14b0>


	case MESSAGE17 :

		        MS2_MSG.Message17.SPN.MS2_voltage  = (EEM_U16)(param->DATA[0])|
 80023ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023d2:	791b      	ldrb	r3, [r3, #4]
 80023d4:	b29a      	uxth	r2, r3
				                                          (EEM_U16)(param->DATA[1]<<8);
 80023d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023da:	795b      	ldrb	r3, [r3, #5]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	b29b      	uxth	r3, r3
		        MS2_MSG.Message17.SPN.MS2_voltage  = (EEM_U16)(param->DATA[0])|
 80023e2:	4313      	orrs	r3, r2
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <EEM_PERIODIC+0x118c>)
 80023e8:	821a      	strh	r2, [r3, #16]

				MS2_MSG.Message17.SPN.MS2_PhaseUCurrent  = (EEM_U16)(param->DATA[1])|
 80023ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023ee:	795b      	ldrb	r3, [r3, #5]
 80023f0:	b29a      	uxth	r2, r3
				                  (EEM_U16)(param->DATA[2]<<8);
 80023f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023f6:	799b      	ldrb	r3, [r3, #6]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	b29b      	uxth	r3, r3
				MS2_MSG.Message17.SPN.MS2_PhaseUCurrent  = (EEM_U16)(param->DATA[1])|
 80023fe:	4313      	orrs	r3, r2
 8002400:	b29a      	uxth	r2, r3
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <EEM_PERIODIC+0x118c>)
 8002404:	825a      	strh	r2, [r3, #18]

				MS2_MSG.Message17.SPN.MS2_PhaseVCurrent  = (EEM_U16)((param->DATA[3])|
 8002406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800240a:	79db      	ldrb	r3, [r3, #7]
 800240c:	b29a      	uxth	r2, r3
				                  (EEM_U16)(param->DATA[4]<<8));
 800240e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002412:	7a1b      	ldrb	r3, [r3, #8]
 8002414:	b29b      	uxth	r3, r3
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	b29b      	uxth	r3, r3
				MS2_MSG.Message17.SPN.MS2_PhaseVCurrent  = (EEM_U16)((param->DATA[3])|
 800241a:	4313      	orrs	r3, r2
 800241c:	b29a      	uxth	r2, r3
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <EEM_PERIODIC+0x118c>)
 8002420:	829a      	strh	r2, [r3, #20]

				MS2_MSG.Message17.SPN.MS2_PhaseWCurrent  = (EEM_U16)((param->DATA[5])|
 8002422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002426:	7a5b      	ldrb	r3, [r3, #9]
 8002428:	b29a      	uxth	r2, r3
						                                   (EEM_U16)(param->DATA[6]<<8));
 800242a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800242e:	7a9b      	ldrb	r3, [r3, #10]
 8002430:	b29b      	uxth	r3, r3
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	b29b      	uxth	r3, r3
				MS2_MSG.Message17.SPN.MS2_PhaseWCurrent  = (EEM_U16)((param->DATA[5])|
 8002436:	4313      	orrs	r3, r2
 8002438:	b29a      	uxth	r2, r3
 800243a:	4b02      	ldr	r3, [pc, #8]	; (8002444 <EEM_PERIODIC+0x118c>)
 800243c:	82da      	strh	r2, [r3, #22]

	break;
 800243e:	e193      	b.n	8002768 <EEM_PERIODIC+0x14b0>
 8002440:	20000320 	.word	0x20000320
 8002444:	20000348 	.word	0x20000348


	case MESSAGE18 :

		MS2_MSG.Message18.SPN.MS2_SpeedVal =
						(EEM_U64)  ((EEM_U64)param->DATA[0] 	  )	|
 8002448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800244c:	791b      	ldrb	r3, [r3, #4]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2200      	movs	r2, #0
 8002452:	66bb      	str	r3, [r7, #104]	; 0x68
 8002454:	66fa      	str	r2, [r7, #108]	; 0x6c
								   ((EEM_U64)param->DATA[1] << 8  )	|
 8002456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800245a:	795b      	ldrb	r3, [r3, #5]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2200      	movs	r2, #0
 8002460:	461c      	mov	r4, r3
 8002462:	4615      	mov	r5, r2
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	022b      	lsls	r3, r5, #8
 800246e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002472:	0222      	lsls	r2, r4, #8
						(EEM_U64)  ((EEM_U64)param->DATA[0] 	  )	|
 8002474:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8002478:	4621      	mov	r1, r4
 800247a:	4311      	orrs	r1, r2
 800247c:	6639      	str	r1, [r7, #96]	; 0x60
 800247e:	4629      	mov	r1, r5
 8002480:	4319      	orrs	r1, r3
 8002482:	6679      	str	r1, [r7, #100]	; 0x64
								   ((EEM_U64)param->DATA[2] << 16 ) |
 8002484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002488:	799b      	ldrb	r3, [r3, #6]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2200      	movs	r2, #0
 800248e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002490:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800249e:	4629      	mov	r1, r5
 80024a0:	040b      	lsls	r3, r1, #16
 80024a2:	4621      	mov	r1, r4
 80024a4:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80024a8:	4621      	mov	r1, r4
 80024aa:	040a      	lsls	r2, r1, #16
								   ((EEM_U64)param->DATA[1] << 8  )	|
 80024ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80024b0:	4621      	mov	r1, r4
 80024b2:	4311      	orrs	r1, r2
 80024b4:	6539      	str	r1, [r7, #80]	; 0x50
 80024b6:	4629      	mov	r1, r5
 80024b8:	4319      	orrs	r1, r3
 80024ba:	6579      	str	r1, [r7, #84]	; 0x54
								   ((EEM_U64)param->DATA[3] << 24 ) |
 80024bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024c0:	79db      	ldrb	r3, [r3, #7]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2200      	movs	r2, #0
 80024c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80024c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80024ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80024ce:	460b      	mov	r3, r1
 80024d0:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80024d4:	460b      	mov	r3, r1
 80024d6:	ea4f 6a03 	mov.w	sl, r3, lsl #24
								   ((EEM_U64)param->DATA[2] << 16 ) |
 80024da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80024de:	460b      	mov	r3, r1
 80024e0:	ea43 030a 	orr.w	r3, r3, sl
 80024e4:	643b      	str	r3, [r7, #64]	; 0x40
 80024e6:	4613      	mov	r3, r2
 80024e8:	ea43 030b 	orr.w	r3, r3, fp
 80024ec:	647b      	str	r3, [r7, #68]	; 0x44
								   ((EEM_U64)param->DATA[4] << 32 ) |
 80024ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024f2:	7a1b      	ldrb	r3, [r3, #8]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2200      	movs	r2, #0
 80024f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80024fa:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002506:	000b      	movs	r3, r1
 8002508:	2200      	movs	r2, #0
								   ((EEM_U64)param->DATA[3] << 24 ) |
 800250a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800250e:	4621      	mov	r1, r4
 8002510:	4311      	orrs	r1, r2
 8002512:	6339      	str	r1, [r7, #48]	; 0x30
 8002514:	4629      	mov	r1, r5
 8002516:	4319      	orrs	r1, r3
 8002518:	6379      	str	r1, [r7, #52]	; 0x34
								   ((EEM_U64)param->DATA[5] << 40 ) |
 800251a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800251e:	7a5b      	ldrb	r3, [r3, #9]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2200      	movs	r2, #0
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
 8002526:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002532:	020b      	lsls	r3, r1, #8
 8002534:	2200      	movs	r2, #0
								   ((EEM_U64)param->DATA[4] << 32 ) |
 8002536:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800253a:	4621      	mov	r1, r4
 800253c:	4311      	orrs	r1, r2
 800253e:	6239      	str	r1, [r7, #32]
 8002540:	4629      	mov	r1, r5
 8002542:	4319      	orrs	r1, r3
 8002544:	6279      	str	r1, [r7, #36]	; 0x24
								   ((EEM_U64)param->DATA[6] << 48 ) |
 8002546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800254a:	7a9b      	ldrb	r3, [r3, #10]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2200      	movs	r2, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	61fa      	str	r2, [r7, #28]
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	69b9      	ldr	r1, [r7, #24]
 800255e:	040b      	lsls	r3, r1, #16
 8002560:	2200      	movs	r2, #0
								   ((EEM_U64)param->DATA[5] << 40 ) |
 8002562:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002566:	4621      	mov	r1, r4
 8002568:	4311      	orrs	r1, r2
 800256a:	6139      	str	r1, [r7, #16]
 800256c:	4629      	mov	r1, r5
 800256e:	4319      	orrs	r1, r3
 8002570:	6179      	str	r1, [r7, #20]
								   ((EEM_U64)param->DATA[7] << 56  );
 8002572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002576:	7adb      	ldrb	r3, [r3, #11]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2200      	movs	r2, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	60fa      	str	r2, [r7, #12]
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	060b      	lsls	r3, r1, #24
 800258c:	2200      	movs	r2, #0
								   ((EEM_U64)param->DATA[6] << 48 ) |
 800258e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002592:	4621      	mov	r1, r4
 8002594:	4311      	orrs	r1, r2
 8002596:	6039      	str	r1, [r7, #0]
 8002598:	4629      	mov	r1, r5
 800259a:	4319      	orrs	r1, r3
 800259c:	6079      	str	r1, [r7, #4]
		MS2_MSG.Message18.SPN.MS2_SpeedVal =
 800259e:	4b76      	ldr	r3, [pc, #472]	; (8002778 <EEM_PERIODIC+0x14c0>)
 80025a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80025a4:	e9c3 1208 	strd	r1, r2, [r3, #32]

	break;
 80025a8:	e0de      	b.n	8002768 <EEM_PERIODIC+0x14b0>

	case MESSAGE19 :

		BCM_MSG.Message19.SPN.BCM_MS1_Mode=(EEM_U8)(param->DATA[0]);
 80025aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025ae:	791a      	ldrb	r2, [r3, #4]
 80025b0:	4b72      	ldr	r3, [pc, #456]	; (800277c <EEM_PERIODIC+0x14c4>)
 80025b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	break;
 80025b6:	e0d7      	b.n	8002768 <EEM_PERIODIC+0x14b0>

	case MESSAGE20 :

		BCM_MSG.Message20.SPN.BCM_MS2_Mode=(EEM_U8)(param->DATA[0]);
 80025b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025bc:	791a      	ldrb	r2, [r3, #4]
 80025be:	4b6f      	ldr	r3, [pc, #444]	; (800277c <EEM_PERIODIC+0x14c4>)
 80025c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	break;
 80025c4:	e0d0      	b.n	8002768 <EEM_PERIODIC+0x14b0>

	case MESSAGE21 :

         SCB_MSG.Message21.SPN.SCB_cameraStartACK_u1    =(EEM_U8)(param->DATA[0]&0x01);
 80025c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025ca:	791b      	ldrb	r3, [r3, #4]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	b2d9      	uxtb	r1, r3
 80025d2:	4a6b      	ldr	r2, [pc, #428]	; (8002780 <EEM_PERIODIC+0x14c8>)
 80025d4:	7913      	ldrb	r3, [r2, #4]
 80025d6:	f361 0300 	bfi	r3, r1, #0, #1
 80025da:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_cameraStartNACK_u1   =(EEM_U8)((param->DATA[0]&0x02)>>1);
 80025dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025e0:	791b      	ldrb	r3, [r3, #4]
 80025e2:	105b      	asrs	r3, r3, #1
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	b2d9      	uxtb	r1, r3
 80025ea:	4a65      	ldr	r2, [pc, #404]	; (8002780 <EEM_PERIODIC+0x14c8>)
 80025ec:	7913      	ldrb	r3, [r2, #4]
 80025ee:	f361 0341 	bfi	r3, r1, #1, #1
 80025f2:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_cameraStopACK_u1	    =(EEM_U8)((param->DATA[0]&0x04)>>2);
 80025f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025f8:	791b      	ldrb	r3, [r3, #4]
 80025fa:	109b      	asrs	r3, r3, #2
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	b2d9      	uxtb	r1, r3
 8002602:	4a5f      	ldr	r2, [pc, #380]	; (8002780 <EEM_PERIODIC+0x14c8>)
 8002604:	7913      	ldrb	r3, [r2, #4]
 8002606:	f361 0382 	bfi	r3, r1, #2, #1
 800260a:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_cameraStopNACK_u1	=(EEM_U8)((param->DATA[0]&0x08)>>3);
 800260c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002610:	791b      	ldrb	r3, [r3, #4]
 8002612:	10db      	asrs	r3, r3, #3
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	b2d9      	uxtb	r1, r3
 800261a:	4a59      	ldr	r2, [pc, #356]	; (8002780 <EEM_PERIODIC+0x14c8>)
 800261c:	7913      	ldrb	r3, [r2, #4]
 800261e:	f361 03c3 	bfi	r3, r1, #3, #1
 8002622:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_sdCardErase_ACK_u1	=(EEM_U8)((param->DATA[0]&0x10)>>4);
 8002624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002628:	791b      	ldrb	r3, [r3, #4]
 800262a:	111b      	asrs	r3, r3, #4
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	b2d9      	uxtb	r1, r3
 8002632:	4a53      	ldr	r2, [pc, #332]	; (8002780 <EEM_PERIODIC+0x14c8>)
 8002634:	7913      	ldrb	r3, [r2, #4]
 8002636:	f361 1304 	bfi	r3, r1, #4, #1
 800263a:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_sdCardErase_NACK_u1	=(EEM_U8)((param->DATA[0]&0x20)>>5);
 800263c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002640:	791b      	ldrb	r3, [r3, #4]
 8002642:	115b      	asrs	r3, r3, #5
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	b2d9      	uxtb	r1, r3
 800264a:	4a4d      	ldr	r2, [pc, #308]	; (8002780 <EEM_PERIODIC+0x14c8>)
 800264c:	7913      	ldrb	r3, [r2, #4]
 800264e:	f361 1345 	bfi	r3, r1, #5, #1
 8002652:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_sdCardSave_ACK_u1	=(EEM_U8)((param->DATA[0]&0x40)>>6);
 8002654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002658:	791b      	ldrb	r3, [r3, #4]
 800265a:	119b      	asrs	r3, r3, #6
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	b2d9      	uxtb	r1, r3
 8002662:	4a47      	ldr	r2, [pc, #284]	; (8002780 <EEM_PERIODIC+0x14c8>)
 8002664:	7913      	ldrb	r3, [r2, #4]
 8002666:	f361 1386 	bfi	r3, r1, #6, #1
 800266a:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_sdCardSave_NACK_u1	=(EEM_U8)((param->DATA[0]&0x80)>>7);
 800266c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002670:	791b      	ldrb	r3, [r3, #4]
 8002672:	09db      	lsrs	r3, r3, #7
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	b2d9      	uxtb	r1, r3
 800267c:	4a40      	ldr	r2, [pc, #256]	; (8002780 <EEM_PERIODIC+0x14c8>)
 800267e:	7913      	ldrb	r3, [r2, #4]
 8002680:	f361 13c7 	bfi	r3, r1, #7, #1
 8002684:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_loggerByte01 		=(EEM_U8)(param->DATA[1]);
 8002686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800268a:	795a      	ldrb	r2, [r3, #5]
 800268c:	4b3c      	ldr	r3, [pc, #240]	; (8002780 <EEM_PERIODIC+0x14c8>)
 800268e:	715a      	strb	r2, [r3, #5]
         SCB_MSG.Message21.SPN.SCB_loggerByte02 		=(EEM_U8)(param->DATA[2]);
 8002690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002694:	799a      	ldrb	r2, [r3, #6]
 8002696:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <EEM_PERIODIC+0x14c8>)
 8002698:	719a      	strb	r2, [r3, #6]
         SCB_MSG.Message21.SPN.SCB_loggerByte03 		=(EEM_U8)(param->DATA[3]);
 800269a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800269e:	79da      	ldrb	r2, [r3, #7]
 80026a0:	4b37      	ldr	r3, [pc, #220]	; (8002780 <EEM_PERIODIC+0x14c8>)
 80026a2:	71da      	strb	r2, [r3, #7]
         SCB_MSG.Message21.SPN.SCB_loggerByte04 		=(EEM_U8)(param->DATA[4]);
 80026a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026a8:	7a1a      	ldrb	r2, [r3, #8]
 80026aa:	4b35      	ldr	r3, [pc, #212]	; (8002780 <EEM_PERIODIC+0x14c8>)
 80026ac:	721a      	strb	r2, [r3, #8]
         SCB_MSG.Message21.SPN.SCB_loggerByte05 		=(EEM_U8)(param->DATA[5]);
 80026ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026b2:	7a5a      	ldrb	r2, [r3, #9]
 80026b4:	4b32      	ldr	r3, [pc, #200]	; (8002780 <EEM_PERIODIC+0x14c8>)
 80026b6:	725a      	strb	r2, [r3, #9]
         SCB_MSG.Message21.SPN.SCB_loggerByte06 		=(EEM_U8)(param->DATA[6]);
 80026b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026bc:	7a9a      	ldrb	r2, [r3, #10]
 80026be:	4b30      	ldr	r3, [pc, #192]	; (8002780 <EEM_PERIODIC+0x14c8>)
 80026c0:	729a      	strb	r2, [r3, #10]

	break;
 80026c2:	e051      	b.n	8002768 <EEM_PERIODIC+0x14b0>

	case MESSAGE22 :

		TLM_MSG.Message22.SPN.TLM_wifiStatus_u8= (EEM_U8)(param->DATA[0]);
 80026c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026c8:	791a      	ldrb	r2, [r3, #4]
 80026ca:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <EEM_PERIODIC+0x14cc>)
 80026cc:	711a      	strb	r2, [r3, #4]
		TLM_MSG.Message22.SPN.TLM_wifiCmd01_u8=  (EEM_U8)(param->DATA[1]);
 80026ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026d2:	795a      	ldrb	r2, [r3, #5]
 80026d4:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <EEM_PERIODIC+0x14cc>)
 80026d6:	715a      	strb	r2, [r3, #5]
		TLM_MSG.Message22.SPN.TLM_wifiCmd02_u8=  (EEM_U8)(param->DATA[2]);
 80026d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026dc:	799a      	ldrb	r2, [r3, #6]
 80026de:	4b29      	ldr	r3, [pc, #164]	; (8002784 <EEM_PERIODIC+0x14cc>)
 80026e0:	719a      	strb	r2, [r3, #6]
		TLM_MSG.Message22.SPN.TLM_wifiCmd03_u8=  (EEM_U8)(param->DATA[3]);
 80026e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e6:	79da      	ldrb	r2, [r3, #7]
 80026e8:	4b26      	ldr	r3, [pc, #152]	; (8002784 <EEM_PERIODIC+0x14cc>)
 80026ea:	71da      	strb	r2, [r3, #7]
		TLM_MSG.Message22.SPN.TLM_wifiCmd04_u8=  (EEM_U8)(param->DATA[4]);
 80026ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026f0:	7a1a      	ldrb	r2, [r3, #8]
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <EEM_PERIODIC+0x14cc>)
 80026f4:	721a      	strb	r2, [r3, #8]
		TLM_MSG.Message22.SPN.TLM_wifiCmd05_u8=  (EEM_U8)(param->DATA[5]);
 80026f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026fa:	7a5a      	ldrb	r2, [r3, #9]
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <EEM_PERIODIC+0x14cc>)
 80026fe:	725a      	strb	r2, [r3, #9]
		TLM_MSG.Message22.SPN.TLM_wifiCmd06_u8=  (EEM_U8)(param->DATA[6]);
 8002700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002704:	7a9a      	ldrb	r2, [r3, #10]
 8002706:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <EEM_PERIODIC+0x14cc>)
 8002708:	729a      	strb	r2, [r3, #10]
		TLM_MSG.Message22.SPN.TLM_wifiCmd07_u8=  (EEM_U8)(param->DATA[7]);
 800270a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800270e:	7ada      	ldrb	r2, [r3, #11]
 8002710:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <EEM_PERIODIC+0x14cc>)
 8002712:	72da      	strb	r2, [r3, #11]


	break;
 8002714:	e028      	b.n	8002768 <EEM_PERIODIC+0x14b0>

	case MESSAGE23 :

       TLM_MSG.Message23.SPN.TLM_rfStatus_u8= (EEM_U8)(param->DATA[0]);
 8002716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800271a:	791a      	ldrb	r2, [r3, #4]
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <EEM_PERIODIC+0x14cc>)
 800271e:	741a      	strb	r2, [r3, #16]
       TLM_MSG.Message23.SPN.TLM_rfCmd01_u8= (EEM_U8)(param->DATA[1]);
 8002720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002724:	795a      	ldrb	r2, [r3, #5]
 8002726:	4b17      	ldr	r3, [pc, #92]	; (8002784 <EEM_PERIODIC+0x14cc>)
 8002728:	745a      	strb	r2, [r3, #17]
       TLM_MSG.Message23.SPN.TLM_rfCmd02_u8= (EEM_U8)(param->DATA[2]);
 800272a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800272e:	799a      	ldrb	r2, [r3, #6]
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <EEM_PERIODIC+0x14cc>)
 8002732:	749a      	strb	r2, [r3, #18]
       TLM_MSG.Message23.SPN.TLM_rfCmd03_u8= (EEM_U8)(param->DATA[3]);
 8002734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002738:	79da      	ldrb	r2, [r3, #7]
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <EEM_PERIODIC+0x14cc>)
 800273c:	74da      	strb	r2, [r3, #19]
       TLM_MSG.Message23.SPN.TLM_rfCmd04_u8= (EEM_U8)(param->DATA[4]);
 800273e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002742:	7a1a      	ldrb	r2, [r3, #8]
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <EEM_PERIODIC+0x14cc>)
 8002746:	751a      	strb	r2, [r3, #20]
       TLM_MSG.Message23.SPN.TLM_rfCmd05_u8= (EEM_U8)(param->DATA[5]);
 8002748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800274c:	7a5a      	ldrb	r2, [r3, #9]
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <EEM_PERIODIC+0x14cc>)
 8002750:	755a      	strb	r2, [r3, #21]
       TLM_MSG.Message23.SPN.TLM_rfCmd06_u8= (EEM_U8)(param->DATA[6]);
 8002752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002756:	7a9a      	ldrb	r2, [r3, #10]
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <EEM_PERIODIC+0x14cc>)
 800275a:	759a      	strb	r2, [r3, #22]
       TLM_MSG.Message23.SPN.TLM_rfCmd07_u8= (EEM_U8)(param->DATA[7]);
 800275c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002760:	7ada      	ldrb	r2, [r3, #11]
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <EEM_PERIODIC+0x14cc>)
 8002764:	75da      	strb	r2, [r3, #23]

	break;
 8002766:	bf00      	nop

	}

	return result;
 8002768:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
	
}
 800276c:	4618      	mov	r0, r3
 800276e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002772:	46bd      	mov	sp, r7
 8002774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002778:	20000348 	.word	0x20000348
 800277c:	20000250 	.word	0x20000250
 8002780:	200002d8 	.word	0x200002d8
 8002784:	20000370 	.word	0x20000370

08002788 <EEM_IS_EMPTY>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
EEM_BOOL_T	EEM_IS_EMPTY( const EEM_RING_Buffer_st* buffer )
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	 return (buffer->head == buffer->tail && !buffer->full);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800279c:	429a      	cmp	r2, r3
 800279e:	d106      	bne.n	80027ae <EEM_IS_EMPTY+0x26>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <EEM_IS_EMPTY+0x26>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <EEM_IS_EMPTY+0x28>
 80027ae:	2300      	movs	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <EEM_SET_IDENTIFIERS>:
	 @return  : void
	 @date	  : 7.02.2023
	 @INFO	  :	Set All Identifiers
********************************************************************************/
void EEM_SET_IDENTIFIERS(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b09a      	sub	sp, #104	; 0x68
 80027c4:	af00      	add	r7, sp, #0
	/* Message Identifier Handler */
	EEM_CAN_ID_st ID[SIZE_OF_MSG] = {0};
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	2264      	movs	r2, #100	; 0x64
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 f82b 	bl	8005828 <memset>

	ID[MSG01_INDEX].Pages.priority 		= PRIORITY_010 ;
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	2202      	movs	r2, #2
 80027d6:	f362 0384 	bfi	r3, r2, #2, #3
 80027da:	71fb      	strb	r3, [r7, #7]
	ID[MSG01_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f36f 0341 	bfc	r3, #1, #1
 80027e2:	71fb      	strb	r3, [r7, #7]
	ID[MSG01_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	f36f 0300 	bfc	r3, #0, #1
 80027ea:	71fb      	strb	r3, [r7, #7]
	ID[MSG01_INDEX].Pages.messageID 	= MESSAGE01 ;
 80027ec:	2301      	movs	r3, #1
 80027ee:	71bb      	strb	r3, [r7, #6]
	ID[MSG01_INDEX].Pages.DA 			= BCM_NODE;
 80027f0:	2311      	movs	r3, #17
 80027f2:	717b      	strb	r3, [r7, #5]
	ID[MSG01_INDEX].Pages.SA 			= HVAC_NODE ;
 80027f4:	2322      	movs	r3, #34	; 0x22
 80027f6:	713b      	strb	r3, [r7, #4]
	HVAC_MSG.Message01_ID = ID[MSG01_INDEX].identifier ;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4ae5      	ldr	r2, [pc, #916]	; (8002b90 <EEM_SET_IDENTIFIERS+0x3d0>)
 80027fc:	6013      	str	r3, [r2, #0]

	ID[MSG02_INDEX].Pages.priority 		= PRIORITY_010 ;
 80027fe:	7afb      	ldrb	r3, [r7, #11]
 8002800:	2202      	movs	r2, #2
 8002802:	f362 0384 	bfi	r3, r2, #2, #3
 8002806:	72fb      	strb	r3, [r7, #11]
	ID[MSG02_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002808:	7afb      	ldrb	r3, [r7, #11]
 800280a:	f36f 0341 	bfc	r3, #1, #1
 800280e:	72fb      	strb	r3, [r7, #11]
	ID[MSG02_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002810:	7afb      	ldrb	r3, [r7, #11]
 8002812:	f36f 0300 	bfc	r3, #0, #1
 8002816:	72fb      	strb	r3, [r7, #11]
	ID[MSG02_INDEX].Pages.messageID 	= MESSAGE02 ;
 8002818:	2302      	movs	r3, #2
 800281a:	72bb      	strb	r3, [r7, #10]
	ID[MSG02_INDEX].Pages.DA 			= BCM_NODE;
 800281c:	2311      	movs	r3, #17
 800281e:	727b      	strb	r3, [r7, #9]
	ID[MSG02_INDEX].Pages.SA 			= HVAC_NODE ;
 8002820:	2322      	movs	r3, #34	; 0x22
 8002822:	723b      	strb	r3, [r7, #8]
	HVAC_MSG.Message02_ID = ID[MSG02_INDEX].identifier ;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4ada      	ldr	r2, [pc, #872]	; (8002b90 <EEM_SET_IDENTIFIERS+0x3d0>)
 8002828:	6113      	str	r3, [r2, #16]

	ID[MSG03_INDEX].Pages.priority 		= PRIORITY_100 ;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	2204      	movs	r2, #4
 800282e:	f362 0384 	bfi	r3, r2, #2, #3
 8002832:	73fb      	strb	r3, [r7, #15]
	ID[MSG03_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	f36f 0341 	bfc	r3, #1, #1
 800283a:	73fb      	strb	r3, [r7, #15]
	ID[MSG03_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	f36f 0300 	bfc	r3, #0, #1
 8002842:	73fb      	strb	r3, [r7, #15]
	ID[MSG03_INDEX].Pages.messageID 	= MESSAGE03 ;
 8002844:	2303      	movs	r3, #3
 8002846:	73bb      	strb	r3, [r7, #14]
	ID[MSG03_INDEX].Pages.DA 			= TLM_NODE;
 8002848:	2388      	movs	r3, #136	; 0x88
 800284a:	737b      	strb	r3, [r7, #13]
	ID[MSG03_INDEX].Pages.SA 			= BCM_NODE;
 800284c:	2311      	movs	r3, #17
 800284e:	733b      	strb	r3, [r7, #12]
	BCM_MSG.Message03_ID = ID[MSG03_INDEX].identifier ;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4ad0      	ldr	r2, [pc, #832]	; (8002b94 <EEM_SET_IDENTIFIERS+0x3d4>)
 8002854:	6013      	str	r3, [r2, #0]

	ID[MSG04_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	2204      	movs	r2, #4
 800285a:	f362 0384 	bfi	r3, r2, #2, #3
 800285e:	74fb      	strb	r3, [r7, #19]
	ID[MSG04_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	f36f 0341 	bfc	r3, #1, #1
 8002866:	74fb      	strb	r3, [r7, #19]
	ID[MSG04_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	f36f 0300 	bfc	r3, #0, #1
 800286e:	74fb      	strb	r3, [r7, #19]
	ID[MSG04_INDEX].Pages.messageID 	= MESSAGE04 ;
 8002870:	2304      	movs	r3, #4
 8002872:	74bb      	strb	r3, [r7, #18]
	ID[MSG04_INDEX].Pages.DA 			= SCB_NODE;
 8002874:	2333      	movs	r3, #51	; 0x33
 8002876:	747b      	strb	r3, [r7, #17]
	ID[MSG04_INDEX].Pages.SA 			= BCM_NODE;
 8002878:	2311      	movs	r3, #17
 800287a:	743b      	strb	r3, [r7, #16]
	BCM_MSG.Message04_ID = ID[MSG04_INDEX].identifier ;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4ac5      	ldr	r2, [pc, #788]	; (8002b94 <EEM_SET_IDENTIFIERS+0x3d4>)
 8002880:	60d3      	str	r3, [r2, #12]

	ID[MSG05_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	2204      	movs	r2, #4
 8002886:	f362 0384 	bfi	r3, r2, #2, #3
 800288a:	75fb      	strb	r3, [r7, #23]
	ID[MSG05_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	f36f 0341 	bfc	r3, #1, #1
 8002892:	75fb      	strb	r3, [r7, #23]
	ID[MSG05_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	f36f 0300 	bfc	r3, #0, #1
 800289a:	75fb      	strb	r3, [r7, #23]
	ID[MSG05_INDEX].Pages.messageID 	= MESSAGE05 ;
 800289c:	2305      	movs	r3, #5
 800289e:	75bb      	strb	r3, [r7, #22]
	ID[MSG05_INDEX].Pages.DA 			= SCB_NODE;
 80028a0:	2333      	movs	r3, #51	; 0x33
 80028a2:	757b      	strb	r3, [r7, #21]
	ID[MSG05_INDEX].Pages.SA 			= BCM_NODE;
 80028a4:	2311      	movs	r3, #17
 80028a6:	753b      	strb	r3, [r7, #20]
	BCM_MSG.Message05_ID = ID[MSG05_INDEX].identifier ;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	4aba      	ldr	r2, [pc, #744]	; (8002b94 <EEM_SET_IDENTIFIERS+0x3d4>)
 80028ac:	61d3      	str	r3, [r2, #28]

	ID[MSG06_INDEX].Pages.priority 		= PRIORITY_100 ;
 80028ae:	7efb      	ldrb	r3, [r7, #27]
 80028b0:	2204      	movs	r2, #4
 80028b2:	f362 0384 	bfi	r3, r2, #2, #3
 80028b6:	76fb      	strb	r3, [r7, #27]
	ID[MSG06_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80028b8:	7efb      	ldrb	r3, [r7, #27]
 80028ba:	f36f 0341 	bfc	r3, #1, #1
 80028be:	76fb      	strb	r3, [r7, #27]
	ID[MSG06_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80028c0:	7efb      	ldrb	r3, [r7, #27]
 80028c2:	f36f 0300 	bfc	r3, #0, #1
 80028c6:	76fb      	strb	r3, [r7, #27]
	ID[MSG06_INDEX].Pages.messageID 	= MESSAGE06 ;
 80028c8:	2306      	movs	r3, #6
 80028ca:	76bb      	strb	r3, [r7, #26]
	ID[MSG06_INDEX].Pages.DA 			= SCB_NODE;
 80028cc:	2333      	movs	r3, #51	; 0x33
 80028ce:	767b      	strb	r3, [r7, #25]
	ID[MSG06_INDEX].Pages.SA 			= BMS_NODE;
 80028d0:	2344      	movs	r3, #68	; 0x44
 80028d2:	763b      	strb	r3, [r7, #24]
	BMS_MSG.Message06_ID = ID[MSG06_INDEX].identifier ;
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	4ab0      	ldr	r2, [pc, #704]	; (8002b98 <EEM_SET_IDENTIFIERS+0x3d8>)
 80028d8:	6013      	str	r3, [r2, #0]

	ID[MSG07_INDEX].Pages.priority 		= PRIORITY_100 ;
 80028da:	7ffb      	ldrb	r3, [r7, #31]
 80028dc:	2204      	movs	r2, #4
 80028de:	f362 0384 	bfi	r3, r2, #2, #3
 80028e2:	77fb      	strb	r3, [r7, #31]
	ID[MSG07_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80028e4:	7ffb      	ldrb	r3, [r7, #31]
 80028e6:	f36f 0341 	bfc	r3, #1, #1
 80028ea:	77fb      	strb	r3, [r7, #31]
	ID[MSG07_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80028ec:	7ffb      	ldrb	r3, [r7, #31]
 80028ee:	f36f 0300 	bfc	r3, #0, #1
 80028f2:	77fb      	strb	r3, [r7, #31]
	ID[MSG07_INDEX].Pages.messageID 	= MESSAGE07 ;
 80028f4:	2307      	movs	r3, #7
 80028f6:	77bb      	strb	r3, [r7, #30]
	ID[MSG07_INDEX].Pages.DA 			= SCB_NODE;
 80028f8:	2333      	movs	r3, #51	; 0x33
 80028fa:	777b      	strb	r3, [r7, #29]
	ID[MSG07_INDEX].Pages.SA 			= BMS_NODE;
 80028fc:	2344      	movs	r3, #68	; 0x44
 80028fe:	773b      	strb	r3, [r7, #28]
	BMS_MSG.Message07_ID = ID[MSG07_INDEX].identifier ;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	4aa5      	ldr	r2, [pc, #660]	; (8002b98 <EEM_SET_IDENTIFIERS+0x3d8>)
 8002904:	60d3      	str	r3, [r2, #12]

	ID[MSG08_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002906:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800290a:	2204      	movs	r2, #4
 800290c:	f362 0384 	bfi	r3, r2, #2, #3
 8002910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG08_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002914:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002918:	f36f 0341 	bfc	r3, #1, #1
 800291c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG08_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002920:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002924:	f36f 0300 	bfc	r3, #0, #1
 8002928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG08_INDEX].Pages.messageID 	= MESSAGE08 ;
 800292c:	2308      	movs	r3, #8
 800292e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	ID[MSG08_INDEX].Pages.DA 			= SCB_NODE;
 8002932:	2333      	movs	r3, #51	; 0x33
 8002934:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	ID[MSG08_INDEX].Pages.SA 			= BMS_NODE;
 8002938:	2344      	movs	r3, #68	; 0x44
 800293a:	f887 3020 	strb.w	r3, [r7, #32]
	BMS_MSG.Message08_ID = ID[MSG08_INDEX].identifier ;
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	4a95      	ldr	r2, [pc, #596]	; (8002b98 <EEM_SET_IDENTIFIERS+0x3d8>)
 8002942:	6193      	str	r3, [r2, #24]

	ID[MSG09_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002948:	2204      	movs	r2, #4
 800294a:	f362 0384 	bfi	r3, r2, #2, #3
 800294e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG09_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002956:	f36f 0341 	bfc	r3, #1, #1
 800295a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG09_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800295e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002962:	f36f 0300 	bfc	r3, #0, #1
 8002966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG09_INDEX].Pages.messageID 	= MESSAGE09 ;
 800296a:	2309      	movs	r3, #9
 800296c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	ID[MSG09_INDEX].Pages.DA 			= SCB_NODE;
 8002970:	2333      	movs	r3, #51	; 0x33
 8002972:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	ID[MSG09_INDEX].Pages.SA 			= BMS_NODE;
 8002976:	2344      	movs	r3, #68	; 0x44
 8002978:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	BMS_MSG.Message09_ID = ID[MSG09_INDEX].identifier ;
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	4a86      	ldr	r2, [pc, #536]	; (8002b98 <EEM_SET_IDENTIFIERS+0x3d8>)
 8002980:	6253      	str	r3, [r2, #36]	; 0x24

	ID[MSG10_INDEX].Pages.priority 		= PRIORITY_100 ;
 8002982:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002986:	2204      	movs	r2, #4
 8002988:	f362 0384 	bfi	r3, r2, #2, #3
 800298c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG10_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002990:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002994:	f36f 0341 	bfc	r3, #1, #1
 8002998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG10_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800299c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029a0:	f36f 0300 	bfc	r3, #0, #1
 80029a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG10_INDEX].Pages.messageID 	= MESSAGE10 ;
 80029a8:	2310      	movs	r3, #16
 80029aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ID[MSG10_INDEX].Pages.DA 			= SCB_NODE;
 80029ae:	2333      	movs	r3, #51	; 0x33
 80029b0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	ID[MSG10_INDEX].Pages.SA 			= BMS_NODE;
 80029b4:	2344      	movs	r3, #68	; 0x44
 80029b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	BMS_MSG.Message10_ID = ID[MSG10_INDEX].identifier ;
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	4a76      	ldr	r2, [pc, #472]	; (8002b98 <EEM_SET_IDENTIFIERS+0x3d8>)
 80029be:	6313      	str	r3, [r2, #48]	; 0x30

	ID[MSG11_INDEX].Pages.priority 		= PRIORITY_001 ;
 80029c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029c4:	2201      	movs	r2, #1
 80029c6:	f362 0384 	bfi	r3, r2, #2, #3
 80029ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG11_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80029ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029d2:	f36f 0341 	bfc	r3, #1, #1
 80029d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG11_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80029da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029de:	f36f 0300 	bfc	r3, #0, #1
 80029e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG11_INDEX].Pages.messageID 	= MESSAGE11 ;
 80029e6:	2311      	movs	r3, #17
 80029e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	ID[MSG11_INDEX].Pages.DA 			= MS1_NODE;
 80029ec:	2355      	movs	r3, #85	; 0x55
 80029ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	ID[MSG11_INDEX].Pages.SA 			= BCM_NODE ;
 80029f2:	2311      	movs	r3, #17
 80029f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	BCM_MSG.Message11_ID = ID[MSG11_INDEX].identifier ;
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fa:	4a66      	ldr	r2, [pc, #408]	; (8002b94 <EEM_SET_IDENTIFIERS+0x3d4>)
 80029fc:	6293      	str	r3, [r2, #40]	; 0x28

	ID[MSG12_INDEX].Pages.priority 		= PRIORITY_001 ;
 80029fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a02:	2201      	movs	r2, #1
 8002a04:	f362 0384 	bfi	r3, r2, #2, #3
 8002a08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG12_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a10:	f36f 0341 	bfc	r3, #1, #1
 8002a14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG12_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002a18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a1c:	f36f 0300 	bfc	r3, #0, #1
 8002a20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG12_INDEX].Pages.messageID 	= MESSAGE12 ;
 8002a24:	2312      	movs	r3, #18
 8002a26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	ID[MSG12_INDEX].Pages.DA 			= MS2_NODE;
 8002a2a:	2366      	movs	r3, #102	; 0x66
 8002a2c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	ID[MSG12_INDEX].Pages.SA 			= BCM_NODE ;
 8002a30:	2311      	movs	r3, #17
 8002a32:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	BCM_MSG.Message12_ID = ID[MSG12_INDEX].identifier ;
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	4a56      	ldr	r2, [pc, #344]	; (8002b94 <EEM_SET_IDENTIFIERS+0x3d4>)
 8002a3a:	6393      	str	r3, [r2, #56]	; 0x38

	ID[MSG13_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002a3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a40:	2201      	movs	r2, #1
 8002a42:	f362 0384 	bfi	r3, r2, #2, #3
 8002a46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG13_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002a4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a4e:	f36f 0341 	bfc	r3, #1, #1
 8002a52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG13_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002a56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a5a:	f36f 0300 	bfc	r3, #0, #1
 8002a5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG13_INDEX].Pages.messageID 	= MESSAGE13 ;
 8002a62:	2313      	movs	r3, #19
 8002a64:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	ID[MSG13_INDEX].Pages.DA 			= BCM_NODE ;
 8002a68:	2311      	movs	r3, #17
 8002a6a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	ID[MSG13_INDEX].Pages.SA 			= MS1_NODE ;
 8002a6e:	2355      	movs	r3, #85	; 0x55
 8002a70:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	MS1_MSG.Message13_ID = ID[MSG13_INDEX].identifier ;
 8002a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a76:	4a49      	ldr	r2, [pc, #292]	; (8002b9c <EEM_SET_IDENTIFIERS+0x3dc>)
 8002a78:	6013      	str	r3, [r2, #0]

	ID[MSG14_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002a7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f362 0384 	bfi	r3, r2, #2, #3
 8002a84:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG14_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002a88:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002a8c:	f36f 0341 	bfc	r3, #1, #1
 8002a90:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG14_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002a94:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002a98:	f36f 0300 	bfc	r3, #0, #1
 8002a9c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG14_INDEX].Pages.messageID 	= MESSAGE14 ;
 8002aa0:	2314      	movs	r3, #20
 8002aa2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	ID[MSG14_INDEX].Pages.DA 			= BCM_NODE ;
 8002aa6:	2311      	movs	r3, #17
 8002aa8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	ID[MSG14_INDEX].Pages.SA 			= MS1_NODE ;
 8002aac:	2355      	movs	r3, #85	; 0x55
 8002aae:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	MS1_MSG.Message14_ID = ID[MSG14_INDEX].identifier ;
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	4a39      	ldr	r2, [pc, #228]	; (8002b9c <EEM_SET_IDENTIFIERS+0x3dc>)
 8002ab6:	60d3      	str	r3, [r2, #12]

	ID[MSG15_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002ab8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002abc:	2201      	movs	r2, #1
 8002abe:	f362 0384 	bfi	r3, r2, #2, #3
 8002ac2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG15_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002ac6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002aca:	f36f 0341 	bfc	r3, #1, #1
 8002ace:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG15_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002ad2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ad6:	f36f 0300 	bfc	r3, #0, #1
 8002ada:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG15_INDEX].Pages.messageID 	= MESSAGE15 ;
 8002ade:	2315      	movs	r3, #21
 8002ae0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	ID[MSG15_INDEX].Pages.DA 			= BCM_NODE ;
 8002ae4:	2311      	movs	r3, #17
 8002ae6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	ID[MSG15_INDEX].Pages.SA 			= MS1_NODE ;
 8002aea:	2355      	movs	r3, #85	; 0x55
 8002aec:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	MS1_MSG.Message15_ID = ID[MSG15_INDEX].identifier ;
 8002af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af2:	4a2a      	ldr	r2, [pc, #168]	; (8002b9c <EEM_SET_IDENTIFIERS+0x3dc>)
 8002af4:	6193      	str	r3, [r2, #24]

	ID[MSG16_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002af6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002afa:	2201      	movs	r2, #1
 8002afc:	f362 0384 	bfi	r3, r2, #2, #3
 8002b00:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG16_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002b04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002b08:	f36f 0341 	bfc	r3, #1, #1
 8002b0c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG16_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002b10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002b14:	f36f 0300 	bfc	r3, #0, #1
 8002b18:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG16_INDEX].Pages.messageID 	= MESSAGE16 ;
 8002b1c:	2316      	movs	r3, #22
 8002b1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	ID[MSG16_INDEX].Pages.DA 			= BCM_NODE ;
 8002b22:	2311      	movs	r3, #17
 8002b24:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	ID[MSG16_INDEX].Pages.SA 			= MS2_NODE ;
 8002b28:	2366      	movs	r3, #102	; 0x66
 8002b2a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	MS2_MSG.Message16_ID = ID[MSG16_INDEX].identifier ;
 8002b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b30:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <EEM_SET_IDENTIFIERS+0x3e0>)
 8002b32:	6013      	str	r3, [r2, #0]

	ID[MSG17_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002b34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f362 0384 	bfi	r3, r2, #2, #3
 8002b3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ID[MSG17_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002b42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b46:	f36f 0341 	bfc	r3, #1, #1
 8002b4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ID[MSG17_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002b4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b52:	f36f 0300 	bfc	r3, #0, #1
 8002b56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ID[MSG17_INDEX].Pages.messageID 	= MESSAGE17 ;
 8002b5a:	2317      	movs	r3, #23
 8002b5c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	ID[MSG17_INDEX].Pages.DA 			= BCM_NODE ;
 8002b60:	2311      	movs	r3, #17
 8002b62:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	ID[MSG17_INDEX].Pages.SA 			= MS2_NODE ;
 8002b66:	2366      	movs	r3, #102	; 0x66
 8002b68:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	MS2_MSG.Message17_ID = ID[MSG17_INDEX].identifier ;
 8002b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ba0 <EEM_SET_IDENTIFIERS+0x3e0>)
 8002b70:	60d3      	str	r3, [r2, #12]

	ID[MSG18_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002b72:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002b76:	2201      	movs	r2, #1
 8002b78:	f362 0384 	bfi	r3, r2, #2, #3
 8002b7c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[MSG18_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002b80:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002b84:	f36f 0341 	bfc	r3, #1, #1
 8002b88:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8002b8c:	e00a      	b.n	8002ba4 <EEM_SET_IDENTIFIERS+0x3e4>
 8002b8e:	bf00      	nop
 8002b90:	200002b8 	.word	0x200002b8
 8002b94:	20000250 	.word	0x20000250
 8002b98:	200002e4 	.word	0x200002e4
 8002b9c:	20000320 	.word	0x20000320
 8002ba0:	20000348 	.word	0x20000348
	ID[MSG18_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002ba4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002ba8:	f36f 0300 	bfc	r3, #0, #1
 8002bac:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[MSG18_INDEX].Pages.messageID 	= MESSAGE18 ;
 8002bb0:	2318      	movs	r3, #24
 8002bb2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	ID[MSG18_INDEX].Pages.DA 			= BCM_NODE ;
 8002bb6:	2311      	movs	r3, #17
 8002bb8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	ID[MSG18_INDEX].Pages.SA 			= MS2_NODE ;
 8002bbc:	2366      	movs	r3, #102	; 0x66
 8002bbe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MS2_MSG.Message18_ID = ID[MSG18_INDEX].identifier ;
 8002bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc4:	4a4f      	ldr	r2, [pc, #316]	; (8002d04 <EEM_SET_IDENTIFIERS+0x544>)
 8002bc6:	6193      	str	r3, [r2, #24]

	ID[MSG19_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002bc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f362 0384 	bfi	r3, r2, #2, #3
 8002bd2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG19_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002bd6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002bda:	f36f 0341 	bfc	r3, #1, #1
 8002bde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG19_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002be2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002be6:	f36f 0300 	bfc	r3, #0, #1
 8002bea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG19_INDEX].Pages.messageID 	= MESSAGE19 ;
 8002bee:	2319      	movs	r3, #25
 8002bf0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	ID[MSG19_INDEX].Pages.DA 			= BCM_NODE ;
 8002bf4:	2311      	movs	r3, #17
 8002bf6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	ID[MSG19_INDEX].Pages.SA 			= MS1_NODE ;
 8002bfa:	2355      	movs	r3, #85	; 0x55
 8002bfc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	BCM_MSG.Message19_ID = ID[MSG19_INDEX].identifier ;
 8002c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c02:	4a41      	ldr	r2, [pc, #260]	; (8002d08 <EEM_SET_IDENTIFIERS+0x548>)
 8002c04:	6493      	str	r3, [r2, #72]	; 0x48

	ID[MSG20_INDEX].Pages.priority 		= PRIORITY_001 ;
 8002c06:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f362 0384 	bfi	r3, r2, #2, #3
 8002c10:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG20_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002c14:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002c18:	f36f 0341 	bfc	r3, #1, #1
 8002c1c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG20_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002c20:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002c24:	f36f 0300 	bfc	r3, #0, #1
 8002c28:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG20_INDEX].Pages.messageID 	= MESSAGE20 ;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	ID[MSG20_INDEX].Pages.DA 			= BCM_NODE ;
 8002c32:	2311      	movs	r3, #17
 8002c34:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	ID[MSG20_INDEX].Pages.SA 			= MS2_NODE ;
 8002c38:	2366      	movs	r3, #102	; 0x66
 8002c3a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	BCM_MSG.Message20_ID = ID[MSG20_INDEX].identifier ;
 8002c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c40:	4a31      	ldr	r2, [pc, #196]	; (8002d08 <EEM_SET_IDENTIFIERS+0x548>)
 8002c42:	6593      	str	r3, [r2, #88]	; 0x58

	ID[MSG21_INDEX].Pages.priority 		= PRIORITY_011 ;
 8002c44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c48:	2203      	movs	r2, #3
 8002c4a:	f362 0384 	bfi	r3, r2, #2, #3
 8002c4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG21_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002c52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c56:	f36f 0341 	bfc	r3, #1, #1
 8002c5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG21_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002c5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c62:	f36f 0300 	bfc	r3, #0, #1
 8002c66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG21_INDEX].Pages.messageID 	= MESSAGE21 ;
 8002c6a:	2321      	movs	r3, #33	; 0x21
 8002c6c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	ID[MSG21_INDEX].Pages.DA 			= BCM_NODE;
 8002c70:	2311      	movs	r3, #17
 8002c72:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	ID[MSG21_INDEX].Pages.SA 			= SCB_NODE;
 8002c76:	2333      	movs	r3, #51	; 0x33
 8002c78:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	SCB_MSG.Message21_ID = ID[MSG21_INDEX].identifier ;
 8002c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7e:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <EEM_SET_IDENTIFIERS+0x54c>)
 8002c80:	6013      	str	r3, [r2, #0]

	ID[MSG22_INDEX].Pages.priority 		= PRIORITY_111 ;
 8002c82:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002c86:	f043 031c 	orr.w	r3, r3, #28
 8002c8a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG22_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002c8e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002c92:	f36f 0341 	bfc	r3, #1, #1
 8002c96:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG22_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002c9a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002c9e:	f36f 0300 	bfc	r3, #0, #1
 8002ca2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG22_INDEX].Pages.messageID 	= MESSAGE22 ;
 8002ca6:	2322      	movs	r3, #34	; 0x22
 8002ca8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	ID[MSG22_INDEX].Pages.DA 			= BCM_NODE;
 8002cac:	2311      	movs	r3, #17
 8002cae:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	ID[MSG22_INDEX].Pages.SA 			= TLM_NODE;
 8002cb2:	2388      	movs	r3, #136	; 0x88
 8002cb4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	TLM_MSG.Message22_ID = 	ID[MSG22_INDEX].identifier ;
 8002cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cba:	4a15      	ldr	r2, [pc, #84]	; (8002d10 <EEM_SET_IDENTIFIERS+0x550>)
 8002cbc:	6013      	str	r3, [r2, #0]

	ID[MSG23_INDEX].Pages.priority 		= PRIORITY_111 ;
 8002cbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002cc2:	f043 031c 	orr.w	r3, r3, #28
 8002cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG23_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8002cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002cce:	f36f 0341 	bfc	r3, #1, #1
 8002cd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG23_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8002cd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002cda:	f36f 0300 	bfc	r3, #0, #1
 8002cde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG23_INDEX].Pages.messageID 	= MESSAGE23 ;
 8002ce2:	2323      	movs	r3, #35	; 0x23
 8002ce4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	ID[MSG23_INDEX].Pages.DA 			= BCM_NODE;
 8002ce8:	2311      	movs	r3, #17
 8002cea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	ID[MSG23_INDEX].Pages.SA 			= TLM_NODE;
 8002cee:	2388      	movs	r3, #136	; 0x88
 8002cf0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	TLM_MSG.Message23_ID = 	ID[MSG23_INDEX].identifier ;
 8002cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf6:	4a06      	ldr	r2, [pc, #24]	; (8002d10 <EEM_SET_IDENTIFIERS+0x550>)
 8002cf8:	60d3      	str	r3, [r2, #12]


}
 8002cfa:	bf00      	nop
 8002cfc:	3768      	adds	r7, #104	; 0x68
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000348 	.word	0x20000348
 8002d08:	20000250 	.word	0x20000250
 8002d0c:	200002d8 	.word	0x200002d8
 8002d10:	20000370 	.word	0x20000370

08002d14 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	2110      	movs	r1, #16
 8002d1e:	480c      	ldr	r0, [pc, #48]	; (8002d50 <MCP2515_Initialize+0x3c>)
 8002d20:	f000 fcb6 	bl	8003690 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8002d24:	230a      	movs	r3, #10
 8002d26:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8002d28:	480a      	ldr	r0, [pc, #40]	; (8002d54 <MCP2515_Initialize+0x40>)
 8002d2a:	f001 fdbf 	bl	80048ac <HAL_SPI_GetState>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <MCP2515_Initialize+0x24>
      return true;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e006      	b.n	8002d46 <MCP2515_Initialize+0x32>

    loop--;
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f1      	bne.n	8002d28 <MCP2515_Initialize+0x14>

  return false;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40020000 	.word	0x40020000
 8002d54:	2000002c 	.word	0x2000002c

08002d58 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8002d5e:	2180      	movs	r1, #128	; 0x80
 8002d60:	200f      	movs	r0, #15
 8002d62:	f000 f879 	bl	8002e58 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8002d66:	230a      	movs	r3, #10
 8002d68:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8002d6a:	200e      	movs	r0, #14
 8002d6c:	f000 f830 	bl	8002dd0 <MCP2515_ReadByte>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002d76:	2b80      	cmp	r3, #128	; 0x80
 8002d78:	d101      	bne.n	8002d7e <MCP2515_SetConfigMode+0x26>
      return true;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e006      	b.n	8002d8c <MCP2515_SetConfigMode+0x34>

    loop--;
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1ef      	bne.n	8002d6a <MCP2515_SetConfigMode+0x12>

  return false;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	200f      	movs	r0, #15
 8002d9e:	f000 f85b 	bl	8002e58 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8002da2:	230a      	movs	r3, #10
 8002da4:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8002da6:	200e      	movs	r0, #14
 8002da8:	f000 f812 	bl	8002dd0 <MCP2515_ReadByte>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <MCP2515_SetNormalMode+0x26>
      return true;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e006      	b.n	8002dc8 <MCP2515_SetNormalMode+0x34>

    loop--;
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ef      	bne.n	8002da6 <MCP2515_SetNormalMode+0x12>

  return false;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2110      	movs	r1, #16
 8002dde:	480c      	ldr	r0, [pc, #48]	; (8002e10 <MCP2515_ReadByte+0x40>)
 8002de0:	f000 fc56 	bl	8003690 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8002de4:	2003      	movs	r0, #3
 8002de6:	f000 f901 	bl	8002fec <SPI_Tx>
  SPI_Tx(address);
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 f8fd 	bl	8002fec <SPI_Tx>
  retVal = SPI_Rx();
 8002df2:	f000 f921 	bl	8003038 <SPI_Rx>
 8002df6:	4603      	mov	r3, r0
 8002df8:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	2110      	movs	r1, #16
 8002dfe:	4804      	ldr	r0, [pc, #16]	; (8002e10 <MCP2515_ReadByte+0x40>)
 8002e00:	f000 fc46 	bl	8003690 <HAL_GPIO_WritePin>

  return retVal;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40020000 	.word	0x40020000

08002e14 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	71fb      	strb	r3, [r7, #7]
 8002e20:	4613      	mov	r3, r2
 8002e22:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8002e24:	2200      	movs	r2, #0
 8002e26:	2110      	movs	r1, #16
 8002e28:	480a      	ldr	r0, [pc, #40]	; (8002e54 <MCP2515_ReadRxSequence+0x40>)
 8002e2a:	f000 fc31 	bl	8003690 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f8db 	bl	8002fec <SPI_Tx>
  SPI_RxBuffer(data, length);
 8002e36:	79bb      	ldrb	r3, [r7, #6]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6838      	ldr	r0, [r7, #0]
 8002e3c:	f000 f90c 	bl	8003058 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8002e40:	2201      	movs	r2, #1
 8002e42:	2110      	movs	r1, #16
 8002e44:	4803      	ldr	r0, [pc, #12]	; (8002e54 <MCP2515_ReadRxSequence+0x40>)
 8002e46:	f000 fc23 	bl	8003690 <HAL_GPIO_WritePin>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40020000 	.word	0x40020000

08002e58 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	460a      	mov	r2, r1
 8002e62:	71fb      	strb	r3, [r7, #7]
 8002e64:	4613      	mov	r3, r2
 8002e66:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2110      	movs	r1, #16
 8002e6c:	480b      	ldr	r0, [pc, #44]	; (8002e9c <MCP2515_WriteByte+0x44>)
 8002e6e:	f000 fc0f 	bl	8003690 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8002e72:	2002      	movs	r0, #2
 8002e74:	f000 f8ba 	bl	8002fec <SPI_Tx>
  SPI_Tx(address);
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f8b6 	bl	8002fec <SPI_Tx>
  SPI_Tx(data);
 8002e80:	79bb      	ldrb	r3, [r7, #6]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f8b2 	bl	8002fec <SPI_Tx>

  MCP2515_CS_HIGH();
 8002e88:	2201      	movs	r2, #1
 8002e8a:	2110      	movs	r1, #16
 8002e8c:	4803      	ldr	r0, [pc, #12]	; (8002e9c <MCP2515_WriteByte+0x44>)
 8002e8e:	f000 fbff 	bl	8003690 <HAL_GPIO_WritePin>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40020000 	.word	0x40020000

08002ea0 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	603a      	str	r2, [r7, #0]
 8002eaa:	71fb      	strb	r3, [r7, #7]
 8002eac:	460b      	mov	r3, r1
 8002eae:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2110      	movs	r1, #16
 8002eb4:	480e      	ldr	r0, [pc, #56]	; (8002ef0 <MCP2515_WriteByteSequence+0x50>)
 8002eb6:	f000 fbeb 	bl	8003690 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8002eba:	2002      	movs	r0, #2
 8002ebc:	f000 f896 	bl	8002fec <SPI_Tx>
  SPI_Tx(startAddress);
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f892 	bl	8002fec <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8002ec8:	79ba      	ldrb	r2, [r7, #6]
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	6838      	ldr	r0, [r7, #0]
 8002ed8:	f000 f89a 	bl	8003010 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8002edc:	2201      	movs	r2, #1
 8002ede:	2110      	movs	r1, #16
 8002ee0:	4803      	ldr	r0, [pc, #12]	; (8002ef0 <MCP2515_WriteByteSequence+0x50>)
 8002ee2:	f000 fbd5 	bl	8003690 <HAL_GPIO_WritePin>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40020000 	.word	0x40020000

08002ef4 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	4603      	mov	r3, r0
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	4613      	mov	r3, r2
 8002f04:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8002f06:	2200      	movs	r2, #0
 8002f08:	2110      	movs	r1, #16
 8002f0a:	480e      	ldr	r0, [pc, #56]	; (8002f44 <MCP2515_LoadTxSequence+0x50>)
 8002f0c:	f000 fbc0 	bl	8003690 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 f86a 	bl	8002fec <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8002f18:	2104      	movs	r1, #4
 8002f1a:	68b8      	ldr	r0, [r7, #8]
 8002f1c:	f000 f878 	bl	8003010 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8002f20:	7bbb      	ldrb	r3, [r7, #14]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f862 	bl	8002fec <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8002f28:	7bbb      	ldrb	r3, [r7, #14]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f86f 	bl	8003010 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8002f32:	2201      	movs	r2, #1
 8002f34:	2110      	movs	r1, #16
 8002f36:	4803      	ldr	r0, [pc, #12]	; (8002f44 <MCP2515_LoadTxSequence+0x50>)
 8002f38:	f000 fbaa 	bl	8003690 <HAL_GPIO_WritePin>
}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40020000 	.word	0x40020000

08002f48 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8002f52:	2200      	movs	r2, #0
 8002f54:	2110      	movs	r1, #16
 8002f56:	4808      	ldr	r0, [pc, #32]	; (8002f78 <MCP2515_RequestToSend+0x30>)
 8002f58:	f000 fb9a 	bl	8003690 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f844 	bl	8002fec <SPI_Tx>

  MCP2515_CS_HIGH();
 8002f64:	2201      	movs	r2, #1
 8002f66:	2110      	movs	r1, #16
 8002f68:	4803      	ldr	r0, [pc, #12]	; (8002f78 <MCP2515_RequestToSend+0x30>)
 8002f6a:	f000 fb91 	bl	8003690 <HAL_GPIO_WritePin>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40020000 	.word	0x40020000

08002f7c <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8002f82:	2200      	movs	r2, #0
 8002f84:	2110      	movs	r1, #16
 8002f86:	480a      	ldr	r0, [pc, #40]	; (8002fb0 <MCP2515_ReadStatus+0x34>)
 8002f88:	f000 fb82 	bl	8003690 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 8002f8c:	20a0      	movs	r0, #160	; 0xa0
 8002f8e:	f000 f82d 	bl	8002fec <SPI_Tx>
  retVal = SPI_Rx();
 8002f92:	f000 f851 	bl	8003038 <SPI_Rx>
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	2110      	movs	r1, #16
 8002f9e:	4804      	ldr	r0, [pc, #16]	; (8002fb0 <MCP2515_ReadStatus+0x34>)
 8002fa0:	f000 fb76 	bl	8003690 <HAL_GPIO_WritePin>

  return retVal;
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40020000 	.word	0x40020000

08002fb4 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2110      	movs	r1, #16
 8002fbe:	480a      	ldr	r0, [pc, #40]	; (8002fe8 <MCP2515_GetRxStatus+0x34>)
 8002fc0:	f000 fb66 	bl	8003690 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8002fc4:	20b0      	movs	r0, #176	; 0xb0
 8002fc6:	f000 f811 	bl	8002fec <SPI_Tx>
  retVal = SPI_Rx();
 8002fca:	f000 f835 	bl	8003038 <SPI_Rx>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	2110      	movs	r1, #16
 8002fd6:	4804      	ldr	r0, [pc, #16]	; (8002fe8 <MCP2515_GetRxStatus+0x34>)
 8002fd8:	f000 fb5a 	bl	8003690 <HAL_GPIO_WritePin>

  return retVal;
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40020000 	.word	0x40020000

08002fec <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8002ff6:	1df9      	adds	r1, r7, #7
 8002ff8:	230a      	movs	r3, #10
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4803      	ldr	r0, [pc, #12]	; (800300c <SPI_Tx+0x20>)
 8002ffe:	f001 f866 	bl	80040ce <HAL_SPI_Transmit>
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2000002c 	.word	0x2000002c

08003010 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	b29a      	uxth	r2, r3
 8003020:	230a      	movs	r3, #10
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4803      	ldr	r0, [pc, #12]	; (8003034 <SPI_TxBuffer+0x24>)
 8003026:	f001 f852 	bl	80040ce <HAL_SPI_Transmit>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	2000002c 	.word	0x2000002c

08003038 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800303e:	1df9      	adds	r1, r7, #7
 8003040:	230a      	movs	r3, #10
 8003042:	2201      	movs	r2, #1
 8003044:	4803      	ldr	r0, [pc, #12]	; (8003054 <SPI_Rx+0x1c>)
 8003046:	f001 f97e 	bl	8004346 <HAL_SPI_Receive>
  return retVal;
 800304a:	79fb      	ldrb	r3, [r7, #7]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	2000002c 	.word	0x2000002c

08003058 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	b29a      	uxth	r2, r3
 8003068:	230a      	movs	r3, #10
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4803      	ldr	r0, [pc, #12]	; (800307c <SPI_RxBuffer+0x24>)
 800306e:	f001 f96a 	bl	8004346 <HAL_SPI_Receive>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	2000002c 	.word	0x2000002c

08003080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003084:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <HAL_Init+0x40>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0d      	ldr	r2, [pc, #52]	; (80030c0 <HAL_Init+0x40>)
 800308a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800308e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_Init+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_Init+0x40>)
 8003096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800309a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_Init+0x40>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <HAL_Init+0x40>)
 80030a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a8:	2003      	movs	r0, #3
 80030aa:	f000 f92b 	bl	8003304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ae:	200f      	movs	r0, #15
 80030b0:	f000 f808 	bl	80030c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b4:	f7fd fbe2 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023c00 	.word	0x40023c00

080030c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <HAL_InitTick+0x54>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_InitTick+0x58>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030da:	fbb3 f3f1 	udiv	r3, r3, r1
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f943 	bl	800336e <HAL_SYSTICK_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00e      	b.n	8003110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b0f      	cmp	r3, #15
 80030f6:	d80a      	bhi.n	800310e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f8:	2200      	movs	r2, #0
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	f000 f90b 	bl	800331a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003104:	4a06      	ldr	r2, [pc, #24]	; (8003120 <HAL_InitTick+0x5c>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	e000      	b.n	8003110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000000 	.word	0x20000000
 800311c:	20000008 	.word	0x20000008
 8003120:	20000004 	.word	0x20000004

08003124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_IncTick+0x20>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_IncTick+0x24>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4413      	add	r3, r2
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <HAL_IncTick+0x24>)
 8003136:	6013      	str	r3, [r2, #0]
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000008 	.word	0x20000008
 8003148:	20000388 	.word	0x20000388

0800314c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return uwTick;
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <HAL_GetTick+0x14>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000388 	.word	0x20000388

08003164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003180:	4013      	ands	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800318c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003196:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	60d3      	str	r3, [r2, #12]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b0:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <__NVIC_GetPriorityGrouping+0x18>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	f003 0307 	and.w	r3, r3, #7
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	db0b      	blt.n	80031f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	f003 021f 	and.w	r2, r3, #31
 80031e0:	4907      	ldr	r1, [pc, #28]	; (8003200 <__NVIC_EnableIRQ+0x38>)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2001      	movs	r0, #1
 80031ea:	fa00 f202 	lsl.w	r2, r0, r2
 80031ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000e100 	.word	0xe000e100

08003204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	2b00      	cmp	r3, #0
 8003216:	db0a      	blt.n	800322e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	b2da      	uxtb	r2, r3
 800321c:	490c      	ldr	r1, [pc, #48]	; (8003250 <__NVIC_SetPriority+0x4c>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	0112      	lsls	r2, r2, #4
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	440b      	add	r3, r1
 8003228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800322c:	e00a      	b.n	8003244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4908      	ldr	r1, [pc, #32]	; (8003254 <__NVIC_SetPriority+0x50>)
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	3b04      	subs	r3, #4
 800323c:	0112      	lsls	r2, r2, #4
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	440b      	add	r3, r1
 8003242:	761a      	strb	r2, [r3, #24]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000e100 	.word	0xe000e100
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	; 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f1c3 0307 	rsb	r3, r3, #7
 8003272:	2b04      	cmp	r3, #4
 8003274:	bf28      	it	cs
 8003276:	2304      	movcs	r3, #4
 8003278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	3304      	adds	r3, #4
 800327e:	2b06      	cmp	r3, #6
 8003280:	d902      	bls.n	8003288 <NVIC_EncodePriority+0x30>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3b03      	subs	r3, #3
 8003286:	e000      	b.n	800328a <NVIC_EncodePriority+0x32>
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	f04f 32ff 	mov.w	r2, #4294967295
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	401a      	ands	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a0:	f04f 31ff 	mov.w	r1, #4294967295
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	43d9      	mvns	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	4313      	orrs	r3, r2
         );
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3724      	adds	r7, #36	; 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d0:	d301      	bcc.n	80032d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d2:	2301      	movs	r3, #1
 80032d4:	e00f      	b.n	80032f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <SysTick_Config+0x40>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3b01      	subs	r3, #1
 80032dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032de:	210f      	movs	r1, #15
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	f7ff ff8e 	bl	8003204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <SysTick_Config+0x40>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ee:	4b04      	ldr	r3, [pc, #16]	; (8003300 <SysTick_Config+0x40>)
 80032f0:	2207      	movs	r2, #7
 80032f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	e000e010 	.word	0xe000e010

08003304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff29 	bl	8003164 <__NVIC_SetPriorityGrouping>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800332c:	f7ff ff3e 	bl	80031ac <__NVIC_GetPriorityGrouping>
 8003330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	6978      	ldr	r0, [r7, #20]
 8003338:	f7ff ff8e 	bl	8003258 <NVIC_EncodePriority>
 800333c:	4602      	mov	r2, r0
 800333e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff5d 	bl	8003204 <__NVIC_SetPriority>
}
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff31 	bl	80031c8 <__NVIC_EnableIRQ>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff ffa2 	bl	80032c0 <SysTick_Config>
 800337c:	4603      	mov	r3, r0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e159      	b.n	8003658 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033a4:	2201      	movs	r2, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	f040 8148 	bne.w	8003652 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d005      	beq.n	80033da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d130      	bne.n	800343c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0201 	and.w	r2, r3, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b03      	cmp	r3, #3
 8003446:	d017      	beq.n	8003478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d123      	bne.n	80034cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	08da      	lsrs	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3208      	adds	r2, #8
 800348c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	220f      	movs	r2, #15
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	08da      	lsrs	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3208      	adds	r2, #8
 80034c6:	69b9      	ldr	r1, [r7, #24]
 80034c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0203 	and.w	r2, r3, #3
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80a2 	beq.w	8003652 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b57      	ldr	r3, [pc, #348]	; (8003670 <HAL_GPIO_Init+0x2e8>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	4a56      	ldr	r2, [pc, #344]	; (8003670 <HAL_GPIO_Init+0x2e8>)
 8003518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800351c:	6453      	str	r3, [r2, #68]	; 0x44
 800351e:	4b54      	ldr	r3, [pc, #336]	; (8003670 <HAL_GPIO_Init+0x2e8>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800352a:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_GPIO_Init+0x2ec>)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	3302      	adds	r3, #2
 8003532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	220f      	movs	r2, #15
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a49      	ldr	r2, [pc, #292]	; (8003678 <HAL_GPIO_Init+0x2f0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d019      	beq.n	800358a <HAL_GPIO_Init+0x202>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a48      	ldr	r2, [pc, #288]	; (800367c <HAL_GPIO_Init+0x2f4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_GPIO_Init+0x1fe>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a47      	ldr	r2, [pc, #284]	; (8003680 <HAL_GPIO_Init+0x2f8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00d      	beq.n	8003582 <HAL_GPIO_Init+0x1fa>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a46      	ldr	r2, [pc, #280]	; (8003684 <HAL_GPIO_Init+0x2fc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d007      	beq.n	800357e <HAL_GPIO_Init+0x1f6>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a45      	ldr	r2, [pc, #276]	; (8003688 <HAL_GPIO_Init+0x300>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <HAL_GPIO_Init+0x1f2>
 8003576:	2304      	movs	r3, #4
 8003578:	e008      	b.n	800358c <HAL_GPIO_Init+0x204>
 800357a:	2307      	movs	r3, #7
 800357c:	e006      	b.n	800358c <HAL_GPIO_Init+0x204>
 800357e:	2303      	movs	r3, #3
 8003580:	e004      	b.n	800358c <HAL_GPIO_Init+0x204>
 8003582:	2302      	movs	r3, #2
 8003584:	e002      	b.n	800358c <HAL_GPIO_Init+0x204>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_GPIO_Init+0x204>
 800358a:	2300      	movs	r3, #0
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	f002 0203 	and.w	r2, r2, #3
 8003592:	0092      	lsls	r2, r2, #2
 8003594:	4093      	lsls	r3, r2
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800359c:	4935      	ldr	r1, [pc, #212]	; (8003674 <HAL_GPIO_Init+0x2ec>)
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	089b      	lsrs	r3, r3, #2
 80035a2:	3302      	adds	r3, #2
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035aa:	4b38      	ldr	r3, [pc, #224]	; (800368c <HAL_GPIO_Init+0x304>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ce:	4a2f      	ldr	r2, [pc, #188]	; (800368c <HAL_GPIO_Init+0x304>)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035d4:	4b2d      	ldr	r3, [pc, #180]	; (800368c <HAL_GPIO_Init+0x304>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035f8:	4a24      	ldr	r2, [pc, #144]	; (800368c <HAL_GPIO_Init+0x304>)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035fe:	4b23      	ldr	r3, [pc, #140]	; (800368c <HAL_GPIO_Init+0x304>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	43db      	mvns	r3, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003622:	4a1a      	ldr	r2, [pc, #104]	; (800368c <HAL_GPIO_Init+0x304>)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003628:	4b18      	ldr	r3, [pc, #96]	; (800368c <HAL_GPIO_Init+0x304>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800364c:	4a0f      	ldr	r2, [pc, #60]	; (800368c <HAL_GPIO_Init+0x304>)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3301      	adds	r3, #1
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	2b0f      	cmp	r3, #15
 800365c:	f67f aea2 	bls.w	80033a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	3724      	adds	r7, #36	; 0x24
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
 8003674:	40013800 	.word	0x40013800
 8003678:	40020000 	.word	0x40020000
 800367c:	40020400 	.word	0x40020400
 8003680:	40020800 	.word	0x40020800
 8003684:	40020c00 	.word	0x40020c00
 8003688:	40021000 	.word	0x40021000
 800368c:	40013c00 	.word	0x40013c00

08003690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	807b      	strh	r3, [r7, #2]
 800369c:	4613      	mov	r3, r2
 800369e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036a0:	787b      	ldrb	r3, [r7, #1]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036a6:	887a      	ldrh	r2, [r7, #2]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036ac:	e003      	b.n	80036b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	041a      	lsls	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	619a      	str	r2, [r3, #24]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d006      	beq.n	80036e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036da:	4a05      	ldr	r2, [pc, #20]	; (80036f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f806 	bl	80036f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40013c00 	.word	0x40013c00

080036f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e267      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d075      	beq.n	8003816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800372a:	4b88      	ldr	r3, [pc, #544]	; (800394c <HAL_RCC_OscConfig+0x240>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b04      	cmp	r3, #4
 8003734:	d00c      	beq.n	8003750 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003736:	4b85      	ldr	r3, [pc, #532]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800373e:	2b08      	cmp	r3, #8
 8003740:	d112      	bne.n	8003768 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003742:	4b82      	ldr	r3, [pc, #520]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800374e:	d10b      	bne.n	8003768 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	4b7e      	ldr	r3, [pc, #504]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d05b      	beq.n	8003814 <HAL_RCC_OscConfig+0x108>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d157      	bne.n	8003814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e242      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003770:	d106      	bne.n	8003780 <HAL_RCC_OscConfig+0x74>
 8003772:	4b76      	ldr	r3, [pc, #472]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a75      	ldr	r2, [pc, #468]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e01d      	b.n	80037bc <HAL_RCC_OscConfig+0xb0>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x98>
 800378a:	4b70      	ldr	r3, [pc, #448]	; (800394c <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6f      	ldr	r2, [pc, #444]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b6d      	ldr	r3, [pc, #436]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a6c      	ldr	r2, [pc, #432]	; (800394c <HAL_RCC_OscConfig+0x240>)
 800379c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0xb0>
 80037a4:	4b69      	ldr	r3, [pc, #420]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a68      	ldr	r2, [pc, #416]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80037aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b66      	ldr	r3, [pc, #408]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a65      	ldr	r2, [pc, #404]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80037b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d013      	beq.n	80037ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7ff fcc2 	bl	800314c <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037cc:	f7ff fcbe 	bl	800314c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e207      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b5b      	ldr	r3, [pc, #364]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0xc0>
 80037ea:	e014      	b.n	8003816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7ff fcae 	bl	800314c <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f4:	f7ff fcaa 	bl	800314c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e1f3      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	4b51      	ldr	r3, [pc, #324]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0xe8>
 8003812:	e000      	b.n	8003816 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d063      	beq.n	80038ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003822:	4b4a      	ldr	r3, [pc, #296]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003836:	2b08      	cmp	r3, #8
 8003838:	d11c      	bne.n	8003874 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383a:	4b44      	ldr	r3, [pc, #272]	; (800394c <HAL_RCC_OscConfig+0x240>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d116      	bne.n	8003874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	4b41      	ldr	r3, [pc, #260]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_RCC_OscConfig+0x152>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e1c7      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385e:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4937      	ldr	r1, [pc, #220]	; (800394c <HAL_RCC_OscConfig+0x240>)
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	e03a      	b.n	80038ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387c:	4b34      	ldr	r3, [pc, #208]	; (8003950 <HAL_RCC_OscConfig+0x244>)
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7ff fc63 	bl	800314c <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800388a:	f7ff fc5f 	bl	800314c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e1a8      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389c:	4b2b      	ldr	r3, [pc, #172]	; (800394c <HAL_RCC_OscConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a8:	4b28      	ldr	r3, [pc, #160]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4925      	ldr	r1, [pc, #148]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]
 80038bc:	e015      	b.n	80038ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <HAL_RCC_OscConfig+0x244>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7ff fc42 	bl	800314c <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038cc:	f7ff fc3e 	bl	800314c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e187      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038de:	4b1b      	ldr	r3, [pc, #108]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d036      	beq.n	8003964 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d016      	beq.n	800392c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <HAL_RCC_OscConfig+0x248>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7ff fc22 	bl	800314c <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390c:	f7ff fc1e 	bl	800314c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e167      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x200>
 800392a:	e01b      	b.n	8003964 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_RCC_OscConfig+0x248>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003932:	f7ff fc0b 	bl	800314c <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003938:	e00e      	b.n	8003958 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800393a:	f7ff fc07 	bl	800314c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d907      	bls.n	8003958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e150      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
 800394c:	40023800 	.word	0x40023800
 8003950:	42470000 	.word	0x42470000
 8003954:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 800395a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ea      	bne.n	800393a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8097 	beq.w	8003aa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003976:	4b81      	ldr	r3, [pc, #516]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	4b7d      	ldr	r3, [pc, #500]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	4a7c      	ldr	r2, [pc, #496]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003990:	6413      	str	r3, [r2, #64]	; 0x40
 8003992:	4b7a      	ldr	r3, [pc, #488]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b77      	ldr	r3, [pc, #476]	; (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d118      	bne.n	80039e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ae:	4b74      	ldr	r3, [pc, #464]	; (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a73      	ldr	r2, [pc, #460]	; (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ba:	f7ff fbc7 	bl	800314c <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7ff fbc3 	bl	800314c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e10c      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b6a      	ldr	r3, [pc, #424]	; (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d106      	bne.n	80039f6 <HAL_RCC_OscConfig+0x2ea>
 80039e8:	4b64      	ldr	r3, [pc, #400]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	4a63      	ldr	r2, [pc, #396]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	; 0x70
 80039f4:	e01c      	b.n	8003a30 <HAL_RCC_OscConfig+0x324>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x30c>
 80039fe:	4b5f      	ldr	r3, [pc, #380]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	4a5e      	ldr	r2, [pc, #376]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0a:	4b5c      	ldr	r3, [pc, #368]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	4a5b      	ldr	r2, [pc, #364]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6713      	str	r3, [r2, #112]	; 0x70
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0x324>
 8003a18:	4b58      	ldr	r3, [pc, #352]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4a57      	ldr	r2, [pc, #348]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	6713      	str	r3, [r2, #112]	; 0x70
 8003a24:	4b55      	ldr	r3, [pc, #340]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4a54      	ldr	r2, [pc, #336]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a2a:	f023 0304 	bic.w	r3, r3, #4
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d015      	beq.n	8003a64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7ff fb88 	bl	800314c <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7ff fb84 	bl	800314c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0cb      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a56:	4b49      	ldr	r3, [pc, #292]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0ee      	beq.n	8003a40 <HAL_RCC_OscConfig+0x334>
 8003a62:	e014      	b.n	8003a8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a64:	f7ff fb72 	bl	800314c <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7ff fb6e 	bl	800314c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0b5      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a82:	4b3e      	ldr	r3, [pc, #248]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1ee      	bne.n	8003a6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a94:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	4a38      	ldr	r2, [pc, #224]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80a1 	beq.w	8003bec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aaa:	4b34      	ldr	r3, [pc, #208]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d05c      	beq.n	8003b70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d141      	bne.n	8003b42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	4b31      	ldr	r3, [pc, #196]	; (8003b84 <HAL_RCC_OscConfig+0x478>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7ff fb42 	bl	800314c <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003acc:	f7ff fb3e 	bl	800314c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e087      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ade:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	019b      	lsls	r3, r3, #6
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	3b01      	subs	r3, #1
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	491b      	ldr	r1, [pc, #108]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <HAL_RCC_OscConfig+0x478>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7ff fb17 	bl	800314c <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b22:	f7ff fb13 	bl	800314c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e05c      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b34:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x416>
 8003b40:	e054      	b.n	8003bec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <HAL_RCC_OscConfig+0x478>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7ff fb00 	bl	800314c <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b50:	f7ff fafc 	bl	800314c <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e045      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x444>
 8003b6e:	e03d      	b.n	8003bec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e038      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40007000 	.word	0x40007000
 8003b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <HAL_RCC_OscConfig+0x4ec>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d028      	beq.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d121      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d11a      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d111      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800

08003bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0cc      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c10:	4b68      	ldr	r3, [pc, #416]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d90c      	bls.n	8003c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1e:	4b65      	ldr	r3, [pc, #404]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b63      	ldr	r3, [pc, #396]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0b8      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d020      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c50:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4a58      	ldr	r2, [pc, #352]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c68:	4b53      	ldr	r3, [pc, #332]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a52      	ldr	r2, [pc, #328]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c74:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	494d      	ldr	r1, [pc, #308]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d044      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d107      	bne.n	8003caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d119      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e07f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cba:	4b3f      	ldr	r3, [pc, #252]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e06f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cca:	4b3b      	ldr	r3, [pc, #236]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e067      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cda:	4b37      	ldr	r3, [pc, #220]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f023 0203 	bic.w	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	4934      	ldr	r1, [pc, #208]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cec:	f7ff fa2e 	bl	800314c <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf4:	f7ff fa2a 	bl	800314c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e04f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 020c 	and.w	r2, r3, #12
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d1eb      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d1c:	4b25      	ldr	r3, [pc, #148]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d20c      	bcs.n	8003d44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2a:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d32:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e032      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d50:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4916      	ldr	r1, [pc, #88]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d6e:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	490e      	ldr	r1, [pc, #56]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d82:	f000 f821 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003d86:	4602      	mov	r2, r0
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	490a      	ldr	r1, [pc, #40]	; (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003d94:	5ccb      	ldrb	r3, [r1, r3]
 8003d96:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9a:	4a09      	ldr	r2, [pc, #36]	; (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d9e:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff f98e 	bl	80030c4 <HAL_InitTick>

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40023c00 	.word	0x40023c00
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	08005858 	.word	0x08005858
 8003dc0:	20000000 	.word	0x20000000
 8003dc4:	20000004 	.word	0x20000004

08003dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dcc:	b090      	sub	sp, #64	; 0x40
 8003dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd8:	2300      	movs	r3, #0
 8003dda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003de0:	4b59      	ldr	r3, [pc, #356]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d00d      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x40>
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	f200 80a1 	bhi.w	8003f34 <HAL_RCC_GetSysClockFreq+0x16c>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x34>
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d003      	beq.n	8003e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dfa:	e09b      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dfc:	4b53      	ldr	r3, [pc, #332]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003dfe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e00:	e09b      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e02:	4b53      	ldr	r3, [pc, #332]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e06:	e098      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e08:	4b4f      	ldr	r3, [pc, #316]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e10:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e12:	4b4d      	ldr	r3, [pc, #308]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d028      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1e:	4b4a      	ldr	r3, [pc, #296]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	099b      	lsrs	r3, r3, #6
 8003e24:	2200      	movs	r2, #0
 8003e26:	623b      	str	r3, [r7, #32]
 8003e28:	627a      	str	r2, [r7, #36]	; 0x24
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e30:	2100      	movs	r1, #0
 8003e32:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e34:	fb03 f201 	mul.w	r2, r3, r1
 8003e38:	2300      	movs	r3, #0
 8003e3a:	fb00 f303 	mul.w	r3, r0, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	4a43      	ldr	r2, [pc, #268]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e42:	fba0 1202 	umull	r1, r2, r0, r2
 8003e46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e48:	460a      	mov	r2, r1
 8003e4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e4e:	4413      	add	r3, r2
 8003e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e54:	2200      	movs	r2, #0
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	61fa      	str	r2, [r7, #28]
 8003e5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e62:	f7fc f9b7 	bl	80001d4 <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e6e:	e053      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e70:	4b35      	ldr	r3, [pc, #212]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	2200      	movs	r2, #0
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	617a      	str	r2, [r7, #20]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e82:	f04f 0b00 	mov.w	fp, #0
 8003e86:	4652      	mov	r2, sl
 8003e88:	465b      	mov	r3, fp
 8003e8a:	f04f 0000 	mov.w	r0, #0
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	0159      	lsls	r1, r3, #5
 8003e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e98:	0150      	lsls	r0, r2, #5
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	ebb2 080a 	subs.w	r8, r2, sl
 8003ea2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003eb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003eb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003eba:	ebb2 0408 	subs.w	r4, r2, r8
 8003ebe:	eb63 0509 	sbc.w	r5, r3, r9
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	00eb      	lsls	r3, r5, #3
 8003ecc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ed0:	00e2      	lsls	r2, r4, #3
 8003ed2:	4614      	mov	r4, r2
 8003ed4:	461d      	mov	r5, r3
 8003ed6:	eb14 030a 	adds.w	r3, r4, sl
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	eb45 030b 	adc.w	r3, r5, fp
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eee:	4629      	mov	r1, r5
 8003ef0:	028b      	lsls	r3, r1, #10
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ef8:	4621      	mov	r1, r4
 8003efa:	028a      	lsls	r2, r1, #10
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f02:	2200      	movs	r2, #0
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	60fa      	str	r2, [r7, #12]
 8003f08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f0c:	f7fc f962 	bl	80001d4 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4613      	mov	r3, r2
 8003f16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	3301      	adds	r3, #1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f32:	e002      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003f36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3740      	adds	r7, #64	; 0x40
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	017d7840 	.word	0x017d7840

08003f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000000 	.word	0x20000000

08003f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f70:	f7ff fff0 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	0a9b      	lsrs	r3, r3, #10
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	4903      	ldr	r1, [pc, #12]	; (8003f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	08005868 	.word	0x08005868

08003f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f98:	f7ff ffdc 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	0b5b      	lsrs	r3, r3, #13
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	4903      	ldr	r1, [pc, #12]	; (8003fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003faa:	5ccb      	ldrb	r3, [r1, r3]
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	08005868 	.word	0x08005868

08003fbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e07b      	b.n	80040c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d108      	bne.n	8003fe8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fde:	d009      	beq.n	8003ff4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	61da      	str	r2, [r3, #28]
 8003fe6:	e005      	b.n	8003ff4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fc fc5c 	bl	80008cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	ea42 0103 	orr.w	r1, r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004080:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	f003 0104 	and.w	r1, r3, #4
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	f003 0210 	and.w	r2, r3, #16
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b088      	sub	sp, #32
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	4613      	mov	r3, r2
 80040dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_SPI_Transmit+0x22>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e126      	b.n	800433e <HAL_SPI_Transmit+0x270>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040f8:	f7ff f828 	bl	800314c <HAL_GetTick>
 80040fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d002      	beq.n	8004114 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800410e:	2302      	movs	r3, #2
 8004110:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004112:	e10b      	b.n	800432c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_SPI_Transmit+0x52>
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d102      	bne.n	8004126 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004124:	e102      	b.n	800432c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2203      	movs	r2, #3
 800412a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	88fa      	ldrh	r2, [r7, #6]
 800413e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800416c:	d10f      	bne.n	800418e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800417c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800418c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d007      	beq.n	80041ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b4:	d14b      	bne.n	800424e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <HAL_SPI_Transmit+0xf6>
 80041be:	8afb      	ldrh	r3, [r7, #22]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d13e      	bne.n	8004242 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	881a      	ldrh	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	1c9a      	adds	r2, r3, #2
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041e8:	e02b      	b.n	8004242 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d112      	bne.n	800421e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	881a      	ldrh	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	1c9a      	adds	r2, r3, #2
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	86da      	strh	r2, [r3, #54]	; 0x36
 800421c:	e011      	b.n	8004242 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800421e:	f7fe ff95 	bl	800314c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d803      	bhi.n	8004236 <HAL_SPI_Transmit+0x168>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d102      	bne.n	800423c <HAL_SPI_Transmit+0x16e>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004240:	e074      	b.n	800432c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ce      	bne.n	80041ea <HAL_SPI_Transmit+0x11c>
 800424c:	e04c      	b.n	80042e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_SPI_Transmit+0x18e>
 8004256:	8afb      	ldrh	r3, [r7, #22]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d140      	bne.n	80042de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	330c      	adds	r3, #12
 8004266:	7812      	ldrb	r2, [r2, #0]
 8004268:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004282:	e02c      	b.n	80042de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b02      	cmp	r3, #2
 8004290:	d113      	bne.n	80042ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	330c      	adds	r3, #12
 800429c:	7812      	ldrb	r2, [r2, #0]
 800429e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80042b8:	e011      	b.n	80042de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ba:	f7fe ff47 	bl	800314c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d803      	bhi.n	80042d2 <HAL_SPI_Transmit+0x204>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d102      	bne.n	80042d8 <HAL_SPI_Transmit+0x20a>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042dc:	e026      	b.n	800432c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1cd      	bne.n	8004284 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	6839      	ldr	r1, [r7, #0]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fbd9 	bl	8004aa4 <SPI_EndRxTxTransaction>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e000      	b.n	800432c <HAL_SPI_Transmit+0x25e>
  }

error:
 800432a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800433c:	7ffb      	ldrb	r3, [r7, #31]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b088      	sub	sp, #32
 800434a:	af02      	add	r7, sp, #8
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	603b      	str	r3, [r7, #0]
 8004352:	4613      	mov	r3, r2
 8004354:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004362:	d112      	bne.n	800438a <HAL_SPI_Receive+0x44>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10e      	bne.n	800438a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2204      	movs	r2, #4
 8004370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004374:	88fa      	ldrh	r2, [r7, #6]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	4613      	mov	r3, r2
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f8f1 	bl	8004568 <HAL_SPI_TransmitReceive>
 8004386:	4603      	mov	r3, r0
 8004388:	e0ea      	b.n	8004560 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_SPI_Receive+0x52>
 8004394:	2302      	movs	r3, #2
 8004396:	e0e3      	b.n	8004560 <HAL_SPI_Receive+0x21a>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043a0:	f7fe fed4 	bl	800314c <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d002      	beq.n	80043b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80043b2:	2302      	movs	r3, #2
 80043b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043b6:	e0ca      	b.n	800454e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_SPI_Receive+0x7e>
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d102      	bne.n	80043ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043c8:	e0c1      	b.n	800454e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2204      	movs	r2, #4
 80043ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	88fa      	ldrh	r2, [r7, #6]
 80043e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004410:	d10f      	bne.n	8004432 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004420:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004430:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	d007      	beq.n	8004450 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800444e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d162      	bne.n	800451e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004458:	e02e      	b.n	80044b8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d115      	bne.n	8004494 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f103 020c 	add.w	r2, r3, #12
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	7812      	ldrb	r2, [r2, #0]
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004492:	e011      	b.n	80044b8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004494:	f7fe fe5a 	bl	800314c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d803      	bhi.n	80044ac <HAL_SPI_Receive+0x166>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	d102      	bne.n	80044b2 <HAL_SPI_Receive+0x16c>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d102      	bne.n	80044b8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80044b6:	e04a      	b.n	800454e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1cb      	bne.n	800445a <HAL_SPI_Receive+0x114>
 80044c2:	e031      	b.n	8004528 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d113      	bne.n	80044fa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	b292      	uxth	r2, r2
 80044de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	1c9a      	adds	r2, r3, #2
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044f8:	e011      	b.n	800451e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044fa:	f7fe fe27 	bl	800314c <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d803      	bhi.n	8004512 <HAL_SPI_Receive+0x1cc>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d102      	bne.n	8004518 <HAL_SPI_Receive+0x1d2>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d102      	bne.n	800451e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800451c:	e017      	b.n	800454e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1cd      	bne.n	80044c4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	6839      	ldr	r1, [r7, #0]
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 fa53 	bl	80049d8 <SPI_EndRxTransaction>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
 800454a:	e000      	b.n	800454e <HAL_SPI_Receive+0x208>
  }

error :
 800454c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800455e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08c      	sub	sp, #48	; 0x30
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004576:	2301      	movs	r3, #1
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_SPI_TransmitReceive+0x26>
 800458a:	2302      	movs	r3, #2
 800458c:	e18a      	b.n	80048a4 <HAL_SPI_TransmitReceive+0x33c>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004596:	f7fe fdd9 	bl	800314c <HAL_GetTick>
 800459a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045ac:	887b      	ldrh	r3, [r7, #2]
 80045ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d00f      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x70>
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045be:	d107      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d103      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x68>
 80045c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d003      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80045d0:	2302      	movs	r3, #2
 80045d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045d6:	e15b      	b.n	8004890 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_SPI_TransmitReceive+0x82>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_SPI_TransmitReceive+0x82>
 80045e4:	887b      	ldrh	r3, [r7, #2]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d103      	bne.n	80045f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045f0:	e14e      	b.n	8004890 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d003      	beq.n	8004606 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2205      	movs	r2, #5
 8004602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	887a      	ldrh	r2, [r7, #2]
 8004616:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	887a      	ldrh	r2, [r7, #2]
 800461c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	887a      	ldrh	r2, [r7, #2]
 8004628:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	887a      	ldrh	r2, [r7, #2]
 800462e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	d007      	beq.n	800465a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004658:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004662:	d178      	bne.n	8004756 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_SPI_TransmitReceive+0x10a>
 800466c:	8b7b      	ldrh	r3, [r7, #26]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d166      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	881a      	ldrh	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	1c9a      	adds	r2, r3, #2
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004696:	e053      	b.n	8004740 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d11b      	bne.n	80046de <HAL_SPI_TransmitReceive+0x176>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d016      	beq.n	80046de <HAL_SPI_TransmitReceive+0x176>
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d113      	bne.n	80046de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	881a      	ldrh	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	1c9a      	adds	r2, r3, #2
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d119      	bne.n	8004720 <HAL_SPI_TransmitReceive+0x1b8>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d014      	beq.n	8004720 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	b292      	uxth	r2, r2
 8004702:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	1c9a      	adds	r2, r3, #2
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800471c:	2301      	movs	r3, #1
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004720:	f7fe fd14 	bl	800314c <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800472c:	429a      	cmp	r2, r3
 800472e:	d807      	bhi.n	8004740 <HAL_SPI_TransmitReceive+0x1d8>
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004736:	d003      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800473e:	e0a7      	b.n	8004890 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1a6      	bne.n	8004698 <HAL_SPI_TransmitReceive+0x130>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1a1      	bne.n	8004698 <HAL_SPI_TransmitReceive+0x130>
 8004754:	e07c      	b.n	8004850 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <HAL_SPI_TransmitReceive+0x1fc>
 800475e:	8b7b      	ldrh	r3, [r7, #26]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d16b      	bne.n	800483c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	7812      	ldrb	r2, [r2, #0]
 8004770:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800478a:	e057      	b.n	800483c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b02      	cmp	r3, #2
 8004798:	d11c      	bne.n	80047d4 <HAL_SPI_TransmitReceive+0x26c>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d017      	beq.n	80047d4 <HAL_SPI_TransmitReceive+0x26c>
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d114      	bne.n	80047d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	330c      	adds	r3, #12
 80047b4:	7812      	ldrb	r2, [r2, #0]
 80047b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d119      	bne.n	8004816 <HAL_SPI_TransmitReceive+0x2ae>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d014      	beq.n	8004816 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004812:	2301      	movs	r3, #1
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004816:	f7fe fc99 	bl	800314c <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004822:	429a      	cmp	r2, r3
 8004824:	d803      	bhi.n	800482e <HAL_SPI_TransmitReceive+0x2c6>
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d102      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x2cc>
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	2b00      	cmp	r3, #0
 8004832:	d103      	bne.n	800483c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800483a:	e029      	b.n	8004890 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1a2      	bne.n	800478c <HAL_SPI_TransmitReceive+0x224>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d19d      	bne.n	800478c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004852:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f925 	bl	8004aa4 <SPI_EndRxTxTransaction>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d006      	beq.n	800486e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800486c:	e010      	b.n	8004890 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10b      	bne.n	800488e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	e000      	b.n	8004890 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800488e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3730      	adds	r7, #48	; 0x30
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ba:	b2db      	uxtb	r3, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048d8:	f7fe fc38 	bl	800314c <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	4413      	add	r3, r2
 80048e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048e8:	f7fe fc30 	bl	800314c <HAL_GetTick>
 80048ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048ee:	4b39      	ldr	r3, [pc, #228]	; (80049d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	015b      	lsls	r3, r3, #5
 80048f4:	0d1b      	lsrs	r3, r3, #20
 80048f6:	69fa      	ldr	r2, [r7, #28]
 80048f8:	fb02 f303 	mul.w	r3, r2, r3
 80048fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048fe:	e054      	b.n	80049aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004906:	d050      	beq.n	80049aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004908:	f7fe fc20 	bl	800314c <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	429a      	cmp	r2, r3
 8004916:	d902      	bls.n	800491e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d13d      	bne.n	800499a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800492c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004936:	d111      	bne.n	800495c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004940:	d004      	beq.n	800494c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494a:	d107      	bne.n	800495c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004964:	d10f      	bne.n	8004986 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004984:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e017      	b.n	80049ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4013      	ands	r3, r2
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	bf0c      	ite	eq
 80049ba:	2301      	moveq	r3, #1
 80049bc:	2300      	movne	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d19b      	bne.n	8004900 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000000 	.word	0x20000000

080049d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ec:	d111      	bne.n	8004a12 <SPI_EndRxTransaction+0x3a>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f6:	d004      	beq.n	8004a02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a00:	d107      	bne.n	8004a12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a1a:	d12a      	bne.n	8004a72 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a24:	d012      	beq.n	8004a4c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2180      	movs	r1, #128	; 0x80
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f7ff ff49 	bl	80048c8 <SPI_WaitFlagStateUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d02d      	beq.n	8004a98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	f043 0220 	orr.w	r2, r3, #32
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e026      	b.n	8004a9a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2200      	movs	r2, #0
 8004a54:	2101      	movs	r1, #1
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff ff36 	bl	80048c8 <SPI_WaitFlagStateUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01a      	beq.n	8004a98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e013      	b.n	8004a9a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff ff23 	bl	80048c8 <SPI_WaitFlagStateUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e000      	b.n	8004a9a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ab0:	4b1b      	ldr	r3, [pc, #108]	; (8004b20 <SPI_EndRxTxTransaction+0x7c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <SPI_EndRxTxTransaction+0x80>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	0d5b      	lsrs	r3, r3, #21
 8004abc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ac0:	fb02 f303 	mul.w	r3, r2, r3
 8004ac4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ace:	d112      	bne.n	8004af6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2180      	movs	r1, #128	; 0x80
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f7ff fef4 	bl	80048c8 <SPI_WaitFlagStateUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d016      	beq.n	8004b14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aea:	f043 0220 	orr.w	r2, r3, #32
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e00f      	b.n	8004b16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0c:	2b80      	cmp	r3, #128	; 0x80
 8004b0e:	d0f2      	beq.n	8004af6 <SPI_EndRxTxTransaction+0x52>
 8004b10:	e000      	b.n	8004b14 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b12:	bf00      	nop
  }

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000000 	.word	0x20000000
 8004b24:	165e9f81 	.word	0x165e9f81

08004b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e041      	b.n	8004bbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fb ff04 	bl	800095c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3304      	adds	r3, #4
 8004b64:	4619      	mov	r1, r3
 8004b66:	4610      	mov	r0, r2
 8004b68:	f000 f8f0 	bl	8004d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e0ae      	b.n	8004d44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b0c      	cmp	r3, #12
 8004bf2:	f200 809f 	bhi.w	8004d34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004bf6:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c31 	.word	0x08004c31
 8004c00:	08004d35 	.word	0x08004d35
 8004c04:	08004d35 	.word	0x08004d35
 8004c08:	08004d35 	.word	0x08004d35
 8004c0c:	08004c71 	.word	0x08004c71
 8004c10:	08004d35 	.word	0x08004d35
 8004c14:	08004d35 	.word	0x08004d35
 8004c18:	08004d35 	.word	0x08004d35
 8004c1c:	08004cb3 	.word	0x08004cb3
 8004c20:	08004d35 	.word	0x08004d35
 8004c24:	08004d35 	.word	0x08004d35
 8004c28:	08004d35 	.word	0x08004d35
 8004c2c:	08004cf3 	.word	0x08004cf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f908 	bl	8004e4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699a      	ldr	r2, [r3, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0208 	orr.w	r2, r2, #8
 8004c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0204 	bic.w	r2, r2, #4
 8004c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6999      	ldr	r1, [r3, #24]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	691a      	ldr	r2, [r3, #16]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	619a      	str	r2, [r3, #24]
      break;
 8004c6e:	e064      	b.n	8004d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f94e 	bl	8004f18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6999      	ldr	r1, [r3, #24]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	021a      	lsls	r2, r3, #8
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	619a      	str	r2, [r3, #24]
      break;
 8004cb0:	e043      	b.n	8004d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 f999 	bl	8004ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69da      	ldr	r2, [r3, #28]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0208 	orr.w	r2, r2, #8
 8004ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0204 	bic.w	r2, r2, #4
 8004cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69d9      	ldr	r1, [r3, #28]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	61da      	str	r2, [r3, #28]
      break;
 8004cf0:	e023      	b.n	8004d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 f9e3 	bl	80050c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69da      	ldr	r2, [r3, #28]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69d9      	ldr	r1, [r3, #28]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	021a      	lsls	r2, r3, #8
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	61da      	str	r2, [r3, #28]
      break;
 8004d32:	e002      	b.n	8004d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	75fb      	strb	r3, [r7, #23]
      break;
 8004d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a34      	ldr	r2, [pc, #208]	; (8004e30 <TIM_Base_SetConfig+0xe4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00f      	beq.n	8004d84 <TIM_Base_SetConfig+0x38>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6a:	d00b      	beq.n	8004d84 <TIM_Base_SetConfig+0x38>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a31      	ldr	r2, [pc, #196]	; (8004e34 <TIM_Base_SetConfig+0xe8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d007      	beq.n	8004d84 <TIM_Base_SetConfig+0x38>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a30      	ldr	r2, [pc, #192]	; (8004e38 <TIM_Base_SetConfig+0xec>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d003      	beq.n	8004d84 <TIM_Base_SetConfig+0x38>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a2f      	ldr	r2, [pc, #188]	; (8004e3c <TIM_Base_SetConfig+0xf0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d108      	bne.n	8004d96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a25      	ldr	r2, [pc, #148]	; (8004e30 <TIM_Base_SetConfig+0xe4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01b      	beq.n	8004dd6 <TIM_Base_SetConfig+0x8a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da4:	d017      	beq.n	8004dd6 <TIM_Base_SetConfig+0x8a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a22      	ldr	r2, [pc, #136]	; (8004e34 <TIM_Base_SetConfig+0xe8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <TIM_Base_SetConfig+0x8a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <TIM_Base_SetConfig+0xec>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00f      	beq.n	8004dd6 <TIM_Base_SetConfig+0x8a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <TIM_Base_SetConfig+0xf0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00b      	beq.n	8004dd6 <TIM_Base_SetConfig+0x8a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <TIM_Base_SetConfig+0xf4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d007      	beq.n	8004dd6 <TIM_Base_SetConfig+0x8a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a1e      	ldr	r2, [pc, #120]	; (8004e44 <TIM_Base_SetConfig+0xf8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_Base_SetConfig+0x8a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a1d      	ldr	r2, [pc, #116]	; (8004e48 <TIM_Base_SetConfig+0xfc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d108      	bne.n	8004de8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a08      	ldr	r2, [pc, #32]	; (8004e30 <TIM_Base_SetConfig+0xe4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d103      	bne.n	8004e1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	615a      	str	r2, [r3, #20]
}
 8004e22:	bf00      	nop
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800
 8004e3c:	40000c00 	.word	0x40000c00
 8004e40:	40014000 	.word	0x40014000
 8004e44:	40014400 	.word	0x40014400
 8004e48:	40014800 	.word	0x40014800

08004e4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f023 0201 	bic.w	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0303 	bic.w	r3, r3, #3
 8004e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f023 0302 	bic.w	r3, r3, #2
 8004e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <TIM_OC1_SetConfig+0xc8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d10c      	bne.n	8004ec2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f023 0308 	bic.w	r3, r3, #8
 8004eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f023 0304 	bic.w	r3, r3, #4
 8004ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a13      	ldr	r2, [pc, #76]	; (8004f14 <TIM_OC1_SetConfig+0xc8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d111      	bne.n	8004eee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	621a      	str	r2, [r3, #32]
}
 8004f08:	bf00      	nop
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	40010000 	.word	0x40010000

08004f18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f023 0210 	bic.w	r2, r3, #16
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f023 0320 	bic.w	r3, r3, #32
 8004f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a1e      	ldr	r2, [pc, #120]	; (8004fec <TIM_OC2_SetConfig+0xd4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d10d      	bne.n	8004f94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a15      	ldr	r2, [pc, #84]	; (8004fec <TIM_OC2_SetConfig+0xd4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d113      	bne.n	8004fc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004faa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40010000 	.word	0x40010000

08004ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0303 	bic.w	r3, r3, #3
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1d      	ldr	r2, [pc, #116]	; (80050c0 <TIM_OC3_SetConfig+0xd0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d10d      	bne.n	800506a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a14      	ldr	r2, [pc, #80]	; (80050c0 <TIM_OC3_SetConfig+0xd0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d113      	bne.n	800509a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	621a      	str	r2, [r3, #32]
}
 80050b4:	bf00      	nop
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	40010000 	.word	0x40010000

080050c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800510e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	031b      	lsls	r3, r3, #12
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a10      	ldr	r2, [pc, #64]	; (8005160 <TIM_OC4_SetConfig+0x9c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d109      	bne.n	8005138 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800512a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	019b      	lsls	r3, r3, #6
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	621a      	str	r2, [r3, #32]
}
 8005152:	bf00      	nop
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40010000 	.word	0x40010000

08005164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005178:	2302      	movs	r3, #2
 800517a:	e050      	b.n	800521e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1c      	ldr	r2, [pc, #112]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d018      	beq.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d013      	beq.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a18      	ldr	r2, [pc, #96]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00e      	beq.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a16      	ldr	r2, [pc, #88]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d009      	beq.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a15      	ldr	r2, [pc, #84]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d004      	beq.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a13      	ldr	r2, [pc, #76]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d10c      	bne.n	800520c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	4313      	orrs	r3, r2
 8005202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40010000 	.word	0x40010000
 8005230:	40000400 	.word	0x40000400
 8005234:	40000800 	.word	0x40000800
 8005238:	40000c00 	.word	0x40000c00
 800523c:	40014000 	.word	0x40014000

08005240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e03f      	b.n	80052d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fb fbd0 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2224      	movs	r2, #36	; 0x24
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f829 	bl	80052dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052e0:	b0c0      	sub	sp, #256	; 0x100
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	68d9      	ldr	r1, [r3, #12]
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	ea40 0301 	orr.w	r3, r0, r1
 8005304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	431a      	orrs	r2, r3
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	431a      	orrs	r2, r3
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005334:	f021 010c 	bic.w	r1, r1, #12
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005342:	430b      	orrs	r3, r1
 8005344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005356:	6999      	ldr	r1, [r3, #24]
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	ea40 0301 	orr.w	r3, r0, r1
 8005362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4b8f      	ldr	r3, [pc, #572]	; (80055a8 <UART_SetConfig+0x2cc>)
 800536c:	429a      	cmp	r2, r3
 800536e:	d005      	beq.n	800537c <UART_SetConfig+0xa0>
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4b8d      	ldr	r3, [pc, #564]	; (80055ac <UART_SetConfig+0x2d0>)
 8005378:	429a      	cmp	r2, r3
 800537a:	d104      	bne.n	8005386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800537c:	f7fe fe0a 	bl	8003f94 <HAL_RCC_GetPCLK2Freq>
 8005380:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005384:	e003      	b.n	800538e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005386:	f7fe fdf1 	bl	8003f6c <HAL_RCC_GetPCLK1Freq>
 800538a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005398:	f040 810c 	bne.w	80055b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800539c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053a0:	2200      	movs	r2, #0
 80053a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053ae:	4622      	mov	r2, r4
 80053b0:	462b      	mov	r3, r5
 80053b2:	1891      	adds	r1, r2, r2
 80053b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80053b6:	415b      	adcs	r3, r3
 80053b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053be:	4621      	mov	r1, r4
 80053c0:	eb12 0801 	adds.w	r8, r2, r1
 80053c4:	4629      	mov	r1, r5
 80053c6:	eb43 0901 	adc.w	r9, r3, r1
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053de:	4690      	mov	r8, r2
 80053e0:	4699      	mov	r9, r3
 80053e2:	4623      	mov	r3, r4
 80053e4:	eb18 0303 	adds.w	r3, r8, r3
 80053e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053ec:	462b      	mov	r3, r5
 80053ee:	eb49 0303 	adc.w	r3, r9, r3
 80053f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005402:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800540a:	460b      	mov	r3, r1
 800540c:	18db      	adds	r3, r3, r3
 800540e:	653b      	str	r3, [r7, #80]	; 0x50
 8005410:	4613      	mov	r3, r2
 8005412:	eb42 0303 	adc.w	r3, r2, r3
 8005416:	657b      	str	r3, [r7, #84]	; 0x54
 8005418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800541c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005420:	f7fa fed8 	bl	80001d4 <__aeabi_uldivmod>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4b61      	ldr	r3, [pc, #388]	; (80055b0 <UART_SetConfig+0x2d4>)
 800542a:	fba3 2302 	umull	r2, r3, r3, r2
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	011c      	lsls	r4, r3, #4
 8005432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005436:	2200      	movs	r2, #0
 8005438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800543c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005444:	4642      	mov	r2, r8
 8005446:	464b      	mov	r3, r9
 8005448:	1891      	adds	r1, r2, r2
 800544a:	64b9      	str	r1, [r7, #72]	; 0x48
 800544c:	415b      	adcs	r3, r3
 800544e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005454:	4641      	mov	r1, r8
 8005456:	eb12 0a01 	adds.w	sl, r2, r1
 800545a:	4649      	mov	r1, r9
 800545c:	eb43 0b01 	adc.w	fp, r3, r1
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800546c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005474:	4692      	mov	sl, r2
 8005476:	469b      	mov	fp, r3
 8005478:	4643      	mov	r3, r8
 800547a:	eb1a 0303 	adds.w	r3, sl, r3
 800547e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005482:	464b      	mov	r3, r9
 8005484:	eb4b 0303 	adc.w	r3, fp, r3
 8005488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005498:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800549c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054a0:	460b      	mov	r3, r1
 80054a2:	18db      	adds	r3, r3, r3
 80054a4:	643b      	str	r3, [r7, #64]	; 0x40
 80054a6:	4613      	mov	r3, r2
 80054a8:	eb42 0303 	adc.w	r3, r2, r3
 80054ac:	647b      	str	r3, [r7, #68]	; 0x44
 80054ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054b6:	f7fa fe8d 	bl	80001d4 <__aeabi_uldivmod>
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	4611      	mov	r1, r2
 80054c0:	4b3b      	ldr	r3, [pc, #236]	; (80055b0 <UART_SetConfig+0x2d4>)
 80054c2:	fba3 2301 	umull	r2, r3, r3, r1
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	2264      	movs	r2, #100	; 0x64
 80054ca:	fb02 f303 	mul.w	r3, r2, r3
 80054ce:	1acb      	subs	r3, r1, r3
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054d6:	4b36      	ldr	r3, [pc, #216]	; (80055b0 <UART_SetConfig+0x2d4>)
 80054d8:	fba3 2302 	umull	r2, r3, r3, r2
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054e4:	441c      	add	r4, r3
 80054e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054f8:	4642      	mov	r2, r8
 80054fa:	464b      	mov	r3, r9
 80054fc:	1891      	adds	r1, r2, r2
 80054fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005500:	415b      	adcs	r3, r3
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005508:	4641      	mov	r1, r8
 800550a:	1851      	adds	r1, r2, r1
 800550c:	6339      	str	r1, [r7, #48]	; 0x30
 800550e:	4649      	mov	r1, r9
 8005510:	414b      	adcs	r3, r1
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005520:	4659      	mov	r1, fp
 8005522:	00cb      	lsls	r3, r1, #3
 8005524:	4651      	mov	r1, sl
 8005526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800552a:	4651      	mov	r1, sl
 800552c:	00ca      	lsls	r2, r1, #3
 800552e:	4610      	mov	r0, r2
 8005530:	4619      	mov	r1, r3
 8005532:	4603      	mov	r3, r0
 8005534:	4642      	mov	r2, r8
 8005536:	189b      	adds	r3, r3, r2
 8005538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800553c:	464b      	mov	r3, r9
 800553e:	460a      	mov	r2, r1
 8005540:	eb42 0303 	adc.w	r3, r2, r3
 8005544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005554:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800555c:	460b      	mov	r3, r1
 800555e:	18db      	adds	r3, r3, r3
 8005560:	62bb      	str	r3, [r7, #40]	; 0x28
 8005562:	4613      	mov	r3, r2
 8005564:	eb42 0303 	adc.w	r3, r2, r3
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800556a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800556e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005572:	f7fa fe2f 	bl	80001d4 <__aeabi_uldivmod>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <UART_SetConfig+0x2d4>)
 800557c:	fba3 1302 	umull	r1, r3, r3, r2
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	2164      	movs	r1, #100	; 0x64
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	3332      	adds	r3, #50	; 0x32
 800558e:	4a08      	ldr	r2, [pc, #32]	; (80055b0 <UART_SetConfig+0x2d4>)
 8005590:	fba2 2303 	umull	r2, r3, r2, r3
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	f003 0207 	and.w	r2, r3, #7
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4422      	add	r2, r4
 80055a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055a4:	e105      	b.n	80057b2 <UART_SetConfig+0x4d6>
 80055a6:	bf00      	nop
 80055a8:	40011000 	.word	0x40011000
 80055ac:	40011400 	.word	0x40011400
 80055b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055b8:	2200      	movs	r2, #0
 80055ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055c6:	4642      	mov	r2, r8
 80055c8:	464b      	mov	r3, r9
 80055ca:	1891      	adds	r1, r2, r2
 80055cc:	6239      	str	r1, [r7, #32]
 80055ce:	415b      	adcs	r3, r3
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
 80055d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055d6:	4641      	mov	r1, r8
 80055d8:	1854      	adds	r4, r2, r1
 80055da:	4649      	mov	r1, r9
 80055dc:	eb43 0501 	adc.w	r5, r3, r1
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	00eb      	lsls	r3, r5, #3
 80055ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ee:	00e2      	lsls	r2, r4, #3
 80055f0:	4614      	mov	r4, r2
 80055f2:	461d      	mov	r5, r3
 80055f4:	4643      	mov	r3, r8
 80055f6:	18e3      	adds	r3, r4, r3
 80055f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055fc:	464b      	mov	r3, r9
 80055fe:	eb45 0303 	adc.w	r3, r5, r3
 8005602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005616:	f04f 0200 	mov.w	r2, #0
 800561a:	f04f 0300 	mov.w	r3, #0
 800561e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005622:	4629      	mov	r1, r5
 8005624:	008b      	lsls	r3, r1, #2
 8005626:	4621      	mov	r1, r4
 8005628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800562c:	4621      	mov	r1, r4
 800562e:	008a      	lsls	r2, r1, #2
 8005630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005634:	f7fa fdce 	bl	80001d4 <__aeabi_uldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4b60      	ldr	r3, [pc, #384]	; (80057c0 <UART_SetConfig+0x4e4>)
 800563e:	fba3 2302 	umull	r2, r3, r3, r2
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	011c      	lsls	r4, r3, #4
 8005646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800564a:	2200      	movs	r2, #0
 800564c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005658:	4642      	mov	r2, r8
 800565a:	464b      	mov	r3, r9
 800565c:	1891      	adds	r1, r2, r2
 800565e:	61b9      	str	r1, [r7, #24]
 8005660:	415b      	adcs	r3, r3
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005668:	4641      	mov	r1, r8
 800566a:	1851      	adds	r1, r2, r1
 800566c:	6139      	str	r1, [r7, #16]
 800566e:	4649      	mov	r1, r9
 8005670:	414b      	adcs	r3, r1
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005680:	4659      	mov	r1, fp
 8005682:	00cb      	lsls	r3, r1, #3
 8005684:	4651      	mov	r1, sl
 8005686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800568a:	4651      	mov	r1, sl
 800568c:	00ca      	lsls	r2, r1, #3
 800568e:	4610      	mov	r0, r2
 8005690:	4619      	mov	r1, r3
 8005692:	4603      	mov	r3, r0
 8005694:	4642      	mov	r2, r8
 8005696:	189b      	adds	r3, r3, r2
 8005698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800569c:	464b      	mov	r3, r9
 800569e:	460a      	mov	r2, r1
 80056a0:	eb42 0303 	adc.w	r3, r2, r3
 80056a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80056b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	f04f 0300 	mov.w	r3, #0
 80056bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056c0:	4649      	mov	r1, r9
 80056c2:	008b      	lsls	r3, r1, #2
 80056c4:	4641      	mov	r1, r8
 80056c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ca:	4641      	mov	r1, r8
 80056cc:	008a      	lsls	r2, r1, #2
 80056ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056d2:	f7fa fd7f 	bl	80001d4 <__aeabi_uldivmod>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4b39      	ldr	r3, [pc, #228]	; (80057c0 <UART_SetConfig+0x4e4>)
 80056dc:	fba3 1302 	umull	r1, r3, r3, r2
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	2164      	movs	r1, #100	; 0x64
 80056e4:	fb01 f303 	mul.w	r3, r1, r3
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	3332      	adds	r3, #50	; 0x32
 80056ee:	4a34      	ldr	r2, [pc, #208]	; (80057c0 <UART_SetConfig+0x4e4>)
 80056f0:	fba2 2303 	umull	r2, r3, r2, r3
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056fa:	441c      	add	r4, r3
 80056fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005700:	2200      	movs	r2, #0
 8005702:	673b      	str	r3, [r7, #112]	; 0x70
 8005704:	677a      	str	r2, [r7, #116]	; 0x74
 8005706:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800570a:	4642      	mov	r2, r8
 800570c:	464b      	mov	r3, r9
 800570e:	1891      	adds	r1, r2, r2
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	415b      	adcs	r3, r3
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800571a:	4641      	mov	r1, r8
 800571c:	1851      	adds	r1, r2, r1
 800571e:	6039      	str	r1, [r7, #0]
 8005720:	4649      	mov	r1, r9
 8005722:	414b      	adcs	r3, r1
 8005724:	607b      	str	r3, [r7, #4]
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005732:	4659      	mov	r1, fp
 8005734:	00cb      	lsls	r3, r1, #3
 8005736:	4651      	mov	r1, sl
 8005738:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800573c:	4651      	mov	r1, sl
 800573e:	00ca      	lsls	r2, r1, #3
 8005740:	4610      	mov	r0, r2
 8005742:	4619      	mov	r1, r3
 8005744:	4603      	mov	r3, r0
 8005746:	4642      	mov	r2, r8
 8005748:	189b      	adds	r3, r3, r2
 800574a:	66bb      	str	r3, [r7, #104]	; 0x68
 800574c:	464b      	mov	r3, r9
 800574e:	460a      	mov	r2, r1
 8005750:	eb42 0303 	adc.w	r3, r2, r3
 8005754:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	663b      	str	r3, [r7, #96]	; 0x60
 8005760:	667a      	str	r2, [r7, #100]	; 0x64
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800576e:	4649      	mov	r1, r9
 8005770:	008b      	lsls	r3, r1, #2
 8005772:	4641      	mov	r1, r8
 8005774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005778:	4641      	mov	r1, r8
 800577a:	008a      	lsls	r2, r1, #2
 800577c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005780:	f7fa fd28 	bl	80001d4 <__aeabi_uldivmod>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <UART_SetConfig+0x4e4>)
 800578a:	fba3 1302 	umull	r1, r3, r3, r2
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	2164      	movs	r1, #100	; 0x64
 8005792:	fb01 f303 	mul.w	r3, r1, r3
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	3332      	adds	r3, #50	; 0x32
 800579c:	4a08      	ldr	r2, [pc, #32]	; (80057c0 <UART_SetConfig+0x4e4>)
 800579e:	fba2 2303 	umull	r2, r3, r2, r3
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	f003 020f 	and.w	r2, r3, #15
 80057a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4422      	add	r2, r4
 80057b0:	609a      	str	r2, [r3, #8]
}
 80057b2:	bf00      	nop
 80057b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057b8:	46bd      	mov	sp, r7
 80057ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057be:	bf00      	nop
 80057c0:	51eb851f 	.word	0x51eb851f

080057c4 <__libc_init_array>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	4d0d      	ldr	r5, [pc, #52]	; (80057fc <__libc_init_array+0x38>)
 80057c8:	4c0d      	ldr	r4, [pc, #52]	; (8005800 <__libc_init_array+0x3c>)
 80057ca:	1b64      	subs	r4, r4, r5
 80057cc:	10a4      	asrs	r4, r4, #2
 80057ce:	2600      	movs	r6, #0
 80057d0:	42a6      	cmp	r6, r4
 80057d2:	d109      	bne.n	80057e8 <__libc_init_array+0x24>
 80057d4:	4d0b      	ldr	r5, [pc, #44]	; (8005804 <__libc_init_array+0x40>)
 80057d6:	4c0c      	ldr	r4, [pc, #48]	; (8005808 <__libc_init_array+0x44>)
 80057d8:	f000 f82e 	bl	8005838 <_init>
 80057dc:	1b64      	subs	r4, r4, r5
 80057de:	10a4      	asrs	r4, r4, #2
 80057e0:	2600      	movs	r6, #0
 80057e2:	42a6      	cmp	r6, r4
 80057e4:	d105      	bne.n	80057f2 <__libc_init_array+0x2e>
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
 80057e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ec:	4798      	blx	r3
 80057ee:	3601      	adds	r6, #1
 80057f0:	e7ee      	b.n	80057d0 <__libc_init_array+0xc>
 80057f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f6:	4798      	blx	r3
 80057f8:	3601      	adds	r6, #1
 80057fa:	e7f2      	b.n	80057e2 <__libc_init_array+0x1e>
 80057fc:	08005884 	.word	0x08005884
 8005800:	08005884 	.word	0x08005884
 8005804:	08005884 	.word	0x08005884
 8005808:	08005888 	.word	0x08005888

0800580c <memcpy>:
 800580c:	440a      	add	r2, r1
 800580e:	4291      	cmp	r1, r2
 8005810:	f100 33ff 	add.w	r3, r0, #4294967295
 8005814:	d100      	bne.n	8005818 <memcpy+0xc>
 8005816:	4770      	bx	lr
 8005818:	b510      	push	{r4, lr}
 800581a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800581e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005822:	4291      	cmp	r1, r2
 8005824:	d1f9      	bne.n	800581a <memcpy+0xe>
 8005826:	bd10      	pop	{r4, pc}

08005828 <memset>:
 8005828:	4402      	add	r2, r0
 800582a:	4603      	mov	r3, r0
 800582c:	4293      	cmp	r3, r2
 800582e:	d100      	bne.n	8005832 <memset+0xa>
 8005830:	4770      	bx	lr
 8005832:	f803 1b01 	strb.w	r1, [r3], #1
 8005836:	e7f9      	b.n	800582c <memset+0x4>

08005838 <_init>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	bf00      	nop
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr

08005844 <_fini>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr
