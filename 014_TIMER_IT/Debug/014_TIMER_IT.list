
014_TIMER_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d5c  08003d5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d64  08003d64  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d68  08003d68  00013d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000074  08003de0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003de0  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa7a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001850  00000000  00000000  0002ab1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a48  00000000  00000000  0002c370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000980  00000000  00000000  0002cdb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020821  00000000  00000000  0002d738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007853  00000000  00000000  0004df59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6c9e  00000000  00000000  000557ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c44a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ea8  00000000  00000000  0011c4c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003cd0 	.word	0x08003cd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003cd0 	.word	0x08003cd0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b972 	b.w	8000d48 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	4688      	mov	r8, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14b      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4615      	mov	r5, r2
 8000a8e:	d967      	bls.n	8000b60 <__udivmoddi4+0xe4>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b14a      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a96:	f1c2 0720 	rsb	r7, r2, #32
 8000a9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000aa2:	4095      	lsls	r5, r2
 8000aa4:	ea47 0803 	orr.w	r8, r7, r3
 8000aa8:	4094      	lsls	r4, r2
 8000aaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aae:	0c23      	lsrs	r3, r4, #16
 8000ab0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ab4:	fa1f fc85 	uxth.w	ip, r5
 8000ab8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000abc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ac4:	4299      	cmp	r1, r3
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x60>
 8000ac8:	18eb      	adds	r3, r5, r3
 8000aca:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ace:	f080 811b 	bcs.w	8000d08 <__udivmoddi4+0x28c>
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	f240 8118 	bls.w	8000d08 <__udivmoddi4+0x28c>
 8000ad8:	3f02      	subs	r7, #2
 8000ada:	442b      	add	r3, r5
 8000adc:	1a5b      	subs	r3, r3, r1
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ae4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af0:	45a4      	cmp	ip, r4
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x8c>
 8000af4:	192c      	adds	r4, r5, r4
 8000af6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000afa:	f080 8107 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000afe:	45a4      	cmp	ip, r4
 8000b00:	f240 8104 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000b04:	3802      	subs	r0, #2
 8000b06:	442c      	add	r4, r5
 8000b08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b0c:	eba4 040c 	sub.w	r4, r4, ip
 8000b10:	2700      	movs	r7, #0
 8000b12:	b11e      	cbz	r6, 8000b1c <__udivmoddi4+0xa0>
 8000b14:	40d4      	lsrs	r4, r2
 8000b16:	2300      	movs	r3, #0
 8000b18:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1c:	4639      	mov	r1, r7
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0xbe>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80eb 	beq.w	8000d02 <__udivmoddi4+0x286>
 8000b2c:	2700      	movs	r7, #0
 8000b2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b32:	4638      	mov	r0, r7
 8000b34:	4639      	mov	r1, r7
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	fab3 f783 	clz	r7, r3
 8000b3e:	2f00      	cmp	r7, #0
 8000b40:	d147      	bne.n	8000bd2 <__udivmoddi4+0x156>
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xd0>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 80fa 	bhi.w	8000d40 <__udivmoddi4+0x2c4>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4698      	mov	r8, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d0e0      	beq.n	8000b1c <__udivmoddi4+0xa0>
 8000b5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b5e:	e7dd      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000b60:	b902      	cbnz	r2, 8000b64 <__udivmoddi4+0xe8>
 8000b62:	deff      	udf	#255	; 0xff
 8000b64:	fab2 f282 	clz	r2, r2
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f040 808f 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6e:	1b49      	subs	r1, r1, r5
 8000b70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b74:	fa1f f885 	uxth.w	r8, r5
 8000b78:	2701      	movs	r7, #1
 8000b7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b88:	fb08 f10c 	mul.w	r1, r8, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4299      	cmp	r1, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2bc>
 8000b9e:	4684      	mov	ip, r0
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	b2a3      	uxth	r3, r4
 8000ba4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb0:	fb08 f800 	mul.w	r8, r8, r0
 8000bb4:	45a0      	cmp	r8, r4
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x14c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x14a>
 8000bc0:	45a0      	cmp	r8, r4
 8000bc2:	f200 80b6 	bhi.w	8000d32 <__udivmoddi4+0x2b6>
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	eba4 0408 	sub.w	r4, r4, r8
 8000bcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd0:	e79f      	b.n	8000b12 <__udivmoddi4+0x96>
 8000bd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bd6:	40bb      	lsls	r3, r7
 8000bd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bdc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be0:	fa01 f407 	lsl.w	r4, r1, r7
 8000be4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000be8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf0:	4325      	orrs	r5, r4
 8000bf2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bf6:	0c2c      	lsrs	r4, r5, #16
 8000bf8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bfc:	fa1f fa8e 	uxth.w	sl, lr
 8000c00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c04:	fb09 f40a 	mul.w	r4, r9, sl
 8000c08:	429c      	cmp	r4, r3
 8000c0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1e 0303 	adds.w	r3, lr, r3
 8000c18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c1c:	f080 8087 	bcs.w	8000d2e <__udivmoddi4+0x2b2>
 8000c20:	429c      	cmp	r4, r3
 8000c22:	f240 8084 	bls.w	8000d2e <__udivmoddi4+0x2b2>
 8000c26:	f1a9 0902 	sub.w	r9, r9, #2
 8000c2a:	4473      	add	r3, lr
 8000c2c:	1b1b      	subs	r3, r3, r4
 8000c2e:	b2ad      	uxth	r5, r5
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c40:	45a2      	cmp	sl, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1e 0404 	adds.w	r4, lr, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	d26b      	bcs.n	8000d26 <__udivmoddi4+0x2aa>
 8000c4e:	45a2      	cmp	sl, r4
 8000c50:	d969      	bls.n	8000d26 <__udivmoddi4+0x2aa>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4474      	add	r4, lr
 8000c56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c5e:	eba4 040a 	sub.w	r4, r4, sl
 8000c62:	454c      	cmp	r4, r9
 8000c64:	46c2      	mov	sl, r8
 8000c66:	464b      	mov	r3, r9
 8000c68:	d354      	bcc.n	8000d14 <__udivmoddi4+0x298>
 8000c6a:	d051      	beq.n	8000d10 <__udivmoddi4+0x294>
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d069      	beq.n	8000d44 <__udivmoddi4+0x2c8>
 8000c70:	ebb1 050a 	subs.w	r5, r1, sl
 8000c74:	eb64 0403 	sbc.w	r4, r4, r3
 8000c78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c7c:	40fd      	lsrs	r5, r7
 8000c7e:	40fc      	lsrs	r4, r7
 8000c80:	ea4c 0505 	orr.w	r5, ip, r5
 8000c84:	e9c6 5400 	strd	r5, r4, [r6]
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e747      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000c8c:	f1c2 0320 	rsb	r3, r2, #32
 8000c90:	fa20 f703 	lsr.w	r7, r0, r3
 8000c94:	4095      	lsls	r5, r2
 8000c96:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca2:	4338      	orrs	r0, r7
 8000ca4:	0c01      	lsrs	r1, r0, #16
 8000ca6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000caa:	fa1f f885 	uxth.w	r8, r5
 8000cae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb6:	fb07 f308 	mul.w	r3, r7, r8
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d907      	bls.n	8000cd2 <__udivmoddi4+0x256>
 8000cc2:	1869      	adds	r1, r5, r1
 8000cc4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cc8:	d22f      	bcs.n	8000d2a <__udivmoddi4+0x2ae>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d92d      	bls.n	8000d2a <__udivmoddi4+0x2ae>
 8000cce:	3f02      	subs	r7, #2
 8000cd0:	4429      	add	r1, r5
 8000cd2:	1acb      	subs	r3, r1, r3
 8000cd4:	b281      	uxth	r1, r0
 8000cd6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce2:	fb00 f308 	mul.w	r3, r0, r8
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x27e>
 8000cea:	1869      	adds	r1, r5, r1
 8000cec:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf0:	d217      	bcs.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d915      	bls.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4429      	add	r1, r5
 8000cfa:	1ac9      	subs	r1, r1, r3
 8000cfc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d00:	e73b      	b.n	8000b7a <__udivmoddi4+0xfe>
 8000d02:	4637      	mov	r7, r6
 8000d04:	4630      	mov	r0, r6
 8000d06:	e709      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000d08:	4607      	mov	r7, r0
 8000d0a:	e6e7      	b.n	8000adc <__udivmoddi4+0x60>
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	e6fb      	b.n	8000b08 <__udivmoddi4+0x8c>
 8000d10:	4541      	cmp	r1, r8
 8000d12:	d2ab      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d18:	eb69 020e 	sbc.w	r2, r9, lr
 8000d1c:	3801      	subs	r0, #1
 8000d1e:	4613      	mov	r3, r2
 8000d20:	e7a4      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d22:	4660      	mov	r0, ip
 8000d24:	e7e9      	b.n	8000cfa <__udivmoddi4+0x27e>
 8000d26:	4618      	mov	r0, r3
 8000d28:	e795      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2a:	4667      	mov	r7, ip
 8000d2c:	e7d1      	b.n	8000cd2 <__udivmoddi4+0x256>
 8000d2e:	4681      	mov	r9, r0
 8000d30:	e77c      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	442c      	add	r4, r5
 8000d36:	e747      	b.n	8000bc8 <__udivmoddi4+0x14c>
 8000d38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d3c:	442b      	add	r3, r5
 8000d3e:	e72f      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d40:	4638      	mov	r0, r7
 8000d42:	e708      	b.n	8000b56 <__udivmoddi4+0xda>
 8000d44:	4637      	mov	r7, r6
 8000d46:	e6e9      	b.n	8000b1c <__udivmoddi4+0xa0>

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
static void LCD1602_EnablePulse(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <LCD1602_EnablePulse+0x38>)
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <LCD1602_EnablePulse+0x3c>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f001 fa6c 	bl	8002238 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8000d60:	230a      	movs	r3, #10
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f97c 	bl	8001060 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <LCD1602_EnablePulse+0x38>)
 8000d6a:	6818      	ldr	r0, [r3, #0]
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <LCD1602_EnablePulse+0x3c>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	2200      	movs	r2, #0
 8000d72:	4619      	mov	r1, r3
 8000d74:	f001 fa60 	bl	8002238 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 8000d78:	203c      	movs	r0, #60	; 0x3c
 8000d7a:	f000 f971 	bl	8001060 <LCD1602_TIM_MicorSecDelay>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000090 	.word	0x20000090
 8000d88:	20000096 	.word	0x20000096

08000d8c <LCD1602_RS>:
//2) RS control
static void LCD1602_RS(bool state)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d008      	beq.n	8000dae <LCD1602_RS+0x22>
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <LCD1602_RS+0x3c>)
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <LCD1602_RS+0x40>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	2201      	movs	r2, #1
 8000da6:	4619      	mov	r1, r3
 8000da8:	f001 fa46 	bl	8002238 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8000dac:	e007      	b.n	8000dbe <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <LCD1602_RS+0x3c>)
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <LCD1602_RS+0x40>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	2200      	movs	r2, #0
 8000db8:	4619      	mov	r1, r3
 8000dba:	f001 fa3d 	bl	8002238 <HAL_GPIO_WritePin>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000090 	.word	0x20000090
 8000dcc:	20000094 	.word	0x20000094

08000dd0 <LCD1602_write>:

//3) Write Parallel interface
static void LCD1602_write(uint8_t byte)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 030f 	and.w	r3, r3, #15
 8000de0:	73fb      	strb	r3, [r7, #15]
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8000de8:	4b61      	ldr	r3, [pc, #388]	; (8000f70 <LCD1602_write+0x1a0>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d15a      	bne.n	8000ea6 <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000df0:	4b60      	ldr	r3, [pc, #384]	; (8000f74 <LCD1602_write+0x1a4>)
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	4b60      	ldr	r3, [pc, #384]	; (8000f78 <LCD1602_write+0x1a8>)
 8000df6:	8819      	ldrh	r1, [r3, #0]
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	f001 fa19 	bl	8002238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000e06:	4b5b      	ldr	r3, [pc, #364]	; (8000f74 <LCD1602_write+0x1a4>)
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	4b5c      	ldr	r3, [pc, #368]	; (8000f7c <LCD1602_write+0x1ac>)
 8000e0c:	8819      	ldrh	r1, [r3, #0]
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	f001 fa0e 	bl	8002238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000e1c:	4b55      	ldr	r3, [pc, #340]	; (8000f74 <LCD1602_write+0x1a4>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	4b57      	ldr	r3, [pc, #348]	; (8000f80 <LCD1602_write+0x1b0>)
 8000e22:	8819      	ldrh	r1, [r3, #0]
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	f001 fa03 	bl	8002238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000e32:	4b50      	ldr	r3, [pc, #320]	; (8000f74 <LCD1602_write+0x1a4>)
 8000e34:	6818      	ldr	r0, [r3, #0]
 8000e36:	4b53      	ldr	r3, [pc, #332]	; (8000f84 <LCD1602_write+0x1b4>)
 8000e38:	8819      	ldrh	r1, [r3, #0]
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	f001 f9f8 	bl	8002238 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000e48:	4b4f      	ldr	r3, [pc, #316]	; (8000f88 <LCD1602_write+0x1b8>)
 8000e4a:	6818      	ldr	r0, [r3, #0]
 8000e4c:	4b4f      	ldr	r3, [pc, #316]	; (8000f8c <LCD1602_write+0x1bc>)
 8000e4e:	8819      	ldrh	r1, [r3, #0]
 8000e50:	7bbb      	ldrb	r3, [r7, #14]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	461a      	mov	r2, r3
 8000e5a:	f001 f9ed 	bl	8002238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000e5e:	4b4a      	ldr	r3, [pc, #296]	; (8000f88 <LCD1602_write+0x1b8>)
 8000e60:	6818      	ldr	r0, [r3, #0]
 8000e62:	4b4b      	ldr	r3, [pc, #300]	; (8000f90 <LCD1602_write+0x1c0>)
 8000e64:	8819      	ldrh	r1, [r3, #0]
 8000e66:	7bbb      	ldrb	r3, [r7, #14]
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	461a      	mov	r2, r3
 8000e70:	f001 f9e2 	bl	8002238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000e74:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <LCD1602_write+0x1b8>)
 8000e76:	6818      	ldr	r0, [r3, #0]
 8000e78:	4b46      	ldr	r3, [pc, #280]	; (8000f94 <LCD1602_write+0x1c4>)
 8000e7a:	8819      	ldrh	r1, [r3, #0]
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	f001 f9d7 	bl	8002238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000e8a:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <LCD1602_write+0x1b8>)
 8000e8c:	6818      	ldr	r0, [r3, #0]
 8000e8e:	4b42      	ldr	r3, [pc, #264]	; (8000f98 <LCD1602_write+0x1c8>)
 8000e90:	8819      	ldrh	r1, [r3, #0]
 8000e92:	7bbb      	ldrb	r3, [r7, #14]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f001 f9cc 	bl	8002238 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 8000ea0:	f7ff ff54 	bl	8000d4c <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 8000ea4:	e05f      	b.n	8000f66 <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8000ea6:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <LCD1602_write+0x1a0>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d15b      	bne.n	8000f66 <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000eae:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <LCD1602_write+0x1b8>)
 8000eb0:	6818      	ldr	r0, [r3, #0]
 8000eb2:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <LCD1602_write+0x1bc>)
 8000eb4:	8819      	ldrh	r1, [r3, #0]
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	f001 f9ba 	bl	8002238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000ec4:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <LCD1602_write+0x1b8>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <LCD1602_write+0x1c0>)
 8000eca:	8819      	ldrh	r1, [r3, #0]
 8000ecc:	7bbb      	ldrb	r3, [r7, #14]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	f001 f9af 	bl	8002238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <LCD1602_write+0x1b8>)
 8000edc:	6818      	ldr	r0, [r3, #0]
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <LCD1602_write+0x1c4>)
 8000ee0:	8819      	ldrh	r1, [r3, #0]
 8000ee2:	7bbb      	ldrb	r3, [r7, #14]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	f001 f9a4 	bl	8002238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000ef0:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <LCD1602_write+0x1b8>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <LCD1602_write+0x1c8>)
 8000ef6:	8819      	ldrh	r1, [r3, #0]
 8000ef8:	7bbb      	ldrb	r3, [r7, #14]
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	461a      	mov	r2, r3
 8000f02:	f001 f999 	bl	8002238 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000f06:	f7ff ff21 	bl	8000d4c <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <LCD1602_write+0x1b8>)
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <LCD1602_write+0x1bc>)
 8000f10:	8819      	ldrh	r1, [r3, #0]
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f001 f98c 	bl	8002238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <LCD1602_write+0x1b8>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <LCD1602_write+0x1c0>)
 8000f26:	8819      	ldrh	r1, [r3, #0]
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	f001 f981 	bl	8002238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <LCD1602_write+0x1b8>)
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <LCD1602_write+0x1c4>)
 8000f3c:	8819      	ldrh	r1, [r3, #0]
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	461a      	mov	r2, r3
 8000f48:	f001 f976 	bl	8002238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <LCD1602_write+0x1b8>)
 8000f4e:	6818      	ldr	r0, [r3, #0]
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <LCD1602_write+0x1c8>)
 8000f52:	8819      	ldrh	r1, [r3, #0]
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	f001 f96b 	bl	8002238 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000f62:	f7ff fef3 	bl	8000d4c <LCD1602_EnablePulse>
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000098 	.word	0x20000098
 8000f78:	2000009c 	.word	0x2000009c
 8000f7c:	2000009e 	.word	0x2000009e
 8000f80:	200000a0 	.word	0x200000a0
 8000f84:	200000a2 	.word	0x200000a2
 8000f88:	200000a4 	.word	0x200000a4
 8000f8c:	200000a8 	.word	0x200000a8
 8000f90:	200000aa 	.word	0x200000aa
 8000f94:	200000ac 	.word	0x200000ac
 8000f98:	200000ae 	.word	0x200000ae
 8000f9c:	00000000 	.word	0x00000000

08000fa0 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
static void LCD1602_TIM_Config(void)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 8000fa6:	1d3a      	adds	r2, r7, #4
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fde8 	bl	8002b84 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d103      	bne.n	8000fc2 <LCD1602_TIM_Config+0x22>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 8000fba:	f001 fdcf 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8000fbe:	61f8      	str	r0, [r7, #28]
 8000fc0:	e004      	b.n	8000fcc <LCD1602_TIM_Config+0x2c>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 8000fc2:	f001 fdcb 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
	}
	clockSpeed *= 0.000001;
 8000fcc:	69f8      	ldr	r0, [r7, #28]
 8000fce:	f7ff fa91 	bl	80004f4 <__aeabi_ui2d>
 8000fd2:	a321      	add	r3, pc, #132	; (adr r3, 8001058 <LCD1602_TIM_Config+0xb8>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff fb06 	bl	80005e8 <__aeabi_dmul>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	460c      	mov	r4, r1
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	4621      	mov	r1, r4
 8000fe4:	f7ff fd12 	bl	8000a0c <__aeabi_d2uiz>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	61fb      	str	r3, [r7, #28]
	
	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <LCD1602_TIM_Config+0xb0>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <LCD1602_TIM_Config+0xb0>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <LCD1602_TIM_Config+0xb4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a15      	ldr	r2, [pc, #84]	; (8001054 <LCD1602_TIM_Config+0xb4>)
 8000ffe:	f023 0310 	bic.w	r3, r3, #16
 8001002:	6013      	str	r3, [r2, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <LCD1602_TIM_Config+0xb4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a12      	ldr	r2, [pc, #72]	; (8001054 <LCD1602_TIM_Config+0xb4>)
 800100a:	f023 0301 	bic.w	r3, r3, #1
 800100e:	6013      	str	r3, [r2, #0]
	//Update request source 
	TIM3->CR1 &= ~(1UL << 2);
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <LCD1602_TIM_Config+0xb4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <LCD1602_TIM_Config+0xb4>)
 8001016:	f023 0304 	bic.w	r3, r3, #4
 800101a:	6013      	str	r3, [r2, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);				  
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <LCD1602_TIM_Config+0xb4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <LCD1602_TIM_Config+0xb4>)
 8001022:	f043 0308 	orr.w	r3, r3, #8
 8001026:	6013      	str	r3, [r2, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LCD1602_TIM_Config+0xb4>)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b01      	subs	r3, #1
 800102e:	6293      	str	r3, [r2, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <LCD1602_TIM_Config+0xb4>)
 8001032:	2209      	movs	r2, #9
 8001034:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <LCD1602_TIM_Config+0xb4>)
 8001038:	2201      	movs	r2, #1
 800103a:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <LCD1602_TIM_Config+0xb4>)
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <LCD1602_TIM_Config+0xb4>)
 8001042:	f023 0301 	bic.w	r3, r3, #1
 8001046:	6113      	str	r3, [r2, #16]
}
 8001048:	bf00      	nop
 800104a:	3724      	adds	r7, #36	; 0x24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd90      	pop	{r4, r7, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	40000400 	.word	0x40000400
 8001058:	a0b5ed8d 	.word	0xa0b5ed8d
 800105c:	3eb0c6f7 	.word	0x3eb0c6f7

08001060 <LCD1602_TIM_MicorSecDelay>:
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <LCD1602_TIM_MicorSecDelay+0x44>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3b01      	subs	r3, #1
 800106e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <LCD1602_TIM_MicorSecDelay+0x44>)
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <LCD1602_TIM_MicorSecDelay+0x44>)
 8001076:	f023 0301 	bic.w	r3, r3, #1
 800107a:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1UL;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <LCD1602_TIM_MicorSecDelay+0x44>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <LCD1602_TIM_MicorSecDelay+0x44>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 8001088:	bf00      	nop
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <LCD1602_TIM_MicorSecDelay+0x44>)
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b01      	cmp	r3, #1
 8001094:	d1f9      	bne.n	800108a <LCD1602_TIM_MicorSecDelay+0x2a>
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40000400 	.word	0x40000400

080010a8 <LCD1602_writeCommand>:
//5) Write command
static void LCD1602_writeCommand(uint8_t command)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	//Set RS to 0
	LCD1602_RS(false);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f7ff fe6a 	bl	8000d8c <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe88 	bl	8000dd0 <LCD1602_write>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <LCD1602_writeData>:
//6) Write 8 bits data
static void LCD1602_writeData(uint8_t data)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	//Set RS to 1
	LCD1602_RS(true);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f7ff fe5a 	bl	8000d8c <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(data);
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fe78 	bl	8000dd0 <LCD1602_write>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <LCD1602_Begin8BIT>:
}

//Public functions
//1) LCD begin 8 bits function
void LCD1602_Begin8BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_LSBs0to3, uint16_t D0, uint16_t D1, uint16_t D2, uint16_t D3, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	817b      	strh	r3, [r7, #10]
 80010f6:	4613      	mov	r3, r2
 80010f8:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 80010fa:	4a2a      	ldr	r2, [pc, #168]	; (80011a4 <LCD1602_Begin8BIT+0xbc>)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 8001100:	4a29      	ldr	r2, [pc, #164]	; (80011a8 <LCD1602_Begin8BIT+0xc0>)
 8001102:	897b      	ldrh	r3, [r7, #10]
 8001104:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 8001106:	4a29      	ldr	r2, [pc, #164]	; (80011ac <LCD1602_Begin8BIT+0xc4>)
 8001108:	893b      	ldrh	r3, [r7, #8]
 800110a:	8013      	strh	r3, [r2, #0]
	PORT_LSB = PORT_LSBs0to3;
 800110c:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <LCD1602_Begin8BIT+0xc8>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]
	D0_PIN = D0;
 8001112:	4a28      	ldr	r2, [pc, #160]	; (80011b4 <LCD1602_Begin8BIT+0xcc>)
 8001114:	8b3b      	ldrh	r3, [r7, #24]
 8001116:	8013      	strh	r3, [r2, #0]
	D1_PIN = D1;
 8001118:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <LCD1602_Begin8BIT+0xd0>)
 800111a:	8bbb      	ldrh	r3, [r7, #28]
 800111c:	8013      	strh	r3, [r2, #0]
	D2_PIN = D2;
 800111e:	4a27      	ldr	r2, [pc, #156]	; (80011bc <LCD1602_Begin8BIT+0xd4>)
 8001120:	8c3b      	ldrh	r3, [r7, #32]
 8001122:	8013      	strh	r3, [r2, #0]
	D3_PIN = D3;
 8001124:	4a26      	ldr	r2, [pc, #152]	; (80011c0 <LCD1602_Begin8BIT+0xd8>)
 8001126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001128:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 800112a:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <LCD1602_Begin8BIT+0xdc>)
 800112c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112e:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 8001130:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <LCD1602_Begin8BIT+0xe0>)
 8001132:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001134:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 8001136:	4a25      	ldr	r2, [pc, #148]	; (80011cc <LCD1602_Begin8BIT+0xe4>)
 8001138:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800113a:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 800113c:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <LCD1602_Begin8BIT+0xe8>)
 800113e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001140:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 8001142:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <LCD1602_Begin8BIT+0xec>)
 8001144:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001146:	8013      	strh	r3, [r2, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 8001148:	f7ff ff2a 	bl	8000fa0 <LCD1602_TIM_Config>
	//Set the mode to 8 bits
	mode_8_4_I2C = 1;
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <LCD1602_Begin8BIT+0xf0>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
	//Function set variable to 8 bits mode
	FunctionSet = 0x38;
 8001152:	4b22      	ldr	r3, [pc, #136]	; (80011dc <LCD1602_Begin8BIT+0xf4>)
 8001154:	2238      	movs	r2, #56	; 0x38
 8001156:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 8001158:	2014      	movs	r0, #20
 800115a:	f000 fd9f 	bl	8001c9c <HAL_Delay>
	//2. Attentions sequence
	LCD1602_writeCommand(0x30);
 800115e:	2030      	movs	r0, #48	; 0x30
 8001160:	f7ff ffa2 	bl	80010a8 <LCD1602_writeCommand>
	HAL_Delay(5);
 8001164:	2005      	movs	r0, #5
 8001166:	f000 fd99 	bl	8001c9c <HAL_Delay>
	LCD1602_writeCommand(0x30);
 800116a:	2030      	movs	r0, #48	; 0x30
 800116c:	f7ff ff9c 	bl	80010a8 <LCD1602_writeCommand>
	HAL_Delay(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f000 fd93 	bl	8001c9c <HAL_Delay>
	LCD1602_writeCommand(0x30);
 8001176:	2030      	movs	r0, #48	; 0x30
 8001178:	f7ff ff96 	bl	80010a8 <LCD1602_writeCommand>
	HAL_Delay(1);
 800117c:	2001      	movs	r0, #1
 800117e:	f000 fd8d 	bl	8001c9c <HAL_Delay>
	//3. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N | LCD_FUNCTION_DL);
 8001182:	2038      	movs	r0, #56	; 0x38
 8001184:	f7ff ff90 	bl	80010a8 <LCD1602_writeCommand>
	//4. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8001188:	200f      	movs	r0, #15
 800118a:	f7ff ff8d 	bl	80010a8 <LCD1602_writeCommand>
	//5. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 800118e:	2001      	movs	r0, #1
 8001190:	f7ff ff8a 	bl	80010a8 <LCD1602_writeCommand>
	HAL_Delay(2);
 8001194:	2002      	movs	r0, #2
 8001196:	f000 fd81 	bl	8001c9c <HAL_Delay>
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000090 	.word	0x20000090
 80011a8:	20000094 	.word	0x20000094
 80011ac:	20000096 	.word	0x20000096
 80011b0:	20000098 	.word	0x20000098
 80011b4:	2000009c 	.word	0x2000009c
 80011b8:	2000009e 	.word	0x2000009e
 80011bc:	200000a0 	.word	0x200000a0
 80011c0:	200000a2 	.word	0x200000a2
 80011c4:	200000a4 	.word	0x200000a4
 80011c8:	200000a8 	.word	0x200000a8
 80011cc:	200000aa 	.word	0x200000aa
 80011d0:	200000ac 	.word	0x200000ac
 80011d4:	200000ae 	.word	0x200000ae
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000001 	.word	0x20000001

080011e0 <LCD1602_print>:
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
	HAL_Delay(3);
}
//3) LCD print string
void LCD1602_print(char string[])
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e009      	b.n	8001202 <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff66 	bl	80010c8 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3301      	adds	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d805      	bhi.n	8001214 <LCD1602_print+0x34>
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1ec      	bne.n	80011ee <LCD1602_print+0xe>
	}
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <LCD1602_setCursor>:
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	460a      	mov	r2, r1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	3b01      	subs	r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d108      	bne.n	8001250 <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001244:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff2d 	bl	80010a8 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}	
 800124e:	e007      	b.n	8001260 <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001256:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff24 	bl	80010a8 <LCD1602_writeCommand>
}	
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <LCD1602_1stLine>:
void LCD1602_1stLine(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	LCD1602_setCursor(1,1);
 800126c:	2101      	movs	r1, #1
 800126e:	2001      	movs	r0, #1
 8001270:	f7ff ffd4 	bl	800121c <LCD1602_setCursor>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <LCD1602_2ndLine>:
void LCD1602_2ndLine(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	LCD1602_setCursor(2,1);
 800127c:	2101      	movs	r1, #1
 800127e:	2002      	movs	r0, #2
 8001280:	f7ff ffcc 	bl	800121c <LCD1602_setCursor>
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <LCD1602_PrintInt>:

//********** Print numbers to LCD **********//
//1. Integer

void LCD1602_PrintInt(int number)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	char numStr[16];
	sprintf(numStr,"%d", number);
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	4906      	ldr	r1, [pc, #24]	; (80012b0 <LCD1602_PrintInt+0x28>)
 8001298:	4618      	mov	r0, r3
 800129a:	f002 f90b 	bl	80034b4 <siprintf>
	LCD1602_print(numStr);
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff9c 	bl	80011e0 <LCD1602_print>
}
 80012a8:	bf00      	nop
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	08003ce8 	.word	0x08003ce8

080012b4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // her 1 msaniyede
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	if(htim->Instance==htim1.Instance)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d12e      	bne.n	8001326 <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		delayDummy++;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	4a19      	ldr	r2, [pc, #100]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80012d0:	6013      	str	r3, [r2, #0]
		ms++;
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80012da:	6013      	str	r3, [r2, #0]
		if(menuItem==1 && duraksamaItem==0)
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d120      	bne.n	8001326 <HAL_TIM_PeriodElapsedCallback+0x72>
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d11c      	bne.n	8001326 <HAL_TIM_PeriodElapsedCallback+0x72>
		{
			if(ms>=1000)
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012f4:	db07      	blt.n	8001306 <HAL_TIM_PeriodElapsedCallback+0x52>
			{
				second++;
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	4a11      	ldr	r2, [pc, #68]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80012fe:	6013      	str	r3, [r2, #0]
				ms=0;
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
			}
			if(delayDummy%100==0)
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800130c:	fba3 1302 	umull	r1, r3, r3, r2
 8001310:	095b      	lsrs	r3, r3, #5
 8001312:	2164      	movs	r1, #100	; 0x64
 8001314:	fb01 f303 	mul.w	r3, r1, r3
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d103      	bne.n	8001326 <HAL_TIM_PeriodElapsedCallback+0x72>
			{
				HAL_GPIO_TogglePin(GPIOA, LED_BLUE_Pin);
 800131e:	2101      	movs	r1, #1
 8001320:	480a      	ldr	r0, [pc, #40]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001322:	f000 ffa2 	bl	800226a <HAL_GPIO_TogglePin>
			}
		}
	}
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200000e0 	.word	0x200000e0
 8001334:	200000d8 	.word	0x200000d8
 8001338:	200000b8 	.word	0x200000b8
 800133c:	200000d4 	.word	0x200000d4
 8001340:	200000b4 	.word	0x200000b4
 8001344:	200000c0 	.word	0x200000c0
 8001348:	51eb851f 	.word	0x51eb851f
 800134c:	40020000 	.word	0x40020000

08001350 <timerDelay>:
void timerDelay(int delay)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	delayDummy=0;
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <timerDelay+0x28>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
	while(delayDummy!=delay);
 800135e:	bf00      	nop
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <timerDelay+0x28>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	429a      	cmp	r2, r3
 8001368:	d1fa      	bne.n	8001360 <timerDelay+0x10>
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200000d8 	.word	0x200000d8

0800137c <randomDelay>:
void randomDelay(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	randomVar = rand()%401+100 ;
 8001380:	f002 f864 	bl	800344c <rand>
 8001384:	4602      	mov	r2, r0
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <randomDelay+0x40>)
 8001388:	fb83 1302 	smull	r1, r3, r3, r2
 800138c:	1199      	asrs	r1, r3, #6
 800138e:	17d3      	asrs	r3, r2, #31
 8001390:	1acb      	subs	r3, r1, r3
 8001392:	f240 1191 	movw	r1, #401	; 0x191
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	3364      	adds	r3, #100	; 0x64
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <randomDelay+0x44>)
 80013a0:	6013      	str	r3, [r2, #0]
	timerDelay(randomVar);  // rand()%401 0-400 , 100-500
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <randomDelay+0x44>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ffd2 	bl	8001350 <timerDelay>
	kisi++;
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <randomDelay+0x48>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <randomDelay+0x48>)
 80013b4:	6013      	str	r3, [r2, #0]
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	28db9c69 	.word	0x28db9c69
 80013c0:	200000dc 	.word	0x200000dc
 80013c4:	200000b0 	.word	0x200000b0

080013c8 <randomProcess>:

void randomProcess(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OSC_OUT_Pin, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	2108      	movs	r1, #8
 80013d0:	480a      	ldr	r0, [pc, #40]	; (80013fc <randomProcess+0x34>)
 80013d2:	f000 ff31 	bl	8002238 <HAL_GPIO_WritePin>
	process=1;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <randomProcess+0x38>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]
	timerDelay(randomVar);
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <randomProcess+0x3c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ffb5 	bl	8001350 <timerDelay>
	HAL_GPIO_WritePin(GPIOA, OSC_OUT_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2108      	movs	r1, #8
 80013ea:	4804      	ldr	r0, [pc, #16]	; (80013fc <randomProcess+0x34>)
 80013ec:	f000 ff24 	bl	8002238 <HAL_GPIO_WritePin>
	process=0;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <randomProcess+0x38>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40020000 	.word	0x40020000
 8001400:	200000d0 	.word	0x200000d0
 8001404:	200000dc 	.word	0x200000dc

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140e:	f000 fbd3 	bl	8001bb8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001412:	f000 f8dd 	bl	80015d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001416:	f000 f995 	bl	8001744 <MX_GPIO_Init>
  MX_TIM1_Init();
 800141a:	f000 f943 	bl	80016a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);  // timer kesmesi aktif
 800141e:	485c      	ldr	r0, [pc, #368]	; (8001590 <main+0x188>)
 8001420:	f001 fc0d 	bl	8002c3e <HAL_TIM_Base_Start_IT>
  LCD1602_Begin8BIT(RS_GPIO_Port, RS_Pin, E_Pin, D0_GPIO_Port, D0_Pin, D1_Pin, D2_Pin, D3_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 8001424:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001428:	9308      	str	r3, [sp, #32]
 800142a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142e:	9307      	str	r3, [sp, #28]
 8001430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001434:	9306      	str	r3, [sp, #24]
 8001436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143a:	9305      	str	r3, [sp, #20]
 800143c:	4b55      	ldr	r3, [pc, #340]	; (8001594 <main+0x18c>)
 800143e:	9304      	str	r3, [sp, #16]
 8001440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001444:	9303      	str	r3, [sp, #12]
 8001446:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	4b4f      	ldr	r3, [pc, #316]	; (8001598 <main+0x190>)
 800145a:	2202      	movs	r2, #2
 800145c:	2101      	movs	r1, #1
 800145e:	484f      	ldr	r0, [pc, #316]	; (800159c <main+0x194>)
 8001460:	f7ff fe42 	bl	80010e8 <LCD1602_Begin8BIT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(menuItem==0)
 8001464:	4b4e      	ldr	r3, [pc, #312]	; (80015a0 <main+0x198>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d115      	bne.n	8001498 <main+0x90>
	  {
		  // SAYMA İSLEMİ DURDU
  		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	2104      	movs	r1, #4
 8001470:	484c      	ldr	r0, [pc, #304]	; (80015a4 <main+0x19c>)
 8001472:	f000 fee1 	bl	8002238 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2102      	movs	r1, #2
 800147a:	484a      	ldr	r0, [pc, #296]	; (80015a4 <main+0x19c>)
 800147c:	f000 fedc 	bl	8002238 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2101      	movs	r1, #1
 8001484:	4847      	ldr	r0, [pc, #284]	; (80015a4 <main+0x19c>)
 8001486:	f000 fed7 	bl	8002238 <HAL_GPIO_WritePin>
  		kisi=0, second=0;
 800148a:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <main+0x1a0>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	4b46      	ldr	r3, [pc, #280]	; (80015ac <main+0x1a4>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e015      	b.n	80014c4 <main+0xbc>
	  }
	  else if(menuItem==1 && duraksamaItem==0)	// SAYMA İSLEMI BASLADI
 8001498:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <main+0x198>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d111      	bne.n	80014c4 <main+0xbc>
 80014a0:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <main+0x1a8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10d      	bne.n	80014c4 <main+0xbc>
	  {
		  randomDelay();
 80014a8:	f7ff ff68 	bl	800137c <randomDelay>
		  randomProcess();
 80014ac:	f7ff ff8c 	bl	80013c8 <randomProcess>
		  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2104      	movs	r1, #4
 80014b4:	483b      	ldr	r0, [pc, #236]	; (80015a4 <main+0x19c>)
 80014b6:	f000 febf 	bl	8002238 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2102      	movs	r1, #2
 80014be:	4839      	ldr	r0, [pc, #228]	; (80015a4 <main+0x19c>)
 80014c0:	f000 feba 	bl	8002238 <HAL_GPIO_WritePin>
	  }
	  if(duraksamaItem==1 && menuItem==1)
 80014c4:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <main+0x1a8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d112      	bne.n	80014f2 <main+0xea>
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <main+0x198>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d10e      	bne.n	80014f2 <main+0xea>
	  {
		  HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2102      	movs	r1, #2
 80014d8:	4832      	ldr	r0, [pc, #200]	; (80015a4 <main+0x19c>)
 80014da:	f000 fead 	bl	8002238 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	2101      	movs	r1, #1
 80014e2:	4830      	ldr	r0, [pc, #192]	; (80015a4 <main+0x19c>)
 80014e4:	f000 fea8 	bl	8002238 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2104      	movs	r1, #4
 80014ec:	482d      	ldr	r0, [pc, #180]	; (80015a4 <main+0x19c>)
 80014ee:	f000 fea3 	bl	8002238 <HAL_GPIO_WritePin>
	  }
	  if(second>=0 && second<60)
 80014f2:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <main+0x1a4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0d      	blt.n	8001516 <main+0x10e>
 80014fa:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <main+0x1a4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b3b      	cmp	r3, #59	; 0x3b
 8001500:	dc09      	bgt.n	8001516 <main+0x10e>
	  {
		  	  LCD1602_1stLine();
 8001502:	f7ff feb1 	bl	8001268 <LCD1602_1stLine>
		  	  LCD1602_PrintInt(second);
 8001506:	4b29      	ldr	r3, [pc, #164]	; (80015ac <main+0x1a4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff febc 	bl	8001288 <LCD1602_PrintInt>
		  	  LCD1602_print("saniyede");
 8001510:	4828      	ldr	r0, [pc, #160]	; (80015b4 <main+0x1ac>)
 8001512:	f7ff fe65 	bl	80011e0 <LCD1602_print>
	  }
	  if(second>=60)
 8001516:	4b25      	ldr	r3, [pc, #148]	; (80015ac <main+0x1a4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b3b      	cmp	r3, #59	; 0x3b
 800151c:	dd2c      	ble.n	8001578 <main+0x170>
	  {
		  minutes=second/60;
 800151e:	4b23      	ldr	r3, [pc, #140]	; (80015ac <main+0x1a4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a25      	ldr	r2, [pc, #148]	; (80015b8 <main+0x1b0>)
 8001524:	fb82 1203 	smull	r1, r2, r2, r3
 8001528:	441a      	add	r2, r3
 800152a:	1152      	asrs	r2, r2, #5
 800152c:	17db      	asrs	r3, r3, #31
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	4a22      	ldr	r2, [pc, #136]	; (80015bc <main+0x1b4>)
 8001532:	6013      	str	r3, [r2, #0]
		  secondDigit=second%60;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <main+0x1a4>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <main+0x1b0>)
 800153a:	fb83 1302 	smull	r1, r3, r3, r2
 800153e:	4413      	add	r3, r2
 8001540:	1159      	asrs	r1, r3, #5
 8001542:	17d3      	asrs	r3, r2, #31
 8001544:	1ac9      	subs	r1, r1, r3
 8001546:	460b      	mov	r3, r1
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	1a5b      	subs	r3, r3, r1
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	1ad1      	subs	r1, r2, r3
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <main+0x1b8>)
 8001552:	6019      	str	r1, [r3, #0]
		  LCD1602_1stLine();
 8001554:	f7ff fe88 	bl	8001268 <LCD1602_1stLine>
		  LCD1602_PrintInt(minutes);
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <main+0x1b4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fe93 	bl	8001288 <LCD1602_PrintInt>
		  LCD1602_print("dk");
 8001562:	4818      	ldr	r0, [pc, #96]	; (80015c4 <main+0x1bc>)
 8001564:	f7ff fe3c 	bl	80011e0 <LCD1602_print>
		  LCD1602_PrintInt(secondDigit);
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <main+0x1b8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fe8b 	bl	8001288 <LCD1602_PrintInt>
		  LCD1602_print("sn'de");
 8001572:	4815      	ldr	r0, [pc, #84]	; (80015c8 <main+0x1c0>)
 8001574:	f7ff fe34 	bl	80011e0 <LCD1602_print>
	  }
	  LCD1602_2ndLine();
 8001578:	f7ff fe7e 	bl	8001278 <LCD1602_2ndLine>
	  LCD1602_PrintInt(kisi);
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <main+0x1a0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fe81 	bl	8001288 <LCD1602_PrintInt>
	  LCD1602_print("kisi gecti.");
 8001586:	4811      	ldr	r0, [pc, #68]	; (80015cc <main+0x1c4>)
 8001588:	f7ff fe2a 	bl	80011e0 <LCD1602_print>
	  if(menuItem==0)
 800158c:	e76a      	b.n	8001464 <main+0x5c>
 800158e:	bf00      	nop
 8001590:	200000e0 	.word	0x200000e0
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40020400 	.word	0x40020400
 800159c:	40021000 	.word	0x40021000
 80015a0:	200000d4 	.word	0x200000d4
 80015a4:	40020000 	.word	0x40020000
 80015a8:	200000b0 	.word	0x200000b0
 80015ac:	200000c0 	.word	0x200000c0
 80015b0:	200000b4 	.word	0x200000b4
 80015b4:	08003cec 	.word	0x08003cec
 80015b8:	88888889 	.word	0x88888889
 80015bc:	200000bc 	.word	0x200000bc
 80015c0:	20000124 	.word	0x20000124
 80015c4:	08003cf8 	.word	0x08003cf8
 80015c8:	08003cfc 	.word	0x08003cfc
 80015cc:	08003d04 	.word	0x08003d04

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	2230      	movs	r2, #48	; 0x30
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 ff2c 	bl	800343c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	4b28      	ldr	r3, [pc, #160]	; (800169c <SystemClock_Config+0xcc>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a27      	ldr	r2, [pc, #156]	; (800169c <SystemClock_Config+0xcc>)
 80015fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <SystemClock_Config+0xcc>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <SystemClock_Config+0xd0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a21      	ldr	r2, [pc, #132]	; (80016a0 <SystemClock_Config+0xd0>)
 800161a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <SystemClock_Config+0xd0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800162c:	2302      	movs	r3, #2
 800162e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001630:	2301      	movs	r3, #1
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001634:	2310      	movs	r3, #16
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001638:	2302      	movs	r3, #2
 800163a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800163c:	2300      	movs	r3, #0
 800163e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001640:	2308      	movs	r3, #8
 8001642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001644:	2354      	movs	r3, #84	; 0x54
 8001646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001648:	2302      	movs	r3, #2
 800164a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800164c:	2304      	movs	r3, #4
 800164e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001650:	f107 0320 	add.w	r3, r7, #32
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fe47 	bl	80022e8 <HAL_RCC_OscConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001660:	f000 f962 	bl	8001928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001664:	230f      	movs	r3, #15
 8001666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001668:	2302      	movs	r3, #2
 800166a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	2102      	movs	r1, #2
 8001682:	4618      	mov	r0, r3
 8001684:	f001 f8a0 	bl	80027c8 <HAL_RCC_ClockConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800168e:	f000 f94b 	bl	8001928 <Error_Handler>
  }
}
 8001692:	bf00      	nop
 8001694:	3750      	adds	r7, #80	; 0x50
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40007000 	.word	0x40007000

080016a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	463b      	mov	r3, r7
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <MX_TIM1_Init+0x98>)
 80016c2:	4a1f      	ldr	r2, [pc, #124]	; (8001740 <MX_TIM1_Init+0x9c>)
 80016c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <MX_TIM1_Init+0x98>)
 80016c8:	2253      	movs	r2, #83	; 0x53
 80016ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_TIM1_Init+0x98>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_TIM1_Init+0x98>)
 80016d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_TIM1_Init+0x98>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <MX_TIM1_Init+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_TIM1_Init+0x98>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016ec:	4813      	ldr	r0, [pc, #76]	; (800173c <MX_TIM1_Init+0x98>)
 80016ee:	f001 fa7b 	bl	8002be8 <HAL_TIM_Base_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016f8:	f000 f916 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001700:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_TIM1_Init+0x98>)
 800170a:	f001 fbc4 	bl	8002e96 <HAL_TIM_ConfigClockSource>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001714:	f000 f908 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001718:	2320      	movs	r3, #32
 800171a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_TIM1_Init+0x98>)
 8001726:	f001 fdcf 	bl	80032c8 <HAL_TIMEx_MasterConfigSynchronization>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001730:	f000 f8fa 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200000e0 	.word	0x200000e0
 8001740:	40010000 	.word	0x40010000

08001744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	; 0x30
 8001748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	f107 031c 	add.w	r3, r7, #28
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	4b6b      	ldr	r3, [pc, #428]	; (800190c <MX_GPIO_Init+0x1c8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a6a      	ldr	r2, [pc, #424]	; (800190c <MX_GPIO_Init+0x1c8>)
 8001764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b68      	ldr	r3, [pc, #416]	; (800190c <MX_GPIO_Init+0x1c8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001772:	61bb      	str	r3, [r7, #24]
 8001774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	4b64      	ldr	r3, [pc, #400]	; (800190c <MX_GPIO_Init+0x1c8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a63      	ldr	r2, [pc, #396]	; (800190c <MX_GPIO_Init+0x1c8>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b61      	ldr	r3, [pc, #388]	; (800190c <MX_GPIO_Init+0x1c8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b5d      	ldr	r3, [pc, #372]	; (800190c <MX_GPIO_Init+0x1c8>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a5c      	ldr	r2, [pc, #368]	; (800190c <MX_GPIO_Init+0x1c8>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b5a      	ldr	r3, [pc, #360]	; (800190c <MX_GPIO_Init+0x1c8>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b56      	ldr	r3, [pc, #344]	; (800190c <MX_GPIO_Init+0x1c8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a55      	ldr	r2, [pc, #340]	; (800190c <MX_GPIO_Init+0x1c8>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b53      	ldr	r3, [pc, #332]	; (800190c <MX_GPIO_Init+0x1c8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b4f      	ldr	r3, [pc, #316]	; (800190c <MX_GPIO_Init+0x1c8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a4e      	ldr	r2, [pc, #312]	; (800190c <MX_GPIO_Init+0x1c8>)
 80017d4:	f043 0308 	orr.w	r3, r3, #8
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b4c      	ldr	r3, [pc, #304]	; (800190c <MX_GPIO_Init+0x1c8>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b48      	ldr	r3, [pc, #288]	; (800190c <MX_GPIO_Init+0x1c8>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a47      	ldr	r2, [pc, #284]	; (800190c <MX_GPIO_Init+0x1c8>)
 80017f0:	f043 0310 	orr.w	r3, r3, #16
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b45      	ldr	r3, [pc, #276]	; (800190c <MX_GPIO_Init+0x1c8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin|OSC_OUT_Pin, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	210f      	movs	r1, #15
 8001806:	4842      	ldr	r0, [pc, #264]	; (8001910 <MX_GPIO_Init+0x1cc>)
 8001808:	f000 fd16 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D0_Pin|D1_Pin|D2_Pin|D3_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001812:	4840      	ldr	r0, [pc, #256]	; (8001914 <MX_GPIO_Init+0x1d0>)
 8001814:	f000 fd10 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800181e:	483e      	ldr	r0, [pc, #248]	; (8001918 <MX_GPIO_Init+0x1d4>)
 8001820:	f000 fd0a 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|E_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	2103      	movs	r1, #3
 8001828:	483c      	ldr	r0, [pc, #240]	; (800191c <MX_GPIO_Init+0x1d8>)
 800182a:	f000 fd05 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_YELLOW_Pin LED_RED_Pin OSC_OUT_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin|OSC_OUT_Pin;
 800182e:	230f      	movs	r3, #15
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	4832      	ldr	r0, [pc, #200]	; (8001910 <MX_GPIO_Init+0x1cc>)
 8001846:	f000 fb5d 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800184a:	2320      	movs	r3, #32
 800184c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800184e:	4b34      	ldr	r3, [pc, #208]	; (8001920 <MX_GPIO_Init+0x1dc>)
 8001850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4619      	mov	r1, r3
 800185c:	4831      	ldr	r0, [pc, #196]	; (8001924 <MX_GPIO_Init+0x1e0>)
 800185e:	f000 fb51 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001862:	2303      	movs	r3, #3
 8001864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <MX_GPIO_Init+0x1dc>)
 8001868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	4619      	mov	r1, r3
 8001874:	4827      	ldr	r0, [pc, #156]	; (8001914 <MX_GPIO_Init+0x1d0>)
 8001876:	f000 fb45 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin;
 800187a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800187e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4619      	mov	r1, r3
 8001892:	4820      	ldr	r0, [pc, #128]	; (8001914 <MX_GPIO_Init+0x1d0>)
 8001894:	f000 fb36 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8001898:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	4619      	mov	r1, r3
 80018b0:	4819      	ldr	r0, [pc, #100]	; (8001918 <MX_GPIO_Init+0x1d4>)
 80018b2:	f000 fb27 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin;
 80018b6:	2303      	movs	r3, #3
 80018b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <MX_GPIO_Init+0x1d8>)
 80018ce:	f000 fb19 	bl	8001f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	2006      	movs	r0, #6
 80018d8:	f000 fadd 	bl	8001e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018dc:	2006      	movs	r0, #6
 80018de:	f000 faf6 	bl	8001ece <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	2007      	movs	r0, #7
 80018e8:	f000 fad5 	bl	8001e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80018ec:	2007      	movs	r0, #7
 80018ee:	f000 faee 	bl	8001ece <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2017      	movs	r0, #23
 80018f8:	f000 facd 	bl	8001e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018fc:	2017      	movs	r0, #23
 80018fe:	f000 fae6 	bl	8001ece <HAL_NVIC_EnableIRQ>

}
 8001902:	bf00      	nop
 8001904:	3730      	adds	r7, #48	; 0x30
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020400 	.word	0x40020400
 8001918:	40020c00 	.word	0x40020c00
 800191c:	40021000 	.word	0x40021000
 8001920:	10110000 	.word	0x10110000
 8001924:	40020800 	.word	0x40020800

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <HAL_MspInit+0x4c>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <HAL_MspInit+0x4c>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_MspInit+0x4c>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_MspInit+0x4c>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_MspInit+0x4c>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001968:	6413      	str	r3, [r2, #64]	; 0x40
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_MspInit+0x4c>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_TIM_Base_MspInit+0x48>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d115      	bne.n	80019c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_TIM_Base_MspInit+0x4c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <HAL_TIM_Base_MspInit+0x4c>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_TIM_Base_MspInit+0x4c>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2101      	movs	r1, #1
 80019ba:	2019      	movs	r0, #25
 80019bc:	f000 fa6b 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80019c0:	2019      	movs	r0, #25
 80019c2:	f000 fa84 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40010000 	.word	0x40010000
 80019d4:	40023800 	.word	0x40023800

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <HardFault_Handler+0x4>

080019ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <MemManage_Handler+0x4>

080019f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <UsageFault_Handler+0x4>

080019fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2c:	f000 f916 	bl	8001c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if(menuItem==1 && duraksamaItem==0)
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <EXTI0_IRQHandler+0x28>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d108      	bne.n	8001a52 <EXTI0_IRQHandler+0x1e>
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <EXTI0_IRQHandler+0x2c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d104      	bne.n	8001a52 <EXTI0_IRQHandler+0x1e>
	{
		kisi++;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <EXTI0_IRQHandler+0x30>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <EXTI0_IRQHandler+0x30>)
 8001a50:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a52:	2001      	movs	r0, #1
 8001a54:	f000 fc24 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200000d4 	.word	0x200000d4
 8001a60:	200000b4 	.word	0x200000b4
 8001a64:	200000b0 	.word	0x200000b0

08001a68 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	if(menuItem==0)
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <EXTI1_IRQHandler+0x24>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d103      	bne.n	8001a7c <EXTI1_IRQHandler+0x14>
			{
				menuItem=1;
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <EXTI1_IRQHandler+0x24>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e002      	b.n	8001a82 <EXTI1_IRQHandler+0x1a>
			}
			else
			{
				menuItem=0;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <EXTI1_IRQHandler+0x24>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
			}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001a82:	2002      	movs	r0, #2
 8001a84:	f000 fc0c 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200000d4 	.word	0x200000d4

08001a90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(duraksamaItem==0)
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <EXTI9_5_IRQHandler+0x24>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d103      	bne.n	8001aa4 <EXTI9_5_IRQHandler+0x14>
	{
		duraksamaItem=1;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <EXTI9_5_IRQHandler+0x24>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e002      	b.n	8001aaa <EXTI9_5_IRQHandler+0x1a>
	}
	else
	{
		duraksamaItem=0;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <EXTI9_5_IRQHandler+0x24>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001aaa:	2020      	movs	r0, #32
 8001aac:	f000 fbf8 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200000b4 	.word	0x200000b4

08001ab8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001abe:	f001 f8e2 	bl	8002c86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200000e0 	.word	0x200000e0

08001acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad4:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <_sbrk+0x5c>)
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <_sbrk+0x60>)
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <_sbrk+0x64>)
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <_sbrk+0x68>)
 8001aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d207      	bcs.n	8001b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001afc:	f001 fc74 	bl	80033e8 <__errno>
 8001b00:	4602      	mov	r2, r0
 8001b02:	230c      	movs	r3, #12
 8001b04:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	e009      	b.n	8001b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <_sbrk+0x64>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <_sbrk+0x64>)
 8001b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20020000 	.word	0x20020000
 8001b2c:	00000400 	.word	0x00000400
 8001b30:	200000c4 	.word	0x200000c4
 8001b34:	20000130 	.word	0x20000130

08001b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <SystemInit+0x28>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <SystemInit+0x28>)
 8001b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SystemInit+0x28>)
 8001b4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b52:	609a      	str	r2, [r3, #8]
#endif
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b6a:	e003      	b.n	8001b74 <LoopCopyDataInit>

08001b6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b72:	3104      	adds	r1, #4

08001b74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b74:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b7c:	d3f6      	bcc.n	8001b6c <CopyDataInit>
  ldr  r2, =_sbss
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b80:	e002      	b.n	8001b88 <LoopFillZerobss>

08001b82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b84:	f842 3b04 	str.w	r3, [r2], #4

08001b88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b8c:	d3f9      	bcc.n	8001b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b8e:	f7ff ffd3 	bl	8001b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b92:	f001 fc2f 	bl	80033f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7ff fc37 	bl	8001408 <main>
  bx  lr    
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ba0:	08003d6c 	.word	0x08003d6c
  ldr  r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ba8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001bac:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001bb0:	20000130 	.word	0x20000130

08001bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_Init+0x40>)
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_Init+0x40>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_Init+0x40>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 f94d 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 f808 	bl	8001bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bec:	f7ff fea4 	bl	8001938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x54>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x58>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f965 	bl	8001eea <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00e      	b.n	8001c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d80a      	bhi.n	8001c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 f92d 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <HAL_InitTick+0x5c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000004 	.word	0x20000004
 8001c54:	2000000c 	.word	0x2000000c
 8001c58:	20000008 	.word	0x20000008

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	2000000c 	.word	0x2000000c
 8001c80:	20000128 	.word	0x20000128

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000128 	.word	0x20000128

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff ffee 	bl	8001c84 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_Delay+0x40>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2000000c 	.word	0x2000000c

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	; (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff8e 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff29 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff3e 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff8e 	bl	8001dd4 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5d 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff31 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e16b      	b.n	80021f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f20:	2201      	movs	r2, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f040 815a 	bne.w	80021f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d00b      	beq.n	8001f5e <HAL_GPIO_Init+0x5a>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d007      	beq.n	8001f5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f52:	2b11      	cmp	r3, #17
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b12      	cmp	r3, #18
 8001f5c:	d130      	bne.n	8001fc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f94:	2201      	movs	r2, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 0201 	and.w	r2, r3, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0xfc>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b12      	cmp	r3, #18
 8001ffe:	d123      	bne.n	8002048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	08da      	lsrs	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3208      	adds	r2, #8
 8002008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	220f      	movs	r2, #15
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3208      	adds	r2, #8
 8002042:	69b9      	ldr	r1, [r7, #24]
 8002044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	2203      	movs	r2, #3
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0203 	and.w	r2, r3, #3
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80b4 	beq.w	80021f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b5f      	ldr	r3, [pc, #380]	; (800220c <HAL_GPIO_Init+0x308>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a5e      	ldr	r2, [pc, #376]	; (800220c <HAL_GPIO_Init+0x308>)
 8002094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b5c      	ldr	r3, [pc, #368]	; (800220c <HAL_GPIO_Init+0x308>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a6:	4a5a      	ldr	r2, [pc, #360]	; (8002210 <HAL_GPIO_Init+0x30c>)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	220f      	movs	r2, #15
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a51      	ldr	r2, [pc, #324]	; (8002214 <HAL_GPIO_Init+0x310>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d02b      	beq.n	800212a <HAL_GPIO_Init+0x226>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a50      	ldr	r2, [pc, #320]	; (8002218 <HAL_GPIO_Init+0x314>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d025      	beq.n	8002126 <HAL_GPIO_Init+0x222>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4f      	ldr	r2, [pc, #316]	; (800221c <HAL_GPIO_Init+0x318>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01f      	beq.n	8002122 <HAL_GPIO_Init+0x21e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4e      	ldr	r2, [pc, #312]	; (8002220 <HAL_GPIO_Init+0x31c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d019      	beq.n	800211e <HAL_GPIO_Init+0x21a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4d      	ldr	r2, [pc, #308]	; (8002224 <HAL_GPIO_Init+0x320>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_GPIO_Init+0x216>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4c      	ldr	r2, [pc, #304]	; (8002228 <HAL_GPIO_Init+0x324>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00d      	beq.n	8002116 <HAL_GPIO_Init+0x212>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4b      	ldr	r2, [pc, #300]	; (800222c <HAL_GPIO_Init+0x328>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d007      	beq.n	8002112 <HAL_GPIO_Init+0x20e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4a      	ldr	r2, [pc, #296]	; (8002230 <HAL_GPIO_Init+0x32c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d101      	bne.n	800210e <HAL_GPIO_Init+0x20a>
 800210a:	2307      	movs	r3, #7
 800210c:	e00e      	b.n	800212c <HAL_GPIO_Init+0x228>
 800210e:	2308      	movs	r3, #8
 8002110:	e00c      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002112:	2306      	movs	r3, #6
 8002114:	e00a      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002116:	2305      	movs	r3, #5
 8002118:	e008      	b.n	800212c <HAL_GPIO_Init+0x228>
 800211a:	2304      	movs	r3, #4
 800211c:	e006      	b.n	800212c <HAL_GPIO_Init+0x228>
 800211e:	2303      	movs	r3, #3
 8002120:	e004      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002122:	2302      	movs	r3, #2
 8002124:	e002      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_GPIO_Init+0x228>
 800212a:	2300      	movs	r3, #0
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	f002 0203 	and.w	r2, r2, #3
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	4093      	lsls	r3, r2
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800213c:	4934      	ldr	r1, [pc, #208]	; (8002210 <HAL_GPIO_Init+0x30c>)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800214a:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <HAL_GPIO_Init+0x330>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800216e:	4a31      	ldr	r2, [pc, #196]	; (8002234 <HAL_GPIO_Init+0x330>)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002174:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_GPIO_Init+0x330>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002198:	4a26      	ldr	r2, [pc, #152]	; (8002234 <HAL_GPIO_Init+0x330>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800219e:	4b25      	ldr	r3, [pc, #148]	; (8002234 <HAL_GPIO_Init+0x330>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021c2:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <HAL_GPIO_Init+0x330>)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <HAL_GPIO_Init+0x330>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021ec:	4a11      	ldr	r2, [pc, #68]	; (8002234 <HAL_GPIO_Init+0x330>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3301      	adds	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b0f      	cmp	r3, #15
 80021fc:	f67f ae90 	bls.w	8001f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002200:	bf00      	nop
 8002202:	3724      	adds	r7, #36	; 0x24
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	40023800 	.word	0x40023800
 8002210:	40013800 	.word	0x40013800
 8002214:	40020000 	.word	0x40020000
 8002218:	40020400 	.word	0x40020400
 800221c:	40020800 	.word	0x40020800
 8002220:	40020c00 	.word	0x40020c00
 8002224:	40021000 	.word	0x40021000
 8002228:	40021400 	.word	0x40021400
 800222c:	40021800 	.word	0x40021800
 8002230:	40021c00 	.word	0x40021c00
 8002234:	40013c00 	.word	0x40013c00

08002238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002254:	e003      	b.n	800225e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	041a      	lsls	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	619a      	str	r2, [r3, #24]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	401a      	ands	r2, r3
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	429a      	cmp	r2, r3
 8002282:	d104      	bne.n	800228e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	041a      	lsls	r2, r3, #16
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800228c:	e002      	b.n	8002294 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f806 	bl	80022d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40013c00 	.word	0x40013c00

080022d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e25b      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d075      	beq.n	80023f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002306:	4ba3      	ldr	r3, [pc, #652]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d00c      	beq.n	800232c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002312:	4ba0      	ldr	r3, [pc, #640]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231a:	2b08      	cmp	r3, #8
 800231c:	d112      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b9d      	ldr	r3, [pc, #628]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232a:	d10b      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	4b99      	ldr	r3, [pc, #612]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d05b      	beq.n	80023f0 <HAL_RCC_OscConfig+0x108>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d157      	bne.n	80023f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e236      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d106      	bne.n	800235c <HAL_RCC_OscConfig+0x74>
 800234e:	4b91      	ldr	r3, [pc, #580]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a90      	ldr	r2, [pc, #576]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e01d      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x98>
 8002366:	4b8b      	ldr	r3, [pc, #556]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a8a      	ldr	r2, [pc, #552]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b88      	ldr	r3, [pc, #544]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a87      	ldr	r2, [pc, #540]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 8002380:	4b84      	ldr	r3, [pc, #528]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a83      	ldr	r2, [pc, #524]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b81      	ldr	r3, [pc, #516]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a80      	ldr	r2, [pc, #512]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7ff fc70 	bl	8001c84 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7ff fc6c 	bl	8001c84 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1fb      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0xc0>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7ff fc5c 	bl	8001c84 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7ff fc58 	bl	8001c84 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1e7      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0xe8>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d063      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240a:	4b62      	ldr	r3, [pc, #392]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002412:	2b08      	cmp	r3, #8
 8002414:	d11c      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b5f      	ldr	r3, [pc, #380]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d116      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	4b5c      	ldr	r3, [pc, #368]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e1bb      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b56      	ldr	r3, [pc, #344]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4952      	ldr	r1, [pc, #328]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	e03a      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002458:	4b4f      	ldr	r3, [pc, #316]	; (8002598 <HAL_RCC_OscConfig+0x2b0>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7ff fc11 	bl	8001c84 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002466:	f7ff fc0d 	bl	8001c84 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e19c      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4940      	ldr	r1, [pc, #256]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e015      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_OscConfig+0x2b0>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7ff fbf0 	bl	8001c84 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a8:	f7ff fbec 	bl	8001c84 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e17b      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d030      	beq.n	8002534 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d016      	beq.n	8002508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_RCC_OscConfig+0x2b4>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7ff fbd0 	bl	8001c84 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e8:	f7ff fbcc 	bl	8001c84 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e15b      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x200>
 8002506:	e015      	b.n	8002534 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002508:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_OscConfig+0x2b4>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7ff fbb9 	bl	8001c84 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002516:	f7ff fbb5 	bl	8001c84 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e144      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800252a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80a0 	beq.w	8002682 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d121      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7ff fb7b 	bl	8001c84 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	e011      	b.n	80025b6 <HAL_RCC_OscConfig+0x2ce>
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	42470000 	.word	0x42470000
 800259c:	42470e80 	.word	0x42470e80
 80025a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a4:	f7ff fb6e 	bl	8001c84 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e0fd      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b6:	4b81      	ldr	r3, [pc, #516]	; (80027bc <HAL_RCC_OscConfig+0x4d4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d106      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
 80025ca:	4b7d      	ldr	r3, [pc, #500]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a7c      	ldr	r2, [pc, #496]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
 80025d6:	e01c      	b.n	8002612 <HAL_RCC_OscConfig+0x32a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d10c      	bne.n	80025fa <HAL_RCC_OscConfig+0x312>
 80025e0:	4b77      	ldr	r3, [pc, #476]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a76      	ldr	r2, [pc, #472]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	4b74      	ldr	r3, [pc, #464]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a73      	ldr	r2, [pc, #460]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	e00b      	b.n	8002612 <HAL_RCC_OscConfig+0x32a>
 80025fa:	4b71      	ldr	r3, [pc, #452]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a70      	ldr	r2, [pc, #448]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	4b6e      	ldr	r3, [pc, #440]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a6d      	ldr	r2, [pc, #436]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 800260c:	f023 0304 	bic.w	r3, r3, #4
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d015      	beq.n	8002646 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7ff fb33 	bl	8001c84 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7ff fb2f 	bl	8001c84 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e0bc      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002638:	4b61      	ldr	r3, [pc, #388]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ee      	beq.n	8002622 <HAL_RCC_OscConfig+0x33a>
 8002644:	e014      	b.n	8002670 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7ff fb1d 	bl	8001c84 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7ff fb19 	bl	8001c84 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0a6      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002664:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ee      	bne.n	800264e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d105      	bne.n	8002682 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b52      	ldr	r3, [pc, #328]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a51      	ldr	r2, [pc, #324]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 800267c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8092 	beq.w	80027b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268c:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b08      	cmp	r3, #8
 8002696:	d05c      	beq.n	8002752 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d141      	bne.n	8002724 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a0:	4b48      	ldr	r3, [pc, #288]	; (80027c4 <HAL_RCC_OscConfig+0x4dc>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7ff faed 	bl	8001c84 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ae:	f7ff fae9 	bl	8001c84 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e078      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c0:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f0      	bne.n	80026ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69da      	ldr	r2, [r3, #28]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	019b      	lsls	r3, r3, #6
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	3b01      	subs	r3, #1
 80026e6:	041b      	lsls	r3, r3, #16
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	061b      	lsls	r3, r3, #24
 80026f0:	4933      	ldr	r1, [pc, #204]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f6:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <HAL_RCC_OscConfig+0x4dc>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7ff fac2 	bl	8001c84 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002704:	f7ff fabe 	bl	8001c84 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e04d      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002716:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x41c>
 8002722:	e045      	b.n	80027b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_RCC_OscConfig+0x4dc>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7ff faab 	bl	8001c84 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002732:	f7ff faa7 	bl	8001c84 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e036      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002744:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x44a>
 8002750:	e02e      	b.n	80027b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e029      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	429a      	cmp	r2, r3
 8002770:	d11c      	bne.n	80027ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d115      	bne.n	80027ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002786:	4013      	ands	r3, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800278c:	4293      	cmp	r3, r2
 800278e:	d10d      	bne.n	80027ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d106      	bne.n	80027ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40007000 	.word	0x40007000
 80027c0:	40023800 	.word	0x40023800
 80027c4:	42470060 	.word	0x42470060

080027c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0cc      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b68      	ldr	r3, [pc, #416]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d90c      	bls.n	8002804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b65      	ldr	r3, [pc, #404]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0b8      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800281c:	4b59      	ldr	r3, [pc, #356]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002834:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800283e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	494d      	ldr	r1, [pc, #308]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d044      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d119      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d003      	beq.n	8002886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002882:	2b03      	cmp	r3, #3
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002886:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e06f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e067      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f023 0203 	bic.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4934      	ldr	r1, [pc, #208]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b8:	f7ff f9e4 	bl	8001c84 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7ff f9e0 	bl	8001c84 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e04f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 020c 	and.w	r2, r3, #12
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1eb      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e8:	4b25      	ldr	r3, [pc, #148]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d20c      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e032      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4916      	ldr	r1, [pc, #88]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	490e      	ldr	r1, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800294e:	f000 f821 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8002952:	4601      	mov	r1, r0
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	5cd3      	ldrb	r3, [r2, r3]
 8002962:	fa21 f303 	lsr.w	r3, r1, r3
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f944 	bl	8001bfc <HAL_InitTick>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023c00 	.word	0x40023c00
 8002984:	40023800 	.word	0x40023800
 8002988:	08003d10 	.word	0x08003d10
 800298c:	20000004 	.word	0x20000004
 8002990:	20000008 	.word	0x20000008

08002994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	2300      	movs	r3, #0
 80029a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029aa:	4b63      	ldr	r3, [pc, #396]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d007      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x32>
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d008      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x38>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 80b4 	bne.w	8002b28 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029c0:	4b5e      	ldr	r3, [pc, #376]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029c2:	60bb      	str	r3, [r7, #8]
       break;
 80029c4:	e0b3      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029c6:	4b5e      	ldr	r3, [pc, #376]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80029c8:	60bb      	str	r3, [r7, #8]
      break;
 80029ca:	e0b0      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029cc:	4b5a      	ldr	r3, [pc, #360]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029d6:	4b58      	ldr	r3, [pc, #352]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d04a      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e2:	4b55      	ldr	r3, [pc, #340]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	099b      	lsrs	r3, r3, #6
 80029e8:	f04f 0400 	mov.w	r4, #0
 80029ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	ea03 0501 	and.w	r5, r3, r1
 80029f8:	ea04 0602 	and.w	r6, r4, r2
 80029fc:	4629      	mov	r1, r5
 80029fe:	4632      	mov	r2, r6
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	f04f 0400 	mov.w	r4, #0
 8002a08:	0154      	lsls	r4, r2, #5
 8002a0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a0e:	014b      	lsls	r3, r1, #5
 8002a10:	4619      	mov	r1, r3
 8002a12:	4622      	mov	r2, r4
 8002a14:	1b49      	subs	r1, r1, r5
 8002a16:	eb62 0206 	sbc.w	r2, r2, r6
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	f04f 0400 	mov.w	r4, #0
 8002a22:	0194      	lsls	r4, r2, #6
 8002a24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a28:	018b      	lsls	r3, r1, #6
 8002a2a:	1a5b      	subs	r3, r3, r1
 8002a2c:	eb64 0402 	sbc.w	r4, r4, r2
 8002a30:	f04f 0100 	mov.w	r1, #0
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	00e2      	lsls	r2, r4, #3
 8002a3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a3e:	00d9      	lsls	r1, r3, #3
 8002a40:	460b      	mov	r3, r1
 8002a42:	4614      	mov	r4, r2
 8002a44:	195b      	adds	r3, r3, r5
 8002a46:	eb44 0406 	adc.w	r4, r4, r6
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	0262      	lsls	r2, r4, #9
 8002a54:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a58:	0259      	lsls	r1, r3, #9
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4614      	mov	r4, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	4621      	mov	r1, r4
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f04f 0400 	mov.w	r4, #0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4623      	mov	r3, r4
 8002a6c:	f7fd ffee 	bl	8000a4c <__aeabi_uldivmod>
 8002a70:	4603      	mov	r3, r0
 8002a72:	460c      	mov	r4, r1
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	e049      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a78:	4b2f      	ldr	r3, [pc, #188]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	099b      	lsrs	r3, r3, #6
 8002a7e:	f04f 0400 	mov.w	r4, #0
 8002a82:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	ea03 0501 	and.w	r5, r3, r1
 8002a8e:	ea04 0602 	and.w	r6, r4, r2
 8002a92:	4629      	mov	r1, r5
 8002a94:	4632      	mov	r2, r6
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	f04f 0400 	mov.w	r4, #0
 8002a9e:	0154      	lsls	r4, r2, #5
 8002aa0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002aa4:	014b      	lsls	r3, r1, #5
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	1b49      	subs	r1, r1, r5
 8002aac:	eb62 0206 	sbc.w	r2, r2, r6
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	f04f 0400 	mov.w	r4, #0
 8002ab8:	0194      	lsls	r4, r2, #6
 8002aba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002abe:	018b      	lsls	r3, r1, #6
 8002ac0:	1a5b      	subs	r3, r3, r1
 8002ac2:	eb64 0402 	sbc.w	r4, r4, r2
 8002ac6:	f04f 0100 	mov.w	r1, #0
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	00e2      	lsls	r2, r4, #3
 8002ad0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ad4:	00d9      	lsls	r1, r3, #3
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4614      	mov	r4, r2
 8002ada:	195b      	adds	r3, r3, r5
 8002adc:	eb44 0406 	adc.w	r4, r4, r6
 8002ae0:	f04f 0100 	mov.w	r1, #0
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	02a2      	lsls	r2, r4, #10
 8002aea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002aee:	0299      	lsls	r1, r3, #10
 8002af0:	460b      	mov	r3, r1
 8002af2:	4614      	mov	r4, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	4621      	mov	r1, r4
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f04f 0400 	mov.w	r4, #0
 8002afe:	461a      	mov	r2, r3
 8002b00:	4623      	mov	r3, r4
 8002b02:	f7fd ffa3 	bl	8000a4c <__aeabi_uldivmod>
 8002b06:	4603      	mov	r3, r0
 8002b08:	460c      	mov	r4, r1
 8002b0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	3301      	adds	r3, #1
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	60bb      	str	r3, [r7, #8]
      break;
 8002b26:	e002      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b2a:	60bb      	str	r3, [r7, #8]
      break;
 8002b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	00f42400 	.word	0x00f42400
 8002b40:	007a1200 	.word	0x007a1200

08002b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000004 	.word	0x20000004

08002b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b60:	f7ff fff0 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b64:	4601      	mov	r1, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0a9b      	lsrs	r3, r3, #10
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4a03      	ldr	r2, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b72:	5cd3      	ldrb	r3, [r2, r3]
 8002b74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	08003d20 	.word	0x08003d20

08002b84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	220f      	movs	r2, #15
 8002b92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	08db      	lsrs	r3, r3, #3
 8002bbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <HAL_RCC_GetClockConfig+0x60>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 020f 	and.w	r2, r3, #15
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	601a      	str	r2, [r3, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40023c00 	.word	0x40023c00

08002be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e01d      	b.n	8002c36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe feba 	bl	8001988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4610      	mov	r0, r2
 8002c28:	f000 fa14 	bl	8003054 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b06      	cmp	r3, #6
 8002c66:	d007      	beq.n	8002c78 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d122      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f06f 0202 	mvn.w	r2, #2
 8002cb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f9a5 	bl	8003018 <HAL_TIM_IC_CaptureCallback>
 8002cce:	e005      	b.n	8002cdc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f997 	bl	8003004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f9a8 	bl	800302c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d122      	bne.n	8002d36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d11b      	bne.n	8002d36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f06f 0204 	mvn.w	r2, #4
 8002d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f97b 	bl	8003018 <HAL_TIM_IC_CaptureCallback>
 8002d22:	e005      	b.n	8002d30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f96d 	bl	8003004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f97e 	bl	800302c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d122      	bne.n	8002d8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d11b      	bne.n	8002d8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f06f 0208 	mvn.w	r2, #8
 8002d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f951 	bl	8003018 <HAL_TIM_IC_CaptureCallback>
 8002d76:	e005      	b.n	8002d84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f943 	bl	8003004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f954 	bl	800302c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d122      	bne.n	8002dde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d11b      	bne.n	8002dde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f06f 0210 	mvn.w	r2, #16
 8002dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2208      	movs	r2, #8
 8002db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f927 	bl	8003018 <HAL_TIM_IC_CaptureCallback>
 8002dca:	e005      	b.n	8002dd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f919 	bl	8003004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f92a 	bl	800302c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d10e      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d107      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f06f 0201 	mvn.w	r2, #1
 8002e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7fe fa55 	bl	80012b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e14:	2b80      	cmp	r3, #128	; 0x80
 8002e16:	d10e      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d107      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 facf 	bl	80033d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	d10e      	bne.n	8002e62 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d107      	bne.n	8002e62 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f8ef 	bl	8003040 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d10e      	bne.n	8002e8e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d107      	bne.n	8002e8e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f06f 0220 	mvn.w	r2, #32
 8002e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fa99 	bl	80033c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_TIM_ConfigClockSource+0x18>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e0a6      	b.n	8002ffc <HAL_TIM_ConfigClockSource+0x166>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ecc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d067      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x120>
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d80b      	bhi.n	8002f02 <HAL_TIM_ConfigClockSource+0x6c>
 8002eea:	2b10      	cmp	r3, #16
 8002eec:	d073      	beq.n	8002fd6 <HAL_TIM_ConfigClockSource+0x140>
 8002eee:	2b10      	cmp	r3, #16
 8002ef0:	d802      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x62>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d06f      	beq.n	8002fd6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ef6:	e078      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d06c      	beq.n	8002fd6 <HAL_TIM_ConfigClockSource+0x140>
 8002efc:	2b30      	cmp	r3, #48	; 0x30
 8002efe:	d06a      	beq.n	8002fd6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002f00:	e073      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f02:	2b70      	cmp	r3, #112	; 0x70
 8002f04:	d00d      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x8c>
 8002f06:	2b70      	cmp	r3, #112	; 0x70
 8002f08:	d804      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x7e>
 8002f0a:	2b50      	cmp	r3, #80	; 0x50
 8002f0c:	d033      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0xe0>
 8002f0e:	2b60      	cmp	r3, #96	; 0x60
 8002f10:	d041      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002f12:	e06a      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f18:	d066      	beq.n	8002fe8 <HAL_TIM_ConfigClockSource+0x152>
 8002f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1e:	d017      	beq.n	8002f50 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002f20:	e063      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6899      	ldr	r1, [r3, #8]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f000 f9a9 	bl	8003288 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	609a      	str	r2, [r3, #8]
      break;
 8002f4e:	e04c      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	6899      	ldr	r1, [r3, #8]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f000 f992 	bl	8003288 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f72:	609a      	str	r2, [r3, #8]
      break;
 8002f74:	e039      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f000 f906 	bl	8003194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2150      	movs	r1, #80	; 0x50
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f95f 	bl	8003252 <TIM_ITRx_SetConfig>
      break;
 8002f94:	e029      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	6859      	ldr	r1, [r3, #4]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f000 f925 	bl	80031f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2160      	movs	r1, #96	; 0x60
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f94f 	bl	8003252 <TIM_ITRx_SetConfig>
      break;
 8002fb4:	e019      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6859      	ldr	r1, [r3, #4]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f000 f8e6 	bl	8003194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2140      	movs	r1, #64	; 0x40
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f93f 	bl	8003252 <TIM_ITRx_SetConfig>
      break;
 8002fd4:	e009      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	f000 f936 	bl	8003252 <TIM_ITRx_SetConfig>
      break;
 8002fe6:	e000      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002fe8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a40      	ldr	r2, [pc, #256]	; (8003168 <TIM_Base_SetConfig+0x114>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d013      	beq.n	8003094 <TIM_Base_SetConfig+0x40>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003072:	d00f      	beq.n	8003094 <TIM_Base_SetConfig+0x40>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a3d      	ldr	r2, [pc, #244]	; (800316c <TIM_Base_SetConfig+0x118>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00b      	beq.n	8003094 <TIM_Base_SetConfig+0x40>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a3c      	ldr	r2, [pc, #240]	; (8003170 <TIM_Base_SetConfig+0x11c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d007      	beq.n	8003094 <TIM_Base_SetConfig+0x40>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a3b      	ldr	r2, [pc, #236]	; (8003174 <TIM_Base_SetConfig+0x120>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d003      	beq.n	8003094 <TIM_Base_SetConfig+0x40>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a3a      	ldr	r2, [pc, #232]	; (8003178 <TIM_Base_SetConfig+0x124>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d108      	bne.n	80030a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a2f      	ldr	r2, [pc, #188]	; (8003168 <TIM_Base_SetConfig+0x114>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d02b      	beq.n	8003106 <TIM_Base_SetConfig+0xb2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b4:	d027      	beq.n	8003106 <TIM_Base_SetConfig+0xb2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a2c      	ldr	r2, [pc, #176]	; (800316c <TIM_Base_SetConfig+0x118>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d023      	beq.n	8003106 <TIM_Base_SetConfig+0xb2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a2b      	ldr	r2, [pc, #172]	; (8003170 <TIM_Base_SetConfig+0x11c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01f      	beq.n	8003106 <TIM_Base_SetConfig+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a2a      	ldr	r2, [pc, #168]	; (8003174 <TIM_Base_SetConfig+0x120>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01b      	beq.n	8003106 <TIM_Base_SetConfig+0xb2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a29      	ldr	r2, [pc, #164]	; (8003178 <TIM_Base_SetConfig+0x124>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d017      	beq.n	8003106 <TIM_Base_SetConfig+0xb2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a28      	ldr	r2, [pc, #160]	; (800317c <TIM_Base_SetConfig+0x128>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <TIM_Base_SetConfig+0xb2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a27      	ldr	r2, [pc, #156]	; (8003180 <TIM_Base_SetConfig+0x12c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00f      	beq.n	8003106 <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a26      	ldr	r2, [pc, #152]	; (8003184 <TIM_Base_SetConfig+0x130>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00b      	beq.n	8003106 <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a25      	ldr	r2, [pc, #148]	; (8003188 <TIM_Base_SetConfig+0x134>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d007      	beq.n	8003106 <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a24      	ldr	r2, [pc, #144]	; (800318c <TIM_Base_SetConfig+0x138>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d003      	beq.n	8003106 <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a23      	ldr	r2, [pc, #140]	; (8003190 <TIM_Base_SetConfig+0x13c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d108      	bne.n	8003118 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <TIM_Base_SetConfig+0x114>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d003      	beq.n	800314c <TIM_Base_SetConfig+0xf8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a0c      	ldr	r2, [pc, #48]	; (8003178 <TIM_Base_SetConfig+0x124>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d103      	bne.n	8003154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	615a      	str	r2, [r3, #20]
}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40010000 	.word	0x40010000
 800316c:	40000400 	.word	0x40000400
 8003170:	40000800 	.word	0x40000800
 8003174:	40000c00 	.word	0x40000c00
 8003178:	40010400 	.word	0x40010400
 800317c:	40014000 	.word	0x40014000
 8003180:	40014400 	.word	0x40014400
 8003184:	40014800 	.word	0x40014800
 8003188:	40001800 	.word	0x40001800
 800318c:	40001c00 	.word	0x40001c00
 8003190:	40002000 	.word	0x40002000

08003194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f023 0201 	bic.w	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f023 030a 	bic.w	r3, r3, #10
 80031d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	621a      	str	r2, [r3, #32]
}
 80031e6:	bf00      	nop
 80031e8:	371c      	adds	r7, #28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b087      	sub	sp, #28
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f023 0210 	bic.w	r2, r3, #16
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800321c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	031b      	lsls	r3, r3, #12
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800322e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003252:	b480      	push	{r7}
 8003254:	b085      	sub	sp, #20
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	f043 0307 	orr.w	r3, r3, #7
 8003274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	609a      	str	r2, [r3, #8]
}
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	021a      	lsls	r2, r3, #8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	609a      	str	r2, [r3, #8]
}
 80032bc:	bf00      	nop
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032dc:	2302      	movs	r3, #2
 80032de:	e05a      	b.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a21      	ldr	r2, [pc, #132]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d022      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332c:	d01d      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d018      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1b      	ldr	r2, [pc, #108]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1a      	ldr	r2, [pc, #104]	; (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00e      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a18      	ldr	r2, [pc, #96]	; (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d009      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a17      	ldr	r2, [pc, #92]	; (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d004      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a15      	ldr	r2, [pc, #84]	; (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d10c      	bne.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	4313      	orrs	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40000c00 	.word	0x40000c00
 80033b4:	40010400 	.word	0x40010400
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40001800 	.word	0x40001800

080033c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <__errno>:
 80033e8:	4b01      	ldr	r3, [pc, #4]	; (80033f0 <__errno+0x8>)
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000010 	.word	0x20000010

080033f4 <__libc_init_array>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	4e0d      	ldr	r6, [pc, #52]	; (800342c <__libc_init_array+0x38>)
 80033f8:	4c0d      	ldr	r4, [pc, #52]	; (8003430 <__libc_init_array+0x3c>)
 80033fa:	1ba4      	subs	r4, r4, r6
 80033fc:	10a4      	asrs	r4, r4, #2
 80033fe:	2500      	movs	r5, #0
 8003400:	42a5      	cmp	r5, r4
 8003402:	d109      	bne.n	8003418 <__libc_init_array+0x24>
 8003404:	4e0b      	ldr	r6, [pc, #44]	; (8003434 <__libc_init_array+0x40>)
 8003406:	4c0c      	ldr	r4, [pc, #48]	; (8003438 <__libc_init_array+0x44>)
 8003408:	f000 fc62 	bl	8003cd0 <_init>
 800340c:	1ba4      	subs	r4, r4, r6
 800340e:	10a4      	asrs	r4, r4, #2
 8003410:	2500      	movs	r5, #0
 8003412:	42a5      	cmp	r5, r4
 8003414:	d105      	bne.n	8003422 <__libc_init_array+0x2e>
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800341c:	4798      	blx	r3
 800341e:	3501      	adds	r5, #1
 8003420:	e7ee      	b.n	8003400 <__libc_init_array+0xc>
 8003422:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003426:	4798      	blx	r3
 8003428:	3501      	adds	r5, #1
 800342a:	e7f2      	b.n	8003412 <__libc_init_array+0x1e>
 800342c:	08003d64 	.word	0x08003d64
 8003430:	08003d64 	.word	0x08003d64
 8003434:	08003d64 	.word	0x08003d64
 8003438:	08003d68 	.word	0x08003d68

0800343c <memset>:
 800343c:	4402      	add	r2, r0
 800343e:	4603      	mov	r3, r0
 8003440:	4293      	cmp	r3, r2
 8003442:	d100      	bne.n	8003446 <memset+0xa>
 8003444:	4770      	bx	lr
 8003446:	f803 1b01 	strb.w	r1, [r3], #1
 800344a:	e7f9      	b.n	8003440 <memset+0x4>

0800344c <rand>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <rand+0x50>)
 8003450:	681c      	ldr	r4, [r3, #0]
 8003452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003454:	b97b      	cbnz	r3, 8003476 <rand+0x2a>
 8003456:	2018      	movs	r0, #24
 8003458:	f000 f84c 	bl	80034f4 <malloc>
 800345c:	4a10      	ldr	r2, [pc, #64]	; (80034a0 <rand+0x54>)
 800345e:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <rand+0x58>)
 8003460:	63a0      	str	r0, [r4, #56]	; 0x38
 8003462:	e9c0 2300 	strd	r2, r3, [r0]
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <rand+0x5c>)
 8003468:	6083      	str	r3, [r0, #8]
 800346a:	230b      	movs	r3, #11
 800346c:	8183      	strh	r3, [r0, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	2300      	movs	r3, #0
 8003472:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003476:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003478:	480c      	ldr	r0, [pc, #48]	; (80034ac <rand+0x60>)
 800347a:	690a      	ldr	r2, [r1, #16]
 800347c:	694b      	ldr	r3, [r1, #20]
 800347e:	4c0c      	ldr	r4, [pc, #48]	; (80034b0 <rand+0x64>)
 8003480:	4350      	muls	r0, r2
 8003482:	fb04 0003 	mla	r0, r4, r3, r0
 8003486:	fba2 2304 	umull	r2, r3, r2, r4
 800348a:	4403      	add	r3, r0
 800348c:	1c54      	adds	r4, r2, #1
 800348e:	f143 0500 	adc.w	r5, r3, #0
 8003492:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003496:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800349a:	bd38      	pop	{r3, r4, r5, pc}
 800349c:	20000010 	.word	0x20000010
 80034a0:	abcd330e 	.word	0xabcd330e
 80034a4:	e66d1234 	.word	0xe66d1234
 80034a8:	0005deec 	.word	0x0005deec
 80034ac:	5851f42d 	.word	0x5851f42d
 80034b0:	4c957f2d 	.word	0x4c957f2d

080034b4 <siprintf>:
 80034b4:	b40e      	push	{r1, r2, r3}
 80034b6:	b500      	push	{lr}
 80034b8:	b09c      	sub	sp, #112	; 0x70
 80034ba:	ab1d      	add	r3, sp, #116	; 0x74
 80034bc:	9002      	str	r0, [sp, #8]
 80034be:	9006      	str	r0, [sp, #24]
 80034c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034c4:	4809      	ldr	r0, [pc, #36]	; (80034ec <siprintf+0x38>)
 80034c6:	9107      	str	r1, [sp, #28]
 80034c8:	9104      	str	r1, [sp, #16]
 80034ca:	4909      	ldr	r1, [pc, #36]	; (80034f0 <siprintf+0x3c>)
 80034cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80034d0:	9105      	str	r1, [sp, #20]
 80034d2:	6800      	ldr	r0, [r0, #0]
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	a902      	add	r1, sp, #8
 80034d8:	f000 f916 	bl	8003708 <_svfiprintf_r>
 80034dc:	9b02      	ldr	r3, [sp, #8]
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	b01c      	add	sp, #112	; 0x70
 80034e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034e8:	b003      	add	sp, #12
 80034ea:	4770      	bx	lr
 80034ec:	20000010 	.word	0x20000010
 80034f0:	ffff0208 	.word	0xffff0208

080034f4 <malloc>:
 80034f4:	4b02      	ldr	r3, [pc, #8]	; (8003500 <malloc+0xc>)
 80034f6:	4601      	mov	r1, r0
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	f000 b851 	b.w	80035a0 <_malloc_r>
 80034fe:	bf00      	nop
 8003500:	20000010 	.word	0x20000010

08003504 <_free_r>:
 8003504:	b538      	push	{r3, r4, r5, lr}
 8003506:	4605      	mov	r5, r0
 8003508:	2900      	cmp	r1, #0
 800350a:	d045      	beq.n	8003598 <_free_r+0x94>
 800350c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003510:	1f0c      	subs	r4, r1, #4
 8003512:	2b00      	cmp	r3, #0
 8003514:	bfb8      	it	lt
 8003516:	18e4      	addlt	r4, r4, r3
 8003518:	f000 fbaa 	bl	8003c70 <__malloc_lock>
 800351c:	4a1f      	ldr	r2, [pc, #124]	; (800359c <_free_r+0x98>)
 800351e:	6813      	ldr	r3, [r2, #0]
 8003520:	4610      	mov	r0, r2
 8003522:	b933      	cbnz	r3, 8003532 <_free_r+0x2e>
 8003524:	6063      	str	r3, [r4, #4]
 8003526:	6014      	str	r4, [r2, #0]
 8003528:	4628      	mov	r0, r5
 800352a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800352e:	f000 bba0 	b.w	8003c72 <__malloc_unlock>
 8003532:	42a3      	cmp	r3, r4
 8003534:	d90c      	bls.n	8003550 <_free_r+0x4c>
 8003536:	6821      	ldr	r1, [r4, #0]
 8003538:	1862      	adds	r2, r4, r1
 800353a:	4293      	cmp	r3, r2
 800353c:	bf04      	itt	eq
 800353e:	681a      	ldreq	r2, [r3, #0]
 8003540:	685b      	ldreq	r3, [r3, #4]
 8003542:	6063      	str	r3, [r4, #4]
 8003544:	bf04      	itt	eq
 8003546:	1852      	addeq	r2, r2, r1
 8003548:	6022      	streq	r2, [r4, #0]
 800354a:	6004      	str	r4, [r0, #0]
 800354c:	e7ec      	b.n	8003528 <_free_r+0x24>
 800354e:	4613      	mov	r3, r2
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	b10a      	cbz	r2, 8003558 <_free_r+0x54>
 8003554:	42a2      	cmp	r2, r4
 8003556:	d9fa      	bls.n	800354e <_free_r+0x4a>
 8003558:	6819      	ldr	r1, [r3, #0]
 800355a:	1858      	adds	r0, r3, r1
 800355c:	42a0      	cmp	r0, r4
 800355e:	d10b      	bne.n	8003578 <_free_r+0x74>
 8003560:	6820      	ldr	r0, [r4, #0]
 8003562:	4401      	add	r1, r0
 8003564:	1858      	adds	r0, r3, r1
 8003566:	4282      	cmp	r2, r0
 8003568:	6019      	str	r1, [r3, #0]
 800356a:	d1dd      	bne.n	8003528 <_free_r+0x24>
 800356c:	6810      	ldr	r0, [r2, #0]
 800356e:	6852      	ldr	r2, [r2, #4]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	4401      	add	r1, r0
 8003574:	6019      	str	r1, [r3, #0]
 8003576:	e7d7      	b.n	8003528 <_free_r+0x24>
 8003578:	d902      	bls.n	8003580 <_free_r+0x7c>
 800357a:	230c      	movs	r3, #12
 800357c:	602b      	str	r3, [r5, #0]
 800357e:	e7d3      	b.n	8003528 <_free_r+0x24>
 8003580:	6820      	ldr	r0, [r4, #0]
 8003582:	1821      	adds	r1, r4, r0
 8003584:	428a      	cmp	r2, r1
 8003586:	bf04      	itt	eq
 8003588:	6811      	ldreq	r1, [r2, #0]
 800358a:	6852      	ldreq	r2, [r2, #4]
 800358c:	6062      	str	r2, [r4, #4]
 800358e:	bf04      	itt	eq
 8003590:	1809      	addeq	r1, r1, r0
 8003592:	6021      	streq	r1, [r4, #0]
 8003594:	605c      	str	r4, [r3, #4]
 8003596:	e7c7      	b.n	8003528 <_free_r+0x24>
 8003598:	bd38      	pop	{r3, r4, r5, pc}
 800359a:	bf00      	nop
 800359c:	200000c8 	.word	0x200000c8

080035a0 <_malloc_r>:
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	1ccd      	adds	r5, r1, #3
 80035a4:	f025 0503 	bic.w	r5, r5, #3
 80035a8:	3508      	adds	r5, #8
 80035aa:	2d0c      	cmp	r5, #12
 80035ac:	bf38      	it	cc
 80035ae:	250c      	movcc	r5, #12
 80035b0:	2d00      	cmp	r5, #0
 80035b2:	4606      	mov	r6, r0
 80035b4:	db01      	blt.n	80035ba <_malloc_r+0x1a>
 80035b6:	42a9      	cmp	r1, r5
 80035b8:	d903      	bls.n	80035c2 <_malloc_r+0x22>
 80035ba:	230c      	movs	r3, #12
 80035bc:	6033      	str	r3, [r6, #0]
 80035be:	2000      	movs	r0, #0
 80035c0:	bd70      	pop	{r4, r5, r6, pc}
 80035c2:	f000 fb55 	bl	8003c70 <__malloc_lock>
 80035c6:	4a21      	ldr	r2, [pc, #132]	; (800364c <_malloc_r+0xac>)
 80035c8:	6814      	ldr	r4, [r2, #0]
 80035ca:	4621      	mov	r1, r4
 80035cc:	b991      	cbnz	r1, 80035f4 <_malloc_r+0x54>
 80035ce:	4c20      	ldr	r4, [pc, #128]	; (8003650 <_malloc_r+0xb0>)
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	b91b      	cbnz	r3, 80035dc <_malloc_r+0x3c>
 80035d4:	4630      	mov	r0, r6
 80035d6:	f000 fb17 	bl	8003c08 <_sbrk_r>
 80035da:	6020      	str	r0, [r4, #0]
 80035dc:	4629      	mov	r1, r5
 80035de:	4630      	mov	r0, r6
 80035e0:	f000 fb12 	bl	8003c08 <_sbrk_r>
 80035e4:	1c43      	adds	r3, r0, #1
 80035e6:	d124      	bne.n	8003632 <_malloc_r+0x92>
 80035e8:	230c      	movs	r3, #12
 80035ea:	6033      	str	r3, [r6, #0]
 80035ec:	4630      	mov	r0, r6
 80035ee:	f000 fb40 	bl	8003c72 <__malloc_unlock>
 80035f2:	e7e4      	b.n	80035be <_malloc_r+0x1e>
 80035f4:	680b      	ldr	r3, [r1, #0]
 80035f6:	1b5b      	subs	r3, r3, r5
 80035f8:	d418      	bmi.n	800362c <_malloc_r+0x8c>
 80035fa:	2b0b      	cmp	r3, #11
 80035fc:	d90f      	bls.n	800361e <_malloc_r+0x7e>
 80035fe:	600b      	str	r3, [r1, #0]
 8003600:	50cd      	str	r5, [r1, r3]
 8003602:	18cc      	adds	r4, r1, r3
 8003604:	4630      	mov	r0, r6
 8003606:	f000 fb34 	bl	8003c72 <__malloc_unlock>
 800360a:	f104 000b 	add.w	r0, r4, #11
 800360e:	1d23      	adds	r3, r4, #4
 8003610:	f020 0007 	bic.w	r0, r0, #7
 8003614:	1ac3      	subs	r3, r0, r3
 8003616:	d0d3      	beq.n	80035c0 <_malloc_r+0x20>
 8003618:	425a      	negs	r2, r3
 800361a:	50e2      	str	r2, [r4, r3]
 800361c:	e7d0      	b.n	80035c0 <_malloc_r+0x20>
 800361e:	428c      	cmp	r4, r1
 8003620:	684b      	ldr	r3, [r1, #4]
 8003622:	bf16      	itet	ne
 8003624:	6063      	strne	r3, [r4, #4]
 8003626:	6013      	streq	r3, [r2, #0]
 8003628:	460c      	movne	r4, r1
 800362a:	e7eb      	b.n	8003604 <_malloc_r+0x64>
 800362c:	460c      	mov	r4, r1
 800362e:	6849      	ldr	r1, [r1, #4]
 8003630:	e7cc      	b.n	80035cc <_malloc_r+0x2c>
 8003632:	1cc4      	adds	r4, r0, #3
 8003634:	f024 0403 	bic.w	r4, r4, #3
 8003638:	42a0      	cmp	r0, r4
 800363a:	d005      	beq.n	8003648 <_malloc_r+0xa8>
 800363c:	1a21      	subs	r1, r4, r0
 800363e:	4630      	mov	r0, r6
 8003640:	f000 fae2 	bl	8003c08 <_sbrk_r>
 8003644:	3001      	adds	r0, #1
 8003646:	d0cf      	beq.n	80035e8 <_malloc_r+0x48>
 8003648:	6025      	str	r5, [r4, #0]
 800364a:	e7db      	b.n	8003604 <_malloc_r+0x64>
 800364c:	200000c8 	.word	0x200000c8
 8003650:	200000cc 	.word	0x200000cc

08003654 <__ssputs_r>:
 8003654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003658:	688e      	ldr	r6, [r1, #8]
 800365a:	429e      	cmp	r6, r3
 800365c:	4682      	mov	sl, r0
 800365e:	460c      	mov	r4, r1
 8003660:	4690      	mov	r8, r2
 8003662:	4699      	mov	r9, r3
 8003664:	d837      	bhi.n	80036d6 <__ssputs_r+0x82>
 8003666:	898a      	ldrh	r2, [r1, #12]
 8003668:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800366c:	d031      	beq.n	80036d2 <__ssputs_r+0x7e>
 800366e:	6825      	ldr	r5, [r4, #0]
 8003670:	6909      	ldr	r1, [r1, #16]
 8003672:	1a6f      	subs	r7, r5, r1
 8003674:	6965      	ldr	r5, [r4, #20]
 8003676:	2302      	movs	r3, #2
 8003678:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800367c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003680:	f109 0301 	add.w	r3, r9, #1
 8003684:	443b      	add	r3, r7
 8003686:	429d      	cmp	r5, r3
 8003688:	bf38      	it	cc
 800368a:	461d      	movcc	r5, r3
 800368c:	0553      	lsls	r3, r2, #21
 800368e:	d530      	bpl.n	80036f2 <__ssputs_r+0x9e>
 8003690:	4629      	mov	r1, r5
 8003692:	f7ff ff85 	bl	80035a0 <_malloc_r>
 8003696:	4606      	mov	r6, r0
 8003698:	b950      	cbnz	r0, 80036b0 <__ssputs_r+0x5c>
 800369a:	230c      	movs	r3, #12
 800369c:	f8ca 3000 	str.w	r3, [sl]
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a6:	81a3      	strh	r3, [r4, #12]
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b0:	463a      	mov	r2, r7
 80036b2:	6921      	ldr	r1, [r4, #16]
 80036b4:	f000 fab8 	bl	8003c28 <memcpy>
 80036b8:	89a3      	ldrh	r3, [r4, #12]
 80036ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c2:	81a3      	strh	r3, [r4, #12]
 80036c4:	6126      	str	r6, [r4, #16]
 80036c6:	6165      	str	r5, [r4, #20]
 80036c8:	443e      	add	r6, r7
 80036ca:	1bed      	subs	r5, r5, r7
 80036cc:	6026      	str	r6, [r4, #0]
 80036ce:	60a5      	str	r5, [r4, #8]
 80036d0:	464e      	mov	r6, r9
 80036d2:	454e      	cmp	r6, r9
 80036d4:	d900      	bls.n	80036d8 <__ssputs_r+0x84>
 80036d6:	464e      	mov	r6, r9
 80036d8:	4632      	mov	r2, r6
 80036da:	4641      	mov	r1, r8
 80036dc:	6820      	ldr	r0, [r4, #0]
 80036de:	f000 faae 	bl	8003c3e <memmove>
 80036e2:	68a3      	ldr	r3, [r4, #8]
 80036e4:	1b9b      	subs	r3, r3, r6
 80036e6:	60a3      	str	r3, [r4, #8]
 80036e8:	6823      	ldr	r3, [r4, #0]
 80036ea:	441e      	add	r6, r3
 80036ec:	6026      	str	r6, [r4, #0]
 80036ee:	2000      	movs	r0, #0
 80036f0:	e7dc      	b.n	80036ac <__ssputs_r+0x58>
 80036f2:	462a      	mov	r2, r5
 80036f4:	f000 fabe 	bl	8003c74 <_realloc_r>
 80036f8:	4606      	mov	r6, r0
 80036fa:	2800      	cmp	r0, #0
 80036fc:	d1e2      	bne.n	80036c4 <__ssputs_r+0x70>
 80036fe:	6921      	ldr	r1, [r4, #16]
 8003700:	4650      	mov	r0, sl
 8003702:	f7ff feff 	bl	8003504 <_free_r>
 8003706:	e7c8      	b.n	800369a <__ssputs_r+0x46>

08003708 <_svfiprintf_r>:
 8003708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370c:	461d      	mov	r5, r3
 800370e:	898b      	ldrh	r3, [r1, #12]
 8003710:	061f      	lsls	r7, r3, #24
 8003712:	b09d      	sub	sp, #116	; 0x74
 8003714:	4680      	mov	r8, r0
 8003716:	460c      	mov	r4, r1
 8003718:	4616      	mov	r6, r2
 800371a:	d50f      	bpl.n	800373c <_svfiprintf_r+0x34>
 800371c:	690b      	ldr	r3, [r1, #16]
 800371e:	b96b      	cbnz	r3, 800373c <_svfiprintf_r+0x34>
 8003720:	2140      	movs	r1, #64	; 0x40
 8003722:	f7ff ff3d 	bl	80035a0 <_malloc_r>
 8003726:	6020      	str	r0, [r4, #0]
 8003728:	6120      	str	r0, [r4, #16]
 800372a:	b928      	cbnz	r0, 8003738 <_svfiprintf_r+0x30>
 800372c:	230c      	movs	r3, #12
 800372e:	f8c8 3000 	str.w	r3, [r8]
 8003732:	f04f 30ff 	mov.w	r0, #4294967295
 8003736:	e0c8      	b.n	80038ca <_svfiprintf_r+0x1c2>
 8003738:	2340      	movs	r3, #64	; 0x40
 800373a:	6163      	str	r3, [r4, #20]
 800373c:	2300      	movs	r3, #0
 800373e:	9309      	str	r3, [sp, #36]	; 0x24
 8003740:	2320      	movs	r3, #32
 8003742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003746:	2330      	movs	r3, #48	; 0x30
 8003748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800374c:	9503      	str	r5, [sp, #12]
 800374e:	f04f 0b01 	mov.w	fp, #1
 8003752:	4637      	mov	r7, r6
 8003754:	463d      	mov	r5, r7
 8003756:	f815 3b01 	ldrb.w	r3, [r5], #1
 800375a:	b10b      	cbz	r3, 8003760 <_svfiprintf_r+0x58>
 800375c:	2b25      	cmp	r3, #37	; 0x25
 800375e:	d13e      	bne.n	80037de <_svfiprintf_r+0xd6>
 8003760:	ebb7 0a06 	subs.w	sl, r7, r6
 8003764:	d00b      	beq.n	800377e <_svfiprintf_r+0x76>
 8003766:	4653      	mov	r3, sl
 8003768:	4632      	mov	r2, r6
 800376a:	4621      	mov	r1, r4
 800376c:	4640      	mov	r0, r8
 800376e:	f7ff ff71 	bl	8003654 <__ssputs_r>
 8003772:	3001      	adds	r0, #1
 8003774:	f000 80a4 	beq.w	80038c0 <_svfiprintf_r+0x1b8>
 8003778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800377a:	4453      	add	r3, sl
 800377c:	9309      	str	r3, [sp, #36]	; 0x24
 800377e:	783b      	ldrb	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 809d 	beq.w	80038c0 <_svfiprintf_r+0x1b8>
 8003786:	2300      	movs	r3, #0
 8003788:	f04f 32ff 	mov.w	r2, #4294967295
 800378c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003790:	9304      	str	r3, [sp, #16]
 8003792:	9307      	str	r3, [sp, #28]
 8003794:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003798:	931a      	str	r3, [sp, #104]	; 0x68
 800379a:	462f      	mov	r7, r5
 800379c:	2205      	movs	r2, #5
 800379e:	f817 1b01 	ldrb.w	r1, [r7], #1
 80037a2:	4850      	ldr	r0, [pc, #320]	; (80038e4 <_svfiprintf_r+0x1dc>)
 80037a4:	f7fc fd14 	bl	80001d0 <memchr>
 80037a8:	9b04      	ldr	r3, [sp, #16]
 80037aa:	b9d0      	cbnz	r0, 80037e2 <_svfiprintf_r+0xda>
 80037ac:	06d9      	lsls	r1, r3, #27
 80037ae:	bf44      	itt	mi
 80037b0:	2220      	movmi	r2, #32
 80037b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037b6:	071a      	lsls	r2, r3, #28
 80037b8:	bf44      	itt	mi
 80037ba:	222b      	movmi	r2, #43	; 0x2b
 80037bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037c0:	782a      	ldrb	r2, [r5, #0]
 80037c2:	2a2a      	cmp	r2, #42	; 0x2a
 80037c4:	d015      	beq.n	80037f2 <_svfiprintf_r+0xea>
 80037c6:	9a07      	ldr	r2, [sp, #28]
 80037c8:	462f      	mov	r7, r5
 80037ca:	2000      	movs	r0, #0
 80037cc:	250a      	movs	r5, #10
 80037ce:	4639      	mov	r1, r7
 80037d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037d4:	3b30      	subs	r3, #48	; 0x30
 80037d6:	2b09      	cmp	r3, #9
 80037d8:	d94d      	bls.n	8003876 <_svfiprintf_r+0x16e>
 80037da:	b1b8      	cbz	r0, 800380c <_svfiprintf_r+0x104>
 80037dc:	e00f      	b.n	80037fe <_svfiprintf_r+0xf6>
 80037de:	462f      	mov	r7, r5
 80037e0:	e7b8      	b.n	8003754 <_svfiprintf_r+0x4c>
 80037e2:	4a40      	ldr	r2, [pc, #256]	; (80038e4 <_svfiprintf_r+0x1dc>)
 80037e4:	1a80      	subs	r0, r0, r2
 80037e6:	fa0b f000 	lsl.w	r0, fp, r0
 80037ea:	4318      	orrs	r0, r3
 80037ec:	9004      	str	r0, [sp, #16]
 80037ee:	463d      	mov	r5, r7
 80037f0:	e7d3      	b.n	800379a <_svfiprintf_r+0x92>
 80037f2:	9a03      	ldr	r2, [sp, #12]
 80037f4:	1d11      	adds	r1, r2, #4
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	9103      	str	r1, [sp, #12]
 80037fa:	2a00      	cmp	r2, #0
 80037fc:	db01      	blt.n	8003802 <_svfiprintf_r+0xfa>
 80037fe:	9207      	str	r2, [sp, #28]
 8003800:	e004      	b.n	800380c <_svfiprintf_r+0x104>
 8003802:	4252      	negs	r2, r2
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	9207      	str	r2, [sp, #28]
 800380a:	9304      	str	r3, [sp, #16]
 800380c:	783b      	ldrb	r3, [r7, #0]
 800380e:	2b2e      	cmp	r3, #46	; 0x2e
 8003810:	d10c      	bne.n	800382c <_svfiprintf_r+0x124>
 8003812:	787b      	ldrb	r3, [r7, #1]
 8003814:	2b2a      	cmp	r3, #42	; 0x2a
 8003816:	d133      	bne.n	8003880 <_svfiprintf_r+0x178>
 8003818:	9b03      	ldr	r3, [sp, #12]
 800381a:	1d1a      	adds	r2, r3, #4
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	9203      	str	r2, [sp, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	bfb8      	it	lt
 8003824:	f04f 33ff 	movlt.w	r3, #4294967295
 8003828:	3702      	adds	r7, #2
 800382a:	9305      	str	r3, [sp, #20]
 800382c:	4d2e      	ldr	r5, [pc, #184]	; (80038e8 <_svfiprintf_r+0x1e0>)
 800382e:	7839      	ldrb	r1, [r7, #0]
 8003830:	2203      	movs	r2, #3
 8003832:	4628      	mov	r0, r5
 8003834:	f7fc fccc 	bl	80001d0 <memchr>
 8003838:	b138      	cbz	r0, 800384a <_svfiprintf_r+0x142>
 800383a:	2340      	movs	r3, #64	; 0x40
 800383c:	1b40      	subs	r0, r0, r5
 800383e:	fa03 f000 	lsl.w	r0, r3, r0
 8003842:	9b04      	ldr	r3, [sp, #16]
 8003844:	4303      	orrs	r3, r0
 8003846:	3701      	adds	r7, #1
 8003848:	9304      	str	r3, [sp, #16]
 800384a:	7839      	ldrb	r1, [r7, #0]
 800384c:	4827      	ldr	r0, [pc, #156]	; (80038ec <_svfiprintf_r+0x1e4>)
 800384e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003852:	2206      	movs	r2, #6
 8003854:	1c7e      	adds	r6, r7, #1
 8003856:	f7fc fcbb 	bl	80001d0 <memchr>
 800385a:	2800      	cmp	r0, #0
 800385c:	d038      	beq.n	80038d0 <_svfiprintf_r+0x1c8>
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <_svfiprintf_r+0x1e8>)
 8003860:	bb13      	cbnz	r3, 80038a8 <_svfiprintf_r+0x1a0>
 8003862:	9b03      	ldr	r3, [sp, #12]
 8003864:	3307      	adds	r3, #7
 8003866:	f023 0307 	bic.w	r3, r3, #7
 800386a:	3308      	adds	r3, #8
 800386c:	9303      	str	r3, [sp, #12]
 800386e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003870:	444b      	add	r3, r9
 8003872:	9309      	str	r3, [sp, #36]	; 0x24
 8003874:	e76d      	b.n	8003752 <_svfiprintf_r+0x4a>
 8003876:	fb05 3202 	mla	r2, r5, r2, r3
 800387a:	2001      	movs	r0, #1
 800387c:	460f      	mov	r7, r1
 800387e:	e7a6      	b.n	80037ce <_svfiprintf_r+0xc6>
 8003880:	2300      	movs	r3, #0
 8003882:	3701      	adds	r7, #1
 8003884:	9305      	str	r3, [sp, #20]
 8003886:	4619      	mov	r1, r3
 8003888:	250a      	movs	r5, #10
 800388a:	4638      	mov	r0, r7
 800388c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003890:	3a30      	subs	r2, #48	; 0x30
 8003892:	2a09      	cmp	r2, #9
 8003894:	d903      	bls.n	800389e <_svfiprintf_r+0x196>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0c8      	beq.n	800382c <_svfiprintf_r+0x124>
 800389a:	9105      	str	r1, [sp, #20]
 800389c:	e7c6      	b.n	800382c <_svfiprintf_r+0x124>
 800389e:	fb05 2101 	mla	r1, r5, r1, r2
 80038a2:	2301      	movs	r3, #1
 80038a4:	4607      	mov	r7, r0
 80038a6:	e7f0      	b.n	800388a <_svfiprintf_r+0x182>
 80038a8:	ab03      	add	r3, sp, #12
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	4622      	mov	r2, r4
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <_svfiprintf_r+0x1ec>)
 80038b0:	a904      	add	r1, sp, #16
 80038b2:	4640      	mov	r0, r8
 80038b4:	f3af 8000 	nop.w
 80038b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80038bc:	4681      	mov	r9, r0
 80038be:	d1d6      	bne.n	800386e <_svfiprintf_r+0x166>
 80038c0:	89a3      	ldrh	r3, [r4, #12]
 80038c2:	065b      	lsls	r3, r3, #25
 80038c4:	f53f af35 	bmi.w	8003732 <_svfiprintf_r+0x2a>
 80038c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038ca:	b01d      	add	sp, #116	; 0x74
 80038cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d0:	ab03      	add	r3, sp, #12
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	4622      	mov	r2, r4
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <_svfiprintf_r+0x1ec>)
 80038d8:	a904      	add	r1, sp, #16
 80038da:	4640      	mov	r0, r8
 80038dc:	f000 f882 	bl	80039e4 <_printf_i>
 80038e0:	e7ea      	b.n	80038b8 <_svfiprintf_r+0x1b0>
 80038e2:	bf00      	nop
 80038e4:	08003d28 	.word	0x08003d28
 80038e8:	08003d2e 	.word	0x08003d2e
 80038ec:	08003d32 	.word	0x08003d32
 80038f0:	00000000 	.word	0x00000000
 80038f4:	08003655 	.word	0x08003655

080038f8 <_printf_common>:
 80038f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038fc:	4691      	mov	r9, r2
 80038fe:	461f      	mov	r7, r3
 8003900:	688a      	ldr	r2, [r1, #8]
 8003902:	690b      	ldr	r3, [r1, #16]
 8003904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003908:	4293      	cmp	r3, r2
 800390a:	bfb8      	it	lt
 800390c:	4613      	movlt	r3, r2
 800390e:	f8c9 3000 	str.w	r3, [r9]
 8003912:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003916:	4606      	mov	r6, r0
 8003918:	460c      	mov	r4, r1
 800391a:	b112      	cbz	r2, 8003922 <_printf_common+0x2a>
 800391c:	3301      	adds	r3, #1
 800391e:	f8c9 3000 	str.w	r3, [r9]
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	0699      	lsls	r1, r3, #26
 8003926:	bf42      	ittt	mi
 8003928:	f8d9 3000 	ldrmi.w	r3, [r9]
 800392c:	3302      	addmi	r3, #2
 800392e:	f8c9 3000 	strmi.w	r3, [r9]
 8003932:	6825      	ldr	r5, [r4, #0]
 8003934:	f015 0506 	ands.w	r5, r5, #6
 8003938:	d107      	bne.n	800394a <_printf_common+0x52>
 800393a:	f104 0a19 	add.w	sl, r4, #25
 800393e:	68e3      	ldr	r3, [r4, #12]
 8003940:	f8d9 2000 	ldr.w	r2, [r9]
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	42ab      	cmp	r3, r5
 8003948:	dc28      	bgt.n	800399c <_printf_common+0xa4>
 800394a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800394e:	6822      	ldr	r2, [r4, #0]
 8003950:	3300      	adds	r3, #0
 8003952:	bf18      	it	ne
 8003954:	2301      	movne	r3, #1
 8003956:	0692      	lsls	r2, r2, #26
 8003958:	d42d      	bmi.n	80039b6 <_printf_common+0xbe>
 800395a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800395e:	4639      	mov	r1, r7
 8003960:	4630      	mov	r0, r6
 8003962:	47c0      	blx	r8
 8003964:	3001      	adds	r0, #1
 8003966:	d020      	beq.n	80039aa <_printf_common+0xb2>
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	68e5      	ldr	r5, [r4, #12]
 800396c:	f8d9 2000 	ldr.w	r2, [r9]
 8003970:	f003 0306 	and.w	r3, r3, #6
 8003974:	2b04      	cmp	r3, #4
 8003976:	bf08      	it	eq
 8003978:	1aad      	subeq	r5, r5, r2
 800397a:	68a3      	ldr	r3, [r4, #8]
 800397c:	6922      	ldr	r2, [r4, #16]
 800397e:	bf0c      	ite	eq
 8003980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003984:	2500      	movne	r5, #0
 8003986:	4293      	cmp	r3, r2
 8003988:	bfc4      	itt	gt
 800398a:	1a9b      	subgt	r3, r3, r2
 800398c:	18ed      	addgt	r5, r5, r3
 800398e:	f04f 0900 	mov.w	r9, #0
 8003992:	341a      	adds	r4, #26
 8003994:	454d      	cmp	r5, r9
 8003996:	d11a      	bne.n	80039ce <_printf_common+0xd6>
 8003998:	2000      	movs	r0, #0
 800399a:	e008      	b.n	80039ae <_printf_common+0xb6>
 800399c:	2301      	movs	r3, #1
 800399e:	4652      	mov	r2, sl
 80039a0:	4639      	mov	r1, r7
 80039a2:	4630      	mov	r0, r6
 80039a4:	47c0      	blx	r8
 80039a6:	3001      	adds	r0, #1
 80039a8:	d103      	bne.n	80039b2 <_printf_common+0xba>
 80039aa:	f04f 30ff 	mov.w	r0, #4294967295
 80039ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039b2:	3501      	adds	r5, #1
 80039b4:	e7c3      	b.n	800393e <_printf_common+0x46>
 80039b6:	18e1      	adds	r1, r4, r3
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	2030      	movs	r0, #48	; 0x30
 80039bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039c0:	4422      	add	r2, r4
 80039c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039ca:	3302      	adds	r3, #2
 80039cc:	e7c5      	b.n	800395a <_printf_common+0x62>
 80039ce:	2301      	movs	r3, #1
 80039d0:	4622      	mov	r2, r4
 80039d2:	4639      	mov	r1, r7
 80039d4:	4630      	mov	r0, r6
 80039d6:	47c0      	blx	r8
 80039d8:	3001      	adds	r0, #1
 80039da:	d0e6      	beq.n	80039aa <_printf_common+0xb2>
 80039dc:	f109 0901 	add.w	r9, r9, #1
 80039e0:	e7d8      	b.n	8003994 <_printf_common+0x9c>
	...

080039e4 <_printf_i>:
 80039e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80039ec:	460c      	mov	r4, r1
 80039ee:	7e09      	ldrb	r1, [r1, #24]
 80039f0:	b085      	sub	sp, #20
 80039f2:	296e      	cmp	r1, #110	; 0x6e
 80039f4:	4617      	mov	r7, r2
 80039f6:	4606      	mov	r6, r0
 80039f8:	4698      	mov	r8, r3
 80039fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80039fc:	f000 80b3 	beq.w	8003b66 <_printf_i+0x182>
 8003a00:	d822      	bhi.n	8003a48 <_printf_i+0x64>
 8003a02:	2963      	cmp	r1, #99	; 0x63
 8003a04:	d036      	beq.n	8003a74 <_printf_i+0x90>
 8003a06:	d80a      	bhi.n	8003a1e <_printf_i+0x3a>
 8003a08:	2900      	cmp	r1, #0
 8003a0a:	f000 80b9 	beq.w	8003b80 <_printf_i+0x19c>
 8003a0e:	2958      	cmp	r1, #88	; 0x58
 8003a10:	f000 8083 	beq.w	8003b1a <_printf_i+0x136>
 8003a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003a1c:	e032      	b.n	8003a84 <_printf_i+0xa0>
 8003a1e:	2964      	cmp	r1, #100	; 0x64
 8003a20:	d001      	beq.n	8003a26 <_printf_i+0x42>
 8003a22:	2969      	cmp	r1, #105	; 0x69
 8003a24:	d1f6      	bne.n	8003a14 <_printf_i+0x30>
 8003a26:	6820      	ldr	r0, [r4, #0]
 8003a28:	6813      	ldr	r3, [r2, #0]
 8003a2a:	0605      	lsls	r5, r0, #24
 8003a2c:	f103 0104 	add.w	r1, r3, #4
 8003a30:	d52a      	bpl.n	8003a88 <_printf_i+0xa4>
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6011      	str	r1, [r2, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	da03      	bge.n	8003a42 <_printf_i+0x5e>
 8003a3a:	222d      	movs	r2, #45	; 0x2d
 8003a3c:	425b      	negs	r3, r3
 8003a3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a42:	486f      	ldr	r0, [pc, #444]	; (8003c00 <_printf_i+0x21c>)
 8003a44:	220a      	movs	r2, #10
 8003a46:	e039      	b.n	8003abc <_printf_i+0xd8>
 8003a48:	2973      	cmp	r1, #115	; 0x73
 8003a4a:	f000 809d 	beq.w	8003b88 <_printf_i+0x1a4>
 8003a4e:	d808      	bhi.n	8003a62 <_printf_i+0x7e>
 8003a50:	296f      	cmp	r1, #111	; 0x6f
 8003a52:	d020      	beq.n	8003a96 <_printf_i+0xb2>
 8003a54:	2970      	cmp	r1, #112	; 0x70
 8003a56:	d1dd      	bne.n	8003a14 <_printf_i+0x30>
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	f043 0320 	orr.w	r3, r3, #32
 8003a5e:	6023      	str	r3, [r4, #0]
 8003a60:	e003      	b.n	8003a6a <_printf_i+0x86>
 8003a62:	2975      	cmp	r1, #117	; 0x75
 8003a64:	d017      	beq.n	8003a96 <_printf_i+0xb2>
 8003a66:	2978      	cmp	r1, #120	; 0x78
 8003a68:	d1d4      	bne.n	8003a14 <_printf_i+0x30>
 8003a6a:	2378      	movs	r3, #120	; 0x78
 8003a6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a70:	4864      	ldr	r0, [pc, #400]	; (8003c04 <_printf_i+0x220>)
 8003a72:	e055      	b.n	8003b20 <_printf_i+0x13c>
 8003a74:	6813      	ldr	r3, [r2, #0]
 8003a76:	1d19      	adds	r1, r3, #4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6011      	str	r1, [r2, #0]
 8003a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a84:	2301      	movs	r3, #1
 8003a86:	e08c      	b.n	8003ba2 <_printf_i+0x1be>
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6011      	str	r1, [r2, #0]
 8003a8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a90:	bf18      	it	ne
 8003a92:	b21b      	sxthne	r3, r3
 8003a94:	e7cf      	b.n	8003a36 <_printf_i+0x52>
 8003a96:	6813      	ldr	r3, [r2, #0]
 8003a98:	6825      	ldr	r5, [r4, #0]
 8003a9a:	1d18      	adds	r0, r3, #4
 8003a9c:	6010      	str	r0, [r2, #0]
 8003a9e:	0628      	lsls	r0, r5, #24
 8003aa0:	d501      	bpl.n	8003aa6 <_printf_i+0xc2>
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	e002      	b.n	8003aac <_printf_i+0xc8>
 8003aa6:	0668      	lsls	r0, r5, #25
 8003aa8:	d5fb      	bpl.n	8003aa2 <_printf_i+0xbe>
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	4854      	ldr	r0, [pc, #336]	; (8003c00 <_printf_i+0x21c>)
 8003aae:	296f      	cmp	r1, #111	; 0x6f
 8003ab0:	bf14      	ite	ne
 8003ab2:	220a      	movne	r2, #10
 8003ab4:	2208      	moveq	r2, #8
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003abc:	6865      	ldr	r5, [r4, #4]
 8003abe:	60a5      	str	r5, [r4, #8]
 8003ac0:	2d00      	cmp	r5, #0
 8003ac2:	f2c0 8095 	blt.w	8003bf0 <_printf_i+0x20c>
 8003ac6:	6821      	ldr	r1, [r4, #0]
 8003ac8:	f021 0104 	bic.w	r1, r1, #4
 8003acc:	6021      	str	r1, [r4, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d13d      	bne.n	8003b4e <_printf_i+0x16a>
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	f040 808e 	bne.w	8003bf4 <_printf_i+0x210>
 8003ad8:	4665      	mov	r5, ip
 8003ada:	2a08      	cmp	r2, #8
 8003adc:	d10b      	bne.n	8003af6 <_printf_i+0x112>
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	07db      	lsls	r3, r3, #31
 8003ae2:	d508      	bpl.n	8003af6 <_printf_i+0x112>
 8003ae4:	6923      	ldr	r3, [r4, #16]
 8003ae6:	6862      	ldr	r2, [r4, #4]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	bfde      	ittt	le
 8003aec:	2330      	movle	r3, #48	; 0x30
 8003aee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003af2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003af6:	ebac 0305 	sub.w	r3, ip, r5
 8003afa:	6123      	str	r3, [r4, #16]
 8003afc:	f8cd 8000 	str.w	r8, [sp]
 8003b00:	463b      	mov	r3, r7
 8003b02:	aa03      	add	r2, sp, #12
 8003b04:	4621      	mov	r1, r4
 8003b06:	4630      	mov	r0, r6
 8003b08:	f7ff fef6 	bl	80038f8 <_printf_common>
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	d14d      	bne.n	8003bac <_printf_i+0x1c8>
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	b005      	add	sp, #20
 8003b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b1a:	4839      	ldr	r0, [pc, #228]	; (8003c00 <_printf_i+0x21c>)
 8003b1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003b20:	6813      	ldr	r3, [r2, #0]
 8003b22:	6821      	ldr	r1, [r4, #0]
 8003b24:	1d1d      	adds	r5, r3, #4
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6015      	str	r5, [r2, #0]
 8003b2a:	060a      	lsls	r2, r1, #24
 8003b2c:	d50b      	bpl.n	8003b46 <_printf_i+0x162>
 8003b2e:	07ca      	lsls	r2, r1, #31
 8003b30:	bf44      	itt	mi
 8003b32:	f041 0120 	orrmi.w	r1, r1, #32
 8003b36:	6021      	strmi	r1, [r4, #0]
 8003b38:	b91b      	cbnz	r3, 8003b42 <_printf_i+0x15e>
 8003b3a:	6822      	ldr	r2, [r4, #0]
 8003b3c:	f022 0220 	bic.w	r2, r2, #32
 8003b40:	6022      	str	r2, [r4, #0]
 8003b42:	2210      	movs	r2, #16
 8003b44:	e7b7      	b.n	8003ab6 <_printf_i+0xd2>
 8003b46:	064d      	lsls	r5, r1, #25
 8003b48:	bf48      	it	mi
 8003b4a:	b29b      	uxthmi	r3, r3
 8003b4c:	e7ef      	b.n	8003b2e <_printf_i+0x14a>
 8003b4e:	4665      	mov	r5, ip
 8003b50:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b54:	fb02 3311 	mls	r3, r2, r1, r3
 8003b58:	5cc3      	ldrb	r3, [r0, r3]
 8003b5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003b5e:	460b      	mov	r3, r1
 8003b60:	2900      	cmp	r1, #0
 8003b62:	d1f5      	bne.n	8003b50 <_printf_i+0x16c>
 8003b64:	e7b9      	b.n	8003ada <_printf_i+0xf6>
 8003b66:	6813      	ldr	r3, [r2, #0]
 8003b68:	6825      	ldr	r5, [r4, #0]
 8003b6a:	6961      	ldr	r1, [r4, #20]
 8003b6c:	1d18      	adds	r0, r3, #4
 8003b6e:	6010      	str	r0, [r2, #0]
 8003b70:	0628      	lsls	r0, r5, #24
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	d501      	bpl.n	8003b7a <_printf_i+0x196>
 8003b76:	6019      	str	r1, [r3, #0]
 8003b78:	e002      	b.n	8003b80 <_printf_i+0x19c>
 8003b7a:	066a      	lsls	r2, r5, #25
 8003b7c:	d5fb      	bpl.n	8003b76 <_printf_i+0x192>
 8003b7e:	8019      	strh	r1, [r3, #0]
 8003b80:	2300      	movs	r3, #0
 8003b82:	6123      	str	r3, [r4, #16]
 8003b84:	4665      	mov	r5, ip
 8003b86:	e7b9      	b.n	8003afc <_printf_i+0x118>
 8003b88:	6813      	ldr	r3, [r2, #0]
 8003b8a:	1d19      	adds	r1, r3, #4
 8003b8c:	6011      	str	r1, [r2, #0]
 8003b8e:	681d      	ldr	r5, [r3, #0]
 8003b90:	6862      	ldr	r2, [r4, #4]
 8003b92:	2100      	movs	r1, #0
 8003b94:	4628      	mov	r0, r5
 8003b96:	f7fc fb1b 	bl	80001d0 <memchr>
 8003b9a:	b108      	cbz	r0, 8003ba0 <_printf_i+0x1bc>
 8003b9c:	1b40      	subs	r0, r0, r5
 8003b9e:	6060      	str	r0, [r4, #4]
 8003ba0:	6863      	ldr	r3, [r4, #4]
 8003ba2:	6123      	str	r3, [r4, #16]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003baa:	e7a7      	b.n	8003afc <_printf_i+0x118>
 8003bac:	6923      	ldr	r3, [r4, #16]
 8003bae:	462a      	mov	r2, r5
 8003bb0:	4639      	mov	r1, r7
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	47c0      	blx	r8
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	d0aa      	beq.n	8003b10 <_printf_i+0x12c>
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	079b      	lsls	r3, r3, #30
 8003bbe:	d413      	bmi.n	8003be8 <_printf_i+0x204>
 8003bc0:	68e0      	ldr	r0, [r4, #12]
 8003bc2:	9b03      	ldr	r3, [sp, #12]
 8003bc4:	4298      	cmp	r0, r3
 8003bc6:	bfb8      	it	lt
 8003bc8:	4618      	movlt	r0, r3
 8003bca:	e7a3      	b.n	8003b14 <_printf_i+0x130>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	464a      	mov	r2, r9
 8003bd0:	4639      	mov	r1, r7
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	47c0      	blx	r8
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	d09a      	beq.n	8003b10 <_printf_i+0x12c>
 8003bda:	3501      	adds	r5, #1
 8003bdc:	68e3      	ldr	r3, [r4, #12]
 8003bde:	9a03      	ldr	r2, [sp, #12]
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	42ab      	cmp	r3, r5
 8003be4:	dcf2      	bgt.n	8003bcc <_printf_i+0x1e8>
 8003be6:	e7eb      	b.n	8003bc0 <_printf_i+0x1dc>
 8003be8:	2500      	movs	r5, #0
 8003bea:	f104 0919 	add.w	r9, r4, #25
 8003bee:	e7f5      	b.n	8003bdc <_printf_i+0x1f8>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1ac      	bne.n	8003b4e <_printf_i+0x16a>
 8003bf4:	7803      	ldrb	r3, [r0, #0]
 8003bf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bfa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bfe:	e76c      	b.n	8003ada <_printf_i+0xf6>
 8003c00:	08003d39 	.word	0x08003d39
 8003c04:	08003d4a 	.word	0x08003d4a

08003c08 <_sbrk_r>:
 8003c08:	b538      	push	{r3, r4, r5, lr}
 8003c0a:	4c06      	ldr	r4, [pc, #24]	; (8003c24 <_sbrk_r+0x1c>)
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	4605      	mov	r5, r0
 8003c10:	4608      	mov	r0, r1
 8003c12:	6023      	str	r3, [r4, #0]
 8003c14:	f7fd ff5a 	bl	8001acc <_sbrk>
 8003c18:	1c43      	adds	r3, r0, #1
 8003c1a:	d102      	bne.n	8003c22 <_sbrk_r+0x1a>
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	b103      	cbz	r3, 8003c22 <_sbrk_r+0x1a>
 8003c20:	602b      	str	r3, [r5, #0]
 8003c22:	bd38      	pop	{r3, r4, r5, pc}
 8003c24:	2000012c 	.word	0x2000012c

08003c28 <memcpy>:
 8003c28:	b510      	push	{r4, lr}
 8003c2a:	1e43      	subs	r3, r0, #1
 8003c2c:	440a      	add	r2, r1
 8003c2e:	4291      	cmp	r1, r2
 8003c30:	d100      	bne.n	8003c34 <memcpy+0xc>
 8003c32:	bd10      	pop	{r4, pc}
 8003c34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c3c:	e7f7      	b.n	8003c2e <memcpy+0x6>

08003c3e <memmove>:
 8003c3e:	4288      	cmp	r0, r1
 8003c40:	b510      	push	{r4, lr}
 8003c42:	eb01 0302 	add.w	r3, r1, r2
 8003c46:	d807      	bhi.n	8003c58 <memmove+0x1a>
 8003c48:	1e42      	subs	r2, r0, #1
 8003c4a:	4299      	cmp	r1, r3
 8003c4c:	d00a      	beq.n	8003c64 <memmove+0x26>
 8003c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c52:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c56:	e7f8      	b.n	8003c4a <memmove+0xc>
 8003c58:	4283      	cmp	r3, r0
 8003c5a:	d9f5      	bls.n	8003c48 <memmove+0xa>
 8003c5c:	1881      	adds	r1, r0, r2
 8003c5e:	1ad2      	subs	r2, r2, r3
 8003c60:	42d3      	cmn	r3, r2
 8003c62:	d100      	bne.n	8003c66 <memmove+0x28>
 8003c64:	bd10      	pop	{r4, pc}
 8003c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c6a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c6e:	e7f7      	b.n	8003c60 <memmove+0x22>

08003c70 <__malloc_lock>:
 8003c70:	4770      	bx	lr

08003c72 <__malloc_unlock>:
 8003c72:	4770      	bx	lr

08003c74 <_realloc_r>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	4607      	mov	r7, r0
 8003c78:	4614      	mov	r4, r2
 8003c7a:	460e      	mov	r6, r1
 8003c7c:	b921      	cbnz	r1, 8003c88 <_realloc_r+0x14>
 8003c7e:	4611      	mov	r1, r2
 8003c80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c84:	f7ff bc8c 	b.w	80035a0 <_malloc_r>
 8003c88:	b922      	cbnz	r2, 8003c94 <_realloc_r+0x20>
 8003c8a:	f7ff fc3b 	bl	8003504 <_free_r>
 8003c8e:	4625      	mov	r5, r4
 8003c90:	4628      	mov	r0, r5
 8003c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c94:	f000 f814 	bl	8003cc0 <_malloc_usable_size_r>
 8003c98:	42a0      	cmp	r0, r4
 8003c9a:	d20f      	bcs.n	8003cbc <_realloc_r+0x48>
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	4638      	mov	r0, r7
 8003ca0:	f7ff fc7e 	bl	80035a0 <_malloc_r>
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d0f2      	beq.n	8003c90 <_realloc_r+0x1c>
 8003caa:	4631      	mov	r1, r6
 8003cac:	4622      	mov	r2, r4
 8003cae:	f7ff ffbb 	bl	8003c28 <memcpy>
 8003cb2:	4631      	mov	r1, r6
 8003cb4:	4638      	mov	r0, r7
 8003cb6:	f7ff fc25 	bl	8003504 <_free_r>
 8003cba:	e7e9      	b.n	8003c90 <_realloc_r+0x1c>
 8003cbc:	4635      	mov	r5, r6
 8003cbe:	e7e7      	b.n	8003c90 <_realloc_r+0x1c>

08003cc0 <_malloc_usable_size_r>:
 8003cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cc4:	1f18      	subs	r0, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	bfbc      	itt	lt
 8003cca:	580b      	ldrlt	r3, [r1, r0]
 8003ccc:	18c0      	addlt	r0, r0, r3
 8003cce:	4770      	bx	lr

08003cd0 <_init>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	bf00      	nop
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr

08003cdc <_fini>:
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cde:	bf00      	nop
 8003ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce2:	bc08      	pop	{r3}
 8003ce4:	469e      	mov	lr, r3
 8003ce6:	4770      	bx	lr
