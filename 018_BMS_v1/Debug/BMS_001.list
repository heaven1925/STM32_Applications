
BMS_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08007108  08007108  00017108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072d0  080072d0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080072d0  080072d0  000172d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072d8  080072d8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d8  080072d8  000172d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072dc  080072dc  000172dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080072e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000078  08007358  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08007358  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4d5  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fb3  00000000  00000000  0002e57d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e28  00000000  00000000  00030530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  00031358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021fa8  00000000  00000000  00032088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a57e  00000000  00000000  00054030  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cff24  00000000  00000000  0005e5ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012e4d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004160  00000000  00000000  0012e550  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070f0 	.word	0x080070f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080070f0 	.word	0x080070f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
static void LCD1602_EnablePulse(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <LCD1602_EnablePulse+0x38>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <LCD1602_EnablePulse+0x3c>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	2201      	movs	r2, #1
 8000f96:	4619      	mov	r1, r3
 8000f98:	f003 fb6c 	bl	8004674 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8000f9c:	230a      	movs	r3, #10
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f97a 	bl	8001298 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <LCD1602_EnablePulse+0x38>)
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <LCD1602_EnablePulse+0x3c>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	2200      	movs	r2, #0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f003 fb60 	bl	8004674 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 8000fb4:	203c      	movs	r0, #60	; 0x3c
 8000fb6:	f000 f96f 	bl	8001298 <LCD1602_TIM_MicorSecDelay>
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000094 	.word	0x20000094
 8000fc4:	2000009a 	.word	0x2000009a

08000fc8 <LCD1602_RS>:
//2) RS control
static void LCD1602_RS(bool state)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d008      	beq.n	8000fea <LCD1602_RS+0x22>
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <LCD1602_RS+0x3c>)
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <LCD1602_RS+0x40>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f003 fb46 	bl	8004674 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8000fe8:	e007      	b.n	8000ffa <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <LCD1602_RS+0x3c>)
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <LCD1602_RS+0x40>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f003 fb3d 	bl	8004674 <HAL_GPIO_WritePin>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000094 	.word	0x20000094
 8001008:	20000098 	.word	0x20000098

0800100c <LCD1602_write>:

//3) Write Parallel interface
static void LCD1602_write(uint8_t byte)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 030f 	and.w	r3, r3, #15
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	091b      	lsrs	r3, r3, #4
 8001022:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8001024:	4b61      	ldr	r3, [pc, #388]	; (80011ac <LCD1602_write+0x1a0>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d15a      	bne.n	80010e2 <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800102c:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <LCD1602_write+0x1a4>)
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	4b60      	ldr	r3, [pc, #384]	; (80011b4 <LCD1602_write+0x1a8>)
 8001032:	8819      	ldrh	r1, [r3, #0]
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	f003 fb19 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001042:	4b5b      	ldr	r3, [pc, #364]	; (80011b0 <LCD1602_write+0x1a4>)
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	4b5c      	ldr	r3, [pc, #368]	; (80011b8 <LCD1602_write+0x1ac>)
 8001048:	8819      	ldrh	r1, [r3, #0]
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	b2db      	uxtb	r3, r3
 8001052:	461a      	mov	r2, r3
 8001054:	f003 fb0e 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001058:	4b55      	ldr	r3, [pc, #340]	; (80011b0 <LCD1602_write+0x1a4>)
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	4b57      	ldr	r3, [pc, #348]	; (80011bc <LCD1602_write+0x1b0>)
 800105e:	8819      	ldrh	r1, [r3, #0]
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	f003 fb03 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800106e:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <LCD1602_write+0x1a4>)
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	4b53      	ldr	r3, [pc, #332]	; (80011c0 <LCD1602_write+0x1b4>)
 8001074:	8819      	ldrh	r1, [r3, #0]
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	b2db      	uxtb	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	f003 faf8 	bl	8004674 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001084:	4b4f      	ldr	r3, [pc, #316]	; (80011c4 <LCD1602_write+0x1b8>)
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <LCD1602_write+0x1bc>)
 800108a:	8819      	ldrh	r1, [r3, #0]
 800108c:	7bbb      	ldrb	r3, [r7, #14]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	f003 faed 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800109a:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <LCD1602_write+0x1b8>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	4b4b      	ldr	r3, [pc, #300]	; (80011cc <LCD1602_write+0x1c0>)
 80010a0:	8819      	ldrh	r1, [r3, #0]
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	f003 fae2 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80010b0:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <LCD1602_write+0x1b8>)
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	4b46      	ldr	r3, [pc, #280]	; (80011d0 <LCD1602_write+0x1c4>)
 80010b6:	8819      	ldrh	r1, [r3, #0]
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	461a      	mov	r2, r3
 80010c2:	f003 fad7 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80010c6:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <LCD1602_write+0x1b8>)
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <LCD1602_write+0x1c8>)
 80010cc:	8819      	ldrh	r1, [r3, #0]
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	f003 facc 	bl	8004674 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 80010dc:	f7ff ff54 	bl	8000f88 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 80010e0:	e05f      	b.n	80011a2 <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 80010e2:	4b32      	ldr	r3, [pc, #200]	; (80011ac <LCD1602_write+0x1a0>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d15b      	bne.n	80011a2 <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80010ea:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <LCD1602_write+0x1b8>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <LCD1602_write+0x1bc>)
 80010f0:	8819      	ldrh	r1, [r3, #0]
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	f003 faba 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001100:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <LCD1602_write+0x1b8>)
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	4b31      	ldr	r3, [pc, #196]	; (80011cc <LCD1602_write+0x1c0>)
 8001106:	8819      	ldrh	r1, [r3, #0]
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	b2db      	uxtb	r3, r3
 8001110:	461a      	mov	r2, r3
 8001112:	f003 faaf 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001116:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <LCD1602_write+0x1b8>)
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <LCD1602_write+0x1c4>)
 800111c:	8819      	ldrh	r1, [r3, #0]
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	f003 faa4 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <LCD1602_write+0x1b8>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <LCD1602_write+0x1c8>)
 8001132:	8819      	ldrh	r1, [r3, #0]
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	b2db      	uxtb	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	f003 fa99 	bl	8004674 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8001142:	f7ff ff21 	bl	8000f88 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <LCD1602_write+0x1b8>)
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <LCD1602_write+0x1bc>)
 800114c:	8819      	ldrh	r1, [r3, #0]
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	f003 fa8c 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <LCD1602_write+0x1b8>)
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <LCD1602_write+0x1c0>)
 8001162:	8819      	ldrh	r1, [r3, #0]
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	b2db      	uxtb	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	f003 fa81 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <LCD1602_write+0x1b8>)
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <LCD1602_write+0x1c4>)
 8001178:	8819      	ldrh	r1, [r3, #0]
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	b2db      	uxtb	r3, r3
 8001182:	461a      	mov	r2, r3
 8001184:	f003 fa76 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <LCD1602_write+0x1b8>)
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <LCD1602_write+0x1c8>)
 800118e:	8819      	ldrh	r1, [r3, #0]
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	f003 fa6b 	bl	8004674 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 800119e:	f7ff fef3 	bl	8000f88 <LCD1602_EnablePulse>
}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000000 	.word	0x20000000
 80011b0:	2000009c 	.word	0x2000009c
 80011b4:	200000a0 	.word	0x200000a0
 80011b8:	200000a2 	.word	0x200000a2
 80011bc:	200000a4 	.word	0x200000a4
 80011c0:	200000a6 	.word	0x200000a6
 80011c4:	200000a8 	.word	0x200000a8
 80011c8:	200000ac 	.word	0x200000ac
 80011cc:	200000ae 	.word	0x200000ae
 80011d0:	200000b0 	.word	0x200000b0
 80011d4:	200000b2 	.word	0x200000b2

080011d8 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
static void LCD1602_TIM_Config(void)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 80011de:	1d3a      	adds	r2, r7, #4
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 febe 	bl	8004f68 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d103      	bne.n	80011fa <LCD1602_TIM_Config+0x22>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 80011f2:	f003 fe91 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 80011f6:	61f8      	str	r0, [r7, #28]
 80011f8:	e004      	b.n	8001204 <LCD1602_TIM_Config+0x2c>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 80011fa:	f003 fe8d 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 80011fe:	4603      	mov	r3, r0
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
	}
	clockSpeed *= 0.000001;
 8001204:	69f8      	ldr	r0, [r7, #28]
 8001206:	f7ff f97d 	bl	8000504 <__aeabi_ui2d>
 800120a:	a321      	add	r3, pc, #132	; (adr r3, 8001290 <LCD1602_TIM_Config+0xb8>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	f7ff f9f2 	bl	80005f8 <__aeabi_dmul>
 8001214:	4603      	mov	r3, r0
 8001216:	460c      	mov	r4, r1
 8001218:	4618      	mov	r0, r3
 800121a:	4621      	mov	r1, r4
 800121c:	f7ff fcc4 	bl	8000ba8 <__aeabi_d2uiz>
 8001220:	4603      	mov	r3, r0
 8001222:	61fb      	str	r3, [r7, #28]
	
	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <LCD1602_TIM_Config+0xb0>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	4a17      	ldr	r2, [pc, #92]	; (8001288 <LCD1602_TIM_Config+0xb0>)
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	6413      	str	r3, [r2, #64]	; 0x40
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <LCD1602_TIM_Config+0xb4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <LCD1602_TIM_Config+0xb4>)
 8001236:	f023 0310 	bic.w	r3, r3, #16
 800123a:	6013      	str	r3, [r2, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <LCD1602_TIM_Config+0xb4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <LCD1602_TIM_Config+0xb4>)
 8001242:	f023 0301 	bic.w	r3, r3, #1
 8001246:	6013      	str	r3, [r2, #0]
	//Update request source 
	TIM3->CR1 &= ~(1UL << 2);
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <LCD1602_TIM_Config+0xb4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0f      	ldr	r2, [pc, #60]	; (800128c <LCD1602_TIM_Config+0xb4>)
 800124e:	f023 0304 	bic.w	r3, r3, #4
 8001252:	6013      	str	r3, [r2, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);				  
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <LCD1602_TIM_Config+0xb4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0c      	ldr	r2, [pc, #48]	; (800128c <LCD1602_TIM_Config+0xb4>)
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	6013      	str	r3, [r2, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 8001260:	4a0a      	ldr	r2, [pc, #40]	; (800128c <LCD1602_TIM_Config+0xb4>)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b01      	subs	r3, #1
 8001266:	6293      	str	r3, [r2, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <LCD1602_TIM_Config+0xb4>)
 800126a:	2209      	movs	r2, #9
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <LCD1602_TIM_Config+0xb4>)
 8001270:	2201      	movs	r2, #1
 8001272:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <LCD1602_TIM_Config+0xb4>)
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <LCD1602_TIM_Config+0xb4>)
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	6113      	str	r3, [r2, #16]
}
 8001280:	bf00      	nop
 8001282:	3724      	adds	r7, #36	; 0x24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	40000400 	.word	0x40000400
 8001290:	a0b5ed8d 	.word	0xa0b5ed8d
 8001294:	3eb0c6f7 	.word	0x3eb0c6f7

08001298 <LCD1602_TIM_MicorSecDelay>:
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 80012a0:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <LCD1602_TIM_MicorSecDelay+0x44>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <LCD1602_TIM_MicorSecDelay+0x44>)
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <LCD1602_TIM_MicorSecDelay+0x44>)
 80012ae:	f023 0301 	bic.w	r3, r3, #1
 80012b2:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1UL;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <LCD1602_TIM_MicorSecDelay+0x44>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a08      	ldr	r2, [pc, #32]	; (80012dc <LCD1602_TIM_MicorSecDelay+0x44>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 80012c0:	bf00      	nop
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <LCD1602_TIM_MicorSecDelay+0x44>)
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d1f9      	bne.n	80012c2 <LCD1602_TIM_MicorSecDelay+0x2a>
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40000400 	.word	0x40000400

080012e0 <LCD1602_writeCommand>:
//5) Write command
static void LCD1602_writeCommand(uint8_t command)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
	//Set RS to 0
	LCD1602_RS(false);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff fe6c 	bl	8000fc8 <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fe8a 	bl	800100c <LCD1602_write>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <LCD1602_writeData>:
//6) Write 8 bits data
static void LCD1602_writeData(uint8_t data)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
	//Set RS to 1
	LCD1602_RS(true);
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff fe5c 	bl	8000fc8 <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(data);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fe7a 	bl	800100c <LCD1602_write>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <LCD1602_Begin8BIT>:
}

//Public functions
//1) LCD begin 8 bits function
void LCD1602_Begin8BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_LSBs0to3, uint16_t D0, uint16_t D1, uint16_t D2, uint16_t D3, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	460b      	mov	r3, r1
 800132c:	817b      	strh	r3, [r7, #10]
 800132e:	4613      	mov	r3, r2
 8001330:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 8001332:	4a2a      	ldr	r2, [pc, #168]	; (80013dc <LCD1602_Begin8BIT+0xbc>)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 8001338:	4a29      	ldr	r2, [pc, #164]	; (80013e0 <LCD1602_Begin8BIT+0xc0>)
 800133a:	897b      	ldrh	r3, [r7, #10]
 800133c:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 800133e:	4a29      	ldr	r2, [pc, #164]	; (80013e4 <LCD1602_Begin8BIT+0xc4>)
 8001340:	893b      	ldrh	r3, [r7, #8]
 8001342:	8013      	strh	r3, [r2, #0]
	PORT_LSB = PORT_LSBs0to3;
 8001344:	4a28      	ldr	r2, [pc, #160]	; (80013e8 <LCD1602_Begin8BIT+0xc8>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
	D0_PIN = D0;
 800134a:	4a28      	ldr	r2, [pc, #160]	; (80013ec <LCD1602_Begin8BIT+0xcc>)
 800134c:	8b3b      	ldrh	r3, [r7, #24]
 800134e:	8013      	strh	r3, [r2, #0]
	D1_PIN = D1;
 8001350:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <LCD1602_Begin8BIT+0xd0>)
 8001352:	8bbb      	ldrh	r3, [r7, #28]
 8001354:	8013      	strh	r3, [r2, #0]
	D2_PIN = D2;
 8001356:	4a27      	ldr	r2, [pc, #156]	; (80013f4 <LCD1602_Begin8BIT+0xd4>)
 8001358:	8c3b      	ldrh	r3, [r7, #32]
 800135a:	8013      	strh	r3, [r2, #0]
	D3_PIN = D3;
 800135c:	4a26      	ldr	r2, [pc, #152]	; (80013f8 <LCD1602_Begin8BIT+0xd8>)
 800135e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001360:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 8001362:	4a26      	ldr	r2, [pc, #152]	; (80013fc <LCD1602_Begin8BIT+0xdc>)
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 8001368:	4a25      	ldr	r2, [pc, #148]	; (8001400 <LCD1602_Begin8BIT+0xe0>)
 800136a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800136c:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 800136e:	4a25      	ldr	r2, [pc, #148]	; (8001404 <LCD1602_Begin8BIT+0xe4>)
 8001370:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001372:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 8001374:	4a24      	ldr	r2, [pc, #144]	; (8001408 <LCD1602_Begin8BIT+0xe8>)
 8001376:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001378:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 800137a:	4a24      	ldr	r2, [pc, #144]	; (800140c <LCD1602_Begin8BIT+0xec>)
 800137c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800137e:	8013      	strh	r3, [r2, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 8001380:	f7ff ff2a 	bl	80011d8 <LCD1602_TIM_Config>
	//Set the mode to 8 bits
	mode_8_4_I2C = 1;
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <LCD1602_Begin8BIT+0xf0>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
	//Function set variable to 8 bits mode
	FunctionSet = 0x38;
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <LCD1602_Begin8BIT+0xf4>)
 800138c:	2238      	movs	r2, #56	; 0x38
 800138e:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 8001390:	2014      	movs	r0, #20
 8001392:	f001 ff3f 	bl	8003214 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_writeCommand(0x30);
 8001396:	2030      	movs	r0, #48	; 0x30
 8001398:	f7ff ffa2 	bl	80012e0 <LCD1602_writeCommand>
	HAL_Delay(5);
 800139c:	2005      	movs	r0, #5
 800139e:	f001 ff39 	bl	8003214 <HAL_Delay>
	LCD1602_writeCommand(0x30);
 80013a2:	2030      	movs	r0, #48	; 0x30
 80013a4:	f7ff ff9c 	bl	80012e0 <LCD1602_writeCommand>
	HAL_Delay(1);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f001 ff33 	bl	8003214 <HAL_Delay>
	LCD1602_writeCommand(0x30);
 80013ae:	2030      	movs	r0, #48	; 0x30
 80013b0:	f7ff ff96 	bl	80012e0 <LCD1602_writeCommand>
	HAL_Delay(1);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f001 ff2d 	bl	8003214 <HAL_Delay>
	//3. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N | LCD_FUNCTION_DL);
 80013ba:	2038      	movs	r0, #56	; 0x38
 80013bc:	f7ff ff90 	bl	80012e0 <LCD1602_writeCommand>
	//4. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80013c0:	200f      	movs	r0, #15
 80013c2:	f7ff ff8d 	bl	80012e0 <LCD1602_writeCommand>
	//5. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f7ff ff8a 	bl	80012e0 <LCD1602_writeCommand>
	HAL_Delay(2);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f001 ff21 	bl	8003214 <HAL_Delay>
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000094 	.word	0x20000094
 80013e0:	20000098 	.word	0x20000098
 80013e4:	2000009a 	.word	0x2000009a
 80013e8:	2000009c 	.word	0x2000009c
 80013ec:	200000a0 	.word	0x200000a0
 80013f0:	200000a2 	.word	0x200000a2
 80013f4:	200000a4 	.word	0x200000a4
 80013f8:	200000a6 	.word	0x200000a6
 80013fc:	200000a8 	.word	0x200000a8
 8001400:	200000ac 	.word	0x200000ac
 8001404:	200000ae 	.word	0x200000ae
 8001408:	200000b0 	.word	0x200000b0
 800140c:	200000b2 	.word	0x200000b2
 8001410:	20000000 	.word	0x20000000
 8001414:	20000002 	.word	0x20000002

08001418 <LCD1602_print>:
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
	HAL_Delay(3);
}
//3) LCD print string
void LCD1602_print(char string[])
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	e009      	b.n	800143a <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff66 	bl	8001300 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	3301      	adds	r3, #1
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d805      	bhi.n	800144c <LCD1602_print+0x34>
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1ec      	bne.n	8001426 <LCD1602_print+0xe>
	}
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <LCD1602_setCursor>:
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	4613      	mov	r3, r2
 8001462:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 8001464:	79bb      	ldrb	r3, [r7, #6]
 8001466:	3b01      	subs	r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d108      	bne.n	8001488 <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800147c:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff2d 	bl	80012e0 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}	
 8001486:	e007      	b.n	8001498 <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800148e:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff24 	bl	80012e0 <LCD1602_writeCommand>
}	
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <LCD1602_noCursor>:
	FunctionSet &= ~(0x08);
	LCD1602_writeCommand(FunctionSet);
}
//6) Cursor ON/OFF
void LCD1602_noCursor(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x02);
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <LCD1602_noCursor+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	f023 0302 	bic.w	r3, r3, #2
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <LCD1602_noCursor+0x20>)
 80014b0:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 80014b2:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <LCD1602_noCursor+0x20>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff12 	bl	80012e0 <LCD1602_writeCommand>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000001 	.word	0x20000001

080014c4 <LCD1602_clear>:
	DisplayControl |= (0x02);
	LCD1602_writeCommand(DisplayControl);
}
//7) Clear display
void LCD1602_clear(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7ff ff09 	bl	80012e0 <LCD1602_writeCommand>
	HAL_Delay(3);
 80014ce:	2003      	movs	r0, #3
 80014d0:	f001 fea0 	bl	8003214 <HAL_Delay>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <LCD1602_noBlink>:
//8) Blinking cursor
void LCD1602_noBlink(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x01);
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <LCD1602_noBlink+0x20>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <LCD1602_noBlink+0x20>)
 80014e8:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <LCD1602_noBlink+0x20>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fef6 	bl	80012e0 <LCD1602_writeCommand>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000001 	.word	0x20000001

080014fc <LCD1602_PrintInt>:

//********** Print numbers to LCD **********//
//1. Integer

void LCD1602_PrintInt(int number)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	char numStr[16];
	sprintf(numStr,"%d", number);
 8001504:	f107 0308 	add.w	r3, r7, #8
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4906      	ldr	r1, [pc, #24]	; (8001524 <LCD1602_PrintInt+0x28>)
 800150c:	4618      	mov	r0, r3
 800150e:	f004 ffab 	bl	8006468 <siprintf>
	LCD1602_print(numStr);
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff7e 	bl	8001418 <LCD1602_print>
}
 800151c:	bf00      	nop
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	08007108 	.word	0x08007108

08001528 <adcRead>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void adcRead(ADC_HandleTypeDef* hadc)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <adcRead+0x4c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d116      	bne.n	8001568 <adcRead+0x40>
	{
		for(d=0; d<=ADCSIZE; d++)
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <adcRead+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	e00e      	b.n	8001560 <adcRead+0x38>
		{
			adcValues[d] = adc_buffer[d];
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <adcRead+0x50>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <adcRead+0x50>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	490c      	ldr	r1, [pc, #48]	; (800157c <adcRead+0x54>)
 800154c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001550:	490b      	ldr	r1, [pc, #44]	; (8001580 <adcRead+0x58>)
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(d=0; d<=ADCSIZE; d++)
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <adcRead+0x50>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	4a06      	ldr	r2, [pc, #24]	; (8001578 <adcRead+0x50>)
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <adcRead+0x50>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b0d      	cmp	r3, #13
 8001566:	ddec      	ble.n	8001542 <adcRead+0x1a>

		}
	}
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40012100 	.word	0x40012100
 8001578:	200000bc 	.word	0x200000bc
 800157c:	200002ec 	.word	0x200002ec
 8001580:	200000d4 	.word	0x200000d4
 8001584:	00000000 	.word	0x00000000

08001588 <adctoArray>:



void adctoArray(void)
{
 8001588:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800158c:	b088      	sub	sp, #32
 800158e:	af00      	add	r7, sp, #0
	int k=0;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
	while(k<VOLTSIZE)
 8001594:	e01f      	b.n	80015d6 <adctoArray+0x4e>
	{
		voltVal[k]= ( adcValues[k] * 4.2 / 4096 ) ;
 8001596:	4a80      	ldr	r2, [pc, #512]	; (8001798 <adctoArray+0x210>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ffc0 	bl	8000524 <__aeabi_i2d>
 80015a4:	a374      	add	r3, pc, #464	; (adr r3, 8001778 <adctoArray+0x1f0>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7ff f825 	bl	80005f8 <__aeabi_dmul>
 80015ae:	4603      	mov	r3, r0
 80015b0:	460c      	mov	r4, r1
 80015b2:	4618      	mov	r0, r3
 80015b4:	4621      	mov	r1, r4
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	4b78      	ldr	r3, [pc, #480]	; (800179c <adctoArray+0x214>)
 80015bc:	f7ff f946 	bl	800084c <__aeabi_ddiv>
 80015c0:	4603      	mov	r3, r0
 80015c2:	460c      	mov	r4, r1
 80015c4:	4976      	ldr	r1, [pc, #472]	; (80017a0 <adctoArray+0x218>)
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	00d2      	lsls	r2, r2, #3
 80015ca:	440a      	add	r2, r1
 80015cc:	e9c2 3400 	strd	r3, r4, [r2]
		k++;
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	3301      	adds	r3, #1
 80015d4:	61fb      	str	r3, [r7, #28]
	while(k<VOLTSIZE)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	2b0b      	cmp	r3, #11
 80015da:	dddc      	ble.n	8001596 <adctoArray+0xe>
	}

	float Rt=0;
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
	float Rp=10000;
 80015e2:	4b70      	ldr	r3, [pc, #448]	; (80017a4 <adctoArray+0x21c>)
 80015e4:	617b      	str	r3, [r7, #20]
	float T2=273.15+25;
 80015e6:	4b70      	ldr	r3, [pc, #448]	; (80017a8 <adctoArray+0x220>)
 80015e8:	613b      	str	r3, [r7, #16]
	float Bx=3950;
 80015ea:	4b70      	ldr	r3, [pc, #448]	; (80017ac <adctoArray+0x224>)
 80015ec:	60fb      	str	r3, [r7, #12]
	float Ka=273.15;
 80015ee:	4b70      	ldr	r3, [pc, #448]	; (80017b0 <adctoArray+0x228>)
 80015f0:	60bb      	str	r3, [r7, #8]
	float vol=0;
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
	vol=(float)((adcValues[12])*(3.3/4096));
 80015f8:	4b67      	ldr	r3, [pc, #412]	; (8001798 <adctoArray+0x210>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff91 	bl	8000524 <__aeabi_i2d>
 8001602:	a35f      	add	r3, pc, #380	; (adr r3, 8001780 <adctoArray+0x1f8>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe fff6 	bl	80005f8 <__aeabi_dmul>
 800160c:	4603      	mov	r3, r0
 800160e:	460c      	mov	r4, r1
 8001610:	4618      	mov	r0, r3
 8001612:	4621      	mov	r1, r4
 8001614:	f7ff fae8 	bl	8000be8 <__aeabi_d2f>
 8001618:	4603      	mov	r3, r0
 800161a:	607b      	str	r3, [r7, #4]
	Rt=(3.3-vol)*10000/vol;
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7fe ff93 	bl	8000548 <__aeabi_f2d>
 8001622:	4603      	mov	r3, r0
 8001624:	460c      	mov	r4, r1
 8001626:	461a      	mov	r2, r3
 8001628:	4623      	mov	r3, r4
 800162a:	a157      	add	r1, pc, #348	; (adr r1, 8001788 <adctoArray+0x200>)
 800162c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001630:	f7fe fe2a 	bl	8000288 <__aeabi_dsub>
 8001634:	4603      	mov	r3, r0
 8001636:	460c      	mov	r4, r1
 8001638:	4618      	mov	r0, r3
 800163a:	4621      	mov	r1, r4
 800163c:	a354      	add	r3, pc, #336	; (adr r3, 8001790 <adctoArray+0x208>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7fe ffd9 	bl	80005f8 <__aeabi_dmul>
 8001646:	4603      	mov	r3, r0
 8001648:	460c      	mov	r4, r1
 800164a:	4625      	mov	r5, r4
 800164c:	461c      	mov	r4, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7fe ff7a 	bl	8000548 <__aeabi_f2d>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4620      	mov	r0, r4
 800165a:	4629      	mov	r1, r5
 800165c:	f7ff f8f6 	bl	800084c <__aeabi_ddiv>
 8001660:	4603      	mov	r3, r0
 8001662:	460c      	mov	r4, r1
 8001664:	4618      	mov	r0, r3
 8001666:	4621      	mov	r1, r4
 8001668:	f7ff fabe 	bl	8000be8 <__aeabi_d2f>
 800166c:	4603      	mov	r3, r0
 800166e:	61bb      	str	r3, [r7, #24]
	softTemp =1/(1/T2+log(Rt/Rp)/Bx)-Ka+0.5;
 8001670:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001674:	edd7 7a04 	vldr	s15, [r7, #16]
 8001678:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800167c:	ee16 0a90 	vmov	r0, s13
 8001680:	f7fe ff62 	bl	8000548 <__aeabi_f2d>
 8001684:	4604      	mov	r4, r0
 8001686:	460d      	mov	r5, r1
 8001688:	ed97 7a06 	vldr	s14, [r7, #24]
 800168c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001690:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001694:	ee16 0a90 	vmov	r0, s13
 8001698:	f7fe ff56 	bl	8000548 <__aeabi_f2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	ec43 2b10 	vmov	d0, r2, r3
 80016a4:	f005 fae6 	bl	8006c74 <log>
 80016a8:	ec59 8b10 	vmov	r8, r9, d0
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f7fe ff4b 	bl	8000548 <__aeabi_f2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4640      	mov	r0, r8
 80016b8:	4649      	mov	r1, r9
 80016ba:	f7ff f8c7 	bl	800084c <__aeabi_ddiv>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4620      	mov	r0, r4
 80016c4:	4629      	mov	r1, r5
 80016c6:	f7fe fde1 	bl	800028c <__adddf3>
 80016ca:	4603      	mov	r3, r0
 80016cc:	460c      	mov	r4, r1
 80016ce:	461a      	mov	r2, r3
 80016d0:	4623      	mov	r3, r4
 80016d2:	f04f 0000 	mov.w	r0, #0
 80016d6:	4937      	ldr	r1, [pc, #220]	; (80017b4 <adctoArray+0x22c>)
 80016d8:	f7ff f8b8 	bl	800084c <__aeabi_ddiv>
 80016dc:	4603      	mov	r3, r0
 80016de:	460c      	mov	r4, r1
 80016e0:	4625      	mov	r5, r4
 80016e2:	461c      	mov	r4, r3
 80016e4:	68b8      	ldr	r0, [r7, #8]
 80016e6:	f7fe ff2f 	bl	8000548 <__aeabi_f2d>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4620      	mov	r0, r4
 80016f0:	4629      	mov	r1, r5
 80016f2:	f7fe fdc9 	bl	8000288 <__aeabi_dsub>
 80016f6:	4603      	mov	r3, r0
 80016f8:	460c      	mov	r4, r1
 80016fa:	4618      	mov	r0, r3
 80016fc:	4621      	mov	r1, r4
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <adctoArray+0x230>)
 8001704:	f7fe fdc2 	bl	800028c <__adddf3>
 8001708:	4603      	mov	r3, r0
 800170a:	460c      	mov	r4, r1
 800170c:	4618      	mov	r0, r3
 800170e:	4621      	mov	r1, r4
 8001710:	f7ff fa6a 	bl	8000be8 <__aeabi_d2f>
 8001714:	4602      	mov	r2, r0
 8001716:	4b29      	ldr	r3, [pc, #164]	; (80017bc <adctoArray+0x234>)
 8001718:	601a      	str	r2, [r3, #0]

	tempValue = softTemp ;
 800171a:	4b28      	ldr	r3, [pc, #160]	; (80017bc <adctoArray+0x234>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001724:	ee17 2a90 	vmov	r2, s15
 8001728:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <adctoArray+0x238>)
 800172a:	601a      	str	r2, [r3, #0]
	int tempValueOndalikDummy = softTemp*10 ;
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <adctoArray+0x234>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173e:	ee17 3a90 	vmov	r3, s15
 8001742:	603b      	str	r3, [r7, #0]
	tempValueOndalik = tempValueOndalikDummy %10;
 8001744:	6839      	ldr	r1, [r7, #0]
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <adctoArray+0x23c>)
 8001748:	fb83 2301 	smull	r2, r3, r3, r1
 800174c:	109a      	asrs	r2, r3, #2
 800174e:	17cb      	asrs	r3, r1, #31
 8001750:	1ad2      	subs	r2, r2, r3
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	1aca      	subs	r2, r1, r3
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <adctoArray+0x240>)
 800175e:	601a      	str	r2, [r3, #0]

	currentValue = adcValues[13];
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <adctoArray+0x210>)
 8001762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001764:	4a19      	ldr	r2, [pc, #100]	; (80017cc <adctoArray+0x244>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	3720      	adds	r7, #32
 800176c:	46bd      	mov	sp, r7
 800176e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001772:	bf00      	nop
 8001774:	f3af 8000 	nop.w
 8001778:	cccccccd 	.word	0xcccccccd
 800177c:	4010cccc 	.word	0x4010cccc
 8001780:	66666666 	.word	0x66666666
 8001784:	3f4a6666 	.word	0x3f4a6666
 8001788:	66666666 	.word	0x66666666
 800178c:	400a6666 	.word	0x400a6666
 8001790:	00000000 	.word	0x00000000
 8001794:	40c38800 	.word	0x40c38800
 8001798:	200000d4 	.word	0x200000d4
 800179c:	40b00000 	.word	0x40b00000
 80017a0:	20000108 	.word	0x20000108
 80017a4:	461c4000 	.word	0x461c4000
 80017a8:	43951333 	.word	0x43951333
 80017ac:	4576e000 	.word	0x4576e000
 80017b0:	43889333 	.word	0x43889333
 80017b4:	3ff00000 	.word	0x3ff00000
 80017b8:	3fe00000 	.word	0x3fe00000
 80017bc:	200001a0 	.word	0x200001a0
 80017c0:	200001a4 	.word	0x200001a4
 80017c4:	66666667 	.word	0x66666667
 80017c8:	200001a8 	.word	0x200001a8
 80017cc:	200001ac 	.word	0x200001ac

080017d0 <doublevoltValtoInteger>:

void doublevoltValtoInteger(void)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
		int k=0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
		while(k<VOLTSIZE)
 80017da:	e01a      	b.n	8001812 <doublevoltValtoInteger+0x42>
		{
			int voltDummy;
			voltDummy = voltVal[k] * 100 ;
 80017dc:	4a10      	ldr	r2, [pc, #64]	; (8001820 <doublevoltValtoInteger+0x50>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <doublevoltValtoInteger+0x54>)
 80017ee:	f7fe ff03 	bl	80005f8 <__aeabi_dmul>
 80017f2:	4603      	mov	r3, r0
 80017f4:	460c      	mov	r4, r1
 80017f6:	4618      	mov	r0, r3
 80017f8:	4621      	mov	r1, r4
 80017fa:	f7ff f9ad 	bl	8000b58 <__aeabi_d2iz>
 80017fe:	4603      	mov	r3, r0
 8001800:	603b      	str	r3, [r7, #0]
			voltintVal[k] = voltDummy ;
 8001802:	4909      	ldr	r1, [pc, #36]	; (8001828 <doublevoltValtoInteger+0x58>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			k++;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3301      	adds	r3, #1
 8001810:	607b      	str	r3, [r7, #4]
		while(k<VOLTSIZE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b0b      	cmp	r3, #11
 8001816:	dde1      	ble.n	80017dc <doublevoltValtoInteger+0xc>
		}
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bd90      	pop	{r4, r7, pc}
 8001820:	20000108 	.word	0x20000108
 8001824:	40590000 	.word	0x40590000
 8001828:	20000168 	.word	0x20000168

0800182c <voltstoDigit>:


void voltstoDigit(void)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
	int digitBindebirler;
	int digitBindeonlar;
	int digitBindeyuzler;
	int digitTamkisim;

	for(i=0; i<=VOLTSIZE ; i++)
 8001832:	4b69      	ldr	r3, [pc, #420]	; (80019d8 <voltstoDigit+0x1ac>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e0c5      	b.n	80019c6 <voltstoDigit+0x19a>
	{
		digitTamkisim = voltVal[i] ; // double to float
 800183a:	4b67      	ldr	r3, [pc, #412]	; (80019d8 <voltstoDigit+0x1ac>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a67      	ldr	r2, [pc, #412]	; (80019dc <voltstoDigit+0x1b0>)
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001848:	4618      	mov	r0, r3
 800184a:	4621      	mov	r1, r4
 800184c:	f7ff f984 	bl	8000b58 <__aeabi_d2iz>
 8001850:	4603      	mov	r3, r0
 8001852:	60fb      	str	r3, [r7, #12]
		voltData[i][0] = digitTamkisim +48;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4a5f      	ldr	r2, [pc, #380]	; (80019d8 <voltstoDigit+0x1ac>)
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	3330      	adds	r3, #48	; 0x30
 800185e:	b2d8      	uxtb	r0, r3
 8001860:	495f      	ldr	r1, [pc, #380]	; (80019e0 <voltstoDigit+0x1b4>)
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	4602      	mov	r2, r0
 800186e:	701a      	strb	r2, [r3, #0]

		voltData[i][1]='.';
 8001870:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <voltstoDigit+0x1ac>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	495a      	ldr	r1, [pc, #360]	; (80019e0 <voltstoDigit+0x1b4>)
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	3301      	adds	r3, #1
 8001882:	222e      	movs	r2, #46	; 0x2e
 8001884:	701a      	strb	r2, [r3, #0]

		digitBindeyuzler = voltVal[i] * 1000;
 8001886:	4b54      	ldr	r3, [pc, #336]	; (80019d8 <voltstoDigit+0x1ac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a54      	ldr	r2, [pc, #336]	; (80019dc <voltstoDigit+0x1b0>)
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4413      	add	r3, r2
 8001890:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b52      	ldr	r3, [pc, #328]	; (80019e4 <voltstoDigit+0x1b8>)
 800189a:	f7fe fead 	bl	80005f8 <__aeabi_dmul>
 800189e:	4603      	mov	r3, r0
 80018a0:	460c      	mov	r4, r1
 80018a2:	4618      	mov	r0, r3
 80018a4:	4621      	mov	r1, r4
 80018a6:	f7ff f957 	bl	8000b58 <__aeabi_d2iz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	60bb      	str	r3, [r7, #8]
		digitBindeyuzler = digitBindeyuzler % 1000 / 100 ;
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <voltstoDigit+0x1bc>)
 80018b2:	fb83 1302 	smull	r1, r3, r3, r2
 80018b6:	1199      	asrs	r1, r3, #6
 80018b8:	17d3      	asrs	r3, r2, #31
 80018ba:	1acb      	subs	r3, r1, r3
 80018bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	4a49      	ldr	r2, [pc, #292]	; (80019ec <voltstoDigit+0x1c0>)
 80018c8:	fb82 1203 	smull	r1, r2, r2, r3
 80018cc:	1152      	asrs	r2, r2, #5
 80018ce:	17db      	asrs	r3, r3, #31
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	60bb      	str	r3, [r7, #8]
		voltData[i][2] =  digitBindeyuzler +48;
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	4a3f      	ldr	r2, [pc, #252]	; (80019d8 <voltstoDigit+0x1ac>)
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	3330      	adds	r3, #48	; 0x30
 80018de:	b2d8      	uxtb	r0, r3
 80018e0:	493f      	ldr	r1, [pc, #252]	; (80019e0 <voltstoDigit+0x1b4>)
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	3302      	adds	r3, #2
 80018ee:	4602      	mov	r2, r0
 80018f0:	701a      	strb	r2, [r3, #0]

		digitBindeonlar = voltVal[i] * 1000;
 80018f2:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <voltstoDigit+0x1ac>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a39      	ldr	r2, [pc, #228]	; (80019dc <voltstoDigit+0x1b0>)
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <voltstoDigit+0x1b8>)
 8001906:	f7fe fe77 	bl	80005f8 <__aeabi_dmul>
 800190a:	4603      	mov	r3, r0
 800190c:	460c      	mov	r4, r1
 800190e:	4618      	mov	r0, r3
 8001910:	4621      	mov	r1, r4
 8001912:	f7ff f921 	bl	8000b58 <__aeabi_d2iz>
 8001916:	4603      	mov	r3, r0
 8001918:	607b      	str	r3, [r7, #4]
		digitBindeonlar = digitBindeonlar % 100 / 10 ;
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	4b33      	ldr	r3, [pc, #204]	; (80019ec <voltstoDigit+0x1c0>)
 800191e:	fb83 1302 	smull	r1, r3, r3, r2
 8001922:	1159      	asrs	r1, r3, #5
 8001924:	17d3      	asrs	r3, r2, #31
 8001926:	1acb      	subs	r3, r1, r3
 8001928:	2164      	movs	r1, #100	; 0x64
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	4a2f      	ldr	r2, [pc, #188]	; (80019f0 <voltstoDigit+0x1c4>)
 8001932:	fb82 1203 	smull	r1, r2, r2, r3
 8001936:	1092      	asrs	r2, r2, #2
 8001938:	17db      	asrs	r3, r3, #31
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	607b      	str	r3, [r7, #4]
		voltData[i][3] =  digitBindeonlar +48;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <voltstoDigit+0x1ac>)
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	3330      	adds	r3, #48	; 0x30
 8001948:	b2d8      	uxtb	r0, r3
 800194a:	4925      	ldr	r1, [pc, #148]	; (80019e0 <voltstoDigit+0x1b4>)
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	3303      	adds	r3, #3
 8001958:	4602      	mov	r2, r0
 800195a:	701a      	strb	r2, [r3, #0]

		digitBindebirler = voltVal[i] * 1000;
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <voltstoDigit+0x1ac>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a1e      	ldr	r2, [pc, #120]	; (80019dc <voltstoDigit+0x1b0>)
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4413      	add	r3, r2
 8001966:	e9d3 0100 	ldrd	r0, r1, [r3]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <voltstoDigit+0x1b8>)
 8001970:	f7fe fe42 	bl	80005f8 <__aeabi_dmul>
 8001974:	4603      	mov	r3, r0
 8001976:	460c      	mov	r4, r1
 8001978:	4618      	mov	r0, r3
 800197a:	4621      	mov	r1, r4
 800197c:	f7ff f8ec 	bl	8000b58 <__aeabi_d2iz>
 8001980:	4603      	mov	r3, r0
 8001982:	603b      	str	r3, [r7, #0]
		digitBindebirler = digitBindebirler % 10;
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <voltstoDigit+0x1c4>)
 8001988:	fb83 1302 	smull	r1, r3, r3, r2
 800198c:	1099      	asrs	r1, r3, #2
 800198e:	17d3      	asrs	r3, r2, #31
 8001990:	1ac9      	subs	r1, r1, r3
 8001992:	460b      	mov	r3, r1
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	603b      	str	r3, [r7, #0]
		voltData[i][4] =  digitBindebirler +48;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <voltstoDigit+0x1ac>)
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	3330      	adds	r3, #48	; 0x30
 80019a8:	b2d8      	uxtb	r0, r3
 80019aa:	490d      	ldr	r1, [pc, #52]	; (80019e0 <voltstoDigit+0x1b4>)
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	3304      	adds	r3, #4
 80019b8:	4602      	mov	r2, r0
 80019ba:	701a      	strb	r2, [r3, #0]
	for(i=0; i<=VOLTSIZE ; i++)
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <voltstoDigit+0x1ac>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <voltstoDigit+0x1ac>)
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <voltstoDigit+0x1ac>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b0c      	cmp	r3, #12
 80019cc:	f77f af35 	ble.w	800183a <voltstoDigit+0xe>
	}

}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd90      	pop	{r4, r7, pc}
 80019d8:	200000b4 	.word	0x200000b4
 80019dc:	20000108 	.word	0x20000108
 80019e0:	200003cc 	.word	0x200003cc
 80019e4:	408f4000 	.word	0x408f4000
 80019e8:	10624dd3 	.word	0x10624dd3
 80019ec:	51eb851f 	.word	0x51eb851f
 80019f0:	66666667 	.word	0x66666667

080019f4 <datatoArray>:

void datatoArray(int dataNumber)
{
 80019f4:	b490      	push	{r4, r7}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
		voltValueArray[0]= 12;
 80019fc:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <datatoArray+0x6c>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	701a      	strb	r2, [r3, #0]
		voltValueArray[1]= 32;
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <datatoArray+0x6c>)
 8001a04:	2220      	movs	r2, #32
 8001a06:	705a      	strb	r2, [r3, #1]
		voltValueArray[7]= 32;
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <datatoArray+0x6c>)
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	71da      	strb	r2, [r3, #7]
		voltValueArray[8]= 10;
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <datatoArray+0x6c>)
 8001a10:	220a      	movs	r2, #10
 8001a12:	721a      	strb	r2, [r3, #8]
		voltValueArray[9]= 13;
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <datatoArray+0x6c>)
 8001a16:	220d      	movs	r2, #13
 8001a18:	725a      	strb	r2, [r3, #9]

		for(i=0 ; i<=4; i++)
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <datatoArray+0x70>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	e014      	b.n	8001a4c <datatoArray+0x58>
		{
			voltValueArray[i+2]=voltData[dataNumber][i];
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <datatoArray+0x70>)
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <datatoArray+0x70>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	1c99      	adds	r1, r3, #2
 8001a2c:	4c0e      	ldr	r4, [pc, #56]	; (8001a68 <datatoArray+0x74>)
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4423      	add	r3, r4
 8001a3a:	4403      	add	r3, r0
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <datatoArray+0x6c>)
 8001a40:	545a      	strb	r2, [r3, r1]
		for(i=0 ; i<=4; i++)
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <datatoArray+0x70>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <datatoArray+0x70>)
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <datatoArray+0x70>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	dde6      	ble.n	8001a22 <datatoArray+0x2e>
		}

}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc90      	pop	{r4, r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	200001cc 	.word	0x200001cc
 8001a64:	200000b4 	.word	0x200000b4
 8001a68:	200003cc 	.word	0x200003cc

08001a6c <lowestVoltage_Conf>:

int lowestVoltage_Conf(int *voltValues)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	int lowestVoltage = voltValues[0] ;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
	int indexLow=0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
	for(i=0; i<VOLTSIZE ; i++ )
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <lowestVoltage_Conf+0x68>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e017      	b.n	8001ab6 <lowestVoltage_Conf+0x4a>
	{
		if( voltValues[i] <  lowestVoltage )
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <lowestVoltage_Conf+0x68>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dd09      	ble.n	8001aac <lowestVoltage_Conf+0x40>
		{
			 lowestVoltage = voltValues[i];
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <lowestVoltage_Conf+0x68>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
			 indexLow=i;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <lowestVoltage_Conf+0x68>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	60bb      	str	r3, [r7, #8]
	for(i=0; i<VOLTSIZE ; i++ )
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <lowestVoltage_Conf+0x68>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <lowestVoltage_Conf+0x68>)
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <lowestVoltage_Conf+0x68>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b0b      	cmp	r3, #11
 8001abc:	dde3      	ble.n	8001a86 <lowestVoltage_Conf+0x1a>
		}
	}
	lowestVoltageIndex = indexLow ;
 8001abe:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <lowestVoltage_Conf+0x6c>)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	6013      	str	r3, [r2, #0]
	return lowestVoltage;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	200000b4 	.word	0x200000b4
 8001ad8:	20000198 	.word	0x20000198

08001adc <highestVoltage_Conf>:

int highestVoltage_Conf(int *voltValues)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	int highestVoltage = voltValues[0] ;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
	int indexHigh=0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
	for(i=0; i<VOLTSIZE ; i++ )
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <highestVoltage_Conf+0x68>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e017      	b.n	8001b26 <highestVoltage_Conf+0x4a>
	{
		if( voltValues[i] >  highestVoltage )
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <highestVoltage_Conf+0x68>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	da09      	bge.n	8001b1c <highestVoltage_Conf+0x40>
		{
			highestVoltage = voltValues[i];
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <highestVoltage_Conf+0x68>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
			indexHigh=i;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <highestVoltage_Conf+0x68>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60bb      	str	r3, [r7, #8]
	for(i=0; i<VOLTSIZE ; i++ )
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <highestVoltage_Conf+0x68>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <highestVoltage_Conf+0x68>)
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <highestVoltage_Conf+0x68>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b0b      	cmp	r3, #11
 8001b2c:	dde3      	ble.n	8001af6 <highestVoltage_Conf+0x1a>
		}
	}
	highestVoltageIndex = indexHigh ;
 8001b2e:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <highestVoltage_Conf+0x6c>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	6013      	str	r3, [r2, #0]
	return highestVoltage;
 8001b34:	68fb      	ldr	r3, [r7, #12]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	200000b4 	.word	0x200000b4
 8001b48:	2000019c 	.word	0x2000019c

08001b4c <dataSend>:

void dataSend(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af02      	add	r7, sp, #8
			sprintf(mData,"\f TEMPERATURE : %d.%d \n\r",tempValue,tempValueOndalik); // sıcaklık degiskeni dataya aktarıldı
 8001b52:	4b81      	ldr	r3, [pc, #516]	; (8001d58 <dataSend+0x20c>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4b81      	ldr	r3, [pc, #516]	; (8001d5c <dataSend+0x210>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4981      	ldr	r1, [pc, #516]	; (8001d60 <dataSend+0x214>)
 8001b5c:	4881      	ldr	r0, [pc, #516]	; (8001d64 <dataSend+0x218>)
 8001b5e:	f004 fc83 	bl	8006468 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)mData , strlen(mData), 1000);
 8001b62:	4880      	ldr	r0, [pc, #512]	; (8001d64 <dataSend+0x218>)
 8001b64:	f7fe fb34 	bl	80001d0 <strlen>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b70:	497c      	ldr	r1, [pc, #496]	; (8001d64 <dataSend+0x218>)
 8001b72:	487d      	ldr	r0, [pc, #500]	; (8001d68 <dataSend+0x21c>)
 8001b74:	f003 ffe7 	bl	8005b46 <HAL_UART_Transmit>

			sprintf(mData,"\f CURRENT : %d.%d%d \n\r",currentValue%10,currentValueOndalik,currentValueYuzdelik); // sıcaklık degiskeni dataya aktarıldı
 8001b78:	4b7c      	ldr	r3, [pc, #496]	; (8001d6c <dataSend+0x220>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b7c      	ldr	r3, [pc, #496]	; (8001d70 <dataSend+0x224>)
 8001b7e:	fb83 1302 	smull	r1, r3, r3, r2
 8001b82:	1099      	asrs	r1, r3, #2
 8001b84:	17d3      	asrs	r3, r2, #31
 8001b86:	1ac9      	subs	r1, r1, r3
 8001b88:	460b      	mov	r3, r1
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	1ad1      	subs	r1, r2, r3
 8001b92:	4b78      	ldr	r3, [pc, #480]	; (8001d74 <dataSend+0x228>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4b78      	ldr	r3, [pc, #480]	; (8001d78 <dataSend+0x22c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	460a      	mov	r2, r1
 8001ba0:	4976      	ldr	r1, [pc, #472]	; (8001d7c <dataSend+0x230>)
 8001ba2:	4870      	ldr	r0, [pc, #448]	; (8001d64 <dataSend+0x218>)
 8001ba4:	f004 fc60 	bl	8006468 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)mData , strlen(mData), 1000);
 8001ba8:	486e      	ldr	r0, [pc, #440]	; (8001d64 <dataSend+0x218>)
 8001baa:	f7fe fb11 	bl	80001d0 <strlen>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb6:	496b      	ldr	r1, [pc, #428]	; (8001d64 <dataSend+0x218>)
 8001bb8:	486b      	ldr	r0, [pc, #428]	; (8001d68 <dataSend+0x21c>)
 8001bba:	f003 ffc4 	bl	8005b46 <HAL_UART_Transmit>

			HAL_Delay(10);
 8001bbe:	200a      	movs	r0, #10
 8001bc0:	f001 fb28 	bl	8003214 <HAL_Delay>

			for(j=0; j<VOLTSIZE; j++)
 8001bc4:	4b6e      	ldr	r3, [pc, #440]	; (8001d80 <dataSend+0x234>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	e036      	b.n	8001c3a <dataSend+0xee>
			{
				sprintf(mData,"\f CELL %d : \r",j+1);
 8001bcc:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <dataSend+0x234>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	496b      	ldr	r1, [pc, #428]	; (8001d84 <dataSend+0x238>)
 8001bd6:	4863      	ldr	r0, [pc, #396]	; (8001d64 <dataSend+0x218>)
 8001bd8:	f004 fc46 	bl	8006468 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)mData , strlen(mData), 1000);
 8001bdc:	4861      	ldr	r0, [pc, #388]	; (8001d64 <dataSend+0x218>)
 8001bde:	f7fe faf7 	bl	80001d0 <strlen>
 8001be2:	4603      	mov	r3, r0
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bea:	495e      	ldr	r1, [pc, #376]	; (8001d64 <dataSend+0x218>)
 8001bec:	485e      	ldr	r0, [pc, #376]	; (8001d68 <dataSend+0x21c>)
 8001bee:	f003 ffaa 	bl	8005b46 <HAL_UART_Transmit>
				datatoArray(j);
 8001bf2:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <dataSend+0x234>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fefc 	bl	80019f4 <datatoArray>
				HAL_UART_Transmit(&huart2, (char*)voltValueArray , strlen(voltValueArray), 1000);
 8001bfc:	4862      	ldr	r0, [pc, #392]	; (8001d88 <dataSend+0x23c>)
 8001bfe:	f7fe fae7 	bl	80001d0 <strlen>
 8001c02:	4603      	mov	r3, r0
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	495f      	ldr	r1, [pc, #380]	; (8001d88 <dataSend+0x23c>)
 8001c0c:	4856      	ldr	r0, [pc, #344]	; (8001d68 <dataSend+0x21c>)
 8001c0e:	f003 ff9a 	bl	8005b46 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c18:	485c      	ldr	r0, [pc, #368]	; (8001d8c <dataSend+0x240>)
 8001c1a:	f002 fd2b 	bl	8004674 <HAL_GPIO_WritePin>
				HAL_Delay(25);
 8001c1e:	2019      	movs	r0, #25
 8001c20:	f001 faf8 	bl	8003214 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c2a:	4858      	ldr	r0, [pc, #352]	; (8001d8c <dataSend+0x240>)
 8001c2c:	f002 fd22 	bl	8004674 <HAL_GPIO_WritePin>
			for(j=0; j<VOLTSIZE; j++)
 8001c30:	4b53      	ldr	r3, [pc, #332]	; (8001d80 <dataSend+0x234>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <dataSend+0x234>)
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b51      	ldr	r3, [pc, #324]	; (8001d80 <dataSend+0x234>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b0b      	cmp	r3, #11
 8001c40:	ddc4      	ble.n	8001bcc <dataSend+0x80>
			}

			sprintf(mData,"\f HCVI : %d \n\r",highestVoltageIndex + 1);
 8001c42:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <dataSend+0x244>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4952      	ldr	r1, [pc, #328]	; (8001d94 <dataSend+0x248>)
 8001c4c:	4845      	ldr	r0, [pc, #276]	; (8001d64 <dataSend+0x218>)
 8001c4e:	f004 fc0b 	bl	8006468 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)mData , strlen(mData), 1000);
 8001c52:	4844      	ldr	r0, [pc, #272]	; (8001d64 <dataSend+0x218>)
 8001c54:	f7fe fabc 	bl	80001d0 <strlen>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c60:	4940      	ldr	r1, [pc, #256]	; (8001d64 <dataSend+0x218>)
 8001c62:	4841      	ldr	r0, [pc, #260]	; (8001d68 <dataSend+0x21c>)
 8001c64:	f003 ff6f 	bl	8005b46 <HAL_UART_Transmit>
			sprintf(mData,"\f HCVV : %d.%d \n\r",highestcellVoltage/100,highestcellVoltage%100);
 8001c68:	4b4b      	ldr	r3, [pc, #300]	; (8001d98 <dataSend+0x24c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a4b      	ldr	r2, [pc, #300]	; (8001d9c <dataSend+0x250>)
 8001c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c72:	1152      	asrs	r2, r2, #5
 8001c74:	17db      	asrs	r3, r3, #31
 8001c76:	1ad0      	subs	r0, r2, r3
 8001c78:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <dataSend+0x24c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <dataSend+0x250>)
 8001c7e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c82:	1151      	asrs	r1, r2, #5
 8001c84:	17da      	asrs	r2, r3, #31
 8001c86:	1a8a      	subs	r2, r1, r2
 8001c88:	2164      	movs	r1, #100	; 0x64
 8001c8a:	fb01 f202 	mul.w	r2, r1, r2
 8001c8e:	1a9a      	subs	r2, r3, r2
 8001c90:	4613      	mov	r3, r2
 8001c92:	4602      	mov	r2, r0
 8001c94:	4942      	ldr	r1, [pc, #264]	; (8001da0 <dataSend+0x254>)
 8001c96:	4833      	ldr	r0, [pc, #204]	; (8001d64 <dataSend+0x218>)
 8001c98:	f004 fbe6 	bl	8006468 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)mData , strlen(mData), 1000);
 8001c9c:	4831      	ldr	r0, [pc, #196]	; (8001d64 <dataSend+0x218>)
 8001c9e:	f7fe fa97 	bl	80001d0 <strlen>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001caa:	492e      	ldr	r1, [pc, #184]	; (8001d64 <dataSend+0x218>)
 8001cac:	482e      	ldr	r0, [pc, #184]	; (8001d68 <dataSend+0x21c>)
 8001cae:	f003 ff4a 	bl	8005b46 <HAL_UART_Transmit>
			sprintf(mData,"\f LCVI : %d \n\r",lowestVoltageIndex + 1 );
 8001cb2:	4b3c      	ldr	r3, [pc, #240]	; (8001da4 <dataSend+0x258>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	461a      	mov	r2, r3
 8001cba:	493b      	ldr	r1, [pc, #236]	; (8001da8 <dataSend+0x25c>)
 8001cbc:	4829      	ldr	r0, [pc, #164]	; (8001d64 <dataSend+0x218>)
 8001cbe:	f004 fbd3 	bl	8006468 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)mData , strlen(mData), 1000);
 8001cc2:	4828      	ldr	r0, [pc, #160]	; (8001d64 <dataSend+0x218>)
 8001cc4:	f7fe fa84 	bl	80001d0 <strlen>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd0:	4924      	ldr	r1, [pc, #144]	; (8001d64 <dataSend+0x218>)
 8001cd2:	4825      	ldr	r0, [pc, #148]	; (8001d68 <dataSend+0x21c>)
 8001cd4:	f003 ff37 	bl	8005b46 <HAL_UART_Transmit>
			sprintf(mData,"\f LCVV : %d.%d \n\r",lowestcellVoltage/100,lowestcellVoltage%100);
 8001cd8:	4b34      	ldr	r3, [pc, #208]	; (8001dac <dataSend+0x260>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a2f      	ldr	r2, [pc, #188]	; (8001d9c <dataSend+0x250>)
 8001cde:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce2:	1152      	asrs	r2, r2, #5
 8001ce4:	17db      	asrs	r3, r3, #31
 8001ce6:	1ad0      	subs	r0, r2, r3
 8001ce8:	4b30      	ldr	r3, [pc, #192]	; (8001dac <dataSend+0x260>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a2b      	ldr	r2, [pc, #172]	; (8001d9c <dataSend+0x250>)
 8001cee:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf2:	1151      	asrs	r1, r2, #5
 8001cf4:	17da      	asrs	r2, r3, #31
 8001cf6:	1a8a      	subs	r2, r1, r2
 8001cf8:	2164      	movs	r1, #100	; 0x64
 8001cfa:	fb01 f202 	mul.w	r2, r1, r2
 8001cfe:	1a9a      	subs	r2, r3, r2
 8001d00:	4613      	mov	r3, r2
 8001d02:	4602      	mov	r2, r0
 8001d04:	492a      	ldr	r1, [pc, #168]	; (8001db0 <dataSend+0x264>)
 8001d06:	4817      	ldr	r0, [pc, #92]	; (8001d64 <dataSend+0x218>)
 8001d08:	f004 fbae 	bl	8006468 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)mData , strlen(mData), 1000);
 8001d0c:	4815      	ldr	r0, [pc, #84]	; (8001d64 <dataSend+0x218>)
 8001d0e:	f7fe fa5f 	bl	80001d0 <strlen>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1a:	4912      	ldr	r1, [pc, #72]	; (8001d64 <dataSend+0x218>)
 8001d1c:	4812      	ldr	r0, [pc, #72]	; (8001d68 <dataSend+0x21c>)
 8001d1e:	f003 ff12 	bl	8005b46 <HAL_UART_Transmit>
			sprintf(mData,"\f RGBCOLOR RED:%d BLUE:%d GREEN:%d \n\r",redData, blueData, greenData);
 8001d22:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <dataSend+0x268>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <dataSend+0x26c>)
 8001d28:	6819      	ldr	r1, [r3, #0]
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <dataSend+0x270>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	460b      	mov	r3, r1
 8001d32:	4923      	ldr	r1, [pc, #140]	; (8001dc0 <dataSend+0x274>)
 8001d34:	480b      	ldr	r0, [pc, #44]	; (8001d64 <dataSend+0x218>)
 8001d36:	f004 fb97 	bl	8006468 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)mData , strlen(mData), 1000);
 8001d3a:	480a      	ldr	r0, [pc, #40]	; (8001d64 <dataSend+0x218>)
 8001d3c:	f7fe fa48 	bl	80001d0 <strlen>
 8001d40:	4603      	mov	r3, r0
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d48:	4906      	ldr	r1, [pc, #24]	; (8001d64 <dataSend+0x218>)
 8001d4a:	4807      	ldr	r0, [pc, #28]	; (8001d68 <dataSend+0x21c>)
 8001d4c:	f003 fefb 	bl	8005b46 <HAL_UART_Transmit>
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200001a4 	.word	0x200001a4
 8001d5c:	200001a8 	.word	0x200001a8
 8001d60:	0800710c 	.word	0x0800710c
 8001d64:	200002a0 	.word	0x200002a0
 8001d68:	2000032c 	.word	0x2000032c
 8001d6c:	200001ac 	.word	0x200001ac
 8001d70:	66666667 	.word	0x66666667
 8001d74:	200001b0 	.word	0x200001b0
 8001d78:	200001b4 	.word	0x200001b4
 8001d7c:	08007128 	.word	0x08007128
 8001d80:	200000b8 	.word	0x200000b8
 8001d84:	08007140 	.word	0x08007140
 8001d88:	200001cc 	.word	0x200001cc
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	2000019c 	.word	0x2000019c
 8001d94:	08007150 	.word	0x08007150
 8001d98:	200001bc 	.word	0x200001bc
 8001d9c:	51eb851f 	.word	0x51eb851f
 8001da0:	08007160 	.word	0x08007160
 8001da4:	20000198 	.word	0x20000198
 8001da8:	08007174 	.word	0x08007174
 8001dac:	200001b8 	.word	0x200001b8
 8001db0:	08007184 	.word	0x08007184
 8001db4:	200000c4 	.word	0x200000c4
 8001db8:	200000c8 	.word	0x200000c8
 8001dbc:	200000cc 	.word	0x200000cc
 8001dc0:	08007198 	.word	0x08007198

08001dc4 <dataprintLCD>:

void dataprintLCD(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
	int selectedData = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
	selectedData = selectItem ;
 8001dce:	4bcf      	ldr	r3, [pc, #828]	; (800210c <dataprintLCD+0x348>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	607b      	str	r3, [r7, #4]
	if(selectedData>12)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	dd04      	ble.n	8001de4 <dataprintLCD+0x20>
	{
		selectedData=0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
		selectItem=0;
 8001dde:	4bcb      	ldr	r3, [pc, #812]	; (800210c <dataprintLCD+0x348>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
	}
	switch(selectedData)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b0b      	cmp	r3, #11
 8001de8:	f200 8124 	bhi.w	8002034 <dataprintLCD+0x270>
 8001dec:	a201      	add	r2, pc, #4	; (adr r2, 8001df4 <dataprintLCD+0x30>)
 8001dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df2:	bf00      	nop
 8001df4:	08001e25 	.word	0x08001e25
 8001df8:	08001e51 	.word	0x08001e51
 8001dfc:	08001e7d 	.word	0x08001e7d
 8001e00:	08001ea9 	.word	0x08001ea9
 8001e04:	08001ed5 	.word	0x08001ed5
 8001e08:	08001f01 	.word	0x08001f01
 8001e0c:	08001f2d 	.word	0x08001f2d
 8001e10:	08001f59 	.word	0x08001f59
 8001e14:	08001f85 	.word	0x08001f85
 8001e18:	08001fb1 	.word	0x08001fb1
 8001e1c:	08001fdd 	.word	0x08001fdd
 8001e20:	08002009 	.word	0x08002009
	{
	case 0:
		LCD1602_setCursor(1, 1);
 8001e24:	2101      	movs	r1, #1
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7ff fb14 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("HUCRE 1=");
 8001e2c:	48b8      	ldr	r0, [pc, #736]	; (8002110 <dataprintLCD+0x34c>)
 8001e2e:	f7ff faf3 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 10);
 8001e32:	210a      	movs	r1, #10
 8001e34:	2001      	movs	r0, #1
 8001e36:	f7ff fb0d 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print(voltData[0]);
 8001e3a:	48b6      	ldr	r0, [pc, #728]	; (8002114 <dataprintLCD+0x350>)
 8001e3c:	f7ff faec 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 15);
 8001e40:	210f      	movs	r1, #15
 8001e42:	2001      	movs	r0, #1
 8001e44:	f7ff fb06 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("V");
 8001e48:	48b3      	ldr	r0, [pc, #716]	; (8002118 <dataprintLCD+0x354>)
 8001e4a:	f7ff fae5 	bl	8001418 <LCD1602_print>
		break;
 8001e4e:	e0f3      	b.n	8002038 <dataprintLCD+0x274>
	case 1:
		LCD1602_setCursor(1, 1);
 8001e50:	2101      	movs	r1, #1
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7ff fafe 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("HUCRE 2=");
 8001e58:	48b0      	ldr	r0, [pc, #704]	; (800211c <dataprintLCD+0x358>)
 8001e5a:	f7ff fadd 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 10);
 8001e5e:	210a      	movs	r1, #10
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7ff faf7 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print(voltData[1]);
 8001e66:	48ae      	ldr	r0, [pc, #696]	; (8002120 <dataprintLCD+0x35c>)
 8001e68:	f7ff fad6 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 15);
 8001e6c:	210f      	movs	r1, #15
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f7ff faf0 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("V");
 8001e74:	48a8      	ldr	r0, [pc, #672]	; (8002118 <dataprintLCD+0x354>)
 8001e76:	f7ff facf 	bl	8001418 <LCD1602_print>
		break;
 8001e7a:	e0dd      	b.n	8002038 <dataprintLCD+0x274>
	case 2:
		LCD1602_setCursor(1, 1);
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7ff fae8 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("HUCRE 3=");
 8001e84:	48a7      	ldr	r0, [pc, #668]	; (8002124 <dataprintLCD+0x360>)
 8001e86:	f7ff fac7 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 10);
 8001e8a:	210a      	movs	r1, #10
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f7ff fae1 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print(voltData[2]);
 8001e92:	48a5      	ldr	r0, [pc, #660]	; (8002128 <dataprintLCD+0x364>)
 8001e94:	f7ff fac0 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 15);
 8001e98:	210f      	movs	r1, #15
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f7ff fada 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("V");
 8001ea0:	489d      	ldr	r0, [pc, #628]	; (8002118 <dataprintLCD+0x354>)
 8001ea2:	f7ff fab9 	bl	8001418 <LCD1602_print>
		break;
 8001ea6:	e0c7      	b.n	8002038 <dataprintLCD+0x274>
	case 3:
		LCD1602_setCursor(1, 1);
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f7ff fad2 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("HUCRE 4=");
 8001eb0:	489e      	ldr	r0, [pc, #632]	; (800212c <dataprintLCD+0x368>)
 8001eb2:	f7ff fab1 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 10);
 8001eb6:	210a      	movs	r1, #10
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f7ff facb 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print(voltData[3]);
 8001ebe:	489c      	ldr	r0, [pc, #624]	; (8002130 <dataprintLCD+0x36c>)
 8001ec0:	f7ff faaa 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 15);
 8001ec4:	210f      	movs	r1, #15
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f7ff fac4 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("V");
 8001ecc:	4892      	ldr	r0, [pc, #584]	; (8002118 <dataprintLCD+0x354>)
 8001ece:	f7ff faa3 	bl	8001418 <LCD1602_print>
		break;
 8001ed2:	e0b1      	b.n	8002038 <dataprintLCD+0x274>
	case 4:
		LCD1602_setCursor(1, 1);
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7ff fabc 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("HUCRE 5=");
 8001edc:	4895      	ldr	r0, [pc, #596]	; (8002134 <dataprintLCD+0x370>)
 8001ede:	f7ff fa9b 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 10);
 8001ee2:	210a      	movs	r1, #10
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7ff fab5 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print(voltData[4]);
 8001eea:	4893      	ldr	r0, [pc, #588]	; (8002138 <dataprintLCD+0x374>)
 8001eec:	f7ff fa94 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 15);
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f7ff faae 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("V");
 8001ef8:	4887      	ldr	r0, [pc, #540]	; (8002118 <dataprintLCD+0x354>)
 8001efa:	f7ff fa8d 	bl	8001418 <LCD1602_print>
		break;
 8001efe:	e09b      	b.n	8002038 <dataprintLCD+0x274>
	case 5:
		LCD1602_setCursor(1, 1);
 8001f00:	2101      	movs	r1, #1
 8001f02:	2001      	movs	r0, #1
 8001f04:	f7ff faa6 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("HUCRE 6=");
 8001f08:	488c      	ldr	r0, [pc, #560]	; (800213c <dataprintLCD+0x378>)
 8001f0a:	f7ff fa85 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 10);
 8001f0e:	210a      	movs	r1, #10
 8001f10:	2001      	movs	r0, #1
 8001f12:	f7ff fa9f 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print(voltData[5]);
 8001f16:	488a      	ldr	r0, [pc, #552]	; (8002140 <dataprintLCD+0x37c>)
 8001f18:	f7ff fa7e 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 15);
 8001f1c:	210f      	movs	r1, #15
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f7ff fa98 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("V");
 8001f24:	487c      	ldr	r0, [pc, #496]	; (8002118 <dataprintLCD+0x354>)
 8001f26:	f7ff fa77 	bl	8001418 <LCD1602_print>
		break;
 8001f2a:	e085      	b.n	8002038 <dataprintLCD+0x274>
	case 6:
		LCD1602_setCursor(1, 1);
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f7ff fa90 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("HUCRE 7=");
 8001f34:	4883      	ldr	r0, [pc, #524]	; (8002144 <dataprintLCD+0x380>)
 8001f36:	f7ff fa6f 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 10);
 8001f3a:	210a      	movs	r1, #10
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f7ff fa89 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print(voltData[6]);
 8001f42:	4881      	ldr	r0, [pc, #516]	; (8002148 <dataprintLCD+0x384>)
 8001f44:	f7ff fa68 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 15);
 8001f48:	210f      	movs	r1, #15
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f7ff fa82 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("V");
 8001f50:	4871      	ldr	r0, [pc, #452]	; (8002118 <dataprintLCD+0x354>)
 8001f52:	f7ff fa61 	bl	8001418 <LCD1602_print>
		break;
 8001f56:	e06f      	b.n	8002038 <dataprintLCD+0x274>
	case 7:
		LCD1602_setCursor(1, 1);
 8001f58:	2101      	movs	r1, #1
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f7ff fa7a 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("HUCRE 8=");
 8001f60:	487a      	ldr	r0, [pc, #488]	; (800214c <dataprintLCD+0x388>)
 8001f62:	f7ff fa59 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 10);
 8001f66:	210a      	movs	r1, #10
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f7ff fa73 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print(voltData[7]);
 8001f6e:	4878      	ldr	r0, [pc, #480]	; (8002150 <dataprintLCD+0x38c>)
 8001f70:	f7ff fa52 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 15);
 8001f74:	210f      	movs	r1, #15
 8001f76:	2001      	movs	r0, #1
 8001f78:	f7ff fa6c 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("V");
 8001f7c:	4866      	ldr	r0, [pc, #408]	; (8002118 <dataprintLCD+0x354>)
 8001f7e:	f7ff fa4b 	bl	8001418 <LCD1602_print>
		break;
 8001f82:	e059      	b.n	8002038 <dataprintLCD+0x274>
	case 8:
		LCD1602_setCursor(1, 1);
 8001f84:	2101      	movs	r1, #1
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7ff fa64 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("HUCRE 9=");
 8001f8c:	4871      	ldr	r0, [pc, #452]	; (8002154 <dataprintLCD+0x390>)
 8001f8e:	f7ff fa43 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 10);
 8001f92:	210a      	movs	r1, #10
 8001f94:	2001      	movs	r0, #1
 8001f96:	f7ff fa5d 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print(voltData[8]);
 8001f9a:	486f      	ldr	r0, [pc, #444]	; (8002158 <dataprintLCD+0x394>)
 8001f9c:	f7ff fa3c 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 15);
 8001fa0:	210f      	movs	r1, #15
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f7ff fa56 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("V");
 8001fa8:	485b      	ldr	r0, [pc, #364]	; (8002118 <dataprintLCD+0x354>)
 8001faa:	f7ff fa35 	bl	8001418 <LCD1602_print>
		break;
 8001fae:	e043      	b.n	8002038 <dataprintLCD+0x274>
	case 9:
		LCD1602_setCursor(1, 1);
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f7ff fa4e 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("HUCRE10=");
 8001fb8:	4868      	ldr	r0, [pc, #416]	; (800215c <dataprintLCD+0x398>)
 8001fba:	f7ff fa2d 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 10);
 8001fbe:	210a      	movs	r1, #10
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f7ff fa47 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print(voltData[9]);
 8001fc6:	4866      	ldr	r0, [pc, #408]	; (8002160 <dataprintLCD+0x39c>)
 8001fc8:	f7ff fa26 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 15);
 8001fcc:	210f      	movs	r1, #15
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7ff fa40 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("V");
 8001fd4:	4850      	ldr	r0, [pc, #320]	; (8002118 <dataprintLCD+0x354>)
 8001fd6:	f7ff fa1f 	bl	8001418 <LCD1602_print>
		break;
 8001fda:	e02d      	b.n	8002038 <dataprintLCD+0x274>
	case 10:
		LCD1602_setCursor(1, 1);
 8001fdc:	2101      	movs	r1, #1
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f7ff fa38 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("HUCRE11=");
 8001fe4:	485f      	ldr	r0, [pc, #380]	; (8002164 <dataprintLCD+0x3a0>)
 8001fe6:	f7ff fa17 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 10);
 8001fea:	210a      	movs	r1, #10
 8001fec:	2001      	movs	r0, #1
 8001fee:	f7ff fa31 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print(voltData[10]);
 8001ff2:	485d      	ldr	r0, [pc, #372]	; (8002168 <dataprintLCD+0x3a4>)
 8001ff4:	f7ff fa10 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 15);
 8001ff8:	210f      	movs	r1, #15
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f7ff fa2a 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("V");
 8002000:	4845      	ldr	r0, [pc, #276]	; (8002118 <dataprintLCD+0x354>)
 8002002:	f7ff fa09 	bl	8001418 <LCD1602_print>
		break;
 8002006:	e017      	b.n	8002038 <dataprintLCD+0x274>
	case 11:
		LCD1602_setCursor(1, 1);
 8002008:	2101      	movs	r1, #1
 800200a:	2001      	movs	r0, #1
 800200c:	f7ff fa22 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("HUCRE12=");
 8002010:	4856      	ldr	r0, [pc, #344]	; (800216c <dataprintLCD+0x3a8>)
 8002012:	f7ff fa01 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 10);
 8002016:	210a      	movs	r1, #10
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff fa1b 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print(voltData[11]);
 800201e:	4854      	ldr	r0, [pc, #336]	; (8002170 <dataprintLCD+0x3ac>)
 8002020:	f7ff f9fa 	bl	8001418 <LCD1602_print>
		LCD1602_setCursor(1, 15);
 8002024:	210f      	movs	r1, #15
 8002026:	2001      	movs	r0, #1
 8002028:	f7ff fa14 	bl	8001454 <LCD1602_setCursor>
		LCD1602_print("V");
 800202c:	483a      	ldr	r0, [pc, #232]	; (8002118 <dataprintLCD+0x354>)
 800202e:	f7ff f9f3 	bl	8001418 <LCD1602_print>
		break;
 8002032:	e001      	b.n	8002038 <dataprintLCD+0x274>

	default:
		LCD1602_clear();
 8002034:	f7ff fa46 	bl	80014c4 <LCD1602_clear>
	}

	LCD1602_setCursor(2, 1);
 8002038:	2101      	movs	r1, #1
 800203a:	2002      	movs	r0, #2
 800203c:	f7ff fa0a 	bl	8001454 <LCD1602_setCursor>
	LCD1602_print("T=");
 8002040:	484c      	ldr	r0, [pc, #304]	; (8002174 <dataprintLCD+0x3b0>)
 8002042:	f7ff f9e9 	bl	8001418 <LCD1602_print>
	LCD1602_setCursor(2, 3);
 8002046:	2103      	movs	r1, #3
 8002048:	2002      	movs	r0, #2
 800204a:	f7ff fa03 	bl	8001454 <LCD1602_setCursor>
	LCD1602_PrintInt(tempValue);
 800204e:	4b4a      	ldr	r3, [pc, #296]	; (8002178 <dataprintLCD+0x3b4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fa52 	bl	80014fc <LCD1602_PrintInt>
	LCD1602_setCursor(2, 5);
 8002058:	2105      	movs	r1, #5
 800205a:	2002      	movs	r0, #2
 800205c:	f7ff f9fa 	bl	8001454 <LCD1602_setCursor>
	LCD1602_print(".");
 8002060:	4846      	ldr	r0, [pc, #280]	; (800217c <dataprintLCD+0x3b8>)
 8002062:	f7ff f9d9 	bl	8001418 <LCD1602_print>
	LCD1602_setCursor(2, 6);
 8002066:	2106      	movs	r1, #6
 8002068:	2002      	movs	r0, #2
 800206a:	f7ff f9f3 	bl	8001454 <LCD1602_setCursor>
	LCD1602_PrintInt(tempValueOndalik);
 800206e:	4b44      	ldr	r3, [pc, #272]	; (8002180 <dataprintLCD+0x3bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fa42 	bl	80014fc <LCD1602_PrintInt>
	LCD1602_setCursor(2, 7);
 8002078:	2107      	movs	r1, #7
 800207a:	2002      	movs	r0, #2
 800207c:	f7ff f9ea 	bl	8001454 <LCD1602_setCursor>
	LCD1602_print("C");
 8002080:	4840      	ldr	r0, [pc, #256]	; (8002184 <dataprintLCD+0x3c0>)
 8002082:	f7ff f9c9 	bl	8001418 <LCD1602_print>

	LCD1602_setCursor(2, 9);
 8002086:	2109      	movs	r1, #9
 8002088:	2002      	movs	r0, #2
 800208a:	f7ff f9e3 	bl	8001454 <LCD1602_setCursor>
	LCD1602_print("I=");
 800208e:	483e      	ldr	r0, [pc, #248]	; (8002188 <dataprintLCD+0x3c4>)
 8002090:	f7ff f9c2 	bl	8001418 <LCD1602_print>
	LCD1602_setCursor(2, 11);
 8002094:	210b      	movs	r1, #11
 8002096:	2002      	movs	r0, #2
 8002098:	f7ff f9dc 	bl	8001454 <LCD1602_setCursor>
	LCD1602_PrintInt(currentValue%10);
 800209c:	4b3b      	ldr	r3, [pc, #236]	; (800218c <dataprintLCD+0x3c8>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <dataprintLCD+0x3cc>)
 80020a2:	fb83 1302 	smull	r1, r3, r3, r2
 80020a6:	1099      	asrs	r1, r3, #2
 80020a8:	17d3      	asrs	r3, r2, #31
 80020aa:	1ac9      	subs	r1, r1, r3
 80020ac:	460b      	mov	r3, r1
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	1ad1      	subs	r1, r2, r3
 80020b6:	4608      	mov	r0, r1
 80020b8:	f7ff fa20 	bl	80014fc <LCD1602_PrintInt>
	LCD1602_setCursor(2, 12);
 80020bc:	210c      	movs	r1, #12
 80020be:	2002      	movs	r0, #2
 80020c0:	f7ff f9c8 	bl	8001454 <LCD1602_setCursor>
	LCD1602_print(".");
 80020c4:	482d      	ldr	r0, [pc, #180]	; (800217c <dataprintLCD+0x3b8>)
 80020c6:	f7ff f9a7 	bl	8001418 <LCD1602_print>
	LCD1602_setCursor(2, 13);
 80020ca:	210d      	movs	r1, #13
 80020cc:	2002      	movs	r0, #2
 80020ce:	f7ff f9c1 	bl	8001454 <LCD1602_setCursor>
	LCD1602_PrintInt(currentValueOndalik);
 80020d2:	4b30      	ldr	r3, [pc, #192]	; (8002194 <dataprintLCD+0x3d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fa10 	bl	80014fc <LCD1602_PrintInt>
	LCD1602_setCursor(2, 14);
 80020dc:	210e      	movs	r1, #14
 80020de:	2002      	movs	r0, #2
 80020e0:	f7ff f9b8 	bl	8001454 <LCD1602_setCursor>
	LCD1602_PrintInt(currentValueYuzdelik);
 80020e4:	4b2c      	ldr	r3, [pc, #176]	; (8002198 <dataprintLCD+0x3d4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fa07 	bl	80014fc <LCD1602_PrintInt>
	LCD1602_setCursor(2, 15);
 80020ee:	210f      	movs	r1, #15
 80020f0:	2002      	movs	r0, #2
 80020f2:	f7ff f9af 	bl	8001454 <LCD1602_setCursor>
	LCD1602_print("A");
 80020f6:	4829      	ldr	r0, [pc, #164]	; (800219c <dataprintLCD+0x3d8>)
 80020f8:	f7ff f98e 	bl	8001418 <LCD1602_print>

	LCD1602_noBlink();
 80020fc:	f7ff f9ec 	bl	80014d8 <LCD1602_noBlink>
	LCD1602_noCursor();
 8002100:	f7ff f9ce 	bl	80014a0 <LCD1602_noCursor>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200000c0 	.word	0x200000c0
 8002110:	080071c0 	.word	0x080071c0
 8002114:	200003cc 	.word	0x200003cc
 8002118:	080071cc 	.word	0x080071cc
 800211c:	080071d0 	.word	0x080071d0
 8002120:	200003d8 	.word	0x200003d8
 8002124:	080071dc 	.word	0x080071dc
 8002128:	200003e4 	.word	0x200003e4
 800212c:	080071e8 	.word	0x080071e8
 8002130:	200003f0 	.word	0x200003f0
 8002134:	080071f4 	.word	0x080071f4
 8002138:	200003fc 	.word	0x200003fc
 800213c:	08007200 	.word	0x08007200
 8002140:	20000408 	.word	0x20000408
 8002144:	0800720c 	.word	0x0800720c
 8002148:	20000414 	.word	0x20000414
 800214c:	08007218 	.word	0x08007218
 8002150:	20000420 	.word	0x20000420
 8002154:	08007224 	.word	0x08007224
 8002158:	2000042c 	.word	0x2000042c
 800215c:	08007230 	.word	0x08007230
 8002160:	20000438 	.word	0x20000438
 8002164:	0800723c 	.word	0x0800723c
 8002168:	20000444 	.word	0x20000444
 800216c:	08007248 	.word	0x08007248
 8002170:	20000450 	.word	0x20000450
 8002174:	08007254 	.word	0x08007254
 8002178:	200001a4 	.word	0x200001a4
 800217c:	08007258 	.word	0x08007258
 8002180:	200001a8 	.word	0x200001a8
 8002184:	0800725c 	.word	0x0800725c
 8002188:	08007260 	.word	0x08007260
 800218c:	200001ac 	.word	0x200001ac
 8002190:	66666667 	.word	0x66666667
 8002194:	200001b0 	.word	0x200001b0
 8002198:	200001b4 	.word	0x200001b4
 800219c:	08007264 	.word	0x08007264

080021a0 <rgbSet>:


void rgbSet(uint8_t red,uint8_t blue,uint8_t green)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
 80021aa:	460b      	mov	r3, r1
 80021ac:	71bb      	strb	r3, [r7, #6]
 80021ae:	4613      	mov	r3, r2
 80021b0:	717b      	strb	r3, [r7, #5]
	htim4.Instance->CCR1=red;
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <rgbSet+0x38>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	79fa      	ldrb	r2, [r7, #7]
 80021b8:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2=blue;
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <rgbSet+0x38>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	79ba      	ldrb	r2, [r7, #6]
 80021c0:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3=green;
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <rgbSet+0x38>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	797a      	ldrb	r2, [r7, #5]
 80021c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	200001d8 	.word	0x200001d8

080021dc <rgbConfig>:

void rgbConfig(int rawTemp)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	if(rawTemp>=40)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b27      	cmp	r3, #39	; 0x27
 80021e8:	dd09      	ble.n	80021fe <rgbConfig+0x22>
	{
		redData=255;
 80021ea:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <rgbConfig+0xbc>)
 80021ec:	22ff      	movs	r2, #255	; 0xff
 80021ee:	601a      	str	r2, [r3, #0]
		blueData=0;
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <rgbConfig+0xc0>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
		greenData=0;
 80021f6:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <rgbConfig+0xc4>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e03b      	b.n	8002276 <rgbConfig+0x9a>
	}
	else if(rawTemp>0 && rawTemp<40)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	dd2f      	ble.n	8002264 <rgbConfig+0x88>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b27      	cmp	r3, #39	; 0x27
 8002208:	dc2c      	bgt.n	8002264 <rgbConfig+0x88>
	{
		for(i=1; i<=39;i++)
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <rgbConfig+0xc8>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e023      	b.n	800225a <rgbConfig+0x7e>
		{
			if(rawTemp==i)
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <rgbConfig+0xc8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	d119      	bne.n	8002250 <rgbConfig+0x74>
			{
				redData = i*6;
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <rgbConfig+0xc8>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4613      	mov	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	461a      	mov	r2, r3
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <rgbConfig+0xbc>)
 800222c:	601a      	str	r2, [r3, #0]
				blueData = 255 - i*6;
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <rgbConfig+0xc8>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4613      	mov	r3, r2
 8002234:	0092      	lsls	r2, r2, #2
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	33ff      	adds	r3, #255	; 0xff
 800223c:	4a17      	ldr	r2, [pc, #92]	; (800229c <rgbConfig+0xc0>)
 800223e:	6013      	str	r3, [r2, #0]
				greenData = 123 - i*3;
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <rgbConfig+0xc8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	337b      	adds	r3, #123	; 0x7b
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <rgbConfig+0xc4>)
 800224e:	6013      	str	r3, [r2, #0]
		for(i=1; i<=39;i++)
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <rgbConfig+0xc8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <rgbConfig+0xc8>)
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <rgbConfig+0xc8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b27      	cmp	r3, #39	; 0x27
 8002260:	ddd7      	ble.n	8002212 <rgbConfig+0x36>
	else if(rawTemp>0 && rawTemp<40)
 8002262:	e008      	b.n	8002276 <rgbConfig+0x9a>
			}
		}
	}
	else
	{
		redData=0;
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <rgbConfig+0xbc>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
		blueData=  255;
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <rgbConfig+0xc0>)
 800226c:	22ff      	movs	r2, #255	; 0xff
 800226e:	601a      	str	r2, [r3, #0]
		greenData = 123;
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <rgbConfig+0xc4>)
 8002272:	227b      	movs	r2, #123	; 0x7b
 8002274:	601a      	str	r2, [r3, #0]
	}


	rgbSet(redData, blueData, greenData);
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <rgbConfig+0xbc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b2d8      	uxtb	r0, r3
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <rgbConfig+0xc0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	b2d9      	uxtb	r1, r3
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <rgbConfig+0xc4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	f7ff ff89 	bl	80021a0 <rgbSet>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200000c4 	.word	0x200000c4
 800229c:	200000c8 	.word	0x200000c8
 80022a0:	200000cc 	.word	0x200000cc
 80022a4:	200000b4 	.word	0x200000b4

080022a8 <cellBalancing>:

void cellBalancing(int lowestVoltageIndex, int* voltintVal)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]

	if(lowestVoltageIndexDummy != lowestVoltageIndex )
 80022b2:	4b37      	ldr	r3, [pc, #220]	; (8002390 <cellBalancing+0xe8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d02b      	beq.n	8002314 <cellBalancing+0x6c>
	{

		for(i=2; i<VOLTSIZE; i++)	// REV
 80022bc:	4b35      	ldr	r3, [pc, #212]	; (8002394 <cellBalancing+0xec>)
 80022be:	2202      	movs	r2, #2
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	e020      	b.n	8002306 <cellBalancing+0x5e>
			{
				if(i==lowestVoltageIndex)
 80022c4:	4b33      	ldr	r3, [pc, #204]	; (8002394 <cellBalancing+0xec>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d10b      	bne.n	80022e6 <cellBalancing+0x3e>
				{
					HAL_GPIO_WritePin(GPIOE, 0x0001 << i, GPIO_PIN_RESET);
 80022ce:	4b31      	ldr	r3, [pc, #196]	; (8002394 <cellBalancing+0xec>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2201      	movs	r2, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2200      	movs	r2, #0
 80022dc:	4619      	mov	r1, r3
 80022de:	482e      	ldr	r0, [pc, #184]	; (8002398 <cellBalancing+0xf0>)
 80022e0:	f002 f9c8 	bl	8004674 <HAL_GPIO_WritePin>
 80022e4:	e00a      	b.n	80022fc <cellBalancing+0x54>
				}
				else
				{
					HAL_GPIO_WritePin(GPIOE, 0x0001 << i, GPIO_PIN_SET);
 80022e6:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <cellBalancing+0xec>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2201      	movs	r2, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2201      	movs	r2, #1
 80022f4:	4619      	mov	r1, r3
 80022f6:	4828      	ldr	r0, [pc, #160]	; (8002398 <cellBalancing+0xf0>)
 80022f8:	f002 f9bc 	bl	8004674 <HAL_GPIO_WritePin>
		for(i=2; i<VOLTSIZE; i++)	// REV
 80022fc:	4b25      	ldr	r3, [pc, #148]	; (8002394 <cellBalancing+0xec>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	4a24      	ldr	r2, [pc, #144]	; (8002394 <cellBalancing+0xec>)
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b23      	ldr	r3, [pc, #140]	; (8002394 <cellBalancing+0xec>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b0b      	cmp	r3, #11
 800230c:	ddda      	ble.n	80022c4 <cellBalancing+0x1c>
				}
			}

			lowestVoltageIndexDummy = lowestVoltageIndex ;
 800230e:	4a20      	ldr	r2, [pc, #128]	; (8002390 <cellBalancing+0xe8>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6013      	str	r3, [r2, #0]

	}


	int voltValTOPvalue = voltintVal[lowestVoltageIndex]+40 ;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	4413      	add	r3, r2
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3328      	adds	r3, #40	; 0x28
 8002320:	60fb      	str	r3, [r7, #12]
	int voltValBOTvalue = voltintVal[lowestVoltageIndex]-40 ;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	4413      	add	r3, r2
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3b28      	subs	r3, #40	; 0x28
 800232e:	60bb      	str	r3, [r7, #8]

	for(i=0; i<VOLTSIZE; i++)
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <cellBalancing+0xec>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e022      	b.n	800237e <cellBalancing+0xd6>
	{
		if((voltintVal[i] <= voltValTOPvalue) && (voltintVal[i] >= voltValBOTvalue))
 8002338:	4b16      	ldr	r3, [pc, #88]	; (8002394 <cellBalancing+0xec>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	4413      	add	r3, r2
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	429a      	cmp	r2, r3
 8002348:	db14      	blt.n	8002374 <cellBalancing+0xcc>
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <cellBalancing+0xec>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	4413      	add	r3, r2
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	429a      	cmp	r2, r3
 800235a:	dc0b      	bgt.n	8002374 <cellBalancing+0xcc>
			{
				HAL_GPIO_WritePin(GPIOE, 0x0001 << i+2, GPIO_PIN_RESET);
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <cellBalancing+0xec>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3302      	adds	r3, #2
 8002362:	2201      	movs	r2, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	b29b      	uxth	r3, r3
 800236a:	2200      	movs	r2, #0
 800236c:	4619      	mov	r1, r3
 800236e:	480a      	ldr	r0, [pc, #40]	; (8002398 <cellBalancing+0xf0>)
 8002370:	f002 f980 	bl	8004674 <HAL_GPIO_WritePin>
	for(i=0; i<VOLTSIZE; i++)
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <cellBalancing+0xec>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3301      	adds	r3, #1
 800237a:	4a06      	ldr	r2, [pc, #24]	; (8002394 <cellBalancing+0xec>)
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <cellBalancing+0xec>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b0b      	cmp	r3, #11
 8002384:	ddd8      	ble.n	8002338 <cellBalancing+0x90>
			}
	}


}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200000d0 	.word	0x200000d0
 8002394:	200000b4 	.word	0x200000b4
 8002398:	40021000 	.word	0x40021000

0800239c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023a2:	f000 fec5 	bl	8003130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023a6:	f000 f88d 	bl	80024c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023aa:	f000 faf1 	bl	8002990 <MX_GPIO_Init>
  MX_DMA_Init();
 80023ae:	f000 facf 	bl	8002950 <MX_DMA_Init>
  MX_ADC2_Init();
 80023b2:	f000 f8f1 	bl	8002598 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 80023b6:	f000 fa4d 	bl	8002854 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80023ba:	f000 fa75 	bl	80028a8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80023be:	f000 fa9d 	bl	80028fc <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80023c2:	f000 f9e3 	bl	800278c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  LCD1602_Begin8BIT(RS_GPIO_Port, RS_Pin, E_Pin, D0_GPIO_Port, D0_Pin, D1_Pin, D2_Pin, D3_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 80023c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ca:	9308      	str	r3, [sp, #32]
 80023cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d0:	9307      	str	r3, [sp, #28]
 80023d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d6:	9306      	str	r3, [sp, #24]
 80023d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023dc:	9305      	str	r3, [sp, #20]
 80023de:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <main+0xf4>)
 80023e0:	9304      	str	r3, [sp, #16]
 80023e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023e6:	9303      	str	r3, [sp, #12]
 80023e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <main+0xf8>)
 80023fc:	2202      	movs	r2, #2
 80023fe:	2101      	movs	r1, #1
 8002400:	4825      	ldr	r0, [pc, #148]	; (8002498 <main+0xfc>)
 8002402:	f7fe ff8d 	bl	8001320 <LCD1602_Begin8BIT>
  LCD1602_setCursor(1, 1);
 8002406:	2101      	movs	r1, #1
 8002408:	2001      	movs	r0, #1
 800240a:	f7ff f823 	bl	8001454 <LCD1602_setCursor>
  LCD1602_print("BMS");
 800240e:	4823      	ldr	r0, [pc, #140]	; (800249c <main+0x100>)
 8002410:	f7ff f802 	bl	8001418 <LCD1602_print>
  LCD1602_setCursor(2, 1);
 8002414:	2101      	movs	r1, #1
 8002416:	2002      	movs	r0, #2
 8002418:	f7ff f81c 	bl	8001454 <LCD1602_setCursor>
  LCD1602_print("4.06.2021");
 800241c:	4820      	ldr	r0, [pc, #128]	; (80024a0 <main+0x104>)
 800241e:	f7fe fffb 	bl	8001418 <LCD1602_print>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8002422:	2100      	movs	r1, #0
 8002424:	481f      	ldr	r0, [pc, #124]	; (80024a4 <main+0x108>)
 8002426:	f002 fdfd 	bl	8005024 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 800242a:	2104      	movs	r1, #4
 800242c:	481d      	ldr	r0, [pc, #116]	; (80024a4 <main+0x108>)
 800242e:	f002 fdf9 	bl	8005024 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8002432:	2108      	movs	r1, #8
 8002434:	481b      	ldr	r0, [pc, #108]	; (80024a4 <main+0x108>)
 8002436:	f002 fdf5 	bl	8005024 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc2, adc_buffer, 13);
 800243a:	220d      	movs	r2, #13
 800243c:	491a      	ldr	r1, [pc, #104]	; (80024a8 <main+0x10c>)
 800243e:	481b      	ldr	r0, [pc, #108]	; (80024ac <main+0x110>)
 8002440:	f000 ff4e 	bl	80032e0 <HAL_ADC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		adcRead(&hadc2);
 8002444:	4819      	ldr	r0, [pc, #100]	; (80024ac <main+0x110>)
 8002446:	f7ff f86f 	bl	8001528 <adcRead>
		adctoArray();
 800244a:	f7ff f89d 	bl	8001588 <adctoArray>
		doublevoltValtoInteger();
 800244e:	f7ff f9bf 	bl	80017d0 <doublevoltValtoInteger>
		voltstoDigit();
 8002452:	f7ff f9eb 	bl	800182c <voltstoDigit>

		lowestcellVoltage = lowestVoltage_Conf(voltintVal);
 8002456:	4816      	ldr	r0, [pc, #88]	; (80024b0 <main+0x114>)
 8002458:	f7ff fb08 	bl	8001a6c <lowestVoltage_Conf>
 800245c:	4602      	mov	r2, r0
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <main+0x118>)
 8002460:	601a      	str	r2, [r3, #0]
		highestcellVoltage = highestVoltage_Conf(voltintVal);
 8002462:	4813      	ldr	r0, [pc, #76]	; (80024b0 <main+0x114>)
 8002464:	f7ff fb3a 	bl	8001adc <highestVoltage_Conf>
 8002468:	4602      	mov	r2, r0
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <main+0x11c>)
 800246c:	601a      	str	r2, [r3, #0]

		cellBalancing(lowestVoltageIndex, voltintVal);
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <main+0x120>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	490f      	ldr	r1, [pc, #60]	; (80024b0 <main+0x114>)
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff17 	bl	80022a8 <cellBalancing>

		rgbConfig(tempValue);
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <main+0x124>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff feac 	bl	80021dc <rgbConfig>
		dataSend();
 8002484:	f7ff fb62 	bl	8001b4c <dataSend>
		dataprintLCD();
 8002488:	f7ff fc9c 	bl	8001dc4 <dataprintLCD>
		adcRead(&hadc2);
 800248c:	e7da      	b.n	8002444 <main+0xa8>
 800248e:	bf00      	nop
 8002490:	40020c00 	.word	0x40020c00
 8002494:	40020400 	.word	0x40020400
 8002498:	40021000 	.word	0x40021000
 800249c:	08007268 	.word	0x08007268
 80024a0:	0800726c 	.word	0x0800726c
 80024a4:	200001d8 	.word	0x200001d8
 80024a8:	200002ec 	.word	0x200002ec
 80024ac:	20000258 	.word	0x20000258
 80024b0:	20000168 	.word	0x20000168
 80024b4:	200001b8 	.word	0x200001b8
 80024b8:	200001bc 	.word	0x200001bc
 80024bc:	20000198 	.word	0x20000198
 80024c0:	200001a4 	.word	0x200001a4

080024c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b094      	sub	sp, #80	; 0x50
 80024c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ca:	f107 0320 	add.w	r3, r7, #32
 80024ce:	2230      	movs	r2, #48	; 0x30
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 ffc0 	bl	8006458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024d8:	f107 030c 	add.w	r3, r7, #12
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	4b28      	ldr	r3, [pc, #160]	; (8002590 <SystemClock_Config+0xcc>)
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	4a27      	ldr	r2, [pc, #156]	; (8002590 <SystemClock_Config+0xcc>)
 80024f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f6:	6413      	str	r3, [r2, #64]	; 0x40
 80024f8:	4b25      	ldr	r3, [pc, #148]	; (8002590 <SystemClock_Config+0xcc>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002504:	2300      	movs	r3, #0
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	4b22      	ldr	r3, [pc, #136]	; (8002594 <SystemClock_Config+0xd0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a21      	ldr	r2, [pc, #132]	; (8002594 <SystemClock_Config+0xd0>)
 800250e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <SystemClock_Config+0xd0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002520:	2302      	movs	r3, #2
 8002522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002524:	2301      	movs	r3, #1
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002528:	2310      	movs	r3, #16
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800252c:	2302      	movs	r3, #2
 800252e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002530:	2300      	movs	r3, #0
 8002532:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002534:	2308      	movs	r3, #8
 8002536:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002538:	23a8      	movs	r3, #168	; 0xa8
 800253a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800253c:	2302      	movs	r3, #2
 800253e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002540:	2304      	movs	r3, #4
 8002542:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002544:	f107 0320 	add.w	r3, r7, #32
 8002548:	4618      	mov	r0, r3
 800254a:	f002 f8d1 	bl	80046f0 <HAL_RCC_OscConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002554:	f000 fb1a 	bl	8002b8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002558:	230f      	movs	r3, #15
 800255a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800255c:	2302      	movs	r3, #2
 800255e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002564:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800256a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800256e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002570:	f107 030c 	add.w	r3, r7, #12
 8002574:	2105      	movs	r1, #5
 8002576:	4618      	mov	r0, r3
 8002578:	f002 fb2a 	bl	8004bd0 <HAL_RCC_ClockConfig>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002582:	f000 fb03 	bl	8002b8c <Error_Handler>
  }
}
 8002586:	bf00      	nop
 8002588:	3750      	adds	r7, #80	; 0x50
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
 8002594:	40007000 	.word	0x40007000

08002598 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800259e:	463b      	mov	r3, r7
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80025aa:	4b75      	ldr	r3, [pc, #468]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80025ac:	4a75      	ldr	r2, [pc, #468]	; (8002784 <MX_ADC2_Init+0x1ec>)
 80025ae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80025b0:	4b73      	ldr	r3, [pc, #460]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80025b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025b6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80025b8:	4b71      	ldr	r3, [pc, #452]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80025be:	4b70      	ldr	r3, [pc, #448]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80025c4:	4b6e      	ldr	r3, [pc, #440]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80025ca:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025d2:	4b6b      	ldr	r3, [pc, #428]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025d8:	4b69      	ldr	r3, [pc, #420]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80025da:	4a6b      	ldr	r2, [pc, #428]	; (8002788 <MX_ADC2_Init+0x1f0>)
 80025dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025de:	4b68      	ldr	r3, [pc, #416]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 13;
 80025e4:	4b66      	ldr	r3, [pc, #408]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80025e6:	220d      	movs	r2, #13
 80025e8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80025ea:	4b65      	ldr	r3, [pc, #404]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80025f8:	4861      	ldr	r0, [pc, #388]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80025fa:	f000 fe2d 	bl	8003258 <HAL_ADC_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002604:	f000 fac2 	bl	8002b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002608:	2300      	movs	r3, #0
 800260a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800260c:	2301      	movs	r3, #1
 800260e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8002610:	2305      	movs	r3, #5
 8002612:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002614:	463b      	mov	r3, r7
 8002616:	4619      	mov	r1, r3
 8002618:	4859      	ldr	r0, [pc, #356]	; (8002780 <MX_ADC2_Init+0x1e8>)
 800261a:	f000 ff71 	bl	8003500 <HAL_ADC_ConfigChannel>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002624:	f000 fab2 	bl	8002b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002628:	2301      	movs	r3, #1
 800262a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800262c:	2302      	movs	r3, #2
 800262e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002630:	463b      	mov	r3, r7
 8002632:	4619      	mov	r1, r3
 8002634:	4852      	ldr	r0, [pc, #328]	; (8002780 <MX_ADC2_Init+0x1e8>)
 8002636:	f000 ff63 	bl	8003500 <HAL_ADC_ConfigChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8002640:	f000 faa4 	bl	8002b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002644:	2302      	movs	r3, #2
 8002646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002648:	2303      	movs	r3, #3
 800264a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800264c:	463b      	mov	r3, r7
 800264e:	4619      	mov	r1, r3
 8002650:	484b      	ldr	r0, [pc, #300]	; (8002780 <MX_ADC2_Init+0x1e8>)
 8002652:	f000 ff55 	bl	8003500 <HAL_ADC_ConfigChannel>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800265c:	f000 fa96 	bl	8002b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002660:	2303      	movs	r3, #3
 8002662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002664:	2304      	movs	r3, #4
 8002666:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002668:	463b      	mov	r3, r7
 800266a:	4619      	mov	r1, r3
 800266c:	4844      	ldr	r0, [pc, #272]	; (8002780 <MX_ADC2_Init+0x1e8>)
 800266e:	f000 ff47 	bl	8003500 <HAL_ADC_ConfigChannel>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002678:	f000 fa88 	bl	8002b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800267c:	2304      	movs	r3, #4
 800267e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002680:	2305      	movs	r3, #5
 8002682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002684:	463b      	mov	r3, r7
 8002686:	4619      	mov	r1, r3
 8002688:	483d      	ldr	r0, [pc, #244]	; (8002780 <MX_ADC2_Init+0x1e8>)
 800268a:	f000 ff39 	bl	8003500 <HAL_ADC_ConfigChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8002694:	f000 fa7a 	bl	8002b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002698:	2305      	movs	r3, #5
 800269a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800269c:	2306      	movs	r3, #6
 800269e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80026a0:	463b      	mov	r3, r7
 80026a2:	4619      	mov	r1, r3
 80026a4:	4836      	ldr	r0, [pc, #216]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80026a6:	f000 ff2b 	bl	8003500 <HAL_ADC_ConfigChannel>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80026b0:	f000 fa6c 	bl	8002b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80026b4:	2306      	movs	r3, #6
 80026b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80026b8:	2307      	movs	r3, #7
 80026ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80026bc:	463b      	mov	r3, r7
 80026be:	4619      	mov	r1, r3
 80026c0:	482f      	ldr	r0, [pc, #188]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80026c2:	f000 ff1d 	bl	8003500 <HAL_ADC_ConfigChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80026cc:	f000 fa5e 	bl	8002b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80026d0:	2307      	movs	r3, #7
 80026d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80026d4:	2308      	movs	r3, #8
 80026d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80026d8:	463b      	mov	r3, r7
 80026da:	4619      	mov	r1, r3
 80026dc:	4828      	ldr	r0, [pc, #160]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80026de:	f000 ff0f 	bl	8003500 <HAL_ADC_ConfigChannel>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80026e8:	f000 fa50 	bl	8002b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80026ec:	2308      	movs	r3, #8
 80026ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80026f0:	2309      	movs	r3, #9
 80026f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80026f4:	463b      	mov	r3, r7
 80026f6:	4619      	mov	r1, r3
 80026f8:	4821      	ldr	r0, [pc, #132]	; (8002780 <MX_ADC2_Init+0x1e8>)
 80026fa:	f000 ff01 	bl	8003500 <HAL_ADC_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8002704:	f000 fa42 	bl	8002b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002708:	2309      	movs	r3, #9
 800270a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800270c:	230a      	movs	r3, #10
 800270e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002710:	463b      	mov	r3, r7
 8002712:	4619      	mov	r1, r3
 8002714:	481a      	ldr	r0, [pc, #104]	; (8002780 <MX_ADC2_Init+0x1e8>)
 8002716:	f000 fef3 	bl	8003500 <HAL_ADC_ConfigChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8002720:	f000 fa34 	bl	8002b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002724:	230a      	movs	r3, #10
 8002726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002728:	230b      	movs	r3, #11
 800272a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800272c:	463b      	mov	r3, r7
 800272e:	4619      	mov	r1, r3
 8002730:	4813      	ldr	r0, [pc, #76]	; (8002780 <MX_ADC2_Init+0x1e8>)
 8002732:	f000 fee5 	bl	8003500 <HAL_ADC_ConfigChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 800273c:	f000 fa26 	bl	8002b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002740:	230b      	movs	r3, #11
 8002742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002744:	230c      	movs	r3, #12
 8002746:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002748:	463b      	mov	r3, r7
 800274a:	4619      	mov	r1, r3
 800274c:	480c      	ldr	r0, [pc, #48]	; (8002780 <MX_ADC2_Init+0x1e8>)
 800274e:	f000 fed7 	bl	8003500 <HAL_ADC_ConfigChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8002758:	f000 fa18 	bl	8002b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800275c:	230c      	movs	r3, #12
 800275e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8002760:	230d      	movs	r3, #13
 8002762:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002764:	463b      	mov	r3, r7
 8002766:	4619      	mov	r1, r3
 8002768:	4805      	ldr	r0, [pc, #20]	; (8002780 <MX_ADC2_Init+0x1e8>)
 800276a:	f000 fec9 	bl	8003500 <HAL_ADC_ConfigChannel>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8002774:	f000 fa0a 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000258 	.word	0x20000258
 8002784:	40012100 	.word	0x40012100
 8002788:	0f000001 	.word	0x0f000001

0800278c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002792:	f107 0320 	add.w	r3, r7, #32
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	611a      	str	r2, [r3, #16]
 80027aa:	615a      	str	r2, [r3, #20]
 80027ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027ae:	4b27      	ldr	r3, [pc, #156]	; (800284c <MX_TIM4_Init+0xc0>)
 80027b0:	4a27      	ldr	r2, [pc, #156]	; (8002850 <MX_TIM4_Init+0xc4>)
 80027b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1383;
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <MX_TIM4_Init+0xc0>)
 80027b6:	f240 5267 	movw	r2, #1383	; 0x567
 80027ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <MX_TIM4_Init+0xc0>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 254;
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <MX_TIM4_Init+0xc0>)
 80027c4:	22fe      	movs	r2, #254	; 0xfe
 80027c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c8:	4b20      	ldr	r3, [pc, #128]	; (800284c <MX_TIM4_Init+0xc0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ce:	4b1f      	ldr	r3, [pc, #124]	; (800284c <MX_TIM4_Init+0xc0>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027d4:	481d      	ldr	r0, [pc, #116]	; (800284c <MX_TIM4_Init+0xc0>)
 80027d6:	f002 fbf9 	bl	8004fcc <HAL_TIM_PWM_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80027e0:	f000 f9d4 	bl	8002b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e4:	2300      	movs	r3, #0
 80027e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027ec:	f107 0320 	add.w	r3, r7, #32
 80027f0:	4619      	mov	r1, r3
 80027f2:	4816      	ldr	r0, [pc, #88]	; (800284c <MX_TIM4_Init+0xc0>)
 80027f4:	f003 f8ca 	bl	800598c <HAL_TIMEx_MasterConfigSynchronization>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80027fe:	f000 f9c5 	bl	8002b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002802:	2360      	movs	r3, #96	; 0x60
 8002804:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	2204      	movs	r2, #4
 8002816:	4619      	mov	r1, r3
 8002818:	480c      	ldr	r0, [pc, #48]	; (800284c <MX_TIM4_Init+0xc0>)
 800281a:	f002 fd49 	bl	80052b0 <HAL_TIM_PWM_ConfigChannel>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002824:	f000 f9b2 	bl	8002b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	2208      	movs	r2, #8
 800282c:	4619      	mov	r1, r3
 800282e:	4807      	ldr	r0, [pc, #28]	; (800284c <MX_TIM4_Init+0xc0>)
 8002830:	f002 fd3e 	bl	80052b0 <HAL_TIM_PWM_ConfigChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800283a:	f000 f9a7 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800283e:	4803      	ldr	r0, [pc, #12]	; (800284c <MX_TIM4_Init+0xc0>)
 8002840:	f000 faaa 	bl	8002d98 <HAL_TIM_MspPostInit>

}
 8002844:	bf00      	nop
 8002846:	3728      	adds	r7, #40	; 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200001d8 	.word	0x200001d8
 8002850:	40000800 	.word	0x40000800

08002854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <MX_USART1_UART_Init+0x4c>)
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <MX_USART1_UART_Init+0x50>)
 800285c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <MX_USART1_UART_Init+0x4c>)
 8002860:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <MX_USART1_UART_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <MX_USART1_UART_Init+0x4c>)
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <MX_USART1_UART_Init+0x4c>)
 8002874:	2200      	movs	r2, #0
 8002876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <MX_USART1_UART_Init+0x4c>)
 800287a:	220c      	movs	r2, #12
 800287c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <MX_USART1_UART_Init+0x4c>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <MX_USART1_UART_Init+0x4c>)
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800288a:	4805      	ldr	r0, [pc, #20]	; (80028a0 <MX_USART1_UART_Init+0x4c>)
 800288c:	f003 f90e 	bl	8005aac <HAL_UART_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002896:	f000 f979 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200002ac 	.word	0x200002ac
 80028a4:	40011000 	.word	0x40011000

080028a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <MX_USART2_UART_Init+0x4c>)
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <MX_USART2_UART_Init+0x50>)
 80028b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <MX_USART2_UART_Init+0x4c>)
 80028b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <MX_USART2_UART_Init+0x4c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <MX_USART2_UART_Init+0x4c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <MX_USART2_UART_Init+0x4c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <MX_USART2_UART_Init+0x4c>)
 80028ce:	220c      	movs	r2, #12
 80028d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <MX_USART2_UART_Init+0x4c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <MX_USART2_UART_Init+0x4c>)
 80028da:	2200      	movs	r2, #0
 80028dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028de:	4805      	ldr	r0, [pc, #20]	; (80028f4 <MX_USART2_UART_Init+0x4c>)
 80028e0:	f003 f8e4 	bl	8005aac <HAL_UART_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028ea:	f000 f94f 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	2000032c 	.word	0x2000032c
 80028f8:	40004400 	.word	0x40004400

080028fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 8002902:	4a12      	ldr	r2, [pc, #72]	; (800294c <MX_USART3_UART_Init+0x50>)
 8002904:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 8002908:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800290c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 8002922:	220c      	movs	r2, #12
 8002924:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002932:	4805      	ldr	r0, [pc, #20]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 8002934:	f003 f8ba 	bl	8005aac <HAL_UART_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800293e:	f000 f925 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000218 	.word	0x20000218
 800294c:	40004800 	.word	0x40004800

08002950 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	4b0c      	ldr	r3, [pc, #48]	; (800298c <MX_DMA_Init+0x3c>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4a0b      	ldr	r2, [pc, #44]	; (800298c <MX_DMA_Init+0x3c>)
 8002960:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <MX_DMA_Init+0x3c>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	203a      	movs	r0, #58	; 0x3a
 8002978:	f001 f93d 	bl	8003bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800297c:	203a      	movs	r0, #58	; 0x3a
 800297e:	f001 f956 	bl	8003c2e <HAL_NVIC_EnableIRQ>

}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800

08002990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08c      	sub	sp, #48	; 0x30
 8002994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002996:	f107 031c 	add.w	r3, r7, #28
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	4b71      	ldr	r3, [pc, #452]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	4a70      	ldr	r2, [pc, #448]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 80029b0:	f043 0310 	orr.w	r3, r3, #16
 80029b4:	6313      	str	r3, [r2, #48]	; 0x30
 80029b6:	4b6e      	ldr	r3, [pc, #440]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	4b6a      	ldr	r3, [pc, #424]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a69      	ldr	r2, [pc, #420]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 80029cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b67      	ldr	r3, [pc, #412]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a62      	ldr	r2, [pc, #392]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b60      	ldr	r3, [pc, #384]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b5c      	ldr	r3, [pc, #368]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a5b      	ldr	r2, [pc, #364]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b59      	ldr	r3, [pc, #356]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	4b55      	ldr	r3, [pc, #340]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4a54      	ldr	r2, [pc, #336]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	6313      	str	r3, [r2, #48]	; 0x30
 8002a26:	4b52      	ldr	r3, [pc, #328]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	4b4e      	ldr	r3, [pc, #312]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	4a4d      	ldr	r2, [pc, #308]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 8002a3c:	f043 0308 	orr.w	r3, r3, #8
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
 8002a42:	4b4b      	ldr	r3, [pc, #300]	; (8002b70 <MX_GPIO_Init+0x1e0>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOS_CELL1_Pin|MOS_CELL2_Pin|MOS_CELL3_Pin|MOS_CELL4_Pin
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a54:	4847      	ldr	r0, [pc, #284]	; (8002b74 <MX_GPIO_Init+0x1e4>)
 8002a56:	f001 fe0d 	bl	8004674 <HAL_GPIO_WritePin>
                          |MOS_CELL5_Pin|MOS_CELL6_Pin|MOS_CELL7_Pin|MOS_CELL8_Pin
                          |MOS_CELL9_Pin|MOS_CELL10_Pin|MOS_CELL11_Pin|MOS_CELL12_Pin
                          |MOS_CHARGE_Pin|MOS_DISCHARGE_Pin|RS_Pin|E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D0_Pin|D1_Pin|D2_Pin|D3_Pin, GPIO_PIN_RESET);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002a60:	4845      	ldr	r0, [pc, #276]	; (8002b78 <MX_GPIO_Init+0x1e8>)
 8002a62:	f001 fe07 	bl	8004674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 8002a66:	2200      	movs	r2, #0
 8002a68:	f44f 51b8 	mov.w	r1, #5888	; 0x1700
 8002a6c:	4843      	ldr	r0, [pc, #268]	; (8002b7c <MX_GPIO_Init+0x1ec>)
 8002a6e:	f001 fe01 	bl	8004674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LEDA_Pin, GPIO_PIN_RESET);
 8002a72:	2200      	movs	r2, #0
 8002a74:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002a78:	4841      	ldr	r0, [pc, #260]	; (8002b80 <MX_GPIO_Init+0x1f0>)
 8002a7a:	f001 fdfb 	bl	8004674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a84:	483f      	ldr	r0, [pc, #252]	; (8002b84 <MX_GPIO_Init+0x1f4>)
 8002a86:	f001 fdf5 	bl	8004674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOS_CELL1_Pin MOS_CELL2_Pin MOS_CELL3_Pin MOS_CELL4_Pin
                           MOS_CELL5_Pin MOS_CELL6_Pin MOS_CELL7_Pin MOS_CELL8_Pin
                           MOS_CELL9_Pin MOS_CELL10_Pin MOS_CELL11_Pin MOS_CELL12_Pin
                           MOS_CHARGE_Pin MOS_DISCHARGE_Pin RS_Pin E_Pin */
  GPIO_InitStruct.Pin = MOS_CELL1_Pin|MOS_CELL2_Pin|MOS_CELL3_Pin|MOS_CELL4_Pin
 8002a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a8e:	61fb      	str	r3, [r7, #28]
                          |MOS_CELL5_Pin|MOS_CELL6_Pin|MOS_CELL7_Pin|MOS_CELL8_Pin
                          |MOS_CELL9_Pin|MOS_CELL10_Pin|MOS_CELL11_Pin|MOS_CELL12_Pin
                          |MOS_CHARGE_Pin|MOS_DISCHARGE_Pin|RS_Pin|E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a90:	2301      	movs	r3, #1
 8002a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4834      	ldr	r0, [pc, #208]	; (8002b74 <MX_GPIO_Init+0x1e4>)
 8002aa4:	f001 fc4c 	bl	8004340 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin;
 8002aa8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	f107 031c 	add.w	r3, r7, #28
 8002abe:	4619      	mov	r1, r3
 8002ac0:	482d      	ldr	r0, [pc, #180]	; (8002b78 <MX_GPIO_Init+0x1e8>)
 8002ac2:	f001 fc3d 	bl	8004340 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8002ac6:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8002aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002acc:	2301      	movs	r3, #1
 8002ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad8:	f107 031c 	add.w	r3, r7, #28
 8002adc:	4619      	mov	r1, r3
 8002ade:	4827      	ldr	r0, [pc, #156]	; (8002b7c <MX_GPIO_Init+0x1ec>)
 8002ae0:	f001 fc2e 	bl	8004340 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LEDA_Pin;
 8002ae4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aea:	2301      	movs	r3, #1
 8002aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	2300      	movs	r3, #0
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af6:	f107 031c 	add.w	r3, r7, #28
 8002afa:	4619      	mov	r1, r3
 8002afc:	4820      	ldr	r0, [pc, #128]	; (8002b80 <MX_GPIO_Init+0x1f0>)
 8002afe:	f001 fc1f 	bl	8004340 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002b14:	f107 031c 	add.w	r3, r7, #28
 8002b18:	4619      	mov	r1, r3
 8002b1a:	481a      	ldr	r0, [pc, #104]	; (8002b84 <MX_GPIO_Init+0x1f4>)
 8002b1c:	f001 fc10 	bl	8004340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002b20:	2307      	movs	r3, #7
 8002b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b24:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <MX_GPIO_Init+0x1f8>)
 8002b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b2c:	f107 031c 	add.w	r3, r7, #28
 8002b30:	4619      	mov	r1, r3
 8002b32:	4812      	ldr	r0, [pc, #72]	; (8002b7c <MX_GPIO_Init+0x1ec>)
 8002b34:	f001 fc04 	bl	8004340 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	2006      	movs	r0, #6
 8002b3e:	f001 f85a 	bl	8003bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002b42:	2006      	movs	r0, #6
 8002b44:	f001 f873 	bl	8003c2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	2007      	movs	r0, #7
 8002b4e:	f001 f852 	bl	8003bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002b52:	2007      	movs	r0, #7
 8002b54:	f001 f86b 	bl	8003c2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	2008      	movs	r0, #8
 8002b5e:	f001 f84a 	bl	8003bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b62:	2008      	movs	r0, #8
 8002b64:	f001 f863 	bl	8003c2e <HAL_NVIC_EnableIRQ>

}
 8002b68:	bf00      	nop
 8002b6a:	3730      	adds	r7, #48	; 0x30
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40020c00 	.word	0x40020c00
 8002b80:	40020800 	.word	0x40020800
 8002b84:	40020000 	.word	0x40020000
 8002b88:	10110000 	.word	0x10110000

08002b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b90:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002b92:	e7fe      	b.n	8002b92 <Error_Handler+0x6>

08002b94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <HAL_MspInit+0x4c>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	4a0f      	ldr	r2, [pc, #60]	; (8002be0 <HAL_MspInit+0x4c>)
 8002ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <HAL_MspInit+0x4c>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb2:	607b      	str	r3, [r7, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_MspInit+0x4c>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <HAL_MspInit+0x4c>)
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_MspInit+0x4c>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800

08002be4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08c      	sub	sp, #48	; 0x30
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 031c 	add.w	r3, r7, #28
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a4a      	ldr	r2, [pc, #296]	; (8002d2c <HAL_ADC_MspInit+0x148>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	f040 808d 	bne.w	8002d22 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	4b48      	ldr	r3, [pc, #288]	; (8002d30 <HAL_ADC_MspInit+0x14c>)
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c10:	4a47      	ldr	r2, [pc, #284]	; (8002d30 <HAL_ADC_MspInit+0x14c>)
 8002c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c16:	6453      	str	r3, [r2, #68]	; 0x44
 8002c18:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <HAL_ADC_MspInit+0x14c>)
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <HAL_ADC_MspInit+0x14c>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	4a40      	ldr	r2, [pc, #256]	; (8002d30 <HAL_ADC_MspInit+0x14c>)
 8002c2e:	f043 0304 	orr.w	r3, r3, #4
 8002c32:	6313      	str	r3, [r2, #48]	; 0x30
 8002c34:	4b3e      	ldr	r3, [pc, #248]	; (8002d30 <HAL_ADC_MspInit+0x14c>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <HAL_ADC_MspInit+0x14c>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	4a39      	ldr	r2, [pc, #228]	; (8002d30 <HAL_ADC_MspInit+0x14c>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c50:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <HAL_ADC_MspInit+0x14c>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <HAL_ADC_MspInit+0x14c>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	4a32      	ldr	r2, [pc, #200]	; (8002d30 <HAL_ADC_MspInit+0x14c>)
 8002c66:	f043 0302 	orr.w	r3, r3, #2
 8002c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6c:	4b30      	ldr	r3, [pc, #192]	; (8002d30 <HAL_ADC_MspInit+0x14c>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002c78:	2307      	movs	r3, #7
 8002c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c84:	f107 031c 	add.w	r3, r7, #28
 8002c88:	4619      	mov	r1, r3
 8002c8a:	482a      	ldr	r0, [pc, #168]	; (8002d34 <HAL_ADC_MspInit+0x150>)
 8002c8c:	f001 fb58 	bl	8004340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002c90:	23ff      	movs	r3, #255	; 0xff
 8002c92:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c94:	2303      	movs	r3, #3
 8002c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9c:	f107 031c 	add.w	r3, r7, #28
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4825      	ldr	r0, [pc, #148]	; (8002d38 <HAL_ADC_MspInit+0x154>)
 8002ca4:	f001 fb4c 	bl	8004340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cac:	2303      	movs	r3, #3
 8002cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb4:	f107 031c 	add.w	r3, r7, #28
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4820      	ldr	r0, [pc, #128]	; (8002d3c <HAL_ADC_MspInit+0x158>)
 8002cbc:	f001 fb40 	bl	8004340 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <HAL_ADC_MspInit+0x15c>)
 8002cc2:	4a20      	ldr	r2, [pc, #128]	; (8002d44 <HAL_ADC_MspInit+0x160>)
 8002cc4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <HAL_ADC_MspInit+0x15c>)
 8002cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ccc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cce:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <HAL_ADC_MspInit+0x15c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_ADC_MspInit+0x15c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002cda:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_ADC_MspInit+0x15c>)
 8002cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ce0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_ADC_MspInit+0x15c>)
 8002ce4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ce8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_ADC_MspInit+0x15c>)
 8002cec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cf0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002cf2:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <HAL_ADC_MspInit+0x15c>)
 8002cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_ADC_MspInit+0x15c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_ADC_MspInit+0x15c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002d06:	480e      	ldr	r0, [pc, #56]	; (8002d40 <HAL_ADC_MspInit+0x15c>)
 8002d08:	f000 ffac 	bl	8003c64 <HAL_DMA_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 8002d12:	f7ff ff3b 	bl	8002b8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <HAL_ADC_MspInit+0x15c>)
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38
 8002d1c:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <HAL_ADC_MspInit+0x15c>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002d22:	bf00      	nop
 8002d24:	3730      	adds	r7, #48	; 0x30
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40012100 	.word	0x40012100
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020000 	.word	0x40020000
 8002d3c:	40020400 	.word	0x40020400
 8002d40:	2000036c 	.word	0x2000036c
 8002d44:	40026440 	.word	0x40026440

08002d48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <HAL_TIM_PWM_MspInit+0x48>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d115      	bne.n	8002d86 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <HAL_TIM_PWM_MspInit+0x4c>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <HAL_TIM_PWM_MspInit+0x4c>)
 8002d64:	f043 0304 	orr.w	r3, r3, #4
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <HAL_TIM_PWM_MspInit+0x4c>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2100      	movs	r1, #0
 8002d7a:	201e      	movs	r0, #30
 8002d7c:	f000 ff3b 	bl	8003bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d80:	201e      	movs	r0, #30
 8002d82:	f000 ff54 	bl	8003c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40000800 	.word	0x40000800
 8002d94:	40023800 	.word	0x40023800

08002d98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da0:	f107 030c 	add.w	r3, r7, #12
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <HAL_TIM_MspPostInit+0x68>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d11e      	bne.n	8002df8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_TIM_MspPostInit+0x6c>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <HAL_TIM_MspPostInit+0x6c>)
 8002dc4:	f043 0308 	orr.w	r3, r3, #8
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <HAL_TIM_MspPostInit+0x6c>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002dd6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002dda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002de8:	2302      	movs	r3, #2
 8002dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dec:	f107 030c 	add.w	r3, r7, #12
 8002df0:	4619      	mov	r1, r3
 8002df2:	4805      	ldr	r0, [pc, #20]	; (8002e08 <HAL_TIM_MspPostInit+0x70>)
 8002df4:	f001 faa4 	bl	8004340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002df8:	bf00      	nop
 8002dfa:	3720      	adds	r7, #32
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40020c00 	.word	0x40020c00

08002e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08e      	sub	sp, #56	; 0x38
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a4c      	ldr	r2, [pc, #304]	; (8002f5c <HAL_UART_MspInit+0x150>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d12d      	bne.n	8002e8a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	623b      	str	r3, [r7, #32]
 8002e32:	4b4b      	ldr	r3, [pc, #300]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	4a4a      	ldr	r2, [pc, #296]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002e38:	f043 0310 	orr.w	r3, r3, #16
 8002e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3e:	4b48      	ldr	r3, [pc, #288]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	4b44      	ldr	r3, [pc, #272]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4a43      	ldr	r2, [pc, #268]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5a:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e74:	2303      	movs	r3, #3
 8002e76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e78:	2307      	movs	r3, #7
 8002e7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e80:	4619      	mov	r1, r3
 8002e82:	4838      	ldr	r0, [pc, #224]	; (8002f64 <HAL_UART_MspInit+0x158>)
 8002e84:	f001 fa5c 	bl	8004340 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e88:	e063      	b.n	8002f52 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a36      	ldr	r2, [pc, #216]	; (8002f68 <HAL_UART_MspInit+0x15c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d12c      	bne.n	8002eee <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	4a30      	ldr	r2, [pc, #192]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea4:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	4a29      	ldr	r2, [pc, #164]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002eba:	f043 0308 	orr.w	r3, r3, #8
 8002ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002ecc:	2360      	movs	r3, #96	; 0x60
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002edc:	2307      	movs	r3, #7
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4821      	ldr	r0, [pc, #132]	; (8002f6c <HAL_UART_MspInit+0x160>)
 8002ee8:	f001 fa2a 	bl	8004340 <HAL_GPIO_Init>
}
 8002eec:	e031      	b.n	8002f52 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <HAL_UART_MspInit+0x164>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d12c      	bne.n	8002f52 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ef8:	2300      	movs	r3, #0
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002f02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f06:	6413      	str	r3, [r2, #64]	; 0x40
 8002f08:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	4a10      	ldr	r2, [pc, #64]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002f1e:	f043 0302 	orr.w	r3, r3, #2
 8002f22:	6313      	str	r3, [r2, #48]	; 0x30
 8002f24:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <HAL_UART_MspInit+0x154>)
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f30:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f36:	2302      	movs	r3, #2
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f42:	2307      	movs	r3, #7
 8002f44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4809      	ldr	r0, [pc, #36]	; (8002f74 <HAL_UART_MspInit+0x168>)
 8002f4e:	f001 f9f7 	bl	8004340 <HAL_GPIO_Init>
}
 8002f52:	bf00      	nop
 8002f54:	3738      	adds	r7, #56	; 0x38
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40011000 	.word	0x40011000
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40020000 	.word	0x40020000
 8002f68:	40004400 	.word	0x40004400
 8002f6c:	40020c00 	.word	0x40020c00
 8002f70:	40004800 	.word	0x40004800
 8002f74:	40020400 	.word	0x40020400

08002f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <NMI_Handler+0x4>

08002f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <HardFault_Handler+0x4>

08002f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <MemManage_Handler+0x4>

08002f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f8e:	e7fe      	b.n	8002f8e <BusFault_Handler+0x4>

08002f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f94:	e7fe      	b.n	8002f94 <UsageFault_Handler+0x4>

08002f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fc4:	f000 f906 	bl	80031d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f001 fb69 	bl	80046a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  selectItem++;
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <EXTI0_IRQHandler+0x30>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <EXTI0_IRQHandler+0x30>)
 8002fde:	6013      	str	r3, [r2, #0]

  if(selectItem > 13 && selectItem < 0)
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <EXTI0_IRQHandler+0x30>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b0d      	cmp	r3, #13
 8002fe6:	dd06      	ble.n	8002ff6 <EXTI0_IRQHandler+0x2a>
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <EXTI0_IRQHandler+0x30>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	da02      	bge.n	8002ff6 <EXTI0_IRQHandler+0x2a>
  {
	  selectItem=0;
 8002ff0:	4b02      	ldr	r3, [pc, #8]	; (8002ffc <EXTI0_IRQHandler+0x30>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
  }


  /* USER CODE END EXTI0_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	200000c0 	.word	0x200000c0

08003000 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003004:	2002      	movs	r0, #2
 8003006:	f001 fb4f 	bl	80046a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}

0800300e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003012:	2004      	movs	r0, #4
 8003014:	f001 fb48 	bl	80046a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}

0800301c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003020:	4802      	ldr	r0, [pc, #8]	; (800302c <TIM4_IRQHandler+0x10>)
 8003022:	f002 f83d 	bl	80050a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200001d8 	.word	0x200001d8

08003030 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003034:	4802      	ldr	r0, [pc, #8]	; (8003040 <DMA2_Stream2_IRQHandler+0x10>)
 8003036:	f000 ff1b 	bl	8003e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	2000036c 	.word	0x2000036c

08003044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800304c:	4a14      	ldr	r2, [pc, #80]	; (80030a0 <_sbrk+0x5c>)
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <_sbrk+0x60>)
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003058:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <_sbrk+0x64>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <_sbrk+0x64>)
 8003062:	4a12      	ldr	r2, [pc, #72]	; (80030ac <_sbrk+0x68>)
 8003064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	429a      	cmp	r2, r3
 8003072:	d207      	bcs.n	8003084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003074:	f003 f9c6 	bl	8006404 <__errno>
 8003078:	4602      	mov	r2, r0
 800307a:	230c      	movs	r3, #12
 800307c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	e009      	b.n	8003098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <_sbrk+0x64>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800308a:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <_sbrk+0x64>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	4a05      	ldr	r2, [pc, #20]	; (80030a8 <_sbrk+0x64>)
 8003094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003096:	68fb      	ldr	r3, [r7, #12]
 }
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20020000 	.word	0x20020000
 80030a4:	00000400 	.word	0x00000400
 80030a8:	200001c0 	.word	0x200001c0
 80030ac:	20000468 	.word	0x20000468

080030b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <SystemInit+0x28>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ba:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <SystemInit+0x28>)
 80030bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <SystemInit+0x28>)
 80030c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030ca:	609a      	str	r2, [r3, #8]
#endif
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003114 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030e2:	e003      	b.n	80030ec <LoopCopyDataInit>

080030e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030ea:	3104      	adds	r1, #4

080030ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030ec:	480b      	ldr	r0, [pc, #44]	; (800311c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030f4:	d3f6      	bcc.n	80030e4 <CopyDataInit>
  ldr  r2, =_sbss
 80030f6:	4a0b      	ldr	r2, [pc, #44]	; (8003124 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030f8:	e002      	b.n	8003100 <LoopFillZerobss>

080030fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030fc:	f842 3b04 	str.w	r3, [r2], #4

08003100 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003100:	4b09      	ldr	r3, [pc, #36]	; (8003128 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003102:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003104:	d3f9      	bcc.n	80030fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003106:	f7ff ffd3 	bl	80030b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800310a:	f003 f981 	bl	8006410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800310e:	f7ff f945 	bl	800239c <main>
  bx  lr    
 8003112:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003114:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003118:	080072e0 	.word	0x080072e0
  ldr  r0, =_sdata
 800311c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003120:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8003124:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8003128:	20000464 	.word	0x20000464

0800312c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800312c:	e7fe      	b.n	800312c <ADC_IRQHandler>
	...

08003130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003134:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <HAL_Init+0x40>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <HAL_Init+0x40>)
 800313a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800313e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_Init+0x40>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <HAL_Init+0x40>)
 8003146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800314a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <HAL_Init+0x40>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a07      	ldr	r2, [pc, #28]	; (8003170 <HAL_Init+0x40>)
 8003152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003158:	2003      	movs	r0, #3
 800315a:	f000 fd41 	bl	8003be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800315e:	2000      	movs	r0, #0
 8003160:	f000 f808 	bl	8003174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003164:	f7ff fd16 	bl	8002b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40023c00 	.word	0x40023c00

08003174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_InitTick+0x54>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b12      	ldr	r3, [pc, #72]	; (80031cc <HAL_InitTick+0x58>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	4619      	mov	r1, r3
 8003186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800318a:	fbb3 f3f1 	udiv	r3, r3, r1
 800318e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fd59 	bl	8003c4a <HAL_SYSTICK_Config>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e00e      	b.n	80031c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b0f      	cmp	r3, #15
 80031a6:	d80a      	bhi.n	80031be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031a8:	2200      	movs	r2, #0
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	f04f 30ff 	mov.w	r0, #4294967295
 80031b0:	f000 fd21 	bl	8003bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031b4:	4a06      	ldr	r2, [pc, #24]	; (80031d0 <HAL_InitTick+0x5c>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e000      	b.n	80031c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000004 	.word	0x20000004
 80031cc:	2000000c 	.word	0x2000000c
 80031d0:	20000008 	.word	0x20000008

080031d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_IncTick+0x20>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_IncTick+0x24>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4413      	add	r3, r2
 80031e4:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <HAL_IncTick+0x24>)
 80031e6:	6013      	str	r3, [r2, #0]
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	2000000c 	.word	0x2000000c
 80031f8:	2000045c 	.word	0x2000045c

080031fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003200:	4b03      	ldr	r3, [pc, #12]	; (8003210 <HAL_GetTick+0x14>)
 8003202:	681b      	ldr	r3, [r3, #0]
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	2000045c 	.word	0x2000045c

08003214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800321c:	f7ff ffee 	bl	80031fc <HAL_GetTick>
 8003220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d005      	beq.n	800323a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_Delay+0x40>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800323a:	bf00      	nop
 800323c:	f7ff ffde 	bl	80031fc <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	429a      	cmp	r2, r3
 800324a:	d8f7      	bhi.n	800323c <HAL_Delay+0x28>
  {
  }
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	2000000c 	.word	0x2000000c

08003258 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e033      	b.n	80032d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff fcb4 	bl	8002be4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800329e:	f023 0302 	bic.w	r3, r3, #2
 80032a2:	f043 0202 	orr.w	r2, r3, #2
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fa4a 	bl	8003744 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
 80032c6:	e001      	b.n	80032cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_ADC_Start_DMA+0x1e>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e0cc      	b.n	8003498 <HAL_ADC_Start_DMA+0x1b8>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b01      	cmp	r3, #1
 8003312:	d018      	beq.n	8003346 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003324:	4b5e      	ldr	r3, [pc, #376]	; (80034a0 <HAL_ADC_Start_DMA+0x1c0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a5e      	ldr	r2, [pc, #376]	; (80034a4 <HAL_ADC_Start_DMA+0x1c4>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	0c9a      	lsrs	r2, r3, #18
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003338:	e002      	b.n	8003340 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	3b01      	subs	r3, #1
 800333e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f9      	bne.n	800333a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b01      	cmp	r3, #1
 8003352:	f040 80a0 	bne.w	8003496 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003374:	2b00      	cmp	r3, #0
 8003376:	d007      	beq.n	8003388 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003380:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003394:	d106      	bne.n	80033a4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	f023 0206 	bic.w	r2, r3, #6
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
 80033a2:	e002      	b.n	80033aa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033b2:	4b3d      	ldr	r3, [pc, #244]	; (80034a8 <HAL_ADC_Start_DMA+0x1c8>)
 80033b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	4a3c      	ldr	r2, [pc, #240]	; (80034ac <HAL_ADC_Start_DMA+0x1cc>)
 80033bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	4a3b      	ldr	r2, [pc, #236]	; (80034b0 <HAL_ADC_Start_DMA+0x1d0>)
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	4a3a      	ldr	r2, [pc, #232]	; (80034b4 <HAL_ADC_Start_DMA+0x1d4>)
 80033cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	334c      	adds	r3, #76	; 0x4c
 8003402:	4619      	mov	r1, r3
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f000 fcda 	bl	8003dc0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2b00      	cmp	r3, #0
 8003416:	d12a      	bne.n	800346e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a26      	ldr	r2, [pc, #152]	; (80034b8 <HAL_ADC_Start_DMA+0x1d8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d015      	beq.n	800344e <HAL_ADC_Start_DMA+0x16e>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a25      	ldr	r2, [pc, #148]	; (80034bc <HAL_ADC_Start_DMA+0x1dc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d105      	bne.n	8003438 <HAL_ADC_Start_DMA+0x158>
 800342c:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <HAL_ADC_Start_DMA+0x1c8>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a20      	ldr	r2, [pc, #128]	; (80034c0 <HAL_ADC_Start_DMA+0x1e0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d129      	bne.n	8003496 <HAL_ADC_Start_DMA+0x1b6>
 8003442:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <HAL_ADC_Start_DMA+0x1c8>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	2b0f      	cmp	r3, #15
 800344c:	d823      	bhi.n	8003496 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d11c      	bne.n	8003496 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	e013      	b.n	8003496 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a11      	ldr	r2, [pc, #68]	; (80034b8 <HAL_ADC_Start_DMA+0x1d8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d10e      	bne.n	8003496 <HAL_ADC_Start_DMA+0x1b6>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d107      	bne.n	8003496 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003494:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000004 	.word	0x20000004
 80034a4:	431bde83 	.word	0x431bde83
 80034a8:	40012300 	.word	0x40012300
 80034ac:	0800393d 	.word	0x0800393d
 80034b0:	080039f7 	.word	0x080039f7
 80034b4:	08003a13 	.word	0x08003a13
 80034b8:	40012000 	.word	0x40012000
 80034bc:	40012100 	.word	0x40012100
 80034c0:	40012200 	.word	0x40012200

080034c4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1c>
 8003518:	2302      	movs	r3, #2
 800351a:	e105      	b.n	8003728 <HAL_ADC_ConfigChannel+0x228>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b09      	cmp	r3, #9
 800352a:	d925      	bls.n	8003578 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68d9      	ldr	r1, [r3, #12]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	3b1e      	subs	r3, #30
 8003542:	2207      	movs	r2, #7
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43da      	mvns	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	400a      	ands	r2, r1
 8003550:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68d9      	ldr	r1, [r3, #12]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	4618      	mov	r0, r3
 8003564:	4603      	mov	r3, r0
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4403      	add	r3, r0
 800356a:	3b1e      	subs	r3, #30
 800356c:	409a      	lsls	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	e022      	b.n	80035be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6919      	ldr	r1, [r3, #16]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	2207      	movs	r2, #7
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	400a      	ands	r2, r1
 800359a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6919      	ldr	r1, [r3, #16]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	4618      	mov	r0, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4403      	add	r3, r0
 80035b4:	409a      	lsls	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d824      	bhi.n	8003610 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	3b05      	subs	r3, #5
 80035d8:	221f      	movs	r2, #31
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43da      	mvns	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	400a      	ands	r2, r1
 80035e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	4618      	mov	r0, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	3b05      	subs	r3, #5
 8003602:	fa00 f203 	lsl.w	r2, r0, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	635a      	str	r2, [r3, #52]	; 0x34
 800360e:	e04c      	b.n	80036aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b0c      	cmp	r3, #12
 8003616:	d824      	bhi.n	8003662 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	3b23      	subs	r3, #35	; 0x23
 800362a:	221f      	movs	r2, #31
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43da      	mvns	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	400a      	ands	r2, r1
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	b29b      	uxth	r3, r3
 8003646:	4618      	mov	r0, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	3b23      	subs	r3, #35	; 0x23
 8003654:	fa00 f203 	lsl.w	r2, r0, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
 8003660:	e023      	b.n	80036aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	3b41      	subs	r3, #65	; 0x41
 8003674:	221f      	movs	r2, #31
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43da      	mvns	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	400a      	ands	r2, r1
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	b29b      	uxth	r3, r3
 8003690:	4618      	mov	r0, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	3b41      	subs	r3, #65	; 0x41
 800369e:	fa00 f203 	lsl.w	r2, r0, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036aa:	4b22      	ldr	r3, [pc, #136]	; (8003734 <HAL_ADC_ConfigChannel+0x234>)
 80036ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a21      	ldr	r2, [pc, #132]	; (8003738 <HAL_ADC_ConfigChannel+0x238>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d109      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x1cc>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b12      	cmp	r3, #18
 80036be:	d105      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a19      	ldr	r2, [pc, #100]	; (8003738 <HAL_ADC_ConfigChannel+0x238>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d123      	bne.n	800371e <HAL_ADC_ConfigChannel+0x21e>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b10      	cmp	r3, #16
 80036dc:	d003      	beq.n	80036e6 <HAL_ADC_ConfigChannel+0x1e6>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b11      	cmp	r3, #17
 80036e4:	d11b      	bne.n	800371e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d111      	bne.n	800371e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_ADC_ConfigChannel+0x23c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a10      	ldr	r2, [pc, #64]	; (8003740 <HAL_ADC_ConfigChannel+0x240>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	0c9a      	lsrs	r2, r3, #18
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003710:	e002      	b.n	8003718 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3b01      	subs	r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f9      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40012300 	.word	0x40012300
 8003738:	40012000 	.word	0x40012000
 800373c:	20000004 	.word	0x20000004
 8003740:	431bde83 	.word	0x431bde83

08003744 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800374c:	4b79      	ldr	r3, [pc, #484]	; (8003934 <ADC_Init+0x1f0>)
 800374e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003778:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	021a      	lsls	r2, r3, #8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800379c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	4a58      	ldr	r2, [pc, #352]	; (8003938 <ADC_Init+0x1f4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d022      	beq.n	8003822 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6899      	ldr	r1, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800380c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6899      	ldr	r1, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	e00f      	b.n	8003842 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003830:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003840:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0202 	bic.w	r2, r2, #2
 8003850:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6899      	ldr	r1, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7e1b      	ldrb	r3, [r3, #24]
 800385c:	005a      	lsls	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01b      	beq.n	80038a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800388e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	3b01      	subs	r3, #1
 800389c:	035a      	lsls	r2, r3, #13
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	e007      	b.n	80038b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	051a      	lsls	r2, r3, #20
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6899      	ldr	r1, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038fa:	025a      	lsls	r2, r3, #9
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6899      	ldr	r1, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	029a      	lsls	r2, r3, #10
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	40012300 	.word	0x40012300
 8003938:	0f000001 	.word	0x0f000001

0800393c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003952:	2b00      	cmp	r3, #0
 8003954:	d13c      	bne.n	80039d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d12b      	bne.n	80039c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003974:	2b00      	cmp	r3, #0
 8003976:	d127      	bne.n	80039c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003982:	2b00      	cmp	r3, #0
 8003984:	d006      	beq.n	8003994 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003990:	2b00      	cmp	r3, #0
 8003992:	d119      	bne.n	80039c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0220 	bic.w	r2, r2, #32
 80039a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f7ff fd7b 	bl	80034c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039ce:	e00e      	b.n	80039ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7ff fd85 	bl	80034ec <HAL_ADC_ErrorCallback>
}
 80039e2:	e004      	b.n	80039ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f7ff fd67 	bl	80034d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2240      	movs	r2, #64	; 0x40
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f043 0204 	orr.w	r2, r3, #4
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f7ff fd5a 	bl	80034ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <__NVIC_SetPriorityGrouping+0x44>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a72:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <__NVIC_SetPriorityGrouping+0x44>)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	60d3      	str	r3, [r2, #12]
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a8c:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	0a1b      	lsrs	r3, r3, #8
 8003a92:	f003 0307 	and.w	r3, r3, #7
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	db0b      	blt.n	8003ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	f003 021f 	and.w	r2, r3, #31
 8003abc:	4907      	ldr	r1, [pc, #28]	; (8003adc <__NVIC_EnableIRQ+0x38>)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	e000e100 	.word	0xe000e100

08003ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	6039      	str	r1, [r7, #0]
 8003aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	db0a      	blt.n	8003b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	490c      	ldr	r1, [pc, #48]	; (8003b2c <__NVIC_SetPriority+0x4c>)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	0112      	lsls	r2, r2, #4
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	440b      	add	r3, r1
 8003b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b08:	e00a      	b.n	8003b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	4908      	ldr	r1, [pc, #32]	; (8003b30 <__NVIC_SetPriority+0x50>)
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	3b04      	subs	r3, #4
 8003b18:	0112      	lsls	r2, r2, #4
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	761a      	strb	r2, [r3, #24]
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	e000e100 	.word	0xe000e100
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b089      	sub	sp, #36	; 0x24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f1c3 0307 	rsb	r3, r3, #7
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	bf28      	it	cs
 8003b52:	2304      	movcs	r3, #4
 8003b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	2b06      	cmp	r3, #6
 8003b5c:	d902      	bls.n	8003b64 <NVIC_EncodePriority+0x30>
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3b03      	subs	r3, #3
 8003b62:	e000      	b.n	8003b66 <NVIC_EncodePriority+0x32>
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b68:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43da      	mvns	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	401a      	ands	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	43d9      	mvns	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b8c:	4313      	orrs	r3, r2
         );
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3724      	adds	r7, #36	; 0x24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bac:	d301      	bcc.n	8003bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e00f      	b.n	8003bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bb2:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <SysTick_Config+0x40>)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bba:	210f      	movs	r1, #15
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	f7ff ff8e 	bl	8003ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <SysTick_Config+0x40>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bca:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <SysTick_Config+0x40>)
 8003bcc:	2207      	movs	r2, #7
 8003bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	e000e010 	.word	0xe000e010

08003be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff ff29 	bl	8003a40 <__NVIC_SetPriorityGrouping>
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c08:	f7ff ff3e 	bl	8003a88 <__NVIC_GetPriorityGrouping>
 8003c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	6978      	ldr	r0, [r7, #20]
 8003c14:	f7ff ff8e 	bl	8003b34 <NVIC_EncodePriority>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ff5d 	bl	8003ae0 <__NVIC_SetPriority>
}
 8003c26:	bf00      	nop
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	4603      	mov	r3, r0
 8003c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff ff31 	bl	8003aa4 <__NVIC_EnableIRQ>
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ffa2 	bl	8003b9c <SysTick_Config>
 8003c58:	4603      	mov	r3, r0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c70:	f7ff fac4 	bl	80031fc <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e099      	b.n	8003db4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0201 	bic.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ca0:	e00f      	b.n	8003cc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ca2:	f7ff faab 	bl	80031fc <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b05      	cmp	r3, #5
 8003cae:	d908      	bls.n	8003cc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2203      	movs	r2, #3
 8003cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e078      	b.n	8003db4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e8      	bne.n	8003ca2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4b38      	ldr	r3, [pc, #224]	; (8003dbc <HAL_DMA_Init+0x158>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d107      	bne.n	8003d2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	4313      	orrs	r3, r2
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d117      	bne.n	8003d86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00e      	beq.n	8003d86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fa6f 	bl	800424c <DMA_CheckFifoParam>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2240      	movs	r2, #64	; 0x40
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d82:	2301      	movs	r3, #1
 8003d84:	e016      	b.n	8003db4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fa26 	bl	80041e0 <DMA_CalcBaseAndBitshift>
 8003d94:	4603      	mov	r3, r0
 8003d96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	223f      	movs	r2, #63	; 0x3f
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	f010803f 	.word	0xf010803f

08003dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_DMA_Start_IT+0x26>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e040      	b.n	8003e68 <HAL_DMA_Start_IT+0xa8>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d12f      	bne.n	8003e5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f9b8 	bl	8004184 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	223f      	movs	r2, #63	; 0x3f
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0216 	orr.w	r2, r2, #22
 8003e2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d007      	beq.n	8003e48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0208 	orr.w	r2, r2, #8
 8003e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	e005      	b.n	8003e66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
 8003e64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e7c:	4b92      	ldr	r3, [pc, #584]	; (80040c8 <HAL_DMA_IRQHandler+0x258>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a92      	ldr	r2, [pc, #584]	; (80040cc <HAL_DMA_IRQHandler+0x25c>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	0a9b      	lsrs	r3, r3, #10
 8003e88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9a:	2208      	movs	r2, #8
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d01a      	beq.n	8003edc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d013      	beq.n	8003edc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0204 	bic.w	r2, r2, #4
 8003ec2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	2208      	movs	r2, #8
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	f043 0201 	orr.w	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d012      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	2201      	movs	r2, #1
 8003f00:	409a      	lsls	r2, r3
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	f043 0202 	orr.w	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f16:	2204      	movs	r2, #4
 8003f18:	409a      	lsls	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d012      	beq.n	8003f48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00b      	beq.n	8003f48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	2204      	movs	r2, #4
 8003f36:	409a      	lsls	r2, r3
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f40:	f043 0204 	orr.w	r2, r3, #4
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d043      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d03c      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6a:	2210      	movs	r2, #16
 8003f6c:	409a      	lsls	r2, r3
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d018      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d108      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d024      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	4798      	blx	r3
 8003f9e:	e01f      	b.n	8003fe0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01b      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
 8003fb0:	e016      	b.n	8003fe0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d107      	bne.n	8003fd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0208 	bic.w	r2, r2, #8
 8003fce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 808e 	beq.w	800410e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0310 	and.w	r3, r3, #16
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8086 	beq.w	800410e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004006:	2220      	movs	r2, #32
 8004008:	409a      	lsls	r2, r3
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b05      	cmp	r3, #5
 8004018:	d136      	bne.n	8004088 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0216 	bic.w	r2, r2, #22
 8004028:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004038:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <HAL_DMA_IRQHandler+0x1da>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0208 	bic.w	r2, r2, #8
 8004058:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405e:	223f      	movs	r2, #63	; 0x3f
 8004060:	409a      	lsls	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407a:	2b00      	cmp	r3, #0
 800407c:	d07d      	beq.n	800417a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	4798      	blx	r3
        }
        return;
 8004086:	e078      	b.n	800417a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01c      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d108      	bne.n	80040b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d030      	beq.n	800410e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4798      	blx	r3
 80040b4:	e02b      	b.n	800410e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d027      	beq.n	800410e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	4798      	blx	r3
 80040c6:	e022      	b.n	800410e <HAL_DMA_IRQHandler+0x29e>
 80040c8:	20000004 	.word	0x20000004
 80040cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10f      	bne.n	80040fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0210 	bic.w	r2, r2, #16
 80040ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004112:	2b00      	cmp	r3, #0
 8004114:	d032      	beq.n	800417c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d022      	beq.n	8004168 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2205      	movs	r2, #5
 8004126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0201 	bic.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	3301      	adds	r3, #1
 800413e:	60bb      	str	r3, [r7, #8]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	429a      	cmp	r2, r3
 8004144:	d307      	bcc.n	8004156 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f2      	bne.n	800413a <HAL_DMA_IRQHandler+0x2ca>
 8004154:	e000      	b.n	8004158 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004156:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
 8004178:	e000      	b.n	800417c <HAL_DMA_IRQHandler+0x30c>
        return;
 800417a:	bf00      	nop
    }
  }
}
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop

08004184 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b40      	cmp	r3, #64	; 0x40
 80041b0:	d108      	bne.n	80041c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041c2:	e007      	b.n	80041d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	60da      	str	r2, [r3, #12]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	3b10      	subs	r3, #16
 80041f0:	4a14      	ldr	r2, [pc, #80]	; (8004244 <DMA_CalcBaseAndBitshift+0x64>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	091b      	lsrs	r3, r3, #4
 80041f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041fa:	4a13      	ldr	r2, [pc, #76]	; (8004248 <DMA_CalcBaseAndBitshift+0x68>)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b03      	cmp	r3, #3
 800420c:	d909      	bls.n	8004222 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004216:	f023 0303 	bic.w	r3, r3, #3
 800421a:	1d1a      	adds	r2, r3, #4
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	659a      	str	r2, [r3, #88]	; 0x58
 8004220:	e007      	b.n	8004232 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	aaaaaaab 	.word	0xaaaaaaab
 8004248:	08007290 	.word	0x08007290

0800424c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d11f      	bne.n	80042a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b03      	cmp	r3, #3
 800426a:	d855      	bhi.n	8004318 <DMA_CheckFifoParam+0xcc>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <DMA_CheckFifoParam+0x28>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	08004285 	.word	0x08004285
 8004278:	08004297 	.word	0x08004297
 800427c:	08004285 	.word	0x08004285
 8004280:	08004319 	.word	0x08004319
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d045      	beq.n	800431c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004294:	e042      	b.n	800431c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800429e:	d13f      	bne.n	8004320 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a4:	e03c      	b.n	8004320 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ae:	d121      	bne.n	80042f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d836      	bhi.n	8004324 <DMA_CheckFifoParam+0xd8>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <DMA_CheckFifoParam+0x70>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080042cd 	.word	0x080042cd
 80042c0:	080042d3 	.word	0x080042d3
 80042c4:	080042cd 	.word	0x080042cd
 80042c8:	080042e5 	.word	0x080042e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
      break;
 80042d0:	e02f      	b.n	8004332 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d024      	beq.n	8004328 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042e2:	e021      	b.n	8004328 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042ec:	d11e      	bne.n	800432c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042f2:	e01b      	b.n	800432c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d902      	bls.n	8004300 <DMA_CheckFifoParam+0xb4>
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d003      	beq.n	8004306 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042fe:	e018      	b.n	8004332 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
      break;
 8004304:	e015      	b.n	8004332 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00e      	beq.n	8004330 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
      break;
 8004316:	e00b      	b.n	8004330 <DMA_CheckFifoParam+0xe4>
      break;
 8004318:	bf00      	nop
 800431a:	e00a      	b.n	8004332 <DMA_CheckFifoParam+0xe6>
      break;
 800431c:	bf00      	nop
 800431e:	e008      	b.n	8004332 <DMA_CheckFifoParam+0xe6>
      break;
 8004320:	bf00      	nop
 8004322:	e006      	b.n	8004332 <DMA_CheckFifoParam+0xe6>
      break;
 8004324:	bf00      	nop
 8004326:	e004      	b.n	8004332 <DMA_CheckFifoParam+0xe6>
      break;
 8004328:	bf00      	nop
 800432a:	e002      	b.n	8004332 <DMA_CheckFifoParam+0xe6>
      break;   
 800432c:	bf00      	nop
 800432e:	e000      	b.n	8004332 <DMA_CheckFifoParam+0xe6>
      break;
 8004330:	bf00      	nop
    }
  } 
  
  return status; 
 8004332:	7bfb      	ldrb	r3, [r7, #15]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004340:	b480      	push	{r7}
 8004342:	b089      	sub	sp, #36	; 0x24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800434e:	2300      	movs	r3, #0
 8004350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004352:	2300      	movs	r3, #0
 8004354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	e16b      	b.n	8004634 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800435c:	2201      	movs	r2, #1
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4013      	ands	r3, r2
 800436e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	429a      	cmp	r2, r3
 8004376:	f040 815a 	bne.w	800462e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d00b      	beq.n	800439a <HAL_GPIO_Init+0x5a>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d007      	beq.n	800439a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800438e:	2b11      	cmp	r3, #17
 8004390:	d003      	beq.n	800439a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b12      	cmp	r3, #18
 8004398:	d130      	bne.n	80043fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	2203      	movs	r2, #3
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4013      	ands	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043d0:	2201      	movs	r2, #1
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4013      	ands	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 0201 	and.w	r2, r3, #1
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d003      	beq.n	800443c <HAL_GPIO_Init+0xfc>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b12      	cmp	r3, #18
 800443a:	d123      	bne.n	8004484 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	08da      	lsrs	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3208      	adds	r2, #8
 8004444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004448:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	220f      	movs	r2, #15
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4313      	orrs	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	08da      	lsrs	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3208      	adds	r2, #8
 800447e:	69b9      	ldr	r1, [r7, #24]
 8004480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	2203      	movs	r2, #3
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 0203 	and.w	r2, r3, #3
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 80b4 	beq.w	800462e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	4b5f      	ldr	r3, [pc, #380]	; (8004648 <HAL_GPIO_Init+0x308>)
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	4a5e      	ldr	r2, [pc, #376]	; (8004648 <HAL_GPIO_Init+0x308>)
 80044d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044d4:	6453      	str	r3, [r2, #68]	; 0x44
 80044d6:	4b5c      	ldr	r3, [pc, #368]	; (8004648 <HAL_GPIO_Init+0x308>)
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044e2:	4a5a      	ldr	r2, [pc, #360]	; (800464c <HAL_GPIO_Init+0x30c>)
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	089b      	lsrs	r3, r3, #2
 80044e8:	3302      	adds	r3, #2
 80044ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	220f      	movs	r2, #15
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4013      	ands	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a51      	ldr	r2, [pc, #324]	; (8004650 <HAL_GPIO_Init+0x310>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d02b      	beq.n	8004566 <HAL_GPIO_Init+0x226>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a50      	ldr	r2, [pc, #320]	; (8004654 <HAL_GPIO_Init+0x314>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d025      	beq.n	8004562 <HAL_GPIO_Init+0x222>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a4f      	ldr	r2, [pc, #316]	; (8004658 <HAL_GPIO_Init+0x318>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d01f      	beq.n	800455e <HAL_GPIO_Init+0x21e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a4e      	ldr	r2, [pc, #312]	; (800465c <HAL_GPIO_Init+0x31c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d019      	beq.n	800455a <HAL_GPIO_Init+0x21a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a4d      	ldr	r2, [pc, #308]	; (8004660 <HAL_GPIO_Init+0x320>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d013      	beq.n	8004556 <HAL_GPIO_Init+0x216>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a4c      	ldr	r2, [pc, #304]	; (8004664 <HAL_GPIO_Init+0x324>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00d      	beq.n	8004552 <HAL_GPIO_Init+0x212>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a4b      	ldr	r2, [pc, #300]	; (8004668 <HAL_GPIO_Init+0x328>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d007      	beq.n	800454e <HAL_GPIO_Init+0x20e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a4a      	ldr	r2, [pc, #296]	; (800466c <HAL_GPIO_Init+0x32c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d101      	bne.n	800454a <HAL_GPIO_Init+0x20a>
 8004546:	2307      	movs	r3, #7
 8004548:	e00e      	b.n	8004568 <HAL_GPIO_Init+0x228>
 800454a:	2308      	movs	r3, #8
 800454c:	e00c      	b.n	8004568 <HAL_GPIO_Init+0x228>
 800454e:	2306      	movs	r3, #6
 8004550:	e00a      	b.n	8004568 <HAL_GPIO_Init+0x228>
 8004552:	2305      	movs	r3, #5
 8004554:	e008      	b.n	8004568 <HAL_GPIO_Init+0x228>
 8004556:	2304      	movs	r3, #4
 8004558:	e006      	b.n	8004568 <HAL_GPIO_Init+0x228>
 800455a:	2303      	movs	r3, #3
 800455c:	e004      	b.n	8004568 <HAL_GPIO_Init+0x228>
 800455e:	2302      	movs	r3, #2
 8004560:	e002      	b.n	8004568 <HAL_GPIO_Init+0x228>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <HAL_GPIO_Init+0x228>
 8004566:	2300      	movs	r3, #0
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	f002 0203 	and.w	r2, r2, #3
 800456e:	0092      	lsls	r2, r2, #2
 8004570:	4093      	lsls	r3, r2
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	4313      	orrs	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004578:	4934      	ldr	r1, [pc, #208]	; (800464c <HAL_GPIO_Init+0x30c>)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	089b      	lsrs	r3, r3, #2
 800457e:	3302      	adds	r3, #2
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004586:	4b3a      	ldr	r3, [pc, #232]	; (8004670 <HAL_GPIO_Init+0x330>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045aa:	4a31      	ldr	r2, [pc, #196]	; (8004670 <HAL_GPIO_Init+0x330>)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045b0:	4b2f      	ldr	r3, [pc, #188]	; (8004670 <HAL_GPIO_Init+0x330>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045d4:	4a26      	ldr	r2, [pc, #152]	; (8004670 <HAL_GPIO_Init+0x330>)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045da:	4b25      	ldr	r3, [pc, #148]	; (8004670 <HAL_GPIO_Init+0x330>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	43db      	mvns	r3, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4013      	ands	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045fe:	4a1c      	ldr	r2, [pc, #112]	; (8004670 <HAL_GPIO_Init+0x330>)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004604:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <HAL_GPIO_Init+0x330>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	43db      	mvns	r3, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4013      	ands	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004628:	4a11      	ldr	r2, [pc, #68]	; (8004670 <HAL_GPIO_Init+0x330>)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3301      	adds	r3, #1
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2b0f      	cmp	r3, #15
 8004638:	f67f ae90 	bls.w	800435c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800463c:	bf00      	nop
 800463e:	3724      	adds	r7, #36	; 0x24
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	40023800 	.word	0x40023800
 800464c:	40013800 	.word	0x40013800
 8004650:	40020000 	.word	0x40020000
 8004654:	40020400 	.word	0x40020400
 8004658:	40020800 	.word	0x40020800
 800465c:	40020c00 	.word	0x40020c00
 8004660:	40021000 	.word	0x40021000
 8004664:	40021400 	.word	0x40021400
 8004668:	40021800 	.word	0x40021800
 800466c:	40021c00 	.word	0x40021c00
 8004670:	40013c00 	.word	0x40013c00

08004674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
 8004680:	4613      	mov	r3, r2
 8004682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004684:	787b      	ldrb	r3, [r7, #1]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800468a:	887a      	ldrh	r2, [r7, #2]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004690:	e003      	b.n	800469a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004692:	887b      	ldrh	r3, [r7, #2]
 8004694:	041a      	lsls	r2, r3, #16
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	619a      	str	r2, [r3, #24]
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046b2:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d006      	beq.n	80046cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046be:	4a05      	ldr	r2, [pc, #20]	; (80046d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f806 	bl	80046d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40013c00 	.word	0x40013c00

080046d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e25b      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d075      	beq.n	80047fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800470e:	4ba3      	ldr	r3, [pc, #652]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b04      	cmp	r3, #4
 8004718:	d00c      	beq.n	8004734 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800471a:	4ba0      	ldr	r3, [pc, #640]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004722:	2b08      	cmp	r3, #8
 8004724:	d112      	bne.n	800474c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004726:	4b9d      	ldr	r3, [pc, #628]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004732:	d10b      	bne.n	800474c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	4b99      	ldr	r3, [pc, #612]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d05b      	beq.n	80047f8 <HAL_RCC_OscConfig+0x108>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d157      	bne.n	80047f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e236      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004754:	d106      	bne.n	8004764 <HAL_RCC_OscConfig+0x74>
 8004756:	4b91      	ldr	r3, [pc, #580]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a90      	ldr	r2, [pc, #576]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e01d      	b.n	80047a0 <HAL_RCC_OscConfig+0xb0>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0x98>
 800476e:	4b8b      	ldr	r3, [pc, #556]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a8a      	ldr	r2, [pc, #552]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b88      	ldr	r3, [pc, #544]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a87      	ldr	r2, [pc, #540]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e00b      	b.n	80047a0 <HAL_RCC_OscConfig+0xb0>
 8004788:	4b84      	ldr	r3, [pc, #528]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a83      	ldr	r2, [pc, #524]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 800478e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	4b81      	ldr	r3, [pc, #516]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a80      	ldr	r2, [pc, #512]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 800479a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800479e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d013      	beq.n	80047d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fe fd28 	bl	80031fc <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047b0:	f7fe fd24 	bl	80031fc <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	; 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e1fb      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	4b76      	ldr	r3, [pc, #472]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0xc0>
 80047ce:	e014      	b.n	80047fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fe fd14 	bl	80031fc <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fe fd10 	bl	80031fc <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e1e7      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ea:	4b6c      	ldr	r3, [pc, #432]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0xe8>
 80047f6:	e000      	b.n	80047fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d063      	beq.n	80048ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004806:	4b65      	ldr	r3, [pc, #404]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 030c 	and.w	r3, r3, #12
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004812:	4b62      	ldr	r3, [pc, #392]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800481a:	2b08      	cmp	r3, #8
 800481c:	d11c      	bne.n	8004858 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800481e:	4b5f      	ldr	r3, [pc, #380]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d116      	bne.n	8004858 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482a:	4b5c      	ldr	r3, [pc, #368]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <HAL_RCC_OscConfig+0x152>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d001      	beq.n	8004842 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e1bb      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004842:	4b56      	ldr	r3, [pc, #344]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4952      	ldr	r1, [pc, #328]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004856:	e03a      	b.n	80048ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d020      	beq.n	80048a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004860:	4b4f      	ldr	r3, [pc, #316]	; (80049a0 <HAL_RCC_OscConfig+0x2b0>)
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fe fcc9 	bl	80031fc <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800486e:	f7fe fcc5 	bl	80031fc <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e19c      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004880:	4b46      	ldr	r3, [pc, #280]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0f0      	beq.n	800486e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488c:	4b43      	ldr	r3, [pc, #268]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4940      	ldr	r1, [pc, #256]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 800489c:	4313      	orrs	r3, r2
 800489e:	600b      	str	r3, [r1, #0]
 80048a0:	e015      	b.n	80048ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a2:	4b3f      	ldr	r3, [pc, #252]	; (80049a0 <HAL_RCC_OscConfig+0x2b0>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fe fca8 	bl	80031fc <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b0:	f7fe fca4 	bl	80031fc <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e17b      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c2:	4b36      	ldr	r3, [pc, #216]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d030      	beq.n	800493c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d016      	beq.n	8004910 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e2:	4b30      	ldr	r3, [pc, #192]	; (80049a4 <HAL_RCC_OscConfig+0x2b4>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e8:	f7fe fc88 	bl	80031fc <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048f0:	f7fe fc84 	bl	80031fc <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e15b      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004902:	4b26      	ldr	r3, [pc, #152]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x200>
 800490e:	e015      	b.n	800493c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004910:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <HAL_RCC_OscConfig+0x2b4>)
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004916:	f7fe fc71 	bl	80031fc <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491e:	f7fe fc6d 	bl	80031fc <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e144      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004930:	4b1a      	ldr	r3, [pc, #104]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1f0      	bne.n	800491e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80a0 	beq.w	8004a8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800494a:	2300      	movs	r3, #0
 800494c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10f      	bne.n	800497a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800495a:	2300      	movs	r3, #0
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	4b0f      	ldr	r3, [pc, #60]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	4a0e      	ldr	r2, [pc, #56]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 8004964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004968:	6413      	str	r3, [r2, #64]	; 0x40
 800496a:	4b0c      	ldr	r3, [pc, #48]	; (800499c <HAL_RCC_OscConfig+0x2ac>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004976:	2301      	movs	r3, #1
 8004978:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <HAL_RCC_OscConfig+0x2b8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	2b00      	cmp	r3, #0
 8004984:	d121      	bne.n	80049ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004986:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <HAL_RCC_OscConfig+0x2b8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a07      	ldr	r2, [pc, #28]	; (80049a8 <HAL_RCC_OscConfig+0x2b8>)
 800498c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004992:	f7fe fc33 	bl	80031fc <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004998:	e011      	b.n	80049be <HAL_RCC_OscConfig+0x2ce>
 800499a:	bf00      	nop
 800499c:	40023800 	.word	0x40023800
 80049a0:	42470000 	.word	0x42470000
 80049a4:	42470e80 	.word	0x42470e80
 80049a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ac:	f7fe fc26 	bl	80031fc <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e0fd      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049be:	4b81      	ldr	r3, [pc, #516]	; (8004bc4 <HAL_RCC_OscConfig+0x4d4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d106      	bne.n	80049e0 <HAL_RCC_OscConfig+0x2f0>
 80049d2:	4b7d      	ldr	r3, [pc, #500]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	4a7c      	ldr	r2, [pc, #496]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	6713      	str	r3, [r2, #112]	; 0x70
 80049de:	e01c      	b.n	8004a1a <HAL_RCC_OscConfig+0x32a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b05      	cmp	r3, #5
 80049e6:	d10c      	bne.n	8004a02 <HAL_RCC_OscConfig+0x312>
 80049e8:	4b77      	ldr	r3, [pc, #476]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ec:	4a76      	ldr	r2, [pc, #472]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 80049ee:	f043 0304 	orr.w	r3, r3, #4
 80049f2:	6713      	str	r3, [r2, #112]	; 0x70
 80049f4:	4b74      	ldr	r3, [pc, #464]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f8:	4a73      	ldr	r2, [pc, #460]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004a00:	e00b      	b.n	8004a1a <HAL_RCC_OscConfig+0x32a>
 8004a02:	4b71      	ldr	r3, [pc, #452]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	4a70      	ldr	r2, [pc, #448]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0e:	4b6e      	ldr	r3, [pc, #440]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	4a6d      	ldr	r2, [pc, #436]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004a14:	f023 0304 	bic.w	r3, r3, #4
 8004a18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d015      	beq.n	8004a4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a22:	f7fe fbeb 	bl	80031fc <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a28:	e00a      	b.n	8004a40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	f7fe fbe7 	bl	80031fc <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e0bc      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a40:	4b61      	ldr	r3, [pc, #388]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0ee      	beq.n	8004a2a <HAL_RCC_OscConfig+0x33a>
 8004a4c:	e014      	b.n	8004a78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4e:	f7fe fbd5 	bl	80031fc <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a56:	f7fe fbd1 	bl	80031fc <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e0a6      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6c:	4b56      	ldr	r3, [pc, #344]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1ee      	bne.n	8004a56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d105      	bne.n	8004a8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7e:	4b52      	ldr	r3, [pc, #328]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	4a51      	ldr	r2, [pc, #324]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 8092 	beq.w	8004bb8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a94:	4b4c      	ldr	r3, [pc, #304]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 030c 	and.w	r3, r3, #12
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d05c      	beq.n	8004b5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d141      	bne.n	8004b2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa8:	4b48      	ldr	r3, [pc, #288]	; (8004bcc <HAL_RCC_OscConfig+0x4dc>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aae:	f7fe fba5 	bl	80031fc <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab6:	f7fe fba1 	bl	80031fc <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e078      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac8:	4b3f      	ldr	r3, [pc, #252]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1f0      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	019b      	lsls	r3, r3, #6
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	3b01      	subs	r3, #1
 8004aee:	041b      	lsls	r3, r3, #16
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	061b      	lsls	r3, r3, #24
 8004af8:	4933      	ldr	r1, [pc, #204]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004afe:	4b33      	ldr	r3, [pc, #204]	; (8004bcc <HAL_RCC_OscConfig+0x4dc>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7fe fb7a 	bl	80031fc <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b0c:	f7fe fb76 	bl	80031fc <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e04d      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1e:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0x41c>
 8004b2a:	e045      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2c:	4b27      	ldr	r3, [pc, #156]	; (8004bcc <HAL_RCC_OscConfig+0x4dc>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b32:	f7fe fb63 	bl	80031fc <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7fe fb5f 	bl	80031fc <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e036      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4c:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f0      	bne.n	8004b3a <HAL_RCC_OscConfig+0x44a>
 8004b58:	e02e      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e029      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b66:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d11c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d115      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b8e:	4013      	ands	r3, r2
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d10d      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d106      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40007000 	.word	0x40007000
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	42470060 	.word	0x42470060

08004bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0cc      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004be4:	4b68      	ldr	r3, [pc, #416]	; (8004d88 <HAL_RCC_ClockConfig+0x1b8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d90c      	bls.n	8004c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf2:	4b65      	ldr	r3, [pc, #404]	; (8004d88 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b63      	ldr	r3, [pc, #396]	; (8004d88 <HAL_RCC_ClockConfig+0x1b8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0b8      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d020      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c24:	4b59      	ldr	r3, [pc, #356]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	4a58      	ldr	r2, [pc, #352]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c3c:	4b53      	ldr	r3, [pc, #332]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	4a52      	ldr	r2, [pc, #328]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c48:	4b50      	ldr	r3, [pc, #320]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	494d      	ldr	r1, [pc, #308]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d044      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d107      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6e:	4b47      	ldr	r3, [pc, #284]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d119      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e07f      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d003      	beq.n	8004c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d107      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8e:	4b3f      	ldr	r3, [pc, #252]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e06f      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9e:	4b3b      	ldr	r3, [pc, #236]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e067      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cae:	4b37      	ldr	r3, [pc, #220]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f023 0203 	bic.w	r2, r3, #3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	4934      	ldr	r1, [pc, #208]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc0:	f7fe fa9c 	bl	80031fc <HAL_GetTick>
 8004cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc6:	e00a      	b.n	8004cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc8:	f7fe fa98 	bl	80031fc <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e04f      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cde:	4b2b      	ldr	r3, [pc, #172]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 020c 	and.w	r2, r3, #12
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d1eb      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b25      	ldr	r3, [pc, #148]	; (8004d88 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d20c      	bcs.n	8004d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfe:	4b22      	ldr	r3, [pc, #136]	; (8004d88 <HAL_RCC_ClockConfig+0x1b8>)
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d06:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <HAL_RCC_ClockConfig+0x1b8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d001      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e032      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d24:	4b19      	ldr	r3, [pc, #100]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4916      	ldr	r1, [pc, #88]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	490e      	ldr	r1, [pc, #56]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d56:	f000 f821 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004d5a:	4601      	mov	r1, r0
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	4a0a      	ldr	r2, [pc, #40]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004d68:	5cd3      	ldrb	r3, [r2, r3]
 8004d6a:	fa21 f303 	lsr.w	r3, r1, r3
 8004d6e:	4a09      	ldr	r2, [pc, #36]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d72:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <HAL_RCC_ClockConfig+0x1c8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe f9fc 	bl	8003174 <HAL_InitTick>

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40023c00 	.word	0x40023c00
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	08007278 	.word	0x08007278
 8004d94:	20000004 	.word	0x20000004
 8004d98:	20000008 	.word	0x20000008

08004d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	607b      	str	r3, [r7, #4]
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	2300      	movs	r3, #0
 8004dac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004db2:	4b50      	ldr	r3, [pc, #320]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d007      	beq.n	8004dce <HAL_RCC_GetSysClockFreq+0x32>
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d008      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x38>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f040 808d 	bne.w	8004ee2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dc8:	4b4b      	ldr	r3, [pc, #300]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004dca:	60bb      	str	r3, [r7, #8]
       break;
 8004dcc:	e08c      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dce:	4b4b      	ldr	r3, [pc, #300]	; (8004efc <HAL_RCC_GetSysClockFreq+0x160>)
 8004dd0:	60bb      	str	r3, [r7, #8]
      break;
 8004dd2:	e089      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dd4:	4b47      	ldr	r3, [pc, #284]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ddc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dde:	4b45      	ldr	r3, [pc, #276]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d023      	beq.n	8004e32 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dea:	4b42      	ldr	r3, [pc, #264]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	099b      	lsrs	r3, r3, #6
 8004df0:	f04f 0400 	mov.w	r4, #0
 8004df4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	ea03 0501 	and.w	r5, r3, r1
 8004e00:	ea04 0602 	and.w	r6, r4, r2
 8004e04:	4a3d      	ldr	r2, [pc, #244]	; (8004efc <HAL_RCC_GetSysClockFreq+0x160>)
 8004e06:	fb02 f106 	mul.w	r1, r2, r6
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	fb02 f205 	mul.w	r2, r2, r5
 8004e10:	440a      	add	r2, r1
 8004e12:	493a      	ldr	r1, [pc, #232]	; (8004efc <HAL_RCC_GetSysClockFreq+0x160>)
 8004e14:	fba5 0101 	umull	r0, r1, r5, r1
 8004e18:	1853      	adds	r3, r2, r1
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f04f 0400 	mov.w	r4, #0
 8004e22:	461a      	mov	r2, r3
 8004e24:	4623      	mov	r3, r4
 8004e26:	f7fb ff2f 	bl	8000c88 <__aeabi_uldivmod>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e049      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e32:	4b30      	ldr	r3, [pc, #192]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	099b      	lsrs	r3, r3, #6
 8004e38:	f04f 0400 	mov.w	r4, #0
 8004e3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	ea03 0501 	and.w	r5, r3, r1
 8004e48:	ea04 0602 	and.w	r6, r4, r2
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	4632      	mov	r2, r6
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	f04f 0400 	mov.w	r4, #0
 8004e58:	0154      	lsls	r4, r2, #5
 8004e5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e5e:	014b      	lsls	r3, r1, #5
 8004e60:	4619      	mov	r1, r3
 8004e62:	4622      	mov	r2, r4
 8004e64:	1b49      	subs	r1, r1, r5
 8004e66:	eb62 0206 	sbc.w	r2, r2, r6
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	f04f 0400 	mov.w	r4, #0
 8004e72:	0194      	lsls	r4, r2, #6
 8004e74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e78:	018b      	lsls	r3, r1, #6
 8004e7a:	1a5b      	subs	r3, r3, r1
 8004e7c:	eb64 0402 	sbc.w	r4, r4, r2
 8004e80:	f04f 0100 	mov.w	r1, #0
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	00e2      	lsls	r2, r4, #3
 8004e8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e8e:	00d9      	lsls	r1, r3, #3
 8004e90:	460b      	mov	r3, r1
 8004e92:	4614      	mov	r4, r2
 8004e94:	195b      	adds	r3, r3, r5
 8004e96:	eb44 0406 	adc.w	r4, r4, r6
 8004e9a:	f04f 0100 	mov.w	r1, #0
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	02a2      	lsls	r2, r4, #10
 8004ea4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ea8:	0299      	lsls	r1, r3, #10
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4614      	mov	r4, r2
 8004eae:	4618      	mov	r0, r3
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f04f 0400 	mov.w	r4, #0
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4623      	mov	r3, r4
 8004ebc:	f7fb fee4 	bl	8000c88 <__aeabi_uldivmod>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	0c1b      	lsrs	r3, r3, #16
 8004ecc:	f003 0303 	and.w	r3, r3, #3
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ede:	60bb      	str	r3, [r7, #8]
      break;
 8004ee0:	e002      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ee4:	60bb      	str	r3, [r7, #8]
      break;
 8004ee6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	00f42400 	.word	0x00f42400
 8004efc:	017d7840 	.word	0x017d7840

08004f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f04:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f06:	681b      	ldr	r3, [r3, #0]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000004 	.word	0x20000004

08004f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f1c:	f7ff fff0 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f20:	4601      	mov	r1, r0
 8004f22:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	0a9b      	lsrs	r3, r3, #10
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	4a03      	ldr	r2, [pc, #12]	; (8004f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f2e:	5cd3      	ldrb	r3, [r2, r3]
 8004f30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	08007288 	.word	0x08007288

08004f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f44:	f7ff ffdc 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f48:	4601      	mov	r1, r0
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	0b5b      	lsrs	r3, r3, #13
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	4a03      	ldr	r2, [pc, #12]	; (8004f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f56:	5cd3      	ldrb	r3, [r2, r3]
 8004f58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40023800 	.word	0x40023800
 8004f64:	08007288 	.word	0x08007288

08004f68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	220f      	movs	r2, #15
 8004f76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f78:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 0203 	and.w	r2, r3, #3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f84:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f90:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	08db      	lsrs	r3, r3, #3
 8004fa2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004faa:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <HAL_RCC_GetClockConfig+0x60>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 020f 	and.w	r2, r3, #15
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	601a      	str	r2, [r3, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40023c00 	.word	0x40023c00

08004fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e01d      	b.n	800501a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fd fea8 	bl	8002d48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3304      	adds	r3, #4
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f000 fa48 	bl	80054a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2201      	movs	r2, #1
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fc82 	bl	8005940 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a15      	ldr	r2, [pc, #84]	; (8005098 <HAL_TIM_PWM_Start+0x74>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_TIM_PWM_Start+0x2c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a14      	ldr	r2, [pc, #80]	; (800509c <HAL_TIM_PWM_Start+0x78>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d101      	bne.n	8005054 <HAL_TIM_PWM_Start+0x30>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <HAL_TIM_PWM_Start+0x32>
 8005054:	2300      	movs	r3, #0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005068:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b06      	cmp	r3, #6
 800507a:	d007      	beq.n	800508c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40010000 	.word	0x40010000
 800509c:	40010400 	.word	0x40010400

080050a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d122      	bne.n	80050fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d11b      	bne.n	80050fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0202 	mvn.w	r2, #2
 80050cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f9be 	bl	8005464 <HAL_TIM_IC_CaptureCallback>
 80050e8:	e005      	b.n	80050f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f9b0 	bl	8005450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f9c1 	bl	8005478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b04      	cmp	r3, #4
 8005108:	d122      	bne.n	8005150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b04      	cmp	r3, #4
 8005116:	d11b      	bne.n	8005150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0204 	mvn.w	r2, #4
 8005120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f994 	bl	8005464 <HAL_TIM_IC_CaptureCallback>
 800513c:	e005      	b.n	800514a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f986 	bl	8005450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f997 	bl	8005478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b08      	cmp	r3, #8
 800515c:	d122      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b08      	cmp	r3, #8
 800516a:	d11b      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0208 	mvn.w	r2, #8
 8005174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2204      	movs	r2, #4
 800517a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f96a 	bl	8005464 <HAL_TIM_IC_CaptureCallback>
 8005190:	e005      	b.n	800519e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f95c 	bl	8005450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f96d 	bl	8005478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d122      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d11b      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0210 	mvn.w	r2, #16
 80051c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2208      	movs	r2, #8
 80051ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f940 	bl	8005464 <HAL_TIM_IC_CaptureCallback>
 80051e4:	e005      	b.n	80051f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f932 	bl	8005450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f943 	bl	8005478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b01      	cmp	r3, #1
 8005204:	d10e      	bne.n	8005224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b01      	cmp	r3, #1
 8005212:	d107      	bne.n	8005224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0201 	mvn.w	r2, #1
 800521c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f90c 	bl	800543c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522e:	2b80      	cmp	r3, #128	; 0x80
 8005230:	d10e      	bne.n	8005250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523c:	2b80      	cmp	r3, #128	; 0x80
 800523e:	d107      	bne.n	8005250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fc24 	bl	8005a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d10e      	bne.n	800527c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d107      	bne.n	800527c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f908 	bl	800548c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b20      	cmp	r3, #32
 8005288:	d10e      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b20      	cmp	r3, #32
 8005296:	d107      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0220 	mvn.w	r2, #32
 80052a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fbee 	bl	8005a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a8:	bf00      	nop
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e0b4      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x184>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b0c      	cmp	r3, #12
 80052de:	f200 809f 	bhi.w	8005420 <HAL_TIM_PWM_ConfigChannel+0x170>
 80052e2:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	0800531d 	.word	0x0800531d
 80052ec:	08005421 	.word	0x08005421
 80052f0:	08005421 	.word	0x08005421
 80052f4:	08005421 	.word	0x08005421
 80052f8:	0800535d 	.word	0x0800535d
 80052fc:	08005421 	.word	0x08005421
 8005300:	08005421 	.word	0x08005421
 8005304:	08005421 	.word	0x08005421
 8005308:	0800539f 	.word	0x0800539f
 800530c:	08005421 	.word	0x08005421
 8005310:	08005421 	.word	0x08005421
 8005314:	08005421 	.word	0x08005421
 8005318:	080053df 	.word	0x080053df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 f95c 	bl	80055e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0208 	orr.w	r2, r2, #8
 8005336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0204 	bic.w	r2, r2, #4
 8005346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6999      	ldr	r1, [r3, #24]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	619a      	str	r2, [r3, #24]
      break;
 800535a:	e062      	b.n	8005422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 f9ac 	bl	80056c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699a      	ldr	r2, [r3, #24]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6999      	ldr	r1, [r3, #24]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	021a      	lsls	r2, r3, #8
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	619a      	str	r2, [r3, #24]
      break;
 800539c:	e041      	b.n	8005422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fa01 	bl	80057ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69da      	ldr	r2, [r3, #28]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0208 	orr.w	r2, r2, #8
 80053b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69da      	ldr	r2, [r3, #28]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0204 	bic.w	r2, r2, #4
 80053c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69d9      	ldr	r1, [r3, #28]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	61da      	str	r2, [r3, #28]
      break;
 80053dc:	e021      	b.n	8005422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fa55 	bl	8005894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69d9      	ldr	r1, [r3, #28]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	021a      	lsls	r2, r3, #8
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	61da      	str	r2, [r3, #28]
      break;
 800541e:	e000      	b.n	8005422 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005420:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a40      	ldr	r2, [pc, #256]	; (80055b4 <TIM_Base_SetConfig+0x114>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d013      	beq.n	80054e0 <TIM_Base_SetConfig+0x40>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054be:	d00f      	beq.n	80054e0 <TIM_Base_SetConfig+0x40>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a3d      	ldr	r2, [pc, #244]	; (80055b8 <TIM_Base_SetConfig+0x118>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00b      	beq.n	80054e0 <TIM_Base_SetConfig+0x40>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a3c      	ldr	r2, [pc, #240]	; (80055bc <TIM_Base_SetConfig+0x11c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d007      	beq.n	80054e0 <TIM_Base_SetConfig+0x40>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a3b      	ldr	r2, [pc, #236]	; (80055c0 <TIM_Base_SetConfig+0x120>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d003      	beq.n	80054e0 <TIM_Base_SetConfig+0x40>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a3a      	ldr	r2, [pc, #232]	; (80055c4 <TIM_Base_SetConfig+0x124>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d108      	bne.n	80054f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a2f      	ldr	r2, [pc, #188]	; (80055b4 <TIM_Base_SetConfig+0x114>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d02b      	beq.n	8005552 <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005500:	d027      	beq.n	8005552 <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2c      	ldr	r2, [pc, #176]	; (80055b8 <TIM_Base_SetConfig+0x118>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d023      	beq.n	8005552 <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a2b      	ldr	r2, [pc, #172]	; (80055bc <TIM_Base_SetConfig+0x11c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d01f      	beq.n	8005552 <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a2a      	ldr	r2, [pc, #168]	; (80055c0 <TIM_Base_SetConfig+0x120>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d01b      	beq.n	8005552 <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a29      	ldr	r2, [pc, #164]	; (80055c4 <TIM_Base_SetConfig+0x124>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d017      	beq.n	8005552 <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a28      	ldr	r2, [pc, #160]	; (80055c8 <TIM_Base_SetConfig+0x128>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d013      	beq.n	8005552 <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a27      	ldr	r2, [pc, #156]	; (80055cc <TIM_Base_SetConfig+0x12c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00f      	beq.n	8005552 <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a26      	ldr	r2, [pc, #152]	; (80055d0 <TIM_Base_SetConfig+0x130>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00b      	beq.n	8005552 <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a25      	ldr	r2, [pc, #148]	; (80055d4 <TIM_Base_SetConfig+0x134>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d007      	beq.n	8005552 <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a24      	ldr	r2, [pc, #144]	; (80055d8 <TIM_Base_SetConfig+0x138>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d003      	beq.n	8005552 <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a23      	ldr	r2, [pc, #140]	; (80055dc <TIM_Base_SetConfig+0x13c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d108      	bne.n	8005564 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a0a      	ldr	r2, [pc, #40]	; (80055b4 <TIM_Base_SetConfig+0x114>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d003      	beq.n	8005598 <TIM_Base_SetConfig+0xf8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a0c      	ldr	r2, [pc, #48]	; (80055c4 <TIM_Base_SetConfig+0x124>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d103      	bne.n	80055a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	615a      	str	r2, [r3, #20]
}
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40000400 	.word	0x40000400
 80055bc:	40000800 	.word	0x40000800
 80055c0:	40000c00 	.word	0x40000c00
 80055c4:	40010400 	.word	0x40010400
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40014400 	.word	0x40014400
 80055d0:	40014800 	.word	0x40014800
 80055d4:	40001800 	.word	0x40001800
 80055d8:	40001c00 	.word	0x40001c00
 80055dc:	40002000 	.word	0x40002000

080055e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f023 0201 	bic.w	r2, r3, #1
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0303 	bic.w	r3, r3, #3
 8005616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f023 0302 	bic.w	r3, r3, #2
 8005628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a20      	ldr	r2, [pc, #128]	; (80056b8 <TIM_OC1_SetConfig+0xd8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_OC1_SetConfig+0x64>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a1f      	ldr	r2, [pc, #124]	; (80056bc <TIM_OC1_SetConfig+0xdc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d10c      	bne.n	800565e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 0308 	bic.w	r3, r3, #8
 800564a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f023 0304 	bic.w	r3, r3, #4
 800565c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <TIM_OC1_SetConfig+0xd8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d003      	beq.n	800566e <TIM_OC1_SetConfig+0x8e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a14      	ldr	r2, [pc, #80]	; (80056bc <TIM_OC1_SetConfig+0xdc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d111      	bne.n	8005692 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800567c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	621a      	str	r2, [r3, #32]
}
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40010000 	.word	0x40010000
 80056bc:	40010400 	.word	0x40010400

080056c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f023 0210 	bic.w	r2, r3, #16
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4313      	orrs	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f023 0320 	bic.w	r3, r3, #32
 800570a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a22      	ldr	r2, [pc, #136]	; (80057a4 <TIM_OC2_SetConfig+0xe4>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d003      	beq.n	8005728 <TIM_OC2_SetConfig+0x68>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a21      	ldr	r2, [pc, #132]	; (80057a8 <TIM_OC2_SetConfig+0xe8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d10d      	bne.n	8005744 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4313      	orrs	r3, r2
 800573a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005742:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a17      	ldr	r2, [pc, #92]	; (80057a4 <TIM_OC2_SetConfig+0xe4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_OC2_SetConfig+0x94>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <TIM_OC2_SetConfig+0xe8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d113      	bne.n	800577c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800575a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40010400 	.word	0x40010400

080057ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0303 	bic.w	r3, r3, #3
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a21      	ldr	r2, [pc, #132]	; (800588c <TIM_OC3_SetConfig+0xe0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_OC3_SetConfig+0x66>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a20      	ldr	r2, [pc, #128]	; (8005890 <TIM_OC3_SetConfig+0xe4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d10d      	bne.n	800582e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800582c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a16      	ldr	r2, [pc, #88]	; (800588c <TIM_OC3_SetConfig+0xe0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d003      	beq.n	800583e <TIM_OC3_SetConfig+0x92>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a15      	ldr	r2, [pc, #84]	; (8005890 <TIM_OC3_SetConfig+0xe4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d113      	bne.n	8005866 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800584c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	621a      	str	r2, [r3, #32]
}
 8005880:	bf00      	nop
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	40010000 	.word	0x40010000
 8005890:	40010400 	.word	0x40010400

08005894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	021b      	lsls	r3, r3, #8
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	031b      	lsls	r3, r3, #12
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a12      	ldr	r2, [pc, #72]	; (8005938 <TIM_OC4_SetConfig+0xa4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_OC4_SetConfig+0x68>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a11      	ldr	r2, [pc, #68]	; (800593c <TIM_OC4_SetConfig+0xa8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d109      	bne.n	8005910 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	019b      	lsls	r3, r3, #6
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4313      	orrs	r3, r2
 800590e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	621a      	str	r2, [r3, #32]
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	40010000 	.word	0x40010000
 800593c:	40010400 	.word	0x40010400

08005940 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	2201      	movs	r2, #1
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a1a      	ldr	r2, [r3, #32]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	43db      	mvns	r3, r3
 8005962:	401a      	ands	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a1a      	ldr	r2, [r3, #32]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	fa01 f303 	lsl.w	r3, r1, r3
 8005978:	431a      	orrs	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e05a      	b.n	8005a5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a21      	ldr	r2, [pc, #132]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d022      	beq.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f0:	d01d      	beq.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a1d      	ldr	r2, [pc, #116]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d018      	beq.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a1b      	ldr	r2, [pc, #108]	; (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d013      	beq.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a1a      	ldr	r2, [pc, #104]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00e      	beq.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d009      	beq.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a17      	ldr	r2, [pc, #92]	; (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d004      	beq.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d10c      	bne.n	8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40010000 	.word	0x40010000
 8005a6c:	40000400 	.word	0x40000400
 8005a70:	40000800 	.word	0x40000800
 8005a74:	40000c00 	.word	0x40000c00
 8005a78:	40010400 	.word	0x40010400
 8005a7c:	40014000 	.word	0x40014000
 8005a80:	40001800 	.word	0x40001800

08005a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e03f      	b.n	8005b3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fd f99a 	bl	8002e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2224      	movs	r2, #36	; 0x24
 8005adc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f90b 	bl	8005d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	691a      	ldr	r2, [r3, #16]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695a      	ldr	r2, [r3, #20]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b088      	sub	sp, #32
 8005b4a:	af02      	add	r7, sp, #8
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	603b      	str	r3, [r7, #0]
 8005b52:	4613      	mov	r3, r2
 8005b54:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	f040 8083 	bne.w	8005c6e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_UART_Transmit+0x2e>
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e07b      	b.n	8005c70 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_UART_Transmit+0x40>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e074      	b.n	8005c70 <HAL_UART_Transmit+0x12a>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2221      	movs	r2, #33	; 0x21
 8005b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005b9c:	f7fd fb2e 	bl	80031fc <HAL_GetTick>
 8005ba0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	88fa      	ldrh	r2, [r7, #6]
 8005ba6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	88fa      	ldrh	r2, [r7, #6]
 8005bac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005bb6:	e042      	b.n	8005c3e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bce:	d122      	bne.n	8005c16 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2180      	movs	r1, #128	; 0x80
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f84c 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e042      	b.n	8005c70 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bfc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d103      	bne.n	8005c0e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	3302      	adds	r3, #2
 8005c0a:	60bb      	str	r3, [r7, #8]
 8005c0c:	e017      	b.n	8005c3e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	3301      	adds	r3, #1
 8005c12:	60bb      	str	r3, [r7, #8]
 8005c14:	e013      	b.n	8005c3e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2180      	movs	r1, #128	; 0x80
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f829 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e01f      	b.n	8005c70 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	60ba      	str	r2, [r7, #8]
 8005c36:	781a      	ldrb	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1b7      	bne.n	8005bb8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2140      	movs	r1, #64	; 0x40
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f810 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e006      	b.n	8005c70 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e000      	b.n	8005c70 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005c6e:	2302      	movs	r3, #2
  }
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	4613      	mov	r3, r2
 8005c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c88:	e02c      	b.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c90:	d028      	beq.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c98:	f7fd fab0 	bl	80031fc <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d21d      	bcs.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cb6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695a      	ldr	r2, [r3, #20]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0201 	bic.w	r2, r2, #1
 8005cc6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e00f      	b.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	4013      	ands	r3, r2
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	bf0c      	ite	eq
 8005cf4:	2301      	moveq	r3, #1
 8005cf6:	2300      	movne	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	79fb      	ldrb	r3, [r7, #7]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d0c3      	beq.n	8005c8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d4e:	f023 030c 	bic.w	r3, r3, #12
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	68f9      	ldr	r1, [r7, #12]
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699a      	ldr	r2, [r3, #24]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d7a:	f040 818b 	bne.w	8006094 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4ac1      	ldr	r2, [pc, #772]	; (8006088 <UART_SetConfig+0x37c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d005      	beq.n	8005d94 <UART_SetConfig+0x88>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4abf      	ldr	r2, [pc, #764]	; (800608c <UART_SetConfig+0x380>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	f040 80bd 	bne.w	8005f0e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d94:	f7ff f8d4 	bl	8004f40 <HAL_RCC_GetPCLK2Freq>
 8005d98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	461d      	mov	r5, r3
 8005d9e:	f04f 0600 	mov.w	r6, #0
 8005da2:	46a8      	mov	r8, r5
 8005da4:	46b1      	mov	r9, r6
 8005da6:	eb18 0308 	adds.w	r3, r8, r8
 8005daa:	eb49 0409 	adc.w	r4, r9, r9
 8005dae:	4698      	mov	r8, r3
 8005db0:	46a1      	mov	r9, r4
 8005db2:	eb18 0805 	adds.w	r8, r8, r5
 8005db6:	eb49 0906 	adc.w	r9, r9, r6
 8005dba:	f04f 0100 	mov.w	r1, #0
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005dc6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005dca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005dce:	4688      	mov	r8, r1
 8005dd0:	4691      	mov	r9, r2
 8005dd2:	eb18 0005 	adds.w	r0, r8, r5
 8005dd6:	eb49 0106 	adc.w	r1, r9, r6
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	461d      	mov	r5, r3
 8005de0:	f04f 0600 	mov.w	r6, #0
 8005de4:	196b      	adds	r3, r5, r5
 8005de6:	eb46 0406 	adc.w	r4, r6, r6
 8005dea:	461a      	mov	r2, r3
 8005dec:	4623      	mov	r3, r4
 8005dee:	f7fa ff4b 	bl	8000c88 <__aeabi_uldivmod>
 8005df2:	4603      	mov	r3, r0
 8005df4:	460c      	mov	r4, r1
 8005df6:	461a      	mov	r2, r3
 8005df8:	4ba5      	ldr	r3, [pc, #660]	; (8006090 <UART_SetConfig+0x384>)
 8005dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	461d      	mov	r5, r3
 8005e08:	f04f 0600 	mov.w	r6, #0
 8005e0c:	46a9      	mov	r9, r5
 8005e0e:	46b2      	mov	sl, r6
 8005e10:	eb19 0309 	adds.w	r3, r9, r9
 8005e14:	eb4a 040a 	adc.w	r4, sl, sl
 8005e18:	4699      	mov	r9, r3
 8005e1a:	46a2      	mov	sl, r4
 8005e1c:	eb19 0905 	adds.w	r9, r9, r5
 8005e20:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e24:	f04f 0100 	mov.w	r1, #0
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e38:	4689      	mov	r9, r1
 8005e3a:	4692      	mov	sl, r2
 8005e3c:	eb19 0005 	adds.w	r0, r9, r5
 8005e40:	eb4a 0106 	adc.w	r1, sl, r6
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	461d      	mov	r5, r3
 8005e4a:	f04f 0600 	mov.w	r6, #0
 8005e4e:	196b      	adds	r3, r5, r5
 8005e50:	eb46 0406 	adc.w	r4, r6, r6
 8005e54:	461a      	mov	r2, r3
 8005e56:	4623      	mov	r3, r4
 8005e58:	f7fa ff16 	bl	8000c88 <__aeabi_uldivmod>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	461a      	mov	r2, r3
 8005e62:	4b8b      	ldr	r3, [pc, #556]	; (8006090 <UART_SetConfig+0x384>)
 8005e64:	fba3 1302 	umull	r1, r3, r3, r2
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	2164      	movs	r1, #100	; 0x64
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	3332      	adds	r3, #50	; 0x32
 8005e76:	4a86      	ldr	r2, [pc, #536]	; (8006090 <UART_SetConfig+0x384>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e84:	4498      	add	r8, r3
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	461d      	mov	r5, r3
 8005e8a:	f04f 0600 	mov.w	r6, #0
 8005e8e:	46a9      	mov	r9, r5
 8005e90:	46b2      	mov	sl, r6
 8005e92:	eb19 0309 	adds.w	r3, r9, r9
 8005e96:	eb4a 040a 	adc.w	r4, sl, sl
 8005e9a:	4699      	mov	r9, r3
 8005e9c:	46a2      	mov	sl, r4
 8005e9e:	eb19 0905 	adds.w	r9, r9, r5
 8005ea2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ea6:	f04f 0100 	mov.w	r1, #0
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005eb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005eba:	4689      	mov	r9, r1
 8005ebc:	4692      	mov	sl, r2
 8005ebe:	eb19 0005 	adds.w	r0, r9, r5
 8005ec2:	eb4a 0106 	adc.w	r1, sl, r6
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	461d      	mov	r5, r3
 8005ecc:	f04f 0600 	mov.w	r6, #0
 8005ed0:	196b      	adds	r3, r5, r5
 8005ed2:	eb46 0406 	adc.w	r4, r6, r6
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	4623      	mov	r3, r4
 8005eda:	f7fa fed5 	bl	8000c88 <__aeabi_uldivmod>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4b6a      	ldr	r3, [pc, #424]	; (8006090 <UART_SetConfig+0x384>)
 8005ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	2164      	movs	r1, #100	; 0x64
 8005eee:	fb01 f303 	mul.w	r3, r1, r3
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	3332      	adds	r3, #50	; 0x32
 8005ef8:	4a65      	ldr	r2, [pc, #404]	; (8006090 <UART_SetConfig+0x384>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	f003 0207 	and.w	r2, r3, #7
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4442      	add	r2, r8
 8005f0a:	609a      	str	r2, [r3, #8]
 8005f0c:	e26f      	b.n	80063ee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f0e:	f7ff f803 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 8005f12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	461d      	mov	r5, r3
 8005f18:	f04f 0600 	mov.w	r6, #0
 8005f1c:	46a8      	mov	r8, r5
 8005f1e:	46b1      	mov	r9, r6
 8005f20:	eb18 0308 	adds.w	r3, r8, r8
 8005f24:	eb49 0409 	adc.w	r4, r9, r9
 8005f28:	4698      	mov	r8, r3
 8005f2a:	46a1      	mov	r9, r4
 8005f2c:	eb18 0805 	adds.w	r8, r8, r5
 8005f30:	eb49 0906 	adc.w	r9, r9, r6
 8005f34:	f04f 0100 	mov.w	r1, #0
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f48:	4688      	mov	r8, r1
 8005f4a:	4691      	mov	r9, r2
 8005f4c:	eb18 0005 	adds.w	r0, r8, r5
 8005f50:	eb49 0106 	adc.w	r1, r9, r6
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	461d      	mov	r5, r3
 8005f5a:	f04f 0600 	mov.w	r6, #0
 8005f5e:	196b      	adds	r3, r5, r5
 8005f60:	eb46 0406 	adc.w	r4, r6, r6
 8005f64:	461a      	mov	r2, r3
 8005f66:	4623      	mov	r3, r4
 8005f68:	f7fa fe8e 	bl	8000c88 <__aeabi_uldivmod>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	460c      	mov	r4, r1
 8005f70:	461a      	mov	r2, r3
 8005f72:	4b47      	ldr	r3, [pc, #284]	; (8006090 <UART_SetConfig+0x384>)
 8005f74:	fba3 2302 	umull	r2, r3, r3, r2
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	461d      	mov	r5, r3
 8005f82:	f04f 0600 	mov.w	r6, #0
 8005f86:	46a9      	mov	r9, r5
 8005f88:	46b2      	mov	sl, r6
 8005f8a:	eb19 0309 	adds.w	r3, r9, r9
 8005f8e:	eb4a 040a 	adc.w	r4, sl, sl
 8005f92:	4699      	mov	r9, r3
 8005f94:	46a2      	mov	sl, r4
 8005f96:	eb19 0905 	adds.w	r9, r9, r5
 8005f9a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f9e:	f04f 0100 	mov.w	r1, #0
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005faa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fb2:	4689      	mov	r9, r1
 8005fb4:	4692      	mov	sl, r2
 8005fb6:	eb19 0005 	adds.w	r0, r9, r5
 8005fba:	eb4a 0106 	adc.w	r1, sl, r6
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	461d      	mov	r5, r3
 8005fc4:	f04f 0600 	mov.w	r6, #0
 8005fc8:	196b      	adds	r3, r5, r5
 8005fca:	eb46 0406 	adc.w	r4, r6, r6
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4623      	mov	r3, r4
 8005fd2:	f7fa fe59 	bl	8000c88 <__aeabi_uldivmod>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	460c      	mov	r4, r1
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4b2c      	ldr	r3, [pc, #176]	; (8006090 <UART_SetConfig+0x384>)
 8005fde:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	2164      	movs	r1, #100	; 0x64
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	3332      	adds	r3, #50	; 0x32
 8005ff0:	4a27      	ldr	r2, [pc, #156]	; (8006090 <UART_SetConfig+0x384>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ffe:	4498      	add	r8, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	461d      	mov	r5, r3
 8006004:	f04f 0600 	mov.w	r6, #0
 8006008:	46a9      	mov	r9, r5
 800600a:	46b2      	mov	sl, r6
 800600c:	eb19 0309 	adds.w	r3, r9, r9
 8006010:	eb4a 040a 	adc.w	r4, sl, sl
 8006014:	4699      	mov	r9, r3
 8006016:	46a2      	mov	sl, r4
 8006018:	eb19 0905 	adds.w	r9, r9, r5
 800601c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006020:	f04f 0100 	mov.w	r1, #0
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800602c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006030:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006034:	4689      	mov	r9, r1
 8006036:	4692      	mov	sl, r2
 8006038:	eb19 0005 	adds.w	r0, r9, r5
 800603c:	eb4a 0106 	adc.w	r1, sl, r6
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	461d      	mov	r5, r3
 8006046:	f04f 0600 	mov.w	r6, #0
 800604a:	196b      	adds	r3, r5, r5
 800604c:	eb46 0406 	adc.w	r4, r6, r6
 8006050:	461a      	mov	r2, r3
 8006052:	4623      	mov	r3, r4
 8006054:	f7fa fe18 	bl	8000c88 <__aeabi_uldivmod>
 8006058:	4603      	mov	r3, r0
 800605a:	460c      	mov	r4, r1
 800605c:	461a      	mov	r2, r3
 800605e:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <UART_SetConfig+0x384>)
 8006060:	fba3 1302 	umull	r1, r3, r3, r2
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	2164      	movs	r1, #100	; 0x64
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	3332      	adds	r3, #50	; 0x32
 8006072:	4a07      	ldr	r2, [pc, #28]	; (8006090 <UART_SetConfig+0x384>)
 8006074:	fba2 2303 	umull	r2, r3, r2, r3
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	f003 0207 	and.w	r2, r3, #7
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4442      	add	r2, r8
 8006084:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006086:	e1b2      	b.n	80063ee <UART_SetConfig+0x6e2>
 8006088:	40011000 	.word	0x40011000
 800608c:	40011400 	.word	0x40011400
 8006090:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4ad7      	ldr	r2, [pc, #860]	; (80063f8 <UART_SetConfig+0x6ec>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d005      	beq.n	80060aa <UART_SetConfig+0x39e>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4ad6      	ldr	r2, [pc, #856]	; (80063fc <UART_SetConfig+0x6f0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	f040 80d1 	bne.w	800624c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80060aa:	f7fe ff49 	bl	8004f40 <HAL_RCC_GetPCLK2Freq>
 80060ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	469a      	mov	sl, r3
 80060b4:	f04f 0b00 	mov.w	fp, #0
 80060b8:	46d0      	mov	r8, sl
 80060ba:	46d9      	mov	r9, fp
 80060bc:	eb18 0308 	adds.w	r3, r8, r8
 80060c0:	eb49 0409 	adc.w	r4, r9, r9
 80060c4:	4698      	mov	r8, r3
 80060c6:	46a1      	mov	r9, r4
 80060c8:	eb18 080a 	adds.w	r8, r8, sl
 80060cc:	eb49 090b 	adc.w	r9, r9, fp
 80060d0:	f04f 0100 	mov.w	r1, #0
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060e4:	4688      	mov	r8, r1
 80060e6:	4691      	mov	r9, r2
 80060e8:	eb1a 0508 	adds.w	r5, sl, r8
 80060ec:	eb4b 0609 	adc.w	r6, fp, r9
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	4619      	mov	r1, r3
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	f04f 0400 	mov.w	r4, #0
 8006102:	0094      	lsls	r4, r2, #2
 8006104:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006108:	008b      	lsls	r3, r1, #2
 800610a:	461a      	mov	r2, r3
 800610c:	4623      	mov	r3, r4
 800610e:	4628      	mov	r0, r5
 8006110:	4631      	mov	r1, r6
 8006112:	f7fa fdb9 	bl	8000c88 <__aeabi_uldivmod>
 8006116:	4603      	mov	r3, r0
 8006118:	460c      	mov	r4, r1
 800611a:	461a      	mov	r2, r3
 800611c:	4bb8      	ldr	r3, [pc, #736]	; (8006400 <UART_SetConfig+0x6f4>)
 800611e:	fba3 2302 	umull	r2, r3, r3, r2
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	469b      	mov	fp, r3
 800612c:	f04f 0c00 	mov.w	ip, #0
 8006130:	46d9      	mov	r9, fp
 8006132:	46e2      	mov	sl, ip
 8006134:	eb19 0309 	adds.w	r3, r9, r9
 8006138:	eb4a 040a 	adc.w	r4, sl, sl
 800613c:	4699      	mov	r9, r3
 800613e:	46a2      	mov	sl, r4
 8006140:	eb19 090b 	adds.w	r9, r9, fp
 8006144:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006148:	f04f 0100 	mov.w	r1, #0
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006154:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006158:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800615c:	4689      	mov	r9, r1
 800615e:	4692      	mov	sl, r2
 8006160:	eb1b 0509 	adds.w	r5, fp, r9
 8006164:	eb4c 060a 	adc.w	r6, ip, sl
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	4619      	mov	r1, r3
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	f04f 0400 	mov.w	r4, #0
 800617a:	0094      	lsls	r4, r2, #2
 800617c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006180:	008b      	lsls	r3, r1, #2
 8006182:	461a      	mov	r2, r3
 8006184:	4623      	mov	r3, r4
 8006186:	4628      	mov	r0, r5
 8006188:	4631      	mov	r1, r6
 800618a:	f7fa fd7d 	bl	8000c88 <__aeabi_uldivmod>
 800618e:	4603      	mov	r3, r0
 8006190:	460c      	mov	r4, r1
 8006192:	461a      	mov	r2, r3
 8006194:	4b9a      	ldr	r3, [pc, #616]	; (8006400 <UART_SetConfig+0x6f4>)
 8006196:	fba3 1302 	umull	r1, r3, r3, r2
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	2164      	movs	r1, #100	; 0x64
 800619e:	fb01 f303 	mul.w	r3, r1, r3
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	3332      	adds	r3, #50	; 0x32
 80061a8:	4a95      	ldr	r2, [pc, #596]	; (8006400 <UART_SetConfig+0x6f4>)
 80061aa:	fba2 2303 	umull	r2, r3, r2, r3
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061b4:	4498      	add	r8, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	469b      	mov	fp, r3
 80061ba:	f04f 0c00 	mov.w	ip, #0
 80061be:	46d9      	mov	r9, fp
 80061c0:	46e2      	mov	sl, ip
 80061c2:	eb19 0309 	adds.w	r3, r9, r9
 80061c6:	eb4a 040a 	adc.w	r4, sl, sl
 80061ca:	4699      	mov	r9, r3
 80061cc:	46a2      	mov	sl, r4
 80061ce:	eb19 090b 	adds.w	r9, r9, fp
 80061d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061d6:	f04f 0100 	mov.w	r1, #0
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061ea:	4689      	mov	r9, r1
 80061ec:	4692      	mov	sl, r2
 80061ee:	eb1b 0509 	adds.w	r5, fp, r9
 80061f2:	eb4c 060a 	adc.w	r6, ip, sl
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	4619      	mov	r1, r3
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	f04f 0400 	mov.w	r4, #0
 8006208:	0094      	lsls	r4, r2, #2
 800620a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800620e:	008b      	lsls	r3, r1, #2
 8006210:	461a      	mov	r2, r3
 8006212:	4623      	mov	r3, r4
 8006214:	4628      	mov	r0, r5
 8006216:	4631      	mov	r1, r6
 8006218:	f7fa fd36 	bl	8000c88 <__aeabi_uldivmod>
 800621c:	4603      	mov	r3, r0
 800621e:	460c      	mov	r4, r1
 8006220:	461a      	mov	r2, r3
 8006222:	4b77      	ldr	r3, [pc, #476]	; (8006400 <UART_SetConfig+0x6f4>)
 8006224:	fba3 1302 	umull	r1, r3, r3, r2
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	2164      	movs	r1, #100	; 0x64
 800622c:	fb01 f303 	mul.w	r3, r1, r3
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	3332      	adds	r3, #50	; 0x32
 8006236:	4a72      	ldr	r2, [pc, #456]	; (8006400 <UART_SetConfig+0x6f4>)
 8006238:	fba2 2303 	umull	r2, r3, r2, r3
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	f003 020f 	and.w	r2, r3, #15
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4442      	add	r2, r8
 8006248:	609a      	str	r2, [r3, #8]
 800624a:	e0d0      	b.n	80063ee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800624c:	f7fe fe64 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 8006250:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	469a      	mov	sl, r3
 8006256:	f04f 0b00 	mov.w	fp, #0
 800625a:	46d0      	mov	r8, sl
 800625c:	46d9      	mov	r9, fp
 800625e:	eb18 0308 	adds.w	r3, r8, r8
 8006262:	eb49 0409 	adc.w	r4, r9, r9
 8006266:	4698      	mov	r8, r3
 8006268:	46a1      	mov	r9, r4
 800626a:	eb18 080a 	adds.w	r8, r8, sl
 800626e:	eb49 090b 	adc.w	r9, r9, fp
 8006272:	f04f 0100 	mov.w	r1, #0
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800627e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006282:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006286:	4688      	mov	r8, r1
 8006288:	4691      	mov	r9, r2
 800628a:	eb1a 0508 	adds.w	r5, sl, r8
 800628e:	eb4b 0609 	adc.w	r6, fp, r9
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	4619      	mov	r1, r3
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	f04f 0400 	mov.w	r4, #0
 80062a4:	0094      	lsls	r4, r2, #2
 80062a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062aa:	008b      	lsls	r3, r1, #2
 80062ac:	461a      	mov	r2, r3
 80062ae:	4623      	mov	r3, r4
 80062b0:	4628      	mov	r0, r5
 80062b2:	4631      	mov	r1, r6
 80062b4:	f7fa fce8 	bl	8000c88 <__aeabi_uldivmod>
 80062b8:	4603      	mov	r3, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	461a      	mov	r2, r3
 80062be:	4b50      	ldr	r3, [pc, #320]	; (8006400 <UART_SetConfig+0x6f4>)
 80062c0:	fba3 2302 	umull	r2, r3, r3, r2
 80062c4:	095b      	lsrs	r3, r3, #5
 80062c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	469b      	mov	fp, r3
 80062ce:	f04f 0c00 	mov.w	ip, #0
 80062d2:	46d9      	mov	r9, fp
 80062d4:	46e2      	mov	sl, ip
 80062d6:	eb19 0309 	adds.w	r3, r9, r9
 80062da:	eb4a 040a 	adc.w	r4, sl, sl
 80062de:	4699      	mov	r9, r3
 80062e0:	46a2      	mov	sl, r4
 80062e2:	eb19 090b 	adds.w	r9, r9, fp
 80062e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062ea:	f04f 0100 	mov.w	r1, #0
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062fe:	4689      	mov	r9, r1
 8006300:	4692      	mov	sl, r2
 8006302:	eb1b 0509 	adds.w	r5, fp, r9
 8006306:	eb4c 060a 	adc.w	r6, ip, sl
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	4619      	mov	r1, r3
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	f04f 0400 	mov.w	r4, #0
 800631c:	0094      	lsls	r4, r2, #2
 800631e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006322:	008b      	lsls	r3, r1, #2
 8006324:	461a      	mov	r2, r3
 8006326:	4623      	mov	r3, r4
 8006328:	4628      	mov	r0, r5
 800632a:	4631      	mov	r1, r6
 800632c:	f7fa fcac 	bl	8000c88 <__aeabi_uldivmod>
 8006330:	4603      	mov	r3, r0
 8006332:	460c      	mov	r4, r1
 8006334:	461a      	mov	r2, r3
 8006336:	4b32      	ldr	r3, [pc, #200]	; (8006400 <UART_SetConfig+0x6f4>)
 8006338:	fba3 1302 	umull	r1, r3, r3, r2
 800633c:	095b      	lsrs	r3, r3, #5
 800633e:	2164      	movs	r1, #100	; 0x64
 8006340:	fb01 f303 	mul.w	r3, r1, r3
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	3332      	adds	r3, #50	; 0x32
 800634a:	4a2d      	ldr	r2, [pc, #180]	; (8006400 <UART_SetConfig+0x6f4>)
 800634c:	fba2 2303 	umull	r2, r3, r2, r3
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006356:	4498      	add	r8, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	469b      	mov	fp, r3
 800635c:	f04f 0c00 	mov.w	ip, #0
 8006360:	46d9      	mov	r9, fp
 8006362:	46e2      	mov	sl, ip
 8006364:	eb19 0309 	adds.w	r3, r9, r9
 8006368:	eb4a 040a 	adc.w	r4, sl, sl
 800636c:	4699      	mov	r9, r3
 800636e:	46a2      	mov	sl, r4
 8006370:	eb19 090b 	adds.w	r9, r9, fp
 8006374:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006378:	f04f 0100 	mov.w	r1, #0
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006384:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006388:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800638c:	4689      	mov	r9, r1
 800638e:	4692      	mov	sl, r2
 8006390:	eb1b 0509 	adds.w	r5, fp, r9
 8006394:	eb4c 060a 	adc.w	r6, ip, sl
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	4619      	mov	r1, r3
 800639e:	f04f 0200 	mov.w	r2, #0
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	f04f 0400 	mov.w	r4, #0
 80063aa:	0094      	lsls	r4, r2, #2
 80063ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063b0:	008b      	lsls	r3, r1, #2
 80063b2:	461a      	mov	r2, r3
 80063b4:	4623      	mov	r3, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	4631      	mov	r1, r6
 80063ba:	f7fa fc65 	bl	8000c88 <__aeabi_uldivmod>
 80063be:	4603      	mov	r3, r0
 80063c0:	460c      	mov	r4, r1
 80063c2:	461a      	mov	r2, r3
 80063c4:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <UART_SetConfig+0x6f4>)
 80063c6:	fba3 1302 	umull	r1, r3, r3, r2
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	2164      	movs	r1, #100	; 0x64
 80063ce:	fb01 f303 	mul.w	r3, r1, r3
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	3332      	adds	r3, #50	; 0x32
 80063d8:	4a09      	ldr	r2, [pc, #36]	; (8006400 <UART_SetConfig+0x6f4>)
 80063da:	fba2 2303 	umull	r2, r3, r2, r3
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	f003 020f 	and.w	r2, r3, #15
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4442      	add	r2, r8
 80063ea:	609a      	str	r2, [r3, #8]
}
 80063ec:	e7ff      	b.n	80063ee <UART_SetConfig+0x6e2>
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f8:	40011000 	.word	0x40011000
 80063fc:	40011400 	.word	0x40011400
 8006400:	51eb851f 	.word	0x51eb851f

08006404 <__errno>:
 8006404:	4b01      	ldr	r3, [pc, #4]	; (800640c <__errno+0x8>)
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	20000010 	.word	0x20000010

08006410 <__libc_init_array>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	4e0d      	ldr	r6, [pc, #52]	; (8006448 <__libc_init_array+0x38>)
 8006414:	4c0d      	ldr	r4, [pc, #52]	; (800644c <__libc_init_array+0x3c>)
 8006416:	1ba4      	subs	r4, r4, r6
 8006418:	10a4      	asrs	r4, r4, #2
 800641a:	2500      	movs	r5, #0
 800641c:	42a5      	cmp	r5, r4
 800641e:	d109      	bne.n	8006434 <__libc_init_array+0x24>
 8006420:	4e0b      	ldr	r6, [pc, #44]	; (8006450 <__libc_init_array+0x40>)
 8006422:	4c0c      	ldr	r4, [pc, #48]	; (8006454 <__libc_init_array+0x44>)
 8006424:	f000 fe64 	bl	80070f0 <_init>
 8006428:	1ba4      	subs	r4, r4, r6
 800642a:	10a4      	asrs	r4, r4, #2
 800642c:	2500      	movs	r5, #0
 800642e:	42a5      	cmp	r5, r4
 8006430:	d105      	bne.n	800643e <__libc_init_array+0x2e>
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006438:	4798      	blx	r3
 800643a:	3501      	adds	r5, #1
 800643c:	e7ee      	b.n	800641c <__libc_init_array+0xc>
 800643e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006442:	4798      	blx	r3
 8006444:	3501      	adds	r5, #1
 8006446:	e7f2      	b.n	800642e <__libc_init_array+0x1e>
 8006448:	080072d8 	.word	0x080072d8
 800644c:	080072d8 	.word	0x080072d8
 8006450:	080072d8 	.word	0x080072d8
 8006454:	080072dc 	.word	0x080072dc

08006458 <memset>:
 8006458:	4402      	add	r2, r0
 800645a:	4603      	mov	r3, r0
 800645c:	4293      	cmp	r3, r2
 800645e:	d100      	bne.n	8006462 <memset+0xa>
 8006460:	4770      	bx	lr
 8006462:	f803 1b01 	strb.w	r1, [r3], #1
 8006466:	e7f9      	b.n	800645c <memset+0x4>

08006468 <siprintf>:
 8006468:	b40e      	push	{r1, r2, r3}
 800646a:	b500      	push	{lr}
 800646c:	b09c      	sub	sp, #112	; 0x70
 800646e:	ab1d      	add	r3, sp, #116	; 0x74
 8006470:	9002      	str	r0, [sp, #8]
 8006472:	9006      	str	r0, [sp, #24]
 8006474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006478:	4809      	ldr	r0, [pc, #36]	; (80064a0 <siprintf+0x38>)
 800647a:	9107      	str	r1, [sp, #28]
 800647c:	9104      	str	r1, [sp, #16]
 800647e:	4909      	ldr	r1, [pc, #36]	; (80064a4 <siprintf+0x3c>)
 8006480:	f853 2b04 	ldr.w	r2, [r3], #4
 8006484:	9105      	str	r1, [sp, #20]
 8006486:	6800      	ldr	r0, [r0, #0]
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	a902      	add	r1, sp, #8
 800648c:	f000 f866 	bl	800655c <_svfiprintf_r>
 8006490:	9b02      	ldr	r3, [sp, #8]
 8006492:	2200      	movs	r2, #0
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	b01c      	add	sp, #112	; 0x70
 8006498:	f85d eb04 	ldr.w	lr, [sp], #4
 800649c:	b003      	add	sp, #12
 800649e:	4770      	bx	lr
 80064a0:	20000010 	.word	0x20000010
 80064a4:	ffff0208 	.word	0xffff0208

080064a8 <__ssputs_r>:
 80064a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ac:	688e      	ldr	r6, [r1, #8]
 80064ae:	429e      	cmp	r6, r3
 80064b0:	4682      	mov	sl, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	4690      	mov	r8, r2
 80064b6:	4699      	mov	r9, r3
 80064b8:	d837      	bhi.n	800652a <__ssputs_r+0x82>
 80064ba:	898a      	ldrh	r2, [r1, #12]
 80064bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064c0:	d031      	beq.n	8006526 <__ssputs_r+0x7e>
 80064c2:	6825      	ldr	r5, [r4, #0]
 80064c4:	6909      	ldr	r1, [r1, #16]
 80064c6:	1a6f      	subs	r7, r5, r1
 80064c8:	6965      	ldr	r5, [r4, #20]
 80064ca:	2302      	movs	r3, #2
 80064cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80064d4:	f109 0301 	add.w	r3, r9, #1
 80064d8:	443b      	add	r3, r7
 80064da:	429d      	cmp	r5, r3
 80064dc:	bf38      	it	cc
 80064de:	461d      	movcc	r5, r3
 80064e0:	0553      	lsls	r3, r2, #21
 80064e2:	d530      	bpl.n	8006546 <__ssputs_r+0x9e>
 80064e4:	4629      	mov	r1, r5
 80064e6:	f000 fb2b 	bl	8006b40 <_malloc_r>
 80064ea:	4606      	mov	r6, r0
 80064ec:	b950      	cbnz	r0, 8006504 <__ssputs_r+0x5c>
 80064ee:	230c      	movs	r3, #12
 80064f0:	f8ca 3000 	str.w	r3, [sl]
 80064f4:	89a3      	ldrh	r3, [r4, #12]
 80064f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064fa:	81a3      	strh	r3, [r4, #12]
 80064fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006504:	463a      	mov	r2, r7
 8006506:	6921      	ldr	r1, [r4, #16]
 8006508:	f000 faa8 	bl	8006a5c <memcpy>
 800650c:	89a3      	ldrh	r3, [r4, #12]
 800650e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006516:	81a3      	strh	r3, [r4, #12]
 8006518:	6126      	str	r6, [r4, #16]
 800651a:	6165      	str	r5, [r4, #20]
 800651c:	443e      	add	r6, r7
 800651e:	1bed      	subs	r5, r5, r7
 8006520:	6026      	str	r6, [r4, #0]
 8006522:	60a5      	str	r5, [r4, #8]
 8006524:	464e      	mov	r6, r9
 8006526:	454e      	cmp	r6, r9
 8006528:	d900      	bls.n	800652c <__ssputs_r+0x84>
 800652a:	464e      	mov	r6, r9
 800652c:	4632      	mov	r2, r6
 800652e:	4641      	mov	r1, r8
 8006530:	6820      	ldr	r0, [r4, #0]
 8006532:	f000 fa9e 	bl	8006a72 <memmove>
 8006536:	68a3      	ldr	r3, [r4, #8]
 8006538:	1b9b      	subs	r3, r3, r6
 800653a:	60a3      	str	r3, [r4, #8]
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	441e      	add	r6, r3
 8006540:	6026      	str	r6, [r4, #0]
 8006542:	2000      	movs	r0, #0
 8006544:	e7dc      	b.n	8006500 <__ssputs_r+0x58>
 8006546:	462a      	mov	r2, r5
 8006548:	f000 fb54 	bl	8006bf4 <_realloc_r>
 800654c:	4606      	mov	r6, r0
 800654e:	2800      	cmp	r0, #0
 8006550:	d1e2      	bne.n	8006518 <__ssputs_r+0x70>
 8006552:	6921      	ldr	r1, [r4, #16]
 8006554:	4650      	mov	r0, sl
 8006556:	f000 faa5 	bl	8006aa4 <_free_r>
 800655a:	e7c8      	b.n	80064ee <__ssputs_r+0x46>

0800655c <_svfiprintf_r>:
 800655c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006560:	461d      	mov	r5, r3
 8006562:	898b      	ldrh	r3, [r1, #12]
 8006564:	061f      	lsls	r7, r3, #24
 8006566:	b09d      	sub	sp, #116	; 0x74
 8006568:	4680      	mov	r8, r0
 800656a:	460c      	mov	r4, r1
 800656c:	4616      	mov	r6, r2
 800656e:	d50f      	bpl.n	8006590 <_svfiprintf_r+0x34>
 8006570:	690b      	ldr	r3, [r1, #16]
 8006572:	b96b      	cbnz	r3, 8006590 <_svfiprintf_r+0x34>
 8006574:	2140      	movs	r1, #64	; 0x40
 8006576:	f000 fae3 	bl	8006b40 <_malloc_r>
 800657a:	6020      	str	r0, [r4, #0]
 800657c:	6120      	str	r0, [r4, #16]
 800657e:	b928      	cbnz	r0, 800658c <_svfiprintf_r+0x30>
 8006580:	230c      	movs	r3, #12
 8006582:	f8c8 3000 	str.w	r3, [r8]
 8006586:	f04f 30ff 	mov.w	r0, #4294967295
 800658a:	e0c8      	b.n	800671e <_svfiprintf_r+0x1c2>
 800658c:	2340      	movs	r3, #64	; 0x40
 800658e:	6163      	str	r3, [r4, #20]
 8006590:	2300      	movs	r3, #0
 8006592:	9309      	str	r3, [sp, #36]	; 0x24
 8006594:	2320      	movs	r3, #32
 8006596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800659a:	2330      	movs	r3, #48	; 0x30
 800659c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065a0:	9503      	str	r5, [sp, #12]
 80065a2:	f04f 0b01 	mov.w	fp, #1
 80065a6:	4637      	mov	r7, r6
 80065a8:	463d      	mov	r5, r7
 80065aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80065ae:	b10b      	cbz	r3, 80065b4 <_svfiprintf_r+0x58>
 80065b0:	2b25      	cmp	r3, #37	; 0x25
 80065b2:	d13e      	bne.n	8006632 <_svfiprintf_r+0xd6>
 80065b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80065b8:	d00b      	beq.n	80065d2 <_svfiprintf_r+0x76>
 80065ba:	4653      	mov	r3, sl
 80065bc:	4632      	mov	r2, r6
 80065be:	4621      	mov	r1, r4
 80065c0:	4640      	mov	r0, r8
 80065c2:	f7ff ff71 	bl	80064a8 <__ssputs_r>
 80065c6:	3001      	adds	r0, #1
 80065c8:	f000 80a4 	beq.w	8006714 <_svfiprintf_r+0x1b8>
 80065cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ce:	4453      	add	r3, sl
 80065d0:	9309      	str	r3, [sp, #36]	; 0x24
 80065d2:	783b      	ldrb	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 809d 	beq.w	8006714 <_svfiprintf_r+0x1b8>
 80065da:	2300      	movs	r3, #0
 80065dc:	f04f 32ff 	mov.w	r2, #4294967295
 80065e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065e4:	9304      	str	r3, [sp, #16]
 80065e6:	9307      	str	r3, [sp, #28]
 80065e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065ec:	931a      	str	r3, [sp, #104]	; 0x68
 80065ee:	462f      	mov	r7, r5
 80065f0:	2205      	movs	r2, #5
 80065f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80065f6:	4850      	ldr	r0, [pc, #320]	; (8006738 <_svfiprintf_r+0x1dc>)
 80065f8:	f7f9 fdf2 	bl	80001e0 <memchr>
 80065fc:	9b04      	ldr	r3, [sp, #16]
 80065fe:	b9d0      	cbnz	r0, 8006636 <_svfiprintf_r+0xda>
 8006600:	06d9      	lsls	r1, r3, #27
 8006602:	bf44      	itt	mi
 8006604:	2220      	movmi	r2, #32
 8006606:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800660a:	071a      	lsls	r2, r3, #28
 800660c:	bf44      	itt	mi
 800660e:	222b      	movmi	r2, #43	; 0x2b
 8006610:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006614:	782a      	ldrb	r2, [r5, #0]
 8006616:	2a2a      	cmp	r2, #42	; 0x2a
 8006618:	d015      	beq.n	8006646 <_svfiprintf_r+0xea>
 800661a:	9a07      	ldr	r2, [sp, #28]
 800661c:	462f      	mov	r7, r5
 800661e:	2000      	movs	r0, #0
 8006620:	250a      	movs	r5, #10
 8006622:	4639      	mov	r1, r7
 8006624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006628:	3b30      	subs	r3, #48	; 0x30
 800662a:	2b09      	cmp	r3, #9
 800662c:	d94d      	bls.n	80066ca <_svfiprintf_r+0x16e>
 800662e:	b1b8      	cbz	r0, 8006660 <_svfiprintf_r+0x104>
 8006630:	e00f      	b.n	8006652 <_svfiprintf_r+0xf6>
 8006632:	462f      	mov	r7, r5
 8006634:	e7b8      	b.n	80065a8 <_svfiprintf_r+0x4c>
 8006636:	4a40      	ldr	r2, [pc, #256]	; (8006738 <_svfiprintf_r+0x1dc>)
 8006638:	1a80      	subs	r0, r0, r2
 800663a:	fa0b f000 	lsl.w	r0, fp, r0
 800663e:	4318      	orrs	r0, r3
 8006640:	9004      	str	r0, [sp, #16]
 8006642:	463d      	mov	r5, r7
 8006644:	e7d3      	b.n	80065ee <_svfiprintf_r+0x92>
 8006646:	9a03      	ldr	r2, [sp, #12]
 8006648:	1d11      	adds	r1, r2, #4
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	9103      	str	r1, [sp, #12]
 800664e:	2a00      	cmp	r2, #0
 8006650:	db01      	blt.n	8006656 <_svfiprintf_r+0xfa>
 8006652:	9207      	str	r2, [sp, #28]
 8006654:	e004      	b.n	8006660 <_svfiprintf_r+0x104>
 8006656:	4252      	negs	r2, r2
 8006658:	f043 0302 	orr.w	r3, r3, #2
 800665c:	9207      	str	r2, [sp, #28]
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	783b      	ldrb	r3, [r7, #0]
 8006662:	2b2e      	cmp	r3, #46	; 0x2e
 8006664:	d10c      	bne.n	8006680 <_svfiprintf_r+0x124>
 8006666:	787b      	ldrb	r3, [r7, #1]
 8006668:	2b2a      	cmp	r3, #42	; 0x2a
 800666a:	d133      	bne.n	80066d4 <_svfiprintf_r+0x178>
 800666c:	9b03      	ldr	r3, [sp, #12]
 800666e:	1d1a      	adds	r2, r3, #4
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	9203      	str	r2, [sp, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	bfb8      	it	lt
 8006678:	f04f 33ff 	movlt.w	r3, #4294967295
 800667c:	3702      	adds	r7, #2
 800667e:	9305      	str	r3, [sp, #20]
 8006680:	4d2e      	ldr	r5, [pc, #184]	; (800673c <_svfiprintf_r+0x1e0>)
 8006682:	7839      	ldrb	r1, [r7, #0]
 8006684:	2203      	movs	r2, #3
 8006686:	4628      	mov	r0, r5
 8006688:	f7f9 fdaa 	bl	80001e0 <memchr>
 800668c:	b138      	cbz	r0, 800669e <_svfiprintf_r+0x142>
 800668e:	2340      	movs	r3, #64	; 0x40
 8006690:	1b40      	subs	r0, r0, r5
 8006692:	fa03 f000 	lsl.w	r0, r3, r0
 8006696:	9b04      	ldr	r3, [sp, #16]
 8006698:	4303      	orrs	r3, r0
 800669a:	3701      	adds	r7, #1
 800669c:	9304      	str	r3, [sp, #16]
 800669e:	7839      	ldrb	r1, [r7, #0]
 80066a0:	4827      	ldr	r0, [pc, #156]	; (8006740 <_svfiprintf_r+0x1e4>)
 80066a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066a6:	2206      	movs	r2, #6
 80066a8:	1c7e      	adds	r6, r7, #1
 80066aa:	f7f9 fd99 	bl	80001e0 <memchr>
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d038      	beq.n	8006724 <_svfiprintf_r+0x1c8>
 80066b2:	4b24      	ldr	r3, [pc, #144]	; (8006744 <_svfiprintf_r+0x1e8>)
 80066b4:	bb13      	cbnz	r3, 80066fc <_svfiprintf_r+0x1a0>
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	3307      	adds	r3, #7
 80066ba:	f023 0307 	bic.w	r3, r3, #7
 80066be:	3308      	adds	r3, #8
 80066c0:	9303      	str	r3, [sp, #12]
 80066c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c4:	444b      	add	r3, r9
 80066c6:	9309      	str	r3, [sp, #36]	; 0x24
 80066c8:	e76d      	b.n	80065a6 <_svfiprintf_r+0x4a>
 80066ca:	fb05 3202 	mla	r2, r5, r2, r3
 80066ce:	2001      	movs	r0, #1
 80066d0:	460f      	mov	r7, r1
 80066d2:	e7a6      	b.n	8006622 <_svfiprintf_r+0xc6>
 80066d4:	2300      	movs	r3, #0
 80066d6:	3701      	adds	r7, #1
 80066d8:	9305      	str	r3, [sp, #20]
 80066da:	4619      	mov	r1, r3
 80066dc:	250a      	movs	r5, #10
 80066de:	4638      	mov	r0, r7
 80066e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066e4:	3a30      	subs	r2, #48	; 0x30
 80066e6:	2a09      	cmp	r2, #9
 80066e8:	d903      	bls.n	80066f2 <_svfiprintf_r+0x196>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0c8      	beq.n	8006680 <_svfiprintf_r+0x124>
 80066ee:	9105      	str	r1, [sp, #20]
 80066f0:	e7c6      	b.n	8006680 <_svfiprintf_r+0x124>
 80066f2:	fb05 2101 	mla	r1, r5, r1, r2
 80066f6:	2301      	movs	r3, #1
 80066f8:	4607      	mov	r7, r0
 80066fa:	e7f0      	b.n	80066de <_svfiprintf_r+0x182>
 80066fc:	ab03      	add	r3, sp, #12
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	4622      	mov	r2, r4
 8006702:	4b11      	ldr	r3, [pc, #68]	; (8006748 <_svfiprintf_r+0x1ec>)
 8006704:	a904      	add	r1, sp, #16
 8006706:	4640      	mov	r0, r8
 8006708:	f3af 8000 	nop.w
 800670c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006710:	4681      	mov	r9, r0
 8006712:	d1d6      	bne.n	80066c2 <_svfiprintf_r+0x166>
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	065b      	lsls	r3, r3, #25
 8006718:	f53f af35 	bmi.w	8006586 <_svfiprintf_r+0x2a>
 800671c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800671e:	b01d      	add	sp, #116	; 0x74
 8006720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006724:	ab03      	add	r3, sp, #12
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	4622      	mov	r2, r4
 800672a:	4b07      	ldr	r3, [pc, #28]	; (8006748 <_svfiprintf_r+0x1ec>)
 800672c:	a904      	add	r1, sp, #16
 800672e:	4640      	mov	r0, r8
 8006730:	f000 f882 	bl	8006838 <_printf_i>
 8006734:	e7ea      	b.n	800670c <_svfiprintf_r+0x1b0>
 8006736:	bf00      	nop
 8006738:	08007298 	.word	0x08007298
 800673c:	0800729e 	.word	0x0800729e
 8006740:	080072a2 	.word	0x080072a2
 8006744:	00000000 	.word	0x00000000
 8006748:	080064a9 	.word	0x080064a9

0800674c <_printf_common>:
 800674c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	4691      	mov	r9, r2
 8006752:	461f      	mov	r7, r3
 8006754:	688a      	ldr	r2, [r1, #8]
 8006756:	690b      	ldr	r3, [r1, #16]
 8006758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800675c:	4293      	cmp	r3, r2
 800675e:	bfb8      	it	lt
 8006760:	4613      	movlt	r3, r2
 8006762:	f8c9 3000 	str.w	r3, [r9]
 8006766:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800676a:	4606      	mov	r6, r0
 800676c:	460c      	mov	r4, r1
 800676e:	b112      	cbz	r2, 8006776 <_printf_common+0x2a>
 8006770:	3301      	adds	r3, #1
 8006772:	f8c9 3000 	str.w	r3, [r9]
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	0699      	lsls	r1, r3, #26
 800677a:	bf42      	ittt	mi
 800677c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006780:	3302      	addmi	r3, #2
 8006782:	f8c9 3000 	strmi.w	r3, [r9]
 8006786:	6825      	ldr	r5, [r4, #0]
 8006788:	f015 0506 	ands.w	r5, r5, #6
 800678c:	d107      	bne.n	800679e <_printf_common+0x52>
 800678e:	f104 0a19 	add.w	sl, r4, #25
 8006792:	68e3      	ldr	r3, [r4, #12]
 8006794:	f8d9 2000 	ldr.w	r2, [r9]
 8006798:	1a9b      	subs	r3, r3, r2
 800679a:	42ab      	cmp	r3, r5
 800679c:	dc28      	bgt.n	80067f0 <_printf_common+0xa4>
 800679e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80067a2:	6822      	ldr	r2, [r4, #0]
 80067a4:	3300      	adds	r3, #0
 80067a6:	bf18      	it	ne
 80067a8:	2301      	movne	r3, #1
 80067aa:	0692      	lsls	r2, r2, #26
 80067ac:	d42d      	bmi.n	800680a <_printf_common+0xbe>
 80067ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067b2:	4639      	mov	r1, r7
 80067b4:	4630      	mov	r0, r6
 80067b6:	47c0      	blx	r8
 80067b8:	3001      	adds	r0, #1
 80067ba:	d020      	beq.n	80067fe <_printf_common+0xb2>
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	68e5      	ldr	r5, [r4, #12]
 80067c0:	f8d9 2000 	ldr.w	r2, [r9]
 80067c4:	f003 0306 	and.w	r3, r3, #6
 80067c8:	2b04      	cmp	r3, #4
 80067ca:	bf08      	it	eq
 80067cc:	1aad      	subeq	r5, r5, r2
 80067ce:	68a3      	ldr	r3, [r4, #8]
 80067d0:	6922      	ldr	r2, [r4, #16]
 80067d2:	bf0c      	ite	eq
 80067d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067d8:	2500      	movne	r5, #0
 80067da:	4293      	cmp	r3, r2
 80067dc:	bfc4      	itt	gt
 80067de:	1a9b      	subgt	r3, r3, r2
 80067e0:	18ed      	addgt	r5, r5, r3
 80067e2:	f04f 0900 	mov.w	r9, #0
 80067e6:	341a      	adds	r4, #26
 80067e8:	454d      	cmp	r5, r9
 80067ea:	d11a      	bne.n	8006822 <_printf_common+0xd6>
 80067ec:	2000      	movs	r0, #0
 80067ee:	e008      	b.n	8006802 <_printf_common+0xb6>
 80067f0:	2301      	movs	r3, #1
 80067f2:	4652      	mov	r2, sl
 80067f4:	4639      	mov	r1, r7
 80067f6:	4630      	mov	r0, r6
 80067f8:	47c0      	blx	r8
 80067fa:	3001      	adds	r0, #1
 80067fc:	d103      	bne.n	8006806 <_printf_common+0xba>
 80067fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006806:	3501      	adds	r5, #1
 8006808:	e7c3      	b.n	8006792 <_printf_common+0x46>
 800680a:	18e1      	adds	r1, r4, r3
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	2030      	movs	r0, #48	; 0x30
 8006810:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006814:	4422      	add	r2, r4
 8006816:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800681a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800681e:	3302      	adds	r3, #2
 8006820:	e7c5      	b.n	80067ae <_printf_common+0x62>
 8006822:	2301      	movs	r3, #1
 8006824:	4622      	mov	r2, r4
 8006826:	4639      	mov	r1, r7
 8006828:	4630      	mov	r0, r6
 800682a:	47c0      	blx	r8
 800682c:	3001      	adds	r0, #1
 800682e:	d0e6      	beq.n	80067fe <_printf_common+0xb2>
 8006830:	f109 0901 	add.w	r9, r9, #1
 8006834:	e7d8      	b.n	80067e8 <_printf_common+0x9c>
	...

08006838 <_printf_i>:
 8006838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800683c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006840:	460c      	mov	r4, r1
 8006842:	7e09      	ldrb	r1, [r1, #24]
 8006844:	b085      	sub	sp, #20
 8006846:	296e      	cmp	r1, #110	; 0x6e
 8006848:	4617      	mov	r7, r2
 800684a:	4606      	mov	r6, r0
 800684c:	4698      	mov	r8, r3
 800684e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006850:	f000 80b3 	beq.w	80069ba <_printf_i+0x182>
 8006854:	d822      	bhi.n	800689c <_printf_i+0x64>
 8006856:	2963      	cmp	r1, #99	; 0x63
 8006858:	d036      	beq.n	80068c8 <_printf_i+0x90>
 800685a:	d80a      	bhi.n	8006872 <_printf_i+0x3a>
 800685c:	2900      	cmp	r1, #0
 800685e:	f000 80b9 	beq.w	80069d4 <_printf_i+0x19c>
 8006862:	2958      	cmp	r1, #88	; 0x58
 8006864:	f000 8083 	beq.w	800696e <_printf_i+0x136>
 8006868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800686c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006870:	e032      	b.n	80068d8 <_printf_i+0xa0>
 8006872:	2964      	cmp	r1, #100	; 0x64
 8006874:	d001      	beq.n	800687a <_printf_i+0x42>
 8006876:	2969      	cmp	r1, #105	; 0x69
 8006878:	d1f6      	bne.n	8006868 <_printf_i+0x30>
 800687a:	6820      	ldr	r0, [r4, #0]
 800687c:	6813      	ldr	r3, [r2, #0]
 800687e:	0605      	lsls	r5, r0, #24
 8006880:	f103 0104 	add.w	r1, r3, #4
 8006884:	d52a      	bpl.n	80068dc <_printf_i+0xa4>
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6011      	str	r1, [r2, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	da03      	bge.n	8006896 <_printf_i+0x5e>
 800688e:	222d      	movs	r2, #45	; 0x2d
 8006890:	425b      	negs	r3, r3
 8006892:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006896:	486f      	ldr	r0, [pc, #444]	; (8006a54 <_printf_i+0x21c>)
 8006898:	220a      	movs	r2, #10
 800689a:	e039      	b.n	8006910 <_printf_i+0xd8>
 800689c:	2973      	cmp	r1, #115	; 0x73
 800689e:	f000 809d 	beq.w	80069dc <_printf_i+0x1a4>
 80068a2:	d808      	bhi.n	80068b6 <_printf_i+0x7e>
 80068a4:	296f      	cmp	r1, #111	; 0x6f
 80068a6:	d020      	beq.n	80068ea <_printf_i+0xb2>
 80068a8:	2970      	cmp	r1, #112	; 0x70
 80068aa:	d1dd      	bne.n	8006868 <_printf_i+0x30>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	f043 0320 	orr.w	r3, r3, #32
 80068b2:	6023      	str	r3, [r4, #0]
 80068b4:	e003      	b.n	80068be <_printf_i+0x86>
 80068b6:	2975      	cmp	r1, #117	; 0x75
 80068b8:	d017      	beq.n	80068ea <_printf_i+0xb2>
 80068ba:	2978      	cmp	r1, #120	; 0x78
 80068bc:	d1d4      	bne.n	8006868 <_printf_i+0x30>
 80068be:	2378      	movs	r3, #120	; 0x78
 80068c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068c4:	4864      	ldr	r0, [pc, #400]	; (8006a58 <_printf_i+0x220>)
 80068c6:	e055      	b.n	8006974 <_printf_i+0x13c>
 80068c8:	6813      	ldr	r3, [r2, #0]
 80068ca:	1d19      	adds	r1, r3, #4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6011      	str	r1, [r2, #0]
 80068d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068d8:	2301      	movs	r3, #1
 80068da:	e08c      	b.n	80069f6 <_printf_i+0x1be>
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6011      	str	r1, [r2, #0]
 80068e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068e4:	bf18      	it	ne
 80068e6:	b21b      	sxthne	r3, r3
 80068e8:	e7cf      	b.n	800688a <_printf_i+0x52>
 80068ea:	6813      	ldr	r3, [r2, #0]
 80068ec:	6825      	ldr	r5, [r4, #0]
 80068ee:	1d18      	adds	r0, r3, #4
 80068f0:	6010      	str	r0, [r2, #0]
 80068f2:	0628      	lsls	r0, r5, #24
 80068f4:	d501      	bpl.n	80068fa <_printf_i+0xc2>
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	e002      	b.n	8006900 <_printf_i+0xc8>
 80068fa:	0668      	lsls	r0, r5, #25
 80068fc:	d5fb      	bpl.n	80068f6 <_printf_i+0xbe>
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	4854      	ldr	r0, [pc, #336]	; (8006a54 <_printf_i+0x21c>)
 8006902:	296f      	cmp	r1, #111	; 0x6f
 8006904:	bf14      	ite	ne
 8006906:	220a      	movne	r2, #10
 8006908:	2208      	moveq	r2, #8
 800690a:	2100      	movs	r1, #0
 800690c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006910:	6865      	ldr	r5, [r4, #4]
 8006912:	60a5      	str	r5, [r4, #8]
 8006914:	2d00      	cmp	r5, #0
 8006916:	f2c0 8095 	blt.w	8006a44 <_printf_i+0x20c>
 800691a:	6821      	ldr	r1, [r4, #0]
 800691c:	f021 0104 	bic.w	r1, r1, #4
 8006920:	6021      	str	r1, [r4, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d13d      	bne.n	80069a2 <_printf_i+0x16a>
 8006926:	2d00      	cmp	r5, #0
 8006928:	f040 808e 	bne.w	8006a48 <_printf_i+0x210>
 800692c:	4665      	mov	r5, ip
 800692e:	2a08      	cmp	r2, #8
 8006930:	d10b      	bne.n	800694a <_printf_i+0x112>
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	07db      	lsls	r3, r3, #31
 8006936:	d508      	bpl.n	800694a <_printf_i+0x112>
 8006938:	6923      	ldr	r3, [r4, #16]
 800693a:	6862      	ldr	r2, [r4, #4]
 800693c:	429a      	cmp	r2, r3
 800693e:	bfde      	ittt	le
 8006940:	2330      	movle	r3, #48	; 0x30
 8006942:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006946:	f105 35ff 	addle.w	r5, r5, #4294967295
 800694a:	ebac 0305 	sub.w	r3, ip, r5
 800694e:	6123      	str	r3, [r4, #16]
 8006950:	f8cd 8000 	str.w	r8, [sp]
 8006954:	463b      	mov	r3, r7
 8006956:	aa03      	add	r2, sp, #12
 8006958:	4621      	mov	r1, r4
 800695a:	4630      	mov	r0, r6
 800695c:	f7ff fef6 	bl	800674c <_printf_common>
 8006960:	3001      	adds	r0, #1
 8006962:	d14d      	bne.n	8006a00 <_printf_i+0x1c8>
 8006964:	f04f 30ff 	mov.w	r0, #4294967295
 8006968:	b005      	add	sp, #20
 800696a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800696e:	4839      	ldr	r0, [pc, #228]	; (8006a54 <_printf_i+0x21c>)
 8006970:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006974:	6813      	ldr	r3, [r2, #0]
 8006976:	6821      	ldr	r1, [r4, #0]
 8006978:	1d1d      	adds	r5, r3, #4
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6015      	str	r5, [r2, #0]
 800697e:	060a      	lsls	r2, r1, #24
 8006980:	d50b      	bpl.n	800699a <_printf_i+0x162>
 8006982:	07ca      	lsls	r2, r1, #31
 8006984:	bf44      	itt	mi
 8006986:	f041 0120 	orrmi.w	r1, r1, #32
 800698a:	6021      	strmi	r1, [r4, #0]
 800698c:	b91b      	cbnz	r3, 8006996 <_printf_i+0x15e>
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	f022 0220 	bic.w	r2, r2, #32
 8006994:	6022      	str	r2, [r4, #0]
 8006996:	2210      	movs	r2, #16
 8006998:	e7b7      	b.n	800690a <_printf_i+0xd2>
 800699a:	064d      	lsls	r5, r1, #25
 800699c:	bf48      	it	mi
 800699e:	b29b      	uxthmi	r3, r3
 80069a0:	e7ef      	b.n	8006982 <_printf_i+0x14a>
 80069a2:	4665      	mov	r5, ip
 80069a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80069a8:	fb02 3311 	mls	r3, r2, r1, r3
 80069ac:	5cc3      	ldrb	r3, [r0, r3]
 80069ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80069b2:	460b      	mov	r3, r1
 80069b4:	2900      	cmp	r1, #0
 80069b6:	d1f5      	bne.n	80069a4 <_printf_i+0x16c>
 80069b8:	e7b9      	b.n	800692e <_printf_i+0xf6>
 80069ba:	6813      	ldr	r3, [r2, #0]
 80069bc:	6825      	ldr	r5, [r4, #0]
 80069be:	6961      	ldr	r1, [r4, #20]
 80069c0:	1d18      	adds	r0, r3, #4
 80069c2:	6010      	str	r0, [r2, #0]
 80069c4:	0628      	lsls	r0, r5, #24
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	d501      	bpl.n	80069ce <_printf_i+0x196>
 80069ca:	6019      	str	r1, [r3, #0]
 80069cc:	e002      	b.n	80069d4 <_printf_i+0x19c>
 80069ce:	066a      	lsls	r2, r5, #25
 80069d0:	d5fb      	bpl.n	80069ca <_printf_i+0x192>
 80069d2:	8019      	strh	r1, [r3, #0]
 80069d4:	2300      	movs	r3, #0
 80069d6:	6123      	str	r3, [r4, #16]
 80069d8:	4665      	mov	r5, ip
 80069da:	e7b9      	b.n	8006950 <_printf_i+0x118>
 80069dc:	6813      	ldr	r3, [r2, #0]
 80069de:	1d19      	adds	r1, r3, #4
 80069e0:	6011      	str	r1, [r2, #0]
 80069e2:	681d      	ldr	r5, [r3, #0]
 80069e4:	6862      	ldr	r2, [r4, #4]
 80069e6:	2100      	movs	r1, #0
 80069e8:	4628      	mov	r0, r5
 80069ea:	f7f9 fbf9 	bl	80001e0 <memchr>
 80069ee:	b108      	cbz	r0, 80069f4 <_printf_i+0x1bc>
 80069f0:	1b40      	subs	r0, r0, r5
 80069f2:	6060      	str	r0, [r4, #4]
 80069f4:	6863      	ldr	r3, [r4, #4]
 80069f6:	6123      	str	r3, [r4, #16]
 80069f8:	2300      	movs	r3, #0
 80069fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069fe:	e7a7      	b.n	8006950 <_printf_i+0x118>
 8006a00:	6923      	ldr	r3, [r4, #16]
 8006a02:	462a      	mov	r2, r5
 8006a04:	4639      	mov	r1, r7
 8006a06:	4630      	mov	r0, r6
 8006a08:	47c0      	blx	r8
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	d0aa      	beq.n	8006964 <_printf_i+0x12c>
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	079b      	lsls	r3, r3, #30
 8006a12:	d413      	bmi.n	8006a3c <_printf_i+0x204>
 8006a14:	68e0      	ldr	r0, [r4, #12]
 8006a16:	9b03      	ldr	r3, [sp, #12]
 8006a18:	4298      	cmp	r0, r3
 8006a1a:	bfb8      	it	lt
 8006a1c:	4618      	movlt	r0, r3
 8006a1e:	e7a3      	b.n	8006968 <_printf_i+0x130>
 8006a20:	2301      	movs	r3, #1
 8006a22:	464a      	mov	r2, r9
 8006a24:	4639      	mov	r1, r7
 8006a26:	4630      	mov	r0, r6
 8006a28:	47c0      	blx	r8
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	d09a      	beq.n	8006964 <_printf_i+0x12c>
 8006a2e:	3501      	adds	r5, #1
 8006a30:	68e3      	ldr	r3, [r4, #12]
 8006a32:	9a03      	ldr	r2, [sp, #12]
 8006a34:	1a9b      	subs	r3, r3, r2
 8006a36:	42ab      	cmp	r3, r5
 8006a38:	dcf2      	bgt.n	8006a20 <_printf_i+0x1e8>
 8006a3a:	e7eb      	b.n	8006a14 <_printf_i+0x1dc>
 8006a3c:	2500      	movs	r5, #0
 8006a3e:	f104 0919 	add.w	r9, r4, #25
 8006a42:	e7f5      	b.n	8006a30 <_printf_i+0x1f8>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1ac      	bne.n	80069a2 <_printf_i+0x16a>
 8006a48:	7803      	ldrb	r3, [r0, #0]
 8006a4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a52:	e76c      	b.n	800692e <_printf_i+0xf6>
 8006a54:	080072a9 	.word	0x080072a9
 8006a58:	080072ba 	.word	0x080072ba

08006a5c <memcpy>:
 8006a5c:	b510      	push	{r4, lr}
 8006a5e:	1e43      	subs	r3, r0, #1
 8006a60:	440a      	add	r2, r1
 8006a62:	4291      	cmp	r1, r2
 8006a64:	d100      	bne.n	8006a68 <memcpy+0xc>
 8006a66:	bd10      	pop	{r4, pc}
 8006a68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a70:	e7f7      	b.n	8006a62 <memcpy+0x6>

08006a72 <memmove>:
 8006a72:	4288      	cmp	r0, r1
 8006a74:	b510      	push	{r4, lr}
 8006a76:	eb01 0302 	add.w	r3, r1, r2
 8006a7a:	d807      	bhi.n	8006a8c <memmove+0x1a>
 8006a7c:	1e42      	subs	r2, r0, #1
 8006a7e:	4299      	cmp	r1, r3
 8006a80:	d00a      	beq.n	8006a98 <memmove+0x26>
 8006a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a86:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a8a:	e7f8      	b.n	8006a7e <memmove+0xc>
 8006a8c:	4283      	cmp	r3, r0
 8006a8e:	d9f5      	bls.n	8006a7c <memmove+0xa>
 8006a90:	1881      	adds	r1, r0, r2
 8006a92:	1ad2      	subs	r2, r2, r3
 8006a94:	42d3      	cmn	r3, r2
 8006a96:	d100      	bne.n	8006a9a <memmove+0x28>
 8006a98:	bd10      	pop	{r4, pc}
 8006a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006aa2:	e7f7      	b.n	8006a94 <memmove+0x22>

08006aa4 <_free_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4605      	mov	r5, r0
 8006aa8:	2900      	cmp	r1, #0
 8006aaa:	d045      	beq.n	8006b38 <_free_r+0x94>
 8006aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ab0:	1f0c      	subs	r4, r1, #4
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bfb8      	it	lt
 8006ab6:	18e4      	addlt	r4, r4, r3
 8006ab8:	f000 f8d2 	bl	8006c60 <__malloc_lock>
 8006abc:	4a1f      	ldr	r2, [pc, #124]	; (8006b3c <_free_r+0x98>)
 8006abe:	6813      	ldr	r3, [r2, #0]
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	b933      	cbnz	r3, 8006ad2 <_free_r+0x2e>
 8006ac4:	6063      	str	r3, [r4, #4]
 8006ac6:	6014      	str	r4, [r2, #0]
 8006ac8:	4628      	mov	r0, r5
 8006aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ace:	f000 b8c8 	b.w	8006c62 <__malloc_unlock>
 8006ad2:	42a3      	cmp	r3, r4
 8006ad4:	d90c      	bls.n	8006af0 <_free_r+0x4c>
 8006ad6:	6821      	ldr	r1, [r4, #0]
 8006ad8:	1862      	adds	r2, r4, r1
 8006ada:	4293      	cmp	r3, r2
 8006adc:	bf04      	itt	eq
 8006ade:	681a      	ldreq	r2, [r3, #0]
 8006ae0:	685b      	ldreq	r3, [r3, #4]
 8006ae2:	6063      	str	r3, [r4, #4]
 8006ae4:	bf04      	itt	eq
 8006ae6:	1852      	addeq	r2, r2, r1
 8006ae8:	6022      	streq	r2, [r4, #0]
 8006aea:	6004      	str	r4, [r0, #0]
 8006aec:	e7ec      	b.n	8006ac8 <_free_r+0x24>
 8006aee:	4613      	mov	r3, r2
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	b10a      	cbz	r2, 8006af8 <_free_r+0x54>
 8006af4:	42a2      	cmp	r2, r4
 8006af6:	d9fa      	bls.n	8006aee <_free_r+0x4a>
 8006af8:	6819      	ldr	r1, [r3, #0]
 8006afa:	1858      	adds	r0, r3, r1
 8006afc:	42a0      	cmp	r0, r4
 8006afe:	d10b      	bne.n	8006b18 <_free_r+0x74>
 8006b00:	6820      	ldr	r0, [r4, #0]
 8006b02:	4401      	add	r1, r0
 8006b04:	1858      	adds	r0, r3, r1
 8006b06:	4282      	cmp	r2, r0
 8006b08:	6019      	str	r1, [r3, #0]
 8006b0a:	d1dd      	bne.n	8006ac8 <_free_r+0x24>
 8006b0c:	6810      	ldr	r0, [r2, #0]
 8006b0e:	6852      	ldr	r2, [r2, #4]
 8006b10:	605a      	str	r2, [r3, #4]
 8006b12:	4401      	add	r1, r0
 8006b14:	6019      	str	r1, [r3, #0]
 8006b16:	e7d7      	b.n	8006ac8 <_free_r+0x24>
 8006b18:	d902      	bls.n	8006b20 <_free_r+0x7c>
 8006b1a:	230c      	movs	r3, #12
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	e7d3      	b.n	8006ac8 <_free_r+0x24>
 8006b20:	6820      	ldr	r0, [r4, #0]
 8006b22:	1821      	adds	r1, r4, r0
 8006b24:	428a      	cmp	r2, r1
 8006b26:	bf04      	itt	eq
 8006b28:	6811      	ldreq	r1, [r2, #0]
 8006b2a:	6852      	ldreq	r2, [r2, #4]
 8006b2c:	6062      	str	r2, [r4, #4]
 8006b2e:	bf04      	itt	eq
 8006b30:	1809      	addeq	r1, r1, r0
 8006b32:	6021      	streq	r1, [r4, #0]
 8006b34:	605c      	str	r4, [r3, #4]
 8006b36:	e7c7      	b.n	8006ac8 <_free_r+0x24>
 8006b38:	bd38      	pop	{r3, r4, r5, pc}
 8006b3a:	bf00      	nop
 8006b3c:	200001c4 	.word	0x200001c4

08006b40 <_malloc_r>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	1ccd      	adds	r5, r1, #3
 8006b44:	f025 0503 	bic.w	r5, r5, #3
 8006b48:	3508      	adds	r5, #8
 8006b4a:	2d0c      	cmp	r5, #12
 8006b4c:	bf38      	it	cc
 8006b4e:	250c      	movcc	r5, #12
 8006b50:	2d00      	cmp	r5, #0
 8006b52:	4606      	mov	r6, r0
 8006b54:	db01      	blt.n	8006b5a <_malloc_r+0x1a>
 8006b56:	42a9      	cmp	r1, r5
 8006b58:	d903      	bls.n	8006b62 <_malloc_r+0x22>
 8006b5a:	230c      	movs	r3, #12
 8006b5c:	6033      	str	r3, [r6, #0]
 8006b5e:	2000      	movs	r0, #0
 8006b60:	bd70      	pop	{r4, r5, r6, pc}
 8006b62:	f000 f87d 	bl	8006c60 <__malloc_lock>
 8006b66:	4a21      	ldr	r2, [pc, #132]	; (8006bec <_malloc_r+0xac>)
 8006b68:	6814      	ldr	r4, [r2, #0]
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	b991      	cbnz	r1, 8006b94 <_malloc_r+0x54>
 8006b6e:	4c20      	ldr	r4, [pc, #128]	; (8006bf0 <_malloc_r+0xb0>)
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	b91b      	cbnz	r3, 8006b7c <_malloc_r+0x3c>
 8006b74:	4630      	mov	r0, r6
 8006b76:	f000 f863 	bl	8006c40 <_sbrk_r>
 8006b7a:	6020      	str	r0, [r4, #0]
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f000 f85e 	bl	8006c40 <_sbrk_r>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d124      	bne.n	8006bd2 <_malloc_r+0x92>
 8006b88:	230c      	movs	r3, #12
 8006b8a:	6033      	str	r3, [r6, #0]
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f000 f868 	bl	8006c62 <__malloc_unlock>
 8006b92:	e7e4      	b.n	8006b5e <_malloc_r+0x1e>
 8006b94:	680b      	ldr	r3, [r1, #0]
 8006b96:	1b5b      	subs	r3, r3, r5
 8006b98:	d418      	bmi.n	8006bcc <_malloc_r+0x8c>
 8006b9a:	2b0b      	cmp	r3, #11
 8006b9c:	d90f      	bls.n	8006bbe <_malloc_r+0x7e>
 8006b9e:	600b      	str	r3, [r1, #0]
 8006ba0:	50cd      	str	r5, [r1, r3]
 8006ba2:	18cc      	adds	r4, r1, r3
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f000 f85c 	bl	8006c62 <__malloc_unlock>
 8006baa:	f104 000b 	add.w	r0, r4, #11
 8006bae:	1d23      	adds	r3, r4, #4
 8006bb0:	f020 0007 	bic.w	r0, r0, #7
 8006bb4:	1ac3      	subs	r3, r0, r3
 8006bb6:	d0d3      	beq.n	8006b60 <_malloc_r+0x20>
 8006bb8:	425a      	negs	r2, r3
 8006bba:	50e2      	str	r2, [r4, r3]
 8006bbc:	e7d0      	b.n	8006b60 <_malloc_r+0x20>
 8006bbe:	428c      	cmp	r4, r1
 8006bc0:	684b      	ldr	r3, [r1, #4]
 8006bc2:	bf16      	itet	ne
 8006bc4:	6063      	strne	r3, [r4, #4]
 8006bc6:	6013      	streq	r3, [r2, #0]
 8006bc8:	460c      	movne	r4, r1
 8006bca:	e7eb      	b.n	8006ba4 <_malloc_r+0x64>
 8006bcc:	460c      	mov	r4, r1
 8006bce:	6849      	ldr	r1, [r1, #4]
 8006bd0:	e7cc      	b.n	8006b6c <_malloc_r+0x2c>
 8006bd2:	1cc4      	adds	r4, r0, #3
 8006bd4:	f024 0403 	bic.w	r4, r4, #3
 8006bd8:	42a0      	cmp	r0, r4
 8006bda:	d005      	beq.n	8006be8 <_malloc_r+0xa8>
 8006bdc:	1a21      	subs	r1, r4, r0
 8006bde:	4630      	mov	r0, r6
 8006be0:	f000 f82e 	bl	8006c40 <_sbrk_r>
 8006be4:	3001      	adds	r0, #1
 8006be6:	d0cf      	beq.n	8006b88 <_malloc_r+0x48>
 8006be8:	6025      	str	r5, [r4, #0]
 8006bea:	e7db      	b.n	8006ba4 <_malloc_r+0x64>
 8006bec:	200001c4 	.word	0x200001c4
 8006bf0:	200001c8 	.word	0x200001c8

08006bf4 <_realloc_r>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	4607      	mov	r7, r0
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	460e      	mov	r6, r1
 8006bfc:	b921      	cbnz	r1, 8006c08 <_realloc_r+0x14>
 8006bfe:	4611      	mov	r1, r2
 8006c00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c04:	f7ff bf9c 	b.w	8006b40 <_malloc_r>
 8006c08:	b922      	cbnz	r2, 8006c14 <_realloc_r+0x20>
 8006c0a:	f7ff ff4b 	bl	8006aa4 <_free_r>
 8006c0e:	4625      	mov	r5, r4
 8006c10:	4628      	mov	r0, r5
 8006c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c14:	f000 f826 	bl	8006c64 <_malloc_usable_size_r>
 8006c18:	42a0      	cmp	r0, r4
 8006c1a:	d20f      	bcs.n	8006c3c <_realloc_r+0x48>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4638      	mov	r0, r7
 8006c20:	f7ff ff8e 	bl	8006b40 <_malloc_r>
 8006c24:	4605      	mov	r5, r0
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d0f2      	beq.n	8006c10 <_realloc_r+0x1c>
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	f7ff ff15 	bl	8006a5c <memcpy>
 8006c32:	4631      	mov	r1, r6
 8006c34:	4638      	mov	r0, r7
 8006c36:	f7ff ff35 	bl	8006aa4 <_free_r>
 8006c3a:	e7e9      	b.n	8006c10 <_realloc_r+0x1c>
 8006c3c:	4635      	mov	r5, r6
 8006c3e:	e7e7      	b.n	8006c10 <_realloc_r+0x1c>

08006c40 <_sbrk_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	4c06      	ldr	r4, [pc, #24]	; (8006c5c <_sbrk_r+0x1c>)
 8006c44:	2300      	movs	r3, #0
 8006c46:	4605      	mov	r5, r0
 8006c48:	4608      	mov	r0, r1
 8006c4a:	6023      	str	r3, [r4, #0]
 8006c4c:	f7fc f9fa 	bl	8003044 <_sbrk>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d102      	bne.n	8006c5a <_sbrk_r+0x1a>
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	b103      	cbz	r3, 8006c5a <_sbrk_r+0x1a>
 8006c58:	602b      	str	r3, [r5, #0]
 8006c5a:	bd38      	pop	{r3, r4, r5, pc}
 8006c5c:	20000460 	.word	0x20000460

08006c60 <__malloc_lock>:
 8006c60:	4770      	bx	lr

08006c62 <__malloc_unlock>:
 8006c62:	4770      	bx	lr

08006c64 <_malloc_usable_size_r>:
 8006c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c68:	1f18      	subs	r0, r3, #4
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	bfbc      	itt	lt
 8006c6e:	580b      	ldrlt	r3, [r1, r0]
 8006c70:	18c0      	addlt	r0, r0, r3
 8006c72:	4770      	bx	lr

08006c74 <log>:
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	ed2d 8b02 	vpush	{d8}
 8006c7a:	b08a      	sub	sp, #40	; 0x28
 8006c7c:	ec55 4b10 	vmov	r4, r5, d0
 8006c80:	f000 f87a 	bl	8006d78 <__ieee754_log>
 8006c84:	4b36      	ldr	r3, [pc, #216]	; (8006d60 <log+0xec>)
 8006c86:	eeb0 8a40 	vmov.f32	s16, s0
 8006c8a:	eef0 8a60 	vmov.f32	s17, s1
 8006c8e:	f993 6000 	ldrsb.w	r6, [r3]
 8006c92:	1c73      	adds	r3, r6, #1
 8006c94:	d05b      	beq.n	8006d4e <log+0xda>
 8006c96:	4622      	mov	r2, r4
 8006c98:	462b      	mov	r3, r5
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	f7f9 ff45 	bl	8000b2c <__aeabi_dcmpun>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d153      	bne.n	8006d4e <log+0xda>
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4620      	mov	r0, r4
 8006cac:	4629      	mov	r1, r5
 8006cae:	f7f9 ff33 	bl	8000b18 <__aeabi_dcmpgt>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d14b      	bne.n	8006d4e <log+0xda>
 8006cb6:	4b2b      	ldr	r3, [pc, #172]	; (8006d64 <log+0xf0>)
 8006cb8:	9301      	str	r3, [sp, #4]
 8006cba:	9008      	str	r0, [sp, #32]
 8006cbc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006cc0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006cc4:	b9a6      	cbnz	r6, 8006cf0 <log+0x7c>
 8006cc6:	4b28      	ldr	r3, [pc, #160]	; (8006d68 <log+0xf4>)
 8006cc8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006ccc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	f7f9 fef6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cdc:	bb40      	cbnz	r0, 8006d30 <log+0xbc>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	2e02      	cmp	r6, #2
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	d119      	bne.n	8006d1a <log+0xa6>
 8006ce6:	f7ff fb8d 	bl	8006404 <__errno>
 8006cea:	2321      	movs	r3, #33	; 0x21
 8006cec:	6003      	str	r3, [r0, #0]
 8006cee:	e019      	b.n	8006d24 <log+0xb0>
 8006cf0:	4b1e      	ldr	r3, [pc, #120]	; (8006d6c <log+0xf8>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4629      	mov	r1, r5
 8006d00:	f7f9 fee2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d0ea      	beq.n	8006cde <log+0x6a>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	429e      	cmp	r6, r3
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	d111      	bne.n	8006d34 <log+0xc0>
 8006d10:	f7ff fb78 	bl	8006404 <__errno>
 8006d14:	2322      	movs	r3, #34	; 0x22
 8006d16:	6003      	str	r3, [r0, #0]
 8006d18:	e011      	b.n	8006d3e <log+0xca>
 8006d1a:	4668      	mov	r0, sp
 8006d1c:	f000 f9de 	bl	80070dc <matherr>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d0e0      	beq.n	8006ce6 <log+0x72>
 8006d24:	4812      	ldr	r0, [pc, #72]	; (8006d70 <log+0xfc>)
 8006d26:	f000 f9db 	bl	80070e0 <nan>
 8006d2a:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006d2e:	e006      	b.n	8006d3e <log+0xca>
 8006d30:	2302      	movs	r3, #2
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	4668      	mov	r0, sp
 8006d36:	f000 f9d1 	bl	80070dc <matherr>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d0e8      	beq.n	8006d10 <log+0x9c>
 8006d3e:	9b08      	ldr	r3, [sp, #32]
 8006d40:	b11b      	cbz	r3, 8006d4a <log+0xd6>
 8006d42:	f7ff fb5f 	bl	8006404 <__errno>
 8006d46:	9b08      	ldr	r3, [sp, #32]
 8006d48:	6003      	str	r3, [r0, #0]
 8006d4a:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006d4e:	eeb0 0a48 	vmov.f32	s0, s16
 8006d52:	eef0 0a68 	vmov.f32	s1, s17
 8006d56:	b00a      	add	sp, #40	; 0x28
 8006d58:	ecbd 8b02 	vpop	{d8}
 8006d5c:	bd70      	pop	{r4, r5, r6, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000074 	.word	0x20000074
 8006d64:	080072cb 	.word	0x080072cb
 8006d68:	c7efffff 	.word	0xc7efffff
 8006d6c:	fff00000 	.word	0xfff00000
 8006d70:	0800729d 	.word	0x0800729d
 8006d74:	00000000 	.word	0x00000000

08006d78 <__ieee754_log>:
 8006d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	ec51 0b10 	vmov	r0, r1, d0
 8006d80:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006d84:	b087      	sub	sp, #28
 8006d86:	460d      	mov	r5, r1
 8006d88:	da27      	bge.n	8006dda <__ieee754_log+0x62>
 8006d8a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d8e:	4303      	orrs	r3, r0
 8006d90:	ee10 2a10 	vmov	r2, s0
 8006d94:	d10a      	bne.n	8006dac <__ieee754_log+0x34>
 8006d96:	49cc      	ldr	r1, [pc, #816]	; (80070c8 <__ieee754_log+0x350>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	f7f9 fd55 	bl	800084c <__aeabi_ddiv>
 8006da2:	ec41 0b10 	vmov	d0, r0, r1
 8006da6:	b007      	add	sp, #28
 8006da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dac:	2900      	cmp	r1, #0
 8006dae:	da05      	bge.n	8006dbc <__ieee754_log+0x44>
 8006db0:	460b      	mov	r3, r1
 8006db2:	f7f9 fa69 	bl	8000288 <__aeabi_dsub>
 8006db6:	2200      	movs	r2, #0
 8006db8:	2300      	movs	r3, #0
 8006dba:	e7f0      	b.n	8006d9e <__ieee754_log+0x26>
 8006dbc:	4bc3      	ldr	r3, [pc, #780]	; (80070cc <__ieee754_log+0x354>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f7f9 fc1a 	bl	80005f8 <__aeabi_dmul>
 8006dc4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8006dc8:	460d      	mov	r5, r1
 8006dca:	4ac1      	ldr	r2, [pc, #772]	; (80070d0 <__ieee754_log+0x358>)
 8006dcc:	4295      	cmp	r5, r2
 8006dce:	dd06      	ble.n	8006dde <__ieee754_log+0x66>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	f7f9 fa5a 	bl	800028c <__adddf3>
 8006dd8:	e7e3      	b.n	8006da2 <__ieee754_log+0x2a>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e7f5      	b.n	8006dca <__ieee754_log+0x52>
 8006dde:	152c      	asrs	r4, r5, #20
 8006de0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006de4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006de8:	441c      	add	r4, r3
 8006dea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8006dee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8006df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006df6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8006dfa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8006dfe:	ea42 0105 	orr.w	r1, r2, r5
 8006e02:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8006e06:	2200      	movs	r2, #0
 8006e08:	4bb2      	ldr	r3, [pc, #712]	; (80070d4 <__ieee754_log+0x35c>)
 8006e0a:	f7f9 fa3d 	bl	8000288 <__aeabi_dsub>
 8006e0e:	1cab      	adds	r3, r5, #2
 8006e10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	4682      	mov	sl, r0
 8006e18:	468b      	mov	fp, r1
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	dc53      	bgt.n	8006ec8 <__ieee754_log+0x150>
 8006e20:	2300      	movs	r3, #0
 8006e22:	f7f9 fe51 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e26:	b1d0      	cbz	r0, 8006e5e <__ieee754_log+0xe6>
 8006e28:	2c00      	cmp	r4, #0
 8006e2a:	f000 8120 	beq.w	800706e <__ieee754_log+0x2f6>
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f7f9 fb78 	bl	8000524 <__aeabi_i2d>
 8006e34:	a390      	add	r3, pc, #576	; (adr r3, 8007078 <__ieee754_log+0x300>)
 8006e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	460f      	mov	r7, r1
 8006e3e:	f7f9 fbdb 	bl	80005f8 <__aeabi_dmul>
 8006e42:	a38f      	add	r3, pc, #572	; (adr r3, 8007080 <__ieee754_log+0x308>)
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	4604      	mov	r4, r0
 8006e4a:	460d      	mov	r5, r1
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	4639      	mov	r1, r7
 8006e50:	f7f9 fbd2 	bl	80005f8 <__aeabi_dmul>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4620      	mov	r0, r4
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	e7ba      	b.n	8006dd4 <__ieee754_log+0x5c>
 8006e5e:	a38a      	add	r3, pc, #552	; (adr r3, 8007088 <__ieee754_log+0x310>)
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	4650      	mov	r0, sl
 8006e66:	4659      	mov	r1, fp
 8006e68:	f7f9 fbc6 	bl	80005f8 <__aeabi_dmul>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	2000      	movs	r0, #0
 8006e72:	4999      	ldr	r1, [pc, #612]	; (80070d8 <__ieee754_log+0x360>)
 8006e74:	f7f9 fa08 	bl	8000288 <__aeabi_dsub>
 8006e78:	4652      	mov	r2, sl
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	460f      	mov	r7, r1
 8006e7e:	465b      	mov	r3, fp
 8006e80:	4650      	mov	r0, sl
 8006e82:	4659      	mov	r1, fp
 8006e84:	f7f9 fbb8 	bl	80005f8 <__aeabi_dmul>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	4639      	mov	r1, r7
 8006e90:	f7f9 fbb2 	bl	80005f8 <__aeabi_dmul>
 8006e94:	4606      	mov	r6, r0
 8006e96:	460f      	mov	r7, r1
 8006e98:	b914      	cbnz	r4, 8006ea0 <__ieee754_log+0x128>
 8006e9a:	4632      	mov	r2, r6
 8006e9c:	463b      	mov	r3, r7
 8006e9e:	e0a0      	b.n	8006fe2 <__ieee754_log+0x26a>
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f7f9 fb3f 	bl	8000524 <__aeabi_i2d>
 8006ea6:	a374      	add	r3, pc, #464	; (adr r3, 8007078 <__ieee754_log+0x300>)
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	4680      	mov	r8, r0
 8006eae:	4689      	mov	r9, r1
 8006eb0:	f7f9 fba2 	bl	80005f8 <__aeabi_dmul>
 8006eb4:	a372      	add	r3, pc, #456	; (adr r3, 8007080 <__ieee754_log+0x308>)
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	4604      	mov	r4, r0
 8006ebc:	460d      	mov	r5, r1
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	f7f9 fb99 	bl	80005f8 <__aeabi_dmul>
 8006ec6:	e0a5      	b.n	8007014 <__ieee754_log+0x29c>
 8006ec8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ecc:	f7f9 f9de 	bl	800028c <__adddf3>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4650      	mov	r0, sl
 8006ed6:	4659      	mov	r1, fp
 8006ed8:	f7f9 fcb8 	bl	800084c <__aeabi_ddiv>
 8006edc:	e9cd 0100 	strd	r0, r1, [sp]
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f7f9 fb1f 	bl	8000524 <__aeabi_i2d>
 8006ee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eee:	4610      	mov	r0, r2
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	f7f9 fb81 	bl	80005f8 <__aeabi_dmul>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006efe:	f7f9 fb7b 	bl	80005f8 <__aeabi_dmul>
 8006f02:	a363      	add	r3, pc, #396	; (adr r3, 8007090 <__ieee754_log+0x318>)
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	4680      	mov	r8, r0
 8006f0a:	4689      	mov	r9, r1
 8006f0c:	f7f9 fb74 	bl	80005f8 <__aeabi_dmul>
 8006f10:	a361      	add	r3, pc, #388	; (adr r3, 8007098 <__ieee754_log+0x320>)
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	f7f9 f9b9 	bl	800028c <__adddf3>
 8006f1a:	4642      	mov	r2, r8
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	f7f9 fb6b 	bl	80005f8 <__aeabi_dmul>
 8006f22:	a35f      	add	r3, pc, #380	; (adr r3, 80070a0 <__ieee754_log+0x328>)
 8006f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f28:	f7f9 f9b0 	bl	800028c <__adddf3>
 8006f2c:	4642      	mov	r2, r8
 8006f2e:	464b      	mov	r3, r9
 8006f30:	f7f9 fb62 	bl	80005f8 <__aeabi_dmul>
 8006f34:	a35c      	add	r3, pc, #368	; (adr r3, 80070a8 <__ieee754_log+0x330>)
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	f7f9 f9a7 	bl	800028c <__adddf3>
 8006f3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f42:	f7f9 fb59 	bl	80005f8 <__aeabi_dmul>
 8006f46:	a35a      	add	r3, pc, #360	; (adr r3, 80070b0 <__ieee754_log+0x338>)
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f50:	4640      	mov	r0, r8
 8006f52:	4649      	mov	r1, r9
 8006f54:	f7f9 fb50 	bl	80005f8 <__aeabi_dmul>
 8006f58:	a357      	add	r3, pc, #348	; (adr r3, 80070b8 <__ieee754_log+0x340>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 f995 	bl	800028c <__adddf3>
 8006f62:	4642      	mov	r2, r8
 8006f64:	464b      	mov	r3, r9
 8006f66:	f7f9 fb47 	bl	80005f8 <__aeabi_dmul>
 8006f6a:	a355      	add	r3, pc, #340	; (adr r3, 80070c0 <__ieee754_log+0x348>)
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f7f9 f98c 	bl	800028c <__adddf3>
 8006f74:	4642      	mov	r2, r8
 8006f76:	464b      	mov	r3, r9
 8006f78:	f7f9 fb3e 	bl	80005f8 <__aeabi_dmul>
 8006f7c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006f88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f8c:	f7f9 f97e 	bl	800028c <__adddf3>
 8006f90:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8006f94:	3551      	adds	r5, #81	; 0x51
 8006f96:	4335      	orrs	r5, r6
 8006f98:	2d00      	cmp	r5, #0
 8006f9a:	4680      	mov	r8, r0
 8006f9c:	4689      	mov	r9, r1
 8006f9e:	dd48      	ble.n	8007032 <__ieee754_log+0x2ba>
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	4b4d      	ldr	r3, [pc, #308]	; (80070d8 <__ieee754_log+0x360>)
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	4659      	mov	r1, fp
 8006fa8:	f7f9 fb26 	bl	80005f8 <__aeabi_dmul>
 8006fac:	4652      	mov	r2, sl
 8006fae:	465b      	mov	r3, fp
 8006fb0:	f7f9 fb22 	bl	80005f8 <__aeabi_dmul>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4606      	mov	r6, r0
 8006fba:	460f      	mov	r7, r1
 8006fbc:	4640      	mov	r0, r8
 8006fbe:	4649      	mov	r1, r9
 8006fc0:	f7f9 f964 	bl	800028c <__adddf3>
 8006fc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fc8:	f7f9 fb16 	bl	80005f8 <__aeabi_dmul>
 8006fcc:	4680      	mov	r8, r0
 8006fce:	4689      	mov	r9, r1
 8006fd0:	b964      	cbnz	r4, 8006fec <__ieee754_log+0x274>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	4639      	mov	r1, r7
 8006fda:	f7f9 f955 	bl	8000288 <__aeabi_dsub>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4650      	mov	r0, sl
 8006fe4:	4659      	mov	r1, fp
 8006fe6:	f7f9 f94f 	bl	8000288 <__aeabi_dsub>
 8006fea:	e6da      	b.n	8006da2 <__ieee754_log+0x2a>
 8006fec:	a322      	add	r3, pc, #136	; (adr r3, 8007078 <__ieee754_log+0x300>)
 8006fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ff6:	f7f9 faff 	bl	80005f8 <__aeabi_dmul>
 8006ffa:	a321      	add	r3, pc, #132	; (adr r3, 8007080 <__ieee754_log+0x308>)
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	4604      	mov	r4, r0
 8007002:	460d      	mov	r5, r1
 8007004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007008:	f7f9 faf6 	bl	80005f8 <__aeabi_dmul>
 800700c:	4642      	mov	r2, r8
 800700e:	464b      	mov	r3, r9
 8007010:	f7f9 f93c 	bl	800028c <__adddf3>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4630      	mov	r0, r6
 800701a:	4639      	mov	r1, r7
 800701c:	f7f9 f934 	bl	8000288 <__aeabi_dsub>
 8007020:	4652      	mov	r2, sl
 8007022:	465b      	mov	r3, fp
 8007024:	f7f9 f930 	bl	8000288 <__aeabi_dsub>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4620      	mov	r0, r4
 800702e:	4629      	mov	r1, r5
 8007030:	e7d9      	b.n	8006fe6 <__ieee754_log+0x26e>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4650      	mov	r0, sl
 8007038:	4659      	mov	r1, fp
 800703a:	f7f9 f925 	bl	8000288 <__aeabi_dsub>
 800703e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007042:	f7f9 fad9 	bl	80005f8 <__aeabi_dmul>
 8007046:	4606      	mov	r6, r0
 8007048:	460f      	mov	r7, r1
 800704a:	2c00      	cmp	r4, #0
 800704c:	f43f af25 	beq.w	8006e9a <__ieee754_log+0x122>
 8007050:	a309      	add	r3, pc, #36	; (adr r3, 8007078 <__ieee754_log+0x300>)
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800705a:	f7f9 facd 	bl	80005f8 <__aeabi_dmul>
 800705e:	a308      	add	r3, pc, #32	; (adr r3, 8007080 <__ieee754_log+0x308>)
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	4604      	mov	r4, r0
 8007066:	460d      	mov	r5, r1
 8007068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800706c:	e729      	b.n	8006ec2 <__ieee754_log+0x14a>
 800706e:	2000      	movs	r0, #0
 8007070:	2100      	movs	r1, #0
 8007072:	e696      	b.n	8006da2 <__ieee754_log+0x2a>
 8007074:	f3af 8000 	nop.w
 8007078:	fee00000 	.word	0xfee00000
 800707c:	3fe62e42 	.word	0x3fe62e42
 8007080:	35793c76 	.word	0x35793c76
 8007084:	3dea39ef 	.word	0x3dea39ef
 8007088:	55555555 	.word	0x55555555
 800708c:	3fd55555 	.word	0x3fd55555
 8007090:	df3e5244 	.word	0xdf3e5244
 8007094:	3fc2f112 	.word	0x3fc2f112
 8007098:	96cb03de 	.word	0x96cb03de
 800709c:	3fc74664 	.word	0x3fc74664
 80070a0:	94229359 	.word	0x94229359
 80070a4:	3fd24924 	.word	0x3fd24924
 80070a8:	55555593 	.word	0x55555593
 80070ac:	3fe55555 	.word	0x3fe55555
 80070b0:	d078c69f 	.word	0xd078c69f
 80070b4:	3fc39a09 	.word	0x3fc39a09
 80070b8:	1d8e78af 	.word	0x1d8e78af
 80070bc:	3fcc71c5 	.word	0x3fcc71c5
 80070c0:	9997fa04 	.word	0x9997fa04
 80070c4:	3fd99999 	.word	0x3fd99999
 80070c8:	c3500000 	.word	0xc3500000
 80070cc:	43500000 	.word	0x43500000
 80070d0:	7fefffff 	.word	0x7fefffff
 80070d4:	3ff00000 	.word	0x3ff00000
 80070d8:	3fe00000 	.word	0x3fe00000

080070dc <matherr>:
 80070dc:	2000      	movs	r0, #0
 80070de:	4770      	bx	lr

080070e0 <nan>:
 80070e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80070e8 <nan+0x8>
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	00000000 	.word	0x00000000
 80070ec:	7ff80000 	.word	0x7ff80000

080070f0 <_init>:
 80070f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f2:	bf00      	nop
 80070f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f6:	bc08      	pop	{r3}
 80070f8:	469e      	mov	lr, r3
 80070fa:	4770      	bx	lr

080070fc <_fini>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	bf00      	nop
 8007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007102:	bc08      	pop	{r3}
 8007104:	469e      	mov	lr, r3
 8007106:	4770      	bx	lr
