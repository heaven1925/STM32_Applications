
0003_AudioTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002968  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d54  08002d54  00020016  2**0
                  CONTENTS
  4 .ARM          00000008  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d5c  08002d5c  00020016  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ARM.__at_0x20000000 0000000a  2000000c  08002d70  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000064  20000018  08002d7a  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000007c  08002d7a  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020016  2**0
                  CONTENTS, READONLY
 13 .debug_info   000098f2  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000179a  00000000  00000000  00029938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c0  00000000  00000000  0002b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000738  00000000  00000000  0002b898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e3a  00000000  00000000  0002bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009774  00000000  00000000  0004ce0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7eff  00000000  00000000  0005657e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e47d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ed0  00000000  00000000  0011e4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002b14 	.word	0x08002b14

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08002b14 	.word	0x08002b14

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <serialWrite>:
  @param   : uint8_t *buffer, uint8_t len
  @return  : void
  @date	   : 30.11.22
  @brief   : Virtual method that should implement writing from the module via UART.
********************************************************************************/
void serialWrite(const uint8_t *buffer, uint8_t len) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	70fb      	strb	r3, [r7, #3]
     
	HAL_UART_Transmit(DYPLAYERUART , &buffer[0] , len , 100 );
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	b29a      	uxth	r2, r3
 8000528:	2364      	movs	r3, #100	; 0x64
 800052a:	6879      	ldr	r1, [r7, #4]
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <serialWrite+0x24>)
 800052e:	f001 fea0 	bl	8002272 <HAL_UART_Transmit>
	
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000034 	.word	0x20000034

08000540 <serialWrite_crc>:
  @return  : void
  @date	   : 30.11.22
  @brief   : Map writing a single byte to the same method as writing a buffer of
             length 1. That buffer has crc value
********************************************************************************/
void serialWrite_crc(uint8_t crc) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
       
	uint8_t buf[1];
	buf[0] = crc;
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	733b      	strb	r3, [r7, #12]
		
    HAL_UART_Transmit(DYPLAYERUART, &buf[0] , 1 , 100);
 800054e:	f107 010c 	add.w	r1, r7, #12
 8000552:	2364      	movs	r3, #100	; 0x64
 8000554:	2201      	movs	r2, #1
 8000556:	4803      	ldr	r0, [pc, #12]	; (8000564 <serialWrite_crc+0x24>)
 8000558:	f001 fe8b 	bl	8002272 <HAL_UART_Transmit>
}
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000034 	.word	0x20000034

08000568 <serialRead>:
  @param   : uint8_t *buffer, uint8_t len
  @return  : uint8_t
  @date	   : 30.11.22
  @brief   : Virtual method that should implement reading from the module via UART.
********************************************************************************/
uint8_t serialRead(uint8_t *buffer, uint8_t len) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Receive(DYPLAYERUART, &buffer[0], len, 100);
 8000574:	78fb      	ldrb	r3, [r7, #3]
 8000576:	b29a      	uxth	r2, r3
 8000578:	2364      	movs	r3, #100	; 0x64
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <serialRead+0x24>)
 800057e:	f001 ff0a 	bl	8002396 <HAL_UART_Receive>

    return true;
 8000582:	2301      	movs	r3, #1
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000034 	.word	0x20000034

08000590 <checksum>:
  @param   : uint8_t *data, uint8_t len
  @return  : uint8_t
  @date	   : 30.11.22
  @brief   : Calculate the sum of all bytes in a buffer as a simple "CRC".
********************************************************************************/
uint8_t  checksum(uint8_t *data, uint8_t len) {
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i=0; i < len; i++) {
 80005a0:	2300      	movs	r3, #0
 80005a2:	73bb      	strb	r3, [r7, #14]
 80005a4:	e009      	b.n	80005ba <checksum+0x2a>
      sum = sum + data[i];
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	4413      	add	r3, r2
 80005b2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i=0; i < len; i++) {
 80005b4:	7bbb      	ldrb	r3, [r7, #14]
 80005b6:	3301      	adds	r3, #1
 80005b8:	73bb      	strb	r3, [r7, #14]
 80005ba:	7bba      	ldrb	r2, [r7, #14]
 80005bc:	78fb      	ldrb	r3, [r7, #3]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d3f1      	bcc.n	80005a6 <checksum+0x16>
    }
    return sum;
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <validateCrc>:
  @param   : uint8_t *data, uint8_t len
  @return  : bool
  @date	   : 30.11.22
  @brief   : Validate data buffer with CRC byte (last byte should be the CRC byte).
********************************************************************************/
bool validateCrc(uint8_t *data, uint8_t len) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = data[len - 1];
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	3b01      	subs	r3, #1
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	4413      	add	r3, r2
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	73fb      	strb	r3, [r7, #15]
    return checksum(data, len - 1) == crc;
 80005e8:	78fb      	ldrb	r3, [r7, #3]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4619      	mov	r1, r3
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff ffcd 	bl	8000590 <checksum>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	4293      	cmp	r3, r2
 80005fe:	bf0c      	ite	eq
 8000600:	2301      	moveq	r3, #1
 8000602:	2300      	movne	r3, #0
 8000604:	b2db      	uxtb	r3, r3
}
 8000606:	4618      	mov	r0, r3
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <sendCommand_nocrc>:
  @param   : void
  @return  : uint8_t *data, uint8_t len
  @date	   : 30.11.22
  @brief   : Send a command to the module, adds a CRC to the passed buffer.
********************************************************************************/
void sendCommand_nocrc(uint8_t *data, uint8_t len) {
 800060e:	b580      	push	{r7, lr}
 8000610:	b084      	sub	sp, #16
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	460b      	mov	r3, r1
 8000618:	70fb      	strb	r3, [r7, #3]

    uint8_t crc = checksum(data, len);
 800061a:	78fb      	ldrb	r3, [r7, #3]
 800061c:	4619      	mov	r1, r3
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff ffb6 	bl	8000590 <checksum>
 8000624:	4603      	mov	r3, r0
 8000626:	73fb      	strb	r3, [r7, #15]
    serialWrite(data, len);
 8000628:	78fb      	ldrb	r3, [r7, #3]
 800062a:	4619      	mov	r1, r3
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff ff73 	bl	8000518 <serialWrite>
    serialWrite_crc(crc);
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff83 	bl	8000540 <serialWrite_crc>
}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <sendCommand>:
  @param   : uint8_t *data, uint8_t len, uint8_t crc
  @return  : void
  @date	   : 30.11.22
  @brief   : data pointer to bytes to send to the module.
********************************************************************************/
void sendCommand (const uint8_t *data, uint8_t len, uint8_t crc) {
 8000642:	b580      	push	{r7, lr}
 8000644:	b082      	sub	sp, #8
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	460b      	mov	r3, r1
 800064c:	70fb      	strb	r3, [r7, #3]
 800064e:	4613      	mov	r3, r2
 8000650:	70bb      	strb	r3, [r7, #2]
    serialWrite(data, len);
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	4619      	mov	r1, r3
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ff5e 	bl	8000518 <serialWrite>
    serialWrite_crc(crc);
 800065c:	78bb      	ldrb	r3, [r7, #2]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff6e 	bl	8000540 <serialWrite_crc>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <getResponse>:
  @return  : bool
  @date	   : 30.11.22
  @brief   : Get a response to a command.
        	 Reads data from UART, validates the CRC, and puts it in the buffer.
********************************************************************************/
bool getResponse(uint8_t *buffer, uint8_t len) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
    if (serialRead(buffer, len) > 0) {
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	4619      	mov	r1, r3
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ff73 	bl	8000568 <serialRead>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d009      	beq.n	800069c <getResponse+0x30>
      if (DYPlayer.validateCrc(buffer, len)) {
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <getResponse+0x3c>)
 800068a:	78fb      	ldrb	r3, [r7, #3]
 800068c:	4619      	mov	r1, r3
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	4790      	blx	r2
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <getResponse+0x30>
        return true;
 8000698:	2301      	movs	r3, #1
 800069a:	e000      	b.n	800069e <getResponse+0x32>
      }
    }
    return false;
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	080005d1 	.word	0x080005d1

080006ac <byPathCommand>:

             E.g.: /SONGS1/FILE1.MP3 should become: /SONGS1﹡/FILE1*MP3
             NOTE: This comment uses a unicode * look-a-alike (﹡) because ﹡/ end the
             comment.
********************************************************************************/
void byPathCommand(uint8_t command, device_t device, char *path) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b090      	sub	sp, #64	; 0x40
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	603a      	str	r2, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	460b      	mov	r3, r1
 80006ba:	71bb      	strb	r3, [r7, #6]
    uint8_t len = strlen(path);
 80006bc:	6838      	ldr	r0, [r7, #0]
 80006be:	f7ff fda1 	bl	8000204 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (len < 1) return;
 80006c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	f000 808d 	beq.w	80007ec <byPathCommand+0x140>
    uint8_t _len = len;
 80006d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80006d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    // Count / in path and, except root slash and determine new length
    for (uint8_t i = 1; i < len; i++) {
 80006da:	2301      	movs	r3, #1
 80006dc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80006e0:	e010      	b.n	8000704 <byPathCommand+0x58>
      if (path[i] == '/')
 80006e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b2f      	cmp	r3, #47	; 0x2f
 80006ee:	d104      	bne.n	80006fa <byPathCommand+0x4e>
        _len++;
 80006f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006f4:	3301      	adds	r3, #1
 80006f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    for (uint8_t i = 1; i < len; i++) {
 80006fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80006fe:	3301      	adds	r3, #1
 8000700:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000704:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000708:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800070c:	429a      	cmp	r2, r3
 800070e:	d3e8      	bcc.n	80006e2 <byPathCommand+0x36>
    uint8_t *_command = new uint8_t[_len + 4];
    #else
    uint8_t _command[DY_PATH_LEN+4];
    #endif

    _command[0] = 0xaa;
 8000710:	23aa      	movs	r3, #170	; 0xaa
 8000712:	733b      	strb	r3, [r7, #12]
    _command[1] = command;
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	737b      	strb	r3, [r7, #13]
    _command[2] = _len + 1;
 8000718:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800071c:	3301      	adds	r3, #1
 800071e:	b2db      	uxtb	r3, r3
 8000720:	73bb      	strb	r3, [r7, #14]
    _command[3] = (uint8_t) device;
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	73fb      	strb	r3, [r7, #15]
    _command[4] = path[0];
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	743b      	strb	r3, [r7, #16]
    uint8_t j = 5;
 800072c:	2305      	movs	r3, #5
 800072e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    for (uint8_t i = 1; i < len; i++) {
 8000732:	2301      	movs	r3, #1
 8000734:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000738:	e047      	b.n	80007ca <byPathCommand+0x11e>
      switch(path[i]) {
 800073a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b2e      	cmp	r3, #46	; 0x2e
 8000746:	d002      	beq.n	800074e <byPathCommand+0xa2>
 8000748:	2b2f      	cmp	r3, #47	; 0x2f
 800074a:	d008      	beq.n	800075e <byPathCommand+0xb2>
 800074c:	e013      	b.n	8000776 <byPathCommand+0xca>
        case '.':
          _command[j] = '*';
 800074e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000752:	3340      	adds	r3, #64	; 0x40
 8000754:	443b      	add	r3, r7
 8000756:	222a      	movs	r2, #42	; 0x2a
 8000758:	f803 2c34 	strb.w	r2, [r3, #-52]
          break;
 800075c:	e02b      	b.n	80007b6 <byPathCommand+0x10a>
        case '/':
          _command[j] = '*';
 800075e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000762:	3340      	adds	r3, #64	; 0x40
 8000764:	443b      	add	r3, r7
 8000766:	222a      	movs	r2, #42	; 0x2a
 8000768:	f803 2c34 	strb.w	r2, [r3, #-52]
          j++;
 800076c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000770:	3301      	adds	r3, #1
 8000772:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
          // fall-through
        default:
          _command[j] = toupper(path[i]);
 8000776:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	4413      	add	r3, r2
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8000784:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000788:	3301      	adds	r3, #1
 800078a:	4a1a      	ldr	r2, [pc, #104]	; (80007f4 <byPathCommand+0x148>)
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	f003 0303 	and.w	r3, r3, #3
 8000794:	2b02      	cmp	r3, #2
 8000796:	d103      	bne.n	80007a0 <byPathCommand+0xf4>
 8000798:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800079c:	3b20      	subs	r3, #32
 800079e:	e001      	b.n	80007a4 <byPathCommand+0xf8>
 80007a0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80007a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80007a8:	b2d9      	uxtb	r1, r3
 80007aa:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80007ae:	443b      	add	r3, r7
 80007b0:	460a      	mov	r2, r1
 80007b2:	f803 2c34 	strb.w	r2, [r3, #-52]
      }
      j++;
 80007b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80007ba:	3301      	adds	r3, #1
 80007bc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    for (uint8_t i = 1; i < len; i++) {
 80007c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80007c4:	3301      	adds	r3, #1
 80007c6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80007ca:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80007ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d3b1      	bcc.n	800073a <byPathCommand+0x8e>
    }
    sendCommand_nocrc(_command, len + 4);
 80007d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80007da:	3304      	adds	r3, #4
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff12 	bl	800060e <sendCommand_nocrc>
 80007ea:	e000      	b.n	80007ee <byPathCommand+0x142>
    if (len < 1) return;
 80007ec:	bf00      	nop
    #ifdef DY_PATHS_IN_HEAP
    delete[] _command;
    #endif
}
 80007ee:	3740      	adds	r7, #64	; 0x40
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	08002c50 	.word	0x08002c50

080007f8 <checkPlayState>:
  @param   : void
  @return  : play_state_t
  @date	   : 30.11.22
  @brief   : Check the current play state can, be called at any time.
********************************************************************************/
play_state_t checkPlayState(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
	/*
    uint8_t command[3] = { 0xaa, 0x01, 0x00 };
     sendCommand(command, 3, 0xab);
    */

    sendCommand( &controlCommands[QPLAY_CMD][0]            ,
 80007fe:	23ab      	movs	r3, #171	; 0xab
 8000800:	461a      	mov	r2, r3
 8000802:	2103      	movs	r1, #3
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <checkPlayState+0x34>)
 8000806:	f7ff ff1c 	bl	8000642 <sendCommand>
    			 LENGTHOF_COMMANDS				  		  ,
				 controlCommands[QPLAY_CMD][CMD_CRC_INDEX] );

    uint8_t buffer[6];
    if (DYPlayer.getResponse(buffer, 6)) {
 800080a:	4a09      	ldr	r2, [pc, #36]	; (8000830 <checkPlayState+0x38>)
 800080c:	463b      	mov	r3, r7
 800080e:	2106      	movs	r1, #6
 8000810:	4618      	mov	r0, r3
 8000812:	4790      	blx	r2
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <checkPlayState+0x28>
      return (play_state_t) buffer[3];
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	b25b      	sxtb	r3, r3
 800081e:	e001      	b.n	8000824 <checkPlayState+0x2c>
    }
    //return (play_state_t) PlayState.Fail;
    return Fail; //Fudge
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	08002bf4 	.word	0x08002bf4
 8000830:	0800066d 	.word	0x0800066d

08000834 <play>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Play the currently selected file from the start.
********************************************************************************/
void play(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	/*
    uint8_t command[3] = {0xaa, 0x02, 0x00};
    */

    sendCommand( &controlCommands[PLAY_CMD][0]            ,
 8000838:	23ac      	movs	r3, #172	; 0xac
 800083a:	461a      	mov	r2, r3
 800083c:	2103      	movs	r1, #3
 800083e:	4802      	ldr	r0, [pc, #8]	; (8000848 <play+0x14>)
 8000840:	f7ff feff 	bl	8000642 <sendCommand>
    			 LENGTHOF_COMMANDS				  		  ,
				 controlCommands[PLAY_CMD][CMD_CRC_INDEX] );
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	08002bcc 	.word	0x08002bcc

0800084c <pause>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Set the play state to paused.
********************************************************************************/
void pause() {
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	/*
    uint8_t command[3] = {0xaa, 0x03, 0x00};
    */

    sendCommand( &controlCommands[PAUSE_CMD][0]            ,
 8000850:	23ad      	movs	r3, #173	; 0xad
 8000852:	461a      	mov	r2, r3
 8000854:	2103      	movs	r1, #3
 8000856:	4802      	ldr	r0, [pc, #8]	; (8000860 <pause+0x14>)
 8000858:	f7ff fef3 	bl	8000642 <sendCommand>
    			 LENGTHOF_COMMANDS				  		   ,
				 controlCommands[PAUSE_CMD][CMD_CRC_INDEX] );

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08002bd0 	.word	0x08002bd0

08000864 <stop>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Set the play state to stopped.
********************************************************************************/
void stop() {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = {0xaa, 0x04, 0x00};
  */

    sendCommand( &controlCommands[STOP_CMD][0]            ,
 8000868:	23ae      	movs	r3, #174	; 0xae
 800086a:	461a      	mov	r2, r3
 800086c:	2103      	movs	r1, #3
 800086e:	4802      	ldr	r0, [pc, #8]	; (8000878 <stop+0x14>)
 8000870:	f7ff fee7 	bl	8000642 <sendCommand>
    			 LENGTHOF_COMMANDS				  		  ,
				 controlCommands[STOP_CMD][CMD_CRC_INDEX] );
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	08002bd4 	.word	0x08002bd4

0800087c <previous>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Play the previous file.
********************************************************************************/
void previous() {
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = {0xaa, 0x05, 0x00};
  */
    sendCommand( &controlCommands[PREV_CMD][0]             ,
 8000880:	23af      	movs	r3, #175	; 0xaf
 8000882:	461a      	mov	r2, r3
 8000884:	2103      	movs	r1, #3
 8000886:	4802      	ldr	r0, [pc, #8]	; (8000890 <previous+0x14>)
 8000888:	f7ff fedb 	bl	8000642 <sendCommand>
    			 LENGTHOF_COMMANDS				  		   ,
				 controlCommands[PREV_CMD][CMD_CRC_INDEX] );
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	08002bd8 	.word	0x08002bd8

08000894 <next>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Play the next file.
********************************************************************************/
void next() {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = {0xaa, 0x06, 0x00};
  */

    sendCommand( &controlCommands[PREV_CMD][0]             ,
 8000898:	23af      	movs	r3, #175	; 0xaf
 800089a:	461a      	mov	r2, r3
 800089c:	2103      	movs	r1, #3
 800089e:	4802      	ldr	r0, [pc, #8]	; (80008a8 <next+0x14>)
 80008a0:	f7ff fecf 	bl	8000642 <sendCommand>
    			 LENGTHOF_COMMANDS				  		   ,
				 controlCommands[PREV_CMD][CMD_CRC_INDEX] );
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	08002bd8 	.word	0x08002bd8

080008ac <playSpecified>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   :
********************************************************************************/
void playSpecified(uint16_t number) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	80fb      	strh	r3, [r7, #6]
  /*
  uint8_t command[5] = { 0xaa, 0x07, 0x02, 0x00, 0x00 };
  */
  uint8_t command[5] = {0};
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	2300      	movs	r3, #0
 80008bc:	733b      	strb	r3, [r7, #12]

  memcpy( &command[0] ,
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2203      	movs	r2, #3
 80008c4:	490a      	ldr	r1, [pc, #40]	; (80008f0 <playSpecified+0x44>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 f90e 	bl	8002ae8 <memcpy>
		  &controlCommands[SPECIFIEDSONG_CMD][0],
		  LENGTHOF_COMMANDS);

  command[3] = number >> 8;
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	0a1b      	lsrs	r3, r3, #8
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	72fb      	strb	r3, [r7, #11]
  command[4] = number & 0xff;
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	733b      	strb	r3, [r7, #12]
  sendCommand_nocrc(command, 5);
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	2105      	movs	r1, #5
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fe93 	bl	800060e <sendCommand_nocrc>
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	08002c20 	.word	0x08002c20

080008f4 <playSpecifiedDevicePath>:
  @param   : device_t device, char *path
  @return  : void
  @date	   : 30.11.22
  @brief   : Play a sound file by number, number sent as 2 bytes.
********************************************************************************/
void playSpecifiedDevicePath(device_t device, char *path) {
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  DYPlayer.byPathCommand(0x08, device, path);
 8000900:	4c04      	ldr	r4, [pc, #16]	; (8000914 <playSpecifiedDevicePath+0x20>)
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	4619      	mov	r1, r3
 8000908:	2008      	movs	r0, #8
 800090a:	47a0      	blx	r4
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	080006ad 	.word	0x080006ad

08000918 <getPlayingDevice>:
  @param   : void
  @return  : device_t
  @date	   : 30.11.22
  @brief   : Get the storage device that is currently used for playing sound files.
********************************************************************************/
device_t getPlayingDevice(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
/*
  uint8_t command[3] = { 0xaa, 0x0a, 0x00 };
  sendCommand(command, 3, 0xb4);
*/

  sendCommand( &controlCommands[QCURRENTPLAY_CMD][0]            ,
 800091e:	23b4      	movs	r3, #180	; 0xb4
 8000920:	461a      	mov	r2, r3
 8000922:	2103      	movs	r1, #3
 8000924:	4808      	ldr	r0, [pc, #32]	; (8000948 <getPlayingDevice+0x30>)
 8000926:	f7ff fe8c 	bl	8000642 <sendCommand>
    		   LENGTHOF_COMMANDS				  		   		,
			   controlCommands[QCURRENTPLAY_CMD][CMD_CRC_INDEX] );

  uint8_t buffer[5];
  if (DYPlayer.getResponse(buffer, 5)) {
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <getPlayingDevice+0x34>)
 800092c:	463b      	mov	r3, r7
 800092e:	2105      	movs	r1, #5
 8000930:	4618      	mov	r0, r3
 8000932:	4790      	blx	r2
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <getPlayingDevice+0x26>
    return (device_t)buffer[3];
 800093a:	78fb      	ldrb	r3, [r7, #3]
 800093c:	e000      	b.n	8000940 <getPlayingDevice+0x28>
  }
  return Failed;
 800093e:	23fe      	movs	r3, #254	; 0xfe
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	08002bfc 	.word	0x08002bfc
 800094c:	0800066d 	.word	0x0800066d

08000950 <setPlayingDevice>:
  @date	   : 30.11.22
  @brief   : Set the device number the module should use.
     		 Tries to set the device but no guarantee is given, use `getDevice()`
     		 to check the actual current storage device.
********************************************************************************/
void setPlayingDevice(device_t device) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  /*
  uint8_t command[4] = { 0xaa, 0x0b, 0x01, 0x00 };
  */

  uint8_t command[4] = {0};
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]

  memcpy( &command[0] ,
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	2203      	movs	r2, #3
 8000964:	4907      	ldr	r1, [pc, #28]	; (8000984 <setPlayingDevice+0x34>)
 8000966:	4618      	mov	r0, r3
 8000968:	f002 f8be 	bl	8002ae8 <memcpy>
		  &controlCommands[SWTICHDRIVE_CMD][0],
		  LENGTHOF_COMMANDS);

  command[3] = (uint8_t) device;
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	73fb      	strb	r3, [r7, #15]
  sendCommand_nocrc(command, 4);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2104      	movs	r1, #4
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fe49 	bl	800060e <sendCommand_nocrc>
}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	08002c28 	.word	0x08002c28

08000988 <getSoundCount>:
  @param   : void
  @return  : uint16_t
  @date	   : 30.11.22
  @brief   : Get the amount of sound files on the current storage device.
********************************************************************************/
uint16_t getSoundCount(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
/*
  uint8_t command[3] = { 0xaa, 0x0c, 0x00 };
  sendCommand(command, 3, 0xb6);
*/

  sendCommand( &controlCommands[QNUMBEROFSONG_CMD][0]            ,
 800098e:	23b6      	movs	r3, #182	; 0xb6
 8000990:	461a      	mov	r2, r3
 8000992:	2103      	movs	r1, #3
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <getSoundCount+0x40>)
 8000996:	f7ff fe54 	bl	8000642 <sendCommand>
    		   LENGTHOF_COMMANDS				  		   		 ,
			   controlCommands[QNUMBEROFSONG_CMD][CMD_CRC_INDEX] );

  uint8_t buffer[6];
  if(DYPlayer.getResponse(buffer, 6)) {
 800099a:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <getSoundCount+0x44>)
 800099c:	463b      	mov	r3, r7
 800099e:	2106      	movs	r1, #6
 80009a0:	4618      	mov	r0, r3
 80009a2:	4790      	blx	r2
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d008      	beq.n	80009bc <getSoundCount+0x34>
    return (buffer[3] << 8) | buffer[4];
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	021b      	lsls	r3, r3, #8
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	793b      	ldrb	r3, [r7, #4]
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	4313      	orrs	r3, r2
 80009b6:	b21b      	sxth	r3, r3
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	e000      	b.n	80009be <getSoundCount+0x36>
  }
  return 0;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	08002c00 	.word	0x08002c00
 80009cc:	0800066d 	.word	0x0800066d

080009d0 <getPlayingSound>:
  @param   : void
  @return  : uint16_t
  @date	   : 30.11.22
  @brief   : Get the currently playing file by number.
********************************************************************************/
uint16_t getPlayingSound(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
/*
  uint8_t command[3] = { 0xaa, 0x0d, 0x00 };
  sendCommand(command, 3, 0xb7);
*/

  sendCommand( &controlCommands[QCURRENTSONG_CMD][0]            ,
 80009d6:	23b7      	movs	r3, #183	; 0xb7
 80009d8:	461a      	mov	r2, r3
 80009da:	2103      	movs	r1, #3
 80009dc:	480c      	ldr	r0, [pc, #48]	; (8000a10 <getPlayingSound+0x40>)
 80009de:	f7ff fe30 	bl	8000642 <sendCommand>
	    	   LENGTHOF_COMMANDS				  		   		 ,
			   controlCommands[QCURRENTSONG_CMD][CMD_CRC_INDEX] );

  uint8_t buffer[6];
  if(DYPlayer.getResponse(buffer, 6)) {
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <getPlayingSound+0x44>)
 80009e4:	463b      	mov	r3, r7
 80009e6:	2106      	movs	r1, #6
 80009e8:	4618      	mov	r0, r3
 80009ea:	4790      	blx	r2
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d008      	beq.n	8000a04 <getPlayingSound+0x34>
    return (buffer[3] << 8) | buffer[4];
 80009f2:	78fb      	ldrb	r3, [r7, #3]
 80009f4:	021b      	lsls	r3, r3, #8
 80009f6:	b21a      	sxth	r2, r3
 80009f8:	793b      	ldrb	r3, [r7, #4]
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	e000      	b.n	8000a06 <getPlayingSound+0x36>
  }
  return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	08002c04 	.word	0x08002c04
 8000a14:	0800066d 	.word	0x0800066d

08000a18 <previousDir>:
  @param   : playDirSound_t song
  @return  : void
  @date	   : 30.11.22
  @brief   : Select previous directory and start playing the first or last song.
********************************************************************************/
void previousDir (playDirSound_t song) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
 if (song == LastSound)
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d106      	bne.n	8000a36 <previousDir+0x1e>
 {
    /*
    uint8_t command[3] = { 0xaa, 0x0e, 0x00 };
    sendCommand(command, 3, 0xb8);
    */
    sendCommand( &controlCommands[PREV_FILE][0]            ,
 8000a28:	23b8      	movs	r3, #184	; 0xb8
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	2103      	movs	r1, #3
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <previousDir+0x34>)
 8000a30:	f7ff fe07 	bl	8000642 <sendCommand>
	sendCommand( &controlCommands[NEXT_FILE][0]            ,
	      		 LENGTHOF_COMMANDS				  		   		 ,
	      		 controlCommands[NEXT_FILE][CMD_CRC_INDEX] );

  }
}
 8000a34:	e005      	b.n	8000a42 <previousDir+0x2a>
	sendCommand( &controlCommands[NEXT_FILE][0]            ,
 8000a36:	23b9      	movs	r3, #185	; 0xb9
 8000a38:	461a      	mov	r2, r3
 8000a3a:	2103      	movs	r1, #3
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <previousDir+0x38>)
 8000a3e:	f7ff fe00 	bl	8000642 <sendCommand>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	08002be8 	.word	0x08002be8
 8000a50:	08002bec 	.word	0x08002bec

08000a54 <getFirstInDir>:
  @param   : void
  @return  : uint16_t
  @date	   : 30.11.22
  @brief   : Get number of the first song in the currently selected directory.
********************************************************************************/
uint16_t getFirstInDir(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = { 0xaa, 0x11, 0x00 };
  sendCommand(command, 3, 0xbb);
  */

   sendCommand( &controlCommands[QFOLDERDIR_CMD][0]            ,
 8000a5a:	23bb      	movs	r3, #187	; 0xbb
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	2103      	movs	r1, #3
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <getFirstInDir+0x40>)
 8000a62:	f7ff fdee 	bl	8000642 <sendCommand>
		      	LENGTHOF_COMMANDS				  		   		 ,
		      	controlCommands[QFOLDERDIR_CMD][CMD_CRC_INDEX] );

  uint8_t buffer[6];
  if(DYPlayer.getResponse(buffer, 6)) {
 8000a66:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <getFirstInDir+0x44>)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2106      	movs	r1, #6
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	4790      	blx	r2
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d008      	beq.n	8000a88 <getFirstInDir+0x34>
    return (buffer[3] << 8) | buffer[4];
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	021b      	lsls	r3, r3, #8
 8000a7a:	b21a      	sxth	r2, r3
 8000a7c:	793b      	ldrb	r3, [r7, #4]
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	e000      	b.n	8000a8a <getFirstInDir+0x36>
  }
  return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	08002c08 	.word	0x08002c08
 8000a98:	0800066d 	.word	0x0800066d

08000a9c <getSoundCountDir>:
  @param   : void
  @return  : uint16_t
  @date	   : 30.11.22
  @brief   : Get the amount of sound files in the currently selected directory.
********************************************************************************/
uint16_t getSoundCountDir(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = { 0xaa, 0x12, 0x00 };
  sendCommand(command, 3, 0xbc);
  */

  sendCommand( &controlCommands[QFOLDERNUMBER_CMD][0]            ,
 8000aa2:	23bc      	movs	r3, #188	; 0xbc
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <getSoundCountDir+0x40>)
 8000aaa:	f7ff fdca 	bl	8000642 <sendCommand>
	      	   LENGTHOF_COMMANDS				 		 ,
	      	   controlCommands[QFOLDERNUMBER_CMD][CMD_CRC_INDEX] );

  uint8_t buffer[6];
  if(DYPlayer.getResponse(buffer, 6)) {
 8000aae:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <getSoundCountDir+0x44>)
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2106      	movs	r1, #6
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	4790      	blx	r2
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d008      	beq.n	8000ad0 <getSoundCountDir+0x34>
    return (buffer[3] << 8) | buffer[4];
 8000abe:	78fb      	ldrb	r3, [r7, #3]
 8000ac0:	021b      	lsls	r3, r3, #8
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	793b      	ldrb	r3, [r7, #4]
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	e000      	b.n	8000ad2 <getSoundCountDir+0x36>
  }
  return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08002c0c 	.word	0x08002c0c
 8000ae0:	0800066d 	.word	0x0800066d

08000ae4 <setVolume>:
  @return  : void
  @date	   : 30.11.22
  @brief   : Set the playback volume between 0 and 30.
  	  	  	 Default volume if not set: 20.
********************************************************************************/
void setVolume(uint8_t volume) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  /*
  uint8_t command[4] = { 0xaa, 0x13, 0x01, 0x00 };
  */

  uint8_t command[4] = {0};
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]

  memcpy( &command[0] ,
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	2203      	movs	r2, #3
 8000af8:	4907      	ldr	r1, [pc, #28]	; (8000b18 <setVolume+0x34>)
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fff4 	bl	8002ae8 <memcpy>
		  &controlCommands[SETVOLUME_CMD][0],
		  LENGTHOF_COMMANDS);

  command[3] = volume;
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	73fb      	strb	r3, [r7, #15]
  sendCommand_nocrc(command, 4);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2104      	movs	r1, #4
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fd7f 	bl	800060e <sendCommand_nocrc>
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	08002c10 	.word	0x08002c10

08000b1c <volumeIncrease>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Increase the volume.
********************************************************************************/
void volumeIncrease(void) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = {0xaa, 0x14, 0x00};
  sendCommand(command, 3, 0xbe);
  */
  sendCommand( &controlCommands[VOLUME_INC][0]             ,
 8000b20:	23be      	movs	r3, #190	; 0xbe
 8000b22:	461a      	mov	r2, r3
 8000b24:	2103      	movs	r1, #3
 8000b26:	4802      	ldr	r0, [pc, #8]	; (8000b30 <volumeIncrease+0x14>)
 8000b28:	f7ff fd8b 	bl	8000642 <sendCommand>
		      	LENGTHOF_COMMANDS				  		   ,
		      	controlCommands[VOLUME_INC][CMD_CRC_INDEX] );

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	08002be0 	.word	0x08002be0

08000b34 <volumeDecrease>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Decrease the volume.
********************************************************************************/
void volumeDecrease(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = {0xaa, 0x15, 0x00};
  sendCommand(command, 3, 0xbf);
  */

  sendCommand( &controlCommands[VOLUME_DEC][0]             ,
 8000b38:	23bf      	movs	r3, #191	; 0xbf
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	2103      	movs	r1, #3
 8000b3e:	4802      	ldr	r0, [pc, #8]	; (8000b48 <volumeDecrease+0x14>)
 8000b40:	f7ff fd7f 	bl	8000642 <sendCommand>
			   LENGTHOF_COMMANDS				  		   ,
			   controlCommands[VOLUME_DEC][CMD_CRC_INDEX] );
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	08002be4 	.word	0x08002be4

08000b4c <interludeSpecified>:
             Note from the manual: "Music interlude" only has level 1. Continuous
             interlude will cover the previous interlude (the interlude will be
             played immediately). When the interlude is finished, it will return to
             the first interlude breakpoint and continue to play.
********************************************************************************/
void interludeSpecified(device_t device, uint16_t number) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	460a      	mov	r2, r1
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	80bb      	strh	r3, [r7, #4]

  uint8_t command[6] = { 0xaa, 0x0b, 0x03, 0x00, 0x00, 0x00 };
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <interludeSpecified+0x48>)
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b66:	6018      	str	r0, [r3, #0]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	8019      	strh	r1, [r3, #0]

  command[3] = (uint8_t) device;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	72fb      	strb	r3, [r7, #11]
  command[4] = number >> 8;
 8000b70:	88bb      	ldrh	r3, [r7, #4]
 8000b72:	0a1b      	lsrs	r3, r3, #8
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	733b      	strb	r3, [r7, #12]
  command[5] = number & 0xff;
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	737b      	strb	r3, [r7, #13]
  sendCommand_nocrc(command, 6);
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	2106      	movs	r1, #6
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fd41 	bl	800060e <sendCommand_nocrc>
}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	08002b2c 	.word	0x08002b2c

08000b98 <interludeSpecifiedDevicePath>:
       		 Note from the manual: "Music interlude" only has level 1. Continuous
       		 interlude will cover the previous interlude (the interlude will be
       	 	 played immediately). When the interlude is finished, it will return to
       		 the first interlude breakpoint and continue to play.
********************************************************************************/
void interludeSpecifiedDevicePath(device_t device, char *path) {
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  DYPlayer.byPathCommand(0x17, device, path);
 8000ba4:	4c04      	ldr	r4, [pc, #16]	; (8000bb8 <interludeSpecifiedDevicePath+0x20>)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	2017      	movs	r0, #23
 8000bae:	47a0      	blx	r4
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	080006ad 	.word	0x080006ad

08000bbc <stopInterlude>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Stop the interlude and continue playing.
********************************************************************************/
void stopInterlude(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = {0xaa, 0x10, 0x00};
  sendCommand(command, 3, 0xba);
  */
  sendCommand( &controlCommands[STOP_PLAYING][0]             ,
 8000bc0:	23ba      	movs	r3, #186	; 0xba
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	2103      	movs	r1, #3
 8000bc6:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <stopInterlude+0x14>)
 8000bc8:	f7ff fd3b 	bl	8000642 <sendCommand>
			   LENGTHOF_COMMANDS				  		   ,
			   controlCommands[STOP_PLAYING][CMD_CRC_INDEX] );
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	08002bf0 	.word	0x08002bf0

08000bd4 <setCycleMode>:
  @param   : play_mode_t mode
  @return  : void
  @date	   : 30.11.22
  @brief   : Sets the cycle mode
********************************************************************************/
void setCycleMode(play_mode_t mode) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  /*
  uint8_t command[4] = { 0xaa, 0x18, 0x01, 0x00 };
  */
  uint8_t command[4] = {0};
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]

  memcpy( &command[0] ,
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2203      	movs	r2, #3
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <setCycleMode+0x34>)
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 ff7c 	bl	8002ae8 <memcpy>
		  &controlCommands[SETLOOPMODE_CMD][0],
		  LENGTHOF_COMMANDS);

  command[3] = mode;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	73fb      	strb	r3, [r7, #15]
  sendCommand_nocrc(command, 4);
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fd07 	bl	800060e <sendCommand_nocrc>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08002c14 	.word	0x08002c14

08000c0c <setCycleTimes>:
  @param   : uint16_t cycles
  @return  : void
  @date	   : 30.11.22
  @brief   : Set how many cycles to play when in cycle modes 0, 1 or 4
********************************************************************************/
void setCycleTimes(uint16_t cycles) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
  /*
  uint8_t command[5] = { 0xaa, 0x19, 0x02, 0x00, 0x00 };
  */

  uint8_t command[5] = {0};
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	733b      	strb	r3, [r7, #12]

  memcpy( &command[0] ,
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	2203      	movs	r2, #3
 8000c24:	490a      	ldr	r1, [pc, #40]	; (8000c50 <setCycleTimes+0x44>)
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 ff5e 	bl	8002ae8 <memcpy>
		  &controlCommands[SETCYCTIMES_CMD][0],
		  LENGTHOF_COMMANDS);

  command[3] = cycles >> 8;
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	0a1b      	lsrs	r3, r3, #8
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	72fb      	strb	r3, [r7, #11]
  command[4] = cycles & 0xff;
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	733b      	strb	r3, [r7, #12]
  sendCommand_nocrc(command, 5);
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	2105      	movs	r1, #5
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fce3 	bl	800060e <sendCommand_nocrc>
}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	08002c18 	.word	0x08002c18

08000c54 <setEq>:
  @param   : eq_t eq
  @return  : void
  @date	   : 30.11.22
  @brief   : Set the equalizer setting.
********************************************************************************/
void setEq(eq_t eq) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  /*
   uint8_t command[4] = { 0xaa, 0x1a, 0x01, 0x00 };
   */

  uint8_t command[4] = {0};
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]

  memcpy( &command[0] ,
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	2203      	movs	r2, #3
 8000c68:	4907      	ldr	r1, [pc, #28]	; (8000c88 <setEq+0x34>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 ff3c 	bl	8002ae8 <memcpy>
		  &controlCommands[SETEQ_CMD][0],
		  LENGTHOF_COMMANDS);

  command[3] = (uint8_t) eq;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	73fb      	strb	r3, [r7, #15]
  sendCommand_nocrc(command, 4);
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2104      	movs	r1, #4
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fcc7 	bl	800060e <sendCommand_nocrc>
}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	08002c1c 	.word	0x08002c1c

08000c8c <select>:
  @param   : uint16_t number
  @return  : void
  @date	   : 30.11.22
  @brief   : Select a sound file without playing it.  e.g. `1` for `00001.mp3`.
********************************************************************************/
void select(uint16_t number) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
  /*
  uint8_t command[5] = { 0xaa, 0x1f, 0x02, 0x00, 0x00};
  */

  uint8_t command[5] = {0};
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	733b      	strb	r3, [r7, #12]

  memcpy( &command[0] ,
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	490a      	ldr	r1, [pc, #40]	; (8000cd0 <select+0x44>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 ff1e 	bl	8002ae8 <memcpy>
		  &controlCommands[SLCTBUTNOPLAY_CMD][0],
		  LENGTHOF_COMMANDS);

  command[3] = number >> 8;
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	0a1b      	lsrs	r3, r3, #8
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	72fb      	strb	r3, [r7, #11]
  command[4] = number & 0xff;
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	733b      	strb	r3, [r7, #12]
  sendCommand_nocrc(command, 5);
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fca3 	bl	800060e <sendCommand_nocrc>
}
 8000cc8:	bf00      	nop
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	08002c34 	.word	0x08002c34

08000cd4 <combinationPlay>:
             pass them as an array pointer. You need to put the files into a
             directory that can be called `DY`, `ZH or `XY`, you will have to check
             the manual that came with your module, or try all of them. There may
             well be more combinations! Also see
********************************************************************************/
void combinationPlay(char *sounds[], uint8_t len) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
  if (len < 1) return;
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d040      	beq.n	8000d68 <combinationPlay+0x94>
  // This part of the command can be easily determined already.
  uint8_t command[3] = { 0xaa, 0x1b, 0x00 };
 8000ce6:	4a22      	ldr	r2, [pc, #136]	; (8000d70 <combinationPlay+0x9c>)
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	6812      	ldr	r2, [r2, #0]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	8019      	strh	r1, [r3, #0]
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	0c12      	lsrs	r2, r2, #16
 8000cf6:	701a      	strb	r2, [r3, #0]
  command[2] = len * 2;
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	72bb      	strb	r3, [r7, #10]
  // Depends on the length, checksum is a sum so we can add the other values
  // later.
  uint8_t crc = checksum(command, 3);
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	2103      	movs	r1, #3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fc42 	bl	8000590 <checksum>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	73fb      	strb	r3, [r7, #15]
  // Send the command and length already.
  serialWrite(command, 3);
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	2103      	movs	r1, #3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fbfe 	bl	8000518 <serialWrite>
  // Send each pair of chars containing the file name and add the values of
  // each char to the crc.
  for (uint8_t i=0; i < len; i++) {
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73bb      	strb	r3, [r7, #14]
 8000d20:	e019      	b.n	8000d56 <combinationPlay+0x82>
    crc += checksum((uint8_t*) sounds[i], 2);
 8000d22:	7bbb      	ldrb	r3, [r7, #14]
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fc2e 	bl	8000590 <checksum>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	73fb      	strb	r3, [r7, #15]
    serialWrite((uint8_t*) sounds[i], 2);
 8000d3e:	7bbb      	ldrb	r3, [r7, #14]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fbe4 	bl	8000518 <serialWrite>
  for (uint8_t i=0; i < len; i++) {
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	3301      	adds	r3, #1
 8000d54:	73bb      	strb	r3, [r7, #14]
 8000d56:	7bba      	ldrb	r2, [r7, #14]
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d3e1      	bcc.n	8000d22 <combinationPlay+0x4e>
  }
  // Lastly, write the crc value.
  serialWrite_crc(crc);
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fbed 	bl	8000540 <serialWrite_crc>
 8000d66:	e000      	b.n	8000d6a <combinationPlay+0x96>
  if (len < 1) return;
 8000d68:	bf00      	nop
}
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	08002b34 	.word	0x08002b34

08000d74 <endCombinationPlay>:
  @param   : void
  @return  : void
  @date	   : 30.11.2022
  @brief   : End combination play.
********************************************************************************/
void endCombinationPlay(void) {
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
  uint8_t command[3] = {0xaa, 0x1c, 0x00};
 8000d7a:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <endCombinationPlay+0x2c>)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	6812      	ldr	r2, [r2, #0]
 8000d80:	4611      	mov	r1, r2
 8000d82:	8019      	strh	r1, [r3, #0]
 8000d84:	3302      	adds	r3, #2
 8000d86:	0c12      	lsrs	r2, r2, #16
 8000d88:	701a      	strb	r2, [r3, #0]
  DYPlayer.sendCommand(command, 3, 0xc6);
 8000d8a:	4c06      	ldr	r4, [pc, #24]	; (8000da4 <endCombinationPlay+0x30>)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	22c6      	movs	r2, #198	; 0xc6
 8000d90:	2103      	movs	r1, #3
 8000d92:	4618      	mov	r0, r3
 8000d94:	47a0      	blx	r4
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	08002b38 	.word	0x08002b38
 8000da4:	08000643 	.word	0x08000643

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dac:	f000 f9a2 	bl	80010f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db0:	f000 f820 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db4:	f000 f8a8 	bl	8000f08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000db8:	f000 f87c 	bl	8000eb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DYPlayer.setVolume(15);
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <main+0x44>)
 8000dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dc0:	200f      	movs	r0, #15
 8000dc2:	4798      	blx	r3
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	DYPlayer.playSpecifiedDevicePath(Sd , &path[0]);
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <main+0x44>)
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc8:	4909      	ldr	r1, [pc, #36]	; (8000df0 <main+0x48>)
 8000dca:	2001      	movs	r0, #1
 8000dcc:	4798      	blx	r3
	DYPlayer.play();
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <main+0x44>)
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	4798      	blx	r3
	DYPlayer.checkPlayState();
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <main+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	4798      	blx	r3
	DYPlayer.getPlayingDevice();
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <main+0x44>)
 8000ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dde:	4798      	blx	r3
	HAL_Delay(5000);
 8000de0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000de4:	f000 f9f8 	bl	80011d8 <HAL_Delay>
	DYPlayer.playSpecifiedDevicePath(Sd , &path[0]);
 8000de8:	e7ec      	b.n	8000dc4 <main+0x1c>
 8000dea:	bf00      	nop
 8000dec:	08002b3c 	.word	0x08002b3c
 8000df0:	2000000c 	.word	0x2000000c

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b094      	sub	sp, #80	; 0x50
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	2234      	movs	r2, #52	; 0x34
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fe7e 	bl	8002b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <SystemClock_Config+0xb8>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	4a22      	ldr	r2, [pc, #136]	; (8000eac <SystemClock_Config+0xb8>)
 8000e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
 8000e28:	4b20      	ldr	r3, [pc, #128]	; (8000eac <SystemClock_Config+0xb8>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e34:	2300      	movs	r3, #0
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <SystemClock_Config+0xbc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e40:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <SystemClock_Config+0xbc>)
 8000e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <SystemClock_Config+0xbc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 ff17 	bl	8001c9c <HAL_RCC_OscConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e74:	f000 f862 	bl	8000f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e78:	230f      	movs	r3, #15
 8000e7a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fc3e 	bl	8001714 <HAL_RCC_ClockConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e9e:	f000 f84d 	bl	8000f3c <Error_Handler>
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3750      	adds	r7, #80	; 0x50
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40007000 	.word	0x40007000

08000eb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <MX_USART2_UART_Init+0x50>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eec:	f001 f974 	bl	80021d8 <HAL_UART_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ef6:	f000 f821 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000034 	.word	0x20000034
 8000f04:	40004400 	.word	0x40004400

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_GPIO_Init+0x30>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <MX_GPIO_Init+0x30>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_GPIO_Init+0x30>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <Error_Handler+0x8>
	...

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800

08000f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a19      	ldr	r2, [pc, #100]	; (800101c <HAL_UART_MspInit+0x84>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d12b      	bne.n	8001012 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001002:	2307      	movs	r3, #7
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_UART_MspInit+0x8c>)
 800100e:	f000 f9ed 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40004400 	.word	0x40004400
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800102c:	e7fe      	b.n	800102c <NMI_Handler+0x4>

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler+0x4>

0800103a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <UsageFault_Handler+0x4>

08001046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001074:	f000 f890 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010a6:	490e      	ldr	r1, [pc, #56]	; (80010e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010bc:	4c0b      	ldr	r4, [pc, #44]	; (80010ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ca:	f7ff ffd7 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ce:	f001 fce7 	bl	8002aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d2:	f7ff fe69 	bl	8000da8 <main>
  bx  lr    
 80010d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010e4:	08002d64 	.word	0x08002d64
  ldr r2, =_sbss
 80010e8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80010ec:	2000007c 	.word	0x2000007c

080010f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>
	...

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <HAL_Init+0x40>)
 80010fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <HAL_Init+0x40>)
 800110a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800110e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_Init+0x40>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f931 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	200f      	movs	r0, #15
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff ff0e 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023c00 	.word	0x40023c00

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f93b 	bl	80013d2 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f911 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	20000008 	.word	0x20000008
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000078 	.word	0x20000078

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000078 	.word	0x20000078

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ffee 	bl	80011c0 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011fe:	bf00      	nop
 8001200:	f7ff ffde 	bl	80011c0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff8e 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff47 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff5c 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff8e 	bl	80012d8 <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5d 	bl	8001284 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffb0 	bl	8001340 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
 8001406:	e165      	b.n	80016d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001408:	2201      	movs	r2, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	429a      	cmp	r2, r3
 8001422:	f040 8154 	bne.w	80016ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b01      	cmp	r3, #1
 8001430:	d005      	beq.n	800143e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143a:	2b02      	cmp	r3, #2
 800143c:	d130      	bne.n	80014a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001474:	2201      	movs	r2, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	091b      	lsrs	r3, r3, #4
 800148a:	f003 0201 	and.w	r2, r3, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d017      	beq.n	80014dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d123      	bne.n	8001530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	08da      	lsrs	r2, r3, #3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3208      	adds	r2, #8
 80014f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	08da      	lsrs	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3208      	adds	r2, #8
 800152a:	69b9      	ldr	r1, [r7, #24]
 800152c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0203 	and.w	r2, r3, #3
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80ae 	beq.w	80016ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b5d      	ldr	r3, [pc, #372]	; (80016ec <HAL_GPIO_Init+0x300>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a5c      	ldr	r2, [pc, #368]	; (80016ec <HAL_GPIO_Init+0x300>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b5a      	ldr	r3, [pc, #360]	; (80016ec <HAL_GPIO_Init+0x300>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800158e:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <HAL_GPIO_Init+0x304>)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4f      	ldr	r2, [pc, #316]	; (80016f4 <HAL_GPIO_Init+0x308>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d025      	beq.n	8001606 <HAL_GPIO_Init+0x21a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4e      	ldr	r2, [pc, #312]	; (80016f8 <HAL_GPIO_Init+0x30c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d01f      	beq.n	8001602 <HAL_GPIO_Init+0x216>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4d      	ldr	r2, [pc, #308]	; (80016fc <HAL_GPIO_Init+0x310>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d019      	beq.n	80015fe <HAL_GPIO_Init+0x212>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4c      	ldr	r2, [pc, #304]	; (8001700 <HAL_GPIO_Init+0x314>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d013      	beq.n	80015fa <HAL_GPIO_Init+0x20e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4b      	ldr	r2, [pc, #300]	; (8001704 <HAL_GPIO_Init+0x318>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00d      	beq.n	80015f6 <HAL_GPIO_Init+0x20a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4a      	ldr	r2, [pc, #296]	; (8001708 <HAL_GPIO_Init+0x31c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x206>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a49      	ldr	r2, [pc, #292]	; (800170c <HAL_GPIO_Init+0x320>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_GPIO_Init+0x202>
 80015ea:	2306      	movs	r3, #6
 80015ec:	e00c      	b.n	8001608 <HAL_GPIO_Init+0x21c>
 80015ee:	2307      	movs	r3, #7
 80015f0:	e00a      	b.n	8001608 <HAL_GPIO_Init+0x21c>
 80015f2:	2305      	movs	r3, #5
 80015f4:	e008      	b.n	8001608 <HAL_GPIO_Init+0x21c>
 80015f6:	2304      	movs	r3, #4
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_Init+0x21c>
 80015fa:	2303      	movs	r3, #3
 80015fc:	e004      	b.n	8001608 <HAL_GPIO_Init+0x21c>
 80015fe:	2302      	movs	r3, #2
 8001600:	e002      	b.n	8001608 <HAL_GPIO_Init+0x21c>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <HAL_GPIO_Init+0x21c>
 8001606:	2300      	movs	r3, #0
 8001608:	69fa      	ldr	r2, [r7, #28]
 800160a:	f002 0203 	and.w	r2, r2, #3
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	4093      	lsls	r3, r2
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001618:	4935      	ldr	r1, [pc, #212]	; (80016f0 <HAL_GPIO_Init+0x304>)
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	3302      	adds	r3, #2
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001626:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <HAL_GPIO_Init+0x324>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800164a:	4a31      	ldr	r2, [pc, #196]	; (8001710 <HAL_GPIO_Init+0x324>)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001650:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <HAL_GPIO_Init+0x324>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001674:	4a26      	ldr	r2, [pc, #152]	; (8001710 <HAL_GPIO_Init+0x324>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800167a:	4b25      	ldr	r3, [pc, #148]	; (8001710 <HAL_GPIO_Init+0x324>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800169e:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <HAL_GPIO_Init+0x324>)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_GPIO_Init+0x324>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016c8:	4a11      	ldr	r2, [pc, #68]	; (8001710 <HAL_GPIO_Init+0x324>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3301      	adds	r3, #1
 80016d2:	61fb      	str	r3, [r7, #28]
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	2b0f      	cmp	r3, #15
 80016d8:	f67f ae96 	bls.w	8001408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40013800 	.word	0x40013800
 80016f4:	40020000 	.word	0x40020000
 80016f8:	40020400 	.word	0x40020400
 80016fc:	40020800 	.word	0x40020800
 8001700:	40020c00 	.word	0x40020c00
 8001704:	40021000 	.word	0x40021000
 8001708:	40021400 	.word	0x40021400
 800170c:	40021800 	.word	0x40021800
 8001710:	40013c00 	.word	0x40013c00

08001714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0cc      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001728:	4b68      	ldr	r3, [pc, #416]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 030f 	and.w	r3, r3, #15
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d90c      	bls.n	8001750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b65      	ldr	r3, [pc, #404]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b63      	ldr	r3, [pc, #396]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0b8      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001768:	4b59      	ldr	r3, [pc, #356]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4a58      	ldr	r2, [pc, #352]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001780:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a52      	ldr	r2, [pc, #328]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800178a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800178c:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	494d      	ldr	r1, [pc, #308]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d044      	beq.n	8001834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d119      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e07f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d003      	beq.n	80017d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	4b3f      	ldr	r3, [pc, #252]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e06f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e067      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f023 0203 	bic.w	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4934      	ldr	r1, [pc, #208]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001804:	f7ff fcdc 	bl	80011c0 <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	e00a      	b.n	8001822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7ff fcd8 	bl	80011c0 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e04f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 020c 	and.w	r2, r3, #12
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	429a      	cmp	r2, r3
 8001832:	d1eb      	bne.n	800180c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d20c      	bcs.n	800185c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e032      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4916      	ldr	r1, [pc, #88]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d009      	beq.n	800189a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	490e      	ldr	r1, [pc, #56]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800189a:	f000 f855 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 800189e:	4602      	mov	r2, r0
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	490a      	ldr	r1, [pc, #40]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	5ccb      	ldrb	r3, [r1, r3]
 80018ae:	fa22 f303 	lsr.w	r3, r2, r3
 80018b2:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fc3c 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023c00 	.word	0x40023c00
 80018d0:	40023800 	.word	0x40023800
 80018d4:	08002c38 	.word	0x08002c38
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000000 	.word	0x20000000

080018f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018fc:	f7ff fff0 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 8001900:	4602      	mov	r2, r0
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	0a9b      	lsrs	r3, r3, #10
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	4903      	ldr	r1, [pc, #12]	; (800191c <HAL_RCC_GetPCLK1Freq+0x24>)
 800190e:	5ccb      	ldrb	r3, [r1, r3]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001914:	4618      	mov	r0, r3
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	08002c48 	.word	0x08002c48

08001920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001924:	f7ff ffdc 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 8001928:	4602      	mov	r2, r0
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	0b5b      	lsrs	r3, r3, #13
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	4903      	ldr	r1, [pc, #12]	; (8001944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001936:	5ccb      	ldrb	r3, [r1, r3]
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	08002c48 	.word	0x08002c48

08001948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800194c:	b0a6      	sub	sp, #152	; 0x98
 800194e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800196e:	4bc8      	ldr	r3, [pc, #800]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b0c      	cmp	r3, #12
 8001978:	f200 817e 	bhi.w	8001c78 <HAL_RCC_GetSysClockFreq+0x330>
 800197c:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <HAL_RCC_GetSysClockFreq+0x3c>)
 800197e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001982:	bf00      	nop
 8001984:	080019b9 	.word	0x080019b9
 8001988:	08001c79 	.word	0x08001c79
 800198c:	08001c79 	.word	0x08001c79
 8001990:	08001c79 	.word	0x08001c79
 8001994:	080019c1 	.word	0x080019c1
 8001998:	08001c79 	.word	0x08001c79
 800199c:	08001c79 	.word	0x08001c79
 80019a0:	08001c79 	.word	0x08001c79
 80019a4:	080019c9 	.word	0x080019c9
 80019a8:	08001c79 	.word	0x08001c79
 80019ac:	08001c79 	.word	0x08001c79
 80019b0:	08001c79 	.word	0x08001c79
 80019b4:	08001b33 	.word	0x08001b33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4bb6      	ldr	r3, [pc, #728]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x34c>)
 80019ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80019be:	e15f      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c0:	4bb5      	ldr	r3, [pc, #724]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x350>)
 80019c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80019c6:	e15b      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c8:	4bb1      	ldr	r3, [pc, #708]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d4:	4bae      	ldr	r3, [pc, #696]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d031      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e0:	4bab      	ldr	r3, [pc, #684]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	099b      	lsrs	r3, r3, #6
 80019e6:	2200      	movs	r2, #0
 80019e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80019ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80019ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f2:	663b      	str	r3, [r7, #96]	; 0x60
 80019f4:	2300      	movs	r3, #0
 80019f6:	667b      	str	r3, [r7, #100]	; 0x64
 80019f8:	4ba7      	ldr	r3, [pc, #668]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x350>)
 80019fa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019fe:	462a      	mov	r2, r5
 8001a00:	fb03 f202 	mul.w	r2, r3, r2
 8001a04:	2300      	movs	r3, #0
 8001a06:	4621      	mov	r1, r4
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4aa2      	ldr	r2, [pc, #648]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a10:	4621      	mov	r1, r4
 8001a12:	fba1 1202 	umull	r1, r2, r1, r2
 8001a16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001a18:	460a      	mov	r2, r1
 8001a1a:	67ba      	str	r2, [r7, #120]	; 0x78
 8001a1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a1e:	4413      	add	r3, r2
 8001a20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a26:	2200      	movs	r2, #0
 8001a28:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a2a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001a2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a30:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001a34:	f7fe fbee 	bl	8000214 <__aeabi_uldivmod>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a42:	e064      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a44:	4b92      	ldr	r3, [pc, #584]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	099b      	lsrs	r3, r3, #6
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	653b      	str	r3, [r7, #80]	; 0x50
 8001a4e:	657a      	str	r2, [r7, #84]	; 0x54
 8001a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a56:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a58:	2300      	movs	r3, #0
 8001a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a5c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001a60:	4622      	mov	r2, r4
 8001a62:	462b      	mov	r3, r5
 8001a64:	f04f 0000 	mov.w	r0, #0
 8001a68:	f04f 0100 	mov.w	r1, #0
 8001a6c:	0159      	lsls	r1, r3, #5
 8001a6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a72:	0150      	lsls	r0, r2, #5
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4621      	mov	r1, r4
 8001a7a:	1a51      	subs	r1, r2, r1
 8001a7c:	6139      	str	r1, [r7, #16]
 8001a7e:	4629      	mov	r1, r5
 8001a80:	eb63 0301 	sbc.w	r3, r3, r1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a92:	4659      	mov	r1, fp
 8001a94:	018b      	lsls	r3, r1, #6
 8001a96:	4651      	mov	r1, sl
 8001a98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a9c:	4651      	mov	r1, sl
 8001a9e:	018a      	lsls	r2, r1, #6
 8001aa0:	4651      	mov	r1, sl
 8001aa2:	ebb2 0801 	subs.w	r8, r2, r1
 8001aa6:	4659      	mov	r1, fp
 8001aa8:	eb63 0901 	sbc.w	r9, r3, r1
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ab8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001abc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac0:	4690      	mov	r8, r2
 8001ac2:	4699      	mov	r9, r3
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	eb18 0303 	adds.w	r3, r8, r3
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	462b      	mov	r3, r5
 8001ace:	eb49 0303 	adc.w	r3, r9, r3
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	028b      	lsls	r3, r1, #10
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aea:	4621      	mov	r1, r4
 8001aec:	028a      	lsls	r2, r1, #10
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001af6:	2200      	movs	r2, #0
 8001af8:	643b      	str	r3, [r7, #64]	; 0x40
 8001afa:	647a      	str	r2, [r7, #68]	; 0x44
 8001afc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001b00:	f7fe fb88 	bl	8000214 <__aeabi_uldivmod>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4613      	mov	r3, r2
 8001b0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b0e:	4b60      	ldr	r3, [pc, #384]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	0c1b      	lsrs	r3, r3, #16
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001b20:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001b30:	e0a6      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b32:	4b57      	ldr	r3, [pc, #348]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3e:	4b54      	ldr	r3, [pc, #336]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d02a      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4a:	4b51      	ldr	r3, [pc, #324]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	099b      	lsrs	r3, r3, #6
 8001b50:	2200      	movs	r2, #0
 8001b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4b4e      	ldr	r3, [pc, #312]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b60:	fb03 f201 	mul.w	r2, r3, r1
 8001b64:	2300      	movs	r3, #0
 8001b66:	fb00 f303 	mul.w	r3, r0, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a4a      	ldr	r2, [pc, #296]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b6e:	fba0 1202 	umull	r1, r2, r0, r2
 8001b72:	677a      	str	r2, [r7, #116]	; 0x74
 8001b74:	460a      	mov	r2, r1
 8001b76:	673a      	str	r2, [r7, #112]	; 0x70
 8001b78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b7a:	4413      	add	r3, r2
 8001b7c:	677b      	str	r3, [r7, #116]	; 0x74
 8001b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b82:	2200      	movs	r2, #0
 8001b84:	633b      	str	r3, [r7, #48]	; 0x30
 8001b86:	637a      	str	r2, [r7, #52]	; 0x34
 8001b88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b8c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001b90:	f7fe fb40 	bl	8000214 <__aeabi_uldivmod>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b9e:	e05b      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba0:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bbc:	4642      	mov	r2, r8
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	f04f 0000 	mov.w	r0, #0
 8001bc4:	f04f 0100 	mov.w	r1, #0
 8001bc8:	0159      	lsls	r1, r3, #5
 8001bca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bce:	0150      	lsls	r0, r2, #5
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bda:	4649      	mov	r1, r9
 8001bdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bf4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bf8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	00eb      	lsls	r3, r5, #3
 8001c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c0a:	00e2      	lsls	r2, r4, #3
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	461d      	mov	r5, r3
 8001c10:	4643      	mov	r3, r8
 8001c12:	18e3      	adds	r3, r4, r3
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	464b      	mov	r3, r9
 8001c18:	eb45 0303 	adc.w	r3, r5, r3
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	028b      	lsls	r3, r1, #10
 8001c2e:	4621      	mov	r1, r4
 8001c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c34:	4621      	mov	r1, r4
 8001c36:	028a      	lsls	r2, r1, #10
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c40:	2200      	movs	r2, #0
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	61fa      	str	r2, [r7, #28]
 8001c46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c4a:	f7fe fae3 	bl	8000214 <__aeabi_uldivmod>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4613      	mov	r3, r2
 8001c54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c58:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	0f1b      	lsrs	r3, r3, #28
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001c66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001c76:	e003      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001c7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3798      	adds	r7, #152	; 0x98
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	00f42400 	.word	0x00f42400
 8001c98:	017d7840 	.word	0x017d7840

08001c9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e28d      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8083 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cbc:	4b94      	ldr	r3, [pc, #592]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d019      	beq.n	8001cfc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cc8:	4b91      	ldr	r3, [pc, #580]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cd4:	4b8e      	ldr	r3, [pc, #568]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ce0:	d00c      	beq.n	8001cfc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ce2:	4b8b      	ldr	r3, [pc, #556]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cea:	2b0c      	cmp	r3, #12
 8001cec:	d112      	bne.n	8001d14 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cee:	4b88      	ldr	r3, [pc, #544]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cfa:	d10b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	4b84      	ldr	r3, [pc, #528]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d05b      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x124>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d157      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e25a      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCC_OscConfig+0x90>
 8001d1e:	4b7c      	ldr	r3, [pc, #496]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a7b      	ldr	r2, [pc, #492]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0xcc>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0xb4>
 8001d36:	4b76      	ldr	r3, [pc, #472]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a75      	ldr	r2, [pc, #468]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b73      	ldr	r3, [pc, #460]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a72      	ldr	r2, [pc, #456]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xcc>
 8001d50:	4b6f      	ldr	r3, [pc, #444]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a6e      	ldr	r2, [pc, #440]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b6c      	ldr	r3, [pc, #432]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a6b      	ldr	r2, [pc, #428]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff fa26 	bl	80011c0 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff fa22 	bl	80011c0 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e21f      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8a:	4b61      	ldr	r3, [pc, #388]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0xdc>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff fa12 	bl	80011c0 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff fa0e 	bl	80011c0 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e20b      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db2:	4b57      	ldr	r3, [pc, #348]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x104>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d06f      	beq.n	8001eae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001dce:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d017      	beq.n	8001e0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001dda:	4b4d      	ldr	r3, [pc, #308]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d105      	bne.n	8001df2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001de6:	4b4a      	ldr	r3, [pc, #296]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00b      	beq.n	8001e0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df2:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d11c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfe:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d116      	bne.n	8001e38 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_RCC_OscConfig+0x186>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e1d3      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4937      	ldr	r1, [pc, #220]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e36:	e03a      	b.n	8001eae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d020      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e40:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <HAL_RCC_OscConfig+0x278>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7ff f9bb 	bl	80011c0 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4e:	f7ff f9b7 	bl	80011c0 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e1b4      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6c:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4925      	ldr	r1, [pc, #148]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]
 8001e80:	e015      	b.n	8001eae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e82:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_OscConfig+0x278>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff f99a 	bl	80011c0 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e90:	f7ff f996 	bl	80011c0 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e193      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d036      	beq.n	8001f28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d016      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_RCC_OscConfig+0x27c>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec8:	f7ff f97a 	bl	80011c0 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed0:	f7ff f976 	bl	80011c0 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e173      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x234>
 8001eee:	e01b      	b.n	8001f28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_OscConfig+0x27c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7ff f963 	bl	80011c0 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efc:	e00e      	b.n	8001f1c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efe:	f7ff f95f 	bl	80011c0 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d907      	bls.n	8001f1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e15c      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
 8001f10:	40023800 	.word	0x40023800
 8001f14:	42470000 	.word	0x42470000
 8001f18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1c:	4b8a      	ldr	r3, [pc, #552]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1ea      	bne.n	8001efe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 8097 	beq.w	8002064 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3a:	4b83      	ldr	r3, [pc, #524]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10f      	bne.n	8001f66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	4b7f      	ldr	r3, [pc, #508]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a7e      	ldr	r2, [pc, #504]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b7c      	ldr	r3, [pc, #496]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f62:	2301      	movs	r3, #1
 8001f64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	4b79      	ldr	r3, [pc, #484]	; (800214c <HAL_RCC_OscConfig+0x4b0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d118      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f72:	4b76      	ldr	r3, [pc, #472]	; (800214c <HAL_RCC_OscConfig+0x4b0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a75      	ldr	r2, [pc, #468]	; (800214c <HAL_RCC_OscConfig+0x4b0>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff f91f 	bl	80011c0 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f86:	f7ff f91b 	bl	80011c0 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e118      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	4b6c      	ldr	r3, [pc, #432]	; (800214c <HAL_RCC_OscConfig+0x4b0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x31e>
 8001fac:	4b66      	ldr	r3, [pc, #408]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	4a65      	ldr	r2, [pc, #404]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb8:	e01c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x358>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x340>
 8001fc2:	4b61      	ldr	r3, [pc, #388]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc6:	4a60      	ldr	r2, [pc, #384]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001fce:	4b5e      	ldr	r3, [pc, #376]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	4a5d      	ldr	r2, [pc, #372]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x358>
 8001fdc:	4b5a      	ldr	r3, [pc, #360]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	4a59      	ldr	r2, [pc, #356]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe8:	4b57      	ldr	r3, [pc, #348]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	4a56      	ldr	r2, [pc, #344]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fee:	f023 0304 	bic.w	r3, r3, #4
 8001ff2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d015      	beq.n	8002028 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7ff f8e0 	bl	80011c0 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7ff f8dc 	bl	80011c0 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e0d7      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201a:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0ee      	beq.n	8002004 <HAL_RCC_OscConfig+0x368>
 8002026:	e014      	b.n	8002052 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7ff f8ca 	bl	80011c0 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202e:	e00a      	b.n	8002046 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7ff f8c6 	bl	80011c0 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	; 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e0c1      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002046:	4b40      	ldr	r3, [pc, #256]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1ee      	bne.n	8002030 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d105      	bne.n	8002064 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002058:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	4a3a      	ldr	r2, [pc, #232]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 800205e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002062:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80ad 	beq.w	80021c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800206e:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b08      	cmp	r3, #8
 8002078:	d060      	beq.n	800213c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d145      	bne.n	800210e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002082:	4b33      	ldr	r3, [pc, #204]	; (8002150 <HAL_RCC_OscConfig+0x4b4>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f89a 	bl	80011c0 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002090:	f7ff f896 	bl	80011c0 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e093      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	4b29      	ldr	r3, [pc, #164]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69da      	ldr	r2, [r3, #28]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	3b01      	subs	r3, #1
 80020c8:	041b      	lsls	r3, r3, #16
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	061b      	lsls	r3, r3, #24
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	071b      	lsls	r3, r3, #28
 80020da:	491b      	ldr	r1, [pc, #108]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_RCC_OscConfig+0x4b4>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7ff f86b 	bl	80011c0 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff f867 	bl	80011c0 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e064      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x452>
 800210c:	e05c      	b.n	80021c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_RCC_OscConfig+0x4b4>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff f854 	bl	80011c0 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff f850 	bl	80011c0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e04d      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x480>
 800213a:	e045      	b.n	80021c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d107      	bne.n	8002154 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e040      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
 8002148:	40023800 	.word	0x40023800
 800214c:	40007000 	.word	0x40007000
 8002150:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <HAL_RCC_OscConfig+0x538>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d030      	beq.n	80021c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d129      	bne.n	80021c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d122      	bne.n	80021c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002184:	4013      	ands	r3, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800218a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218c:	4293      	cmp	r3, r2
 800218e:	d119      	bne.n	80021c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	3b01      	subs	r3, #1
 800219e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d10f      	bne.n	80021c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800

080021d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e03f      	b.n	800226a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe feca 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2224      	movs	r2, #36	; 0x24
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800221a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f9cb 	bl	80025b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b08a      	sub	sp, #40	; 0x28
 8002276:	af02      	add	r7, sp, #8
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b20      	cmp	r3, #32
 8002290:	d17c      	bne.n	800238c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <HAL_UART_Transmit+0x2c>
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e075      	b.n	800238e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_UART_Transmit+0x3e>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e06e      	b.n	800238e <HAL_UART_Transmit+0x11c>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2221      	movs	r2, #33	; 0x21
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022c6:	f7fe ff7b 	bl	80011c0 <HAL_GetTick>
 80022ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	88fa      	ldrh	r2, [r7, #6]
 80022d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	88fa      	ldrh	r2, [r7, #6]
 80022d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e0:	d108      	bne.n	80022f4 <HAL_UART_Transmit+0x82>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d104      	bne.n	80022f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	e003      	b.n	80022fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002304:	e02a      	b.n	800235c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 f8e2 	bl	80024da <UART_WaitOnFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e036      	b.n	800238e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10b      	bne.n	800233e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002334:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	3302      	adds	r3, #2
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	e007      	b.n	800234e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	3301      	adds	r3, #1
 800234c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1cf      	bne.n	8002306 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2200      	movs	r2, #0
 800236e:	2140      	movs	r1, #64	; 0x40
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f8b2 	bl	80024da <UART_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e006      	b.n	800238e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	e000      	b.n	800238e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800238c:	2302      	movs	r3, #2
  }
}
 800238e:	4618      	mov	r0, r3
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b08a      	sub	sp, #40	; 0x28
 800239a:	af02      	add	r7, sp, #8
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	f040 808c 	bne.w	80024d0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <HAL_UART_Receive+0x2e>
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e084      	b.n	80024d2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_UART_Receive+0x40>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e07d      	b.n	80024d2 <HAL_UART_Receive+0x13c>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2222      	movs	r2, #34	; 0x22
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023f2:	f7fe fee5 	bl	80011c0 <HAL_GetTick>
 80023f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	88fa      	ldrh	r2, [r7, #6]
 80023fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	88fa      	ldrh	r2, [r7, #6]
 8002402:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240c:	d108      	bne.n	8002420 <HAL_UART_Receive+0x8a>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d104      	bne.n	8002420 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	e003      	b.n	8002428 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002430:	e043      	b.n	80024ba <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2200      	movs	r2, #0
 800243a:	2120      	movs	r1, #32
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f84c 	bl	80024da <UART_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e042      	b.n	80024d2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10c      	bne.n	800246c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	b29b      	uxth	r3, r3
 800245a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245e:	b29a      	uxth	r2, r3
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	3302      	adds	r3, #2
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	e01f      	b.n	80024ac <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002474:	d007      	beq.n	8002486 <HAL_UART_Receive+0xf0>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10a      	bne.n	8002494 <HAL_UART_Receive+0xfe>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e008      	b.n	80024a6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3301      	adds	r3, #1
 80024aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1b6      	bne.n	8002432 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b090      	sub	sp, #64	; 0x40
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	4613      	mov	r3, r2
 80024e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ea:	e050      	b.n	800258e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f2:	d04c      	beq.n	800258e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <UART_WaitOnFlagUntilTimeout+0x30>
 80024fa:	f7fe fe61 	bl	80011c0 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002506:	429a      	cmp	r2, r3
 8002508:	d241      	bcs.n	800258e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	330c      	adds	r3, #12
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	e853 3f00 	ldrex	r3, [r3]
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	330c      	adds	r3, #12
 8002528:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800252a:	637a      	str	r2, [r7, #52]	; 0x34
 800252c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002532:	e841 2300 	strex	r3, r2, [r1]
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1e5      	bne.n	800250a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3314      	adds	r3, #20
 8002544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	e853 3f00 	ldrex	r3, [r3]
 800254c:	613b      	str	r3, [r7, #16]
   return(result);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	63bb      	str	r3, [r7, #56]	; 0x38
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3314      	adds	r3, #20
 800255c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800255e:	623a      	str	r2, [r7, #32]
 8002560:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002562:	69f9      	ldr	r1, [r7, #28]
 8002564:	6a3a      	ldr	r2, [r7, #32]
 8002566:	e841 2300 	strex	r3, r2, [r1]
 800256a:	61bb      	str	r3, [r7, #24]
   return(result);
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1e5      	bne.n	800253e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e00f      	b.n	80025ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4013      	ands	r3, r2
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	429a      	cmp	r2, r3
 800259c:	bf0c      	ite	eq
 800259e:	2301      	moveq	r3, #1
 80025a0:	2300      	movne	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d09f      	beq.n	80024ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3740      	adds	r7, #64	; 0x40
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025bc:	b0c0      	sub	sp, #256	; 0x100
 80025be:	af00      	add	r7, sp, #0
 80025c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d4:	68d9      	ldr	r1, [r3, #12]
 80025d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	ea40 0301 	orr.w	r3, r0, r1
 80025e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002610:	f021 010c 	bic.w	r1, r1, #12
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800261e:	430b      	orrs	r3, r1
 8002620:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800262e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002632:	6999      	ldr	r1, [r3, #24]
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	ea40 0301 	orr.w	r3, r0, r1
 800263e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b8f      	ldr	r3, [pc, #572]	; (8002884 <UART_SetConfig+0x2cc>)
 8002648:	429a      	cmp	r2, r3
 800264a:	d005      	beq.n	8002658 <UART_SetConfig+0xa0>
 800264c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4b8d      	ldr	r3, [pc, #564]	; (8002888 <UART_SetConfig+0x2d0>)
 8002654:	429a      	cmp	r2, r3
 8002656:	d104      	bne.n	8002662 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002658:	f7ff f962 	bl	8001920 <HAL_RCC_GetPCLK2Freq>
 800265c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002660:	e003      	b.n	800266a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002662:	f7ff f949 	bl	80018f8 <HAL_RCC_GetPCLK1Freq>
 8002666:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800266a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002674:	f040 810c 	bne.w	8002890 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800267c:	2200      	movs	r2, #0
 800267e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002682:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002686:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800268a:	4622      	mov	r2, r4
 800268c:	462b      	mov	r3, r5
 800268e:	1891      	adds	r1, r2, r2
 8002690:	65b9      	str	r1, [r7, #88]	; 0x58
 8002692:	415b      	adcs	r3, r3
 8002694:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002696:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800269a:	4621      	mov	r1, r4
 800269c:	eb12 0801 	adds.w	r8, r2, r1
 80026a0:	4629      	mov	r1, r5
 80026a2:	eb43 0901 	adc.w	r9, r3, r1
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ba:	4690      	mov	r8, r2
 80026bc:	4699      	mov	r9, r3
 80026be:	4623      	mov	r3, r4
 80026c0:	eb18 0303 	adds.w	r3, r8, r3
 80026c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026c8:	462b      	mov	r3, r5
 80026ca:	eb49 0303 	adc.w	r3, r9, r3
 80026ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026e6:	460b      	mov	r3, r1
 80026e8:	18db      	adds	r3, r3, r3
 80026ea:	653b      	str	r3, [r7, #80]	; 0x50
 80026ec:	4613      	mov	r3, r2
 80026ee:	eb42 0303 	adc.w	r3, r2, r3
 80026f2:	657b      	str	r3, [r7, #84]	; 0x54
 80026f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026fc:	f7fd fd8a 	bl	8000214 <__aeabi_uldivmod>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4b61      	ldr	r3, [pc, #388]	; (800288c <UART_SetConfig+0x2d4>)
 8002706:	fba3 2302 	umull	r2, r3, r3, r2
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	011c      	lsls	r4, r3, #4
 800270e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002712:	2200      	movs	r2, #0
 8002714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002718:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800271c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002720:	4642      	mov	r2, r8
 8002722:	464b      	mov	r3, r9
 8002724:	1891      	adds	r1, r2, r2
 8002726:	64b9      	str	r1, [r7, #72]	; 0x48
 8002728:	415b      	adcs	r3, r3
 800272a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800272c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002730:	4641      	mov	r1, r8
 8002732:	eb12 0a01 	adds.w	sl, r2, r1
 8002736:	4649      	mov	r1, r9
 8002738:	eb43 0b01 	adc.w	fp, r3, r1
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002748:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800274c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002750:	4692      	mov	sl, r2
 8002752:	469b      	mov	fp, r3
 8002754:	4643      	mov	r3, r8
 8002756:	eb1a 0303 	adds.w	r3, sl, r3
 800275a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800275e:	464b      	mov	r3, r9
 8002760:	eb4b 0303 	adc.w	r3, fp, r3
 8002764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002774:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002778:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800277c:	460b      	mov	r3, r1
 800277e:	18db      	adds	r3, r3, r3
 8002780:	643b      	str	r3, [r7, #64]	; 0x40
 8002782:	4613      	mov	r3, r2
 8002784:	eb42 0303 	adc.w	r3, r2, r3
 8002788:	647b      	str	r3, [r7, #68]	; 0x44
 800278a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800278e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002792:	f7fd fd3f 	bl	8000214 <__aeabi_uldivmod>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4611      	mov	r1, r2
 800279c:	4b3b      	ldr	r3, [pc, #236]	; (800288c <UART_SetConfig+0x2d4>)
 800279e:	fba3 2301 	umull	r2, r3, r3, r1
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2264      	movs	r2, #100	; 0x64
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	1acb      	subs	r3, r1, r3
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027b2:	4b36      	ldr	r3, [pc, #216]	; (800288c <UART_SetConfig+0x2d4>)
 80027b4:	fba3 2302 	umull	r2, r3, r3, r2
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027c0:	441c      	add	r4, r3
 80027c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027c6:	2200      	movs	r2, #0
 80027c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027d4:	4642      	mov	r2, r8
 80027d6:	464b      	mov	r3, r9
 80027d8:	1891      	adds	r1, r2, r2
 80027da:	63b9      	str	r1, [r7, #56]	; 0x38
 80027dc:	415b      	adcs	r3, r3
 80027de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027e4:	4641      	mov	r1, r8
 80027e6:	1851      	adds	r1, r2, r1
 80027e8:	6339      	str	r1, [r7, #48]	; 0x30
 80027ea:	4649      	mov	r1, r9
 80027ec:	414b      	adcs	r3, r1
 80027ee:	637b      	str	r3, [r7, #52]	; 0x34
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027fc:	4659      	mov	r1, fp
 80027fe:	00cb      	lsls	r3, r1, #3
 8002800:	4651      	mov	r1, sl
 8002802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002806:	4651      	mov	r1, sl
 8002808:	00ca      	lsls	r2, r1, #3
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
 800280e:	4603      	mov	r3, r0
 8002810:	4642      	mov	r2, r8
 8002812:	189b      	adds	r3, r3, r2
 8002814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002818:	464b      	mov	r3, r9
 800281a:	460a      	mov	r2, r1
 800281c:	eb42 0303 	adc.w	r3, r2, r3
 8002820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002830:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002834:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002838:	460b      	mov	r3, r1
 800283a:	18db      	adds	r3, r3, r3
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
 800283e:	4613      	mov	r3, r2
 8002840:	eb42 0303 	adc.w	r3, r2, r3
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002846:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800284a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800284e:	f7fd fce1 	bl	8000214 <__aeabi_uldivmod>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <UART_SetConfig+0x2d4>)
 8002858:	fba3 1302 	umull	r1, r3, r3, r2
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	2164      	movs	r1, #100	; 0x64
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	3332      	adds	r3, #50	; 0x32
 800286a:	4a08      	ldr	r2, [pc, #32]	; (800288c <UART_SetConfig+0x2d4>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	f003 0207 	and.w	r2, r3, #7
 8002876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4422      	add	r2, r4
 800287e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002880:	e105      	b.n	8002a8e <UART_SetConfig+0x4d6>
 8002882:	bf00      	nop
 8002884:	40011000 	.word	0x40011000
 8002888:	40011400 	.word	0x40011400
 800288c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002894:	2200      	movs	r2, #0
 8002896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800289a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800289e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028a2:	4642      	mov	r2, r8
 80028a4:	464b      	mov	r3, r9
 80028a6:	1891      	adds	r1, r2, r2
 80028a8:	6239      	str	r1, [r7, #32]
 80028aa:	415b      	adcs	r3, r3
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
 80028ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028b2:	4641      	mov	r1, r8
 80028b4:	1854      	adds	r4, r2, r1
 80028b6:	4649      	mov	r1, r9
 80028b8:	eb43 0501 	adc.w	r5, r3, r1
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	00eb      	lsls	r3, r5, #3
 80028c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ca:	00e2      	lsls	r2, r4, #3
 80028cc:	4614      	mov	r4, r2
 80028ce:	461d      	mov	r5, r3
 80028d0:	4643      	mov	r3, r8
 80028d2:	18e3      	adds	r3, r4, r3
 80028d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028d8:	464b      	mov	r3, r9
 80028da:	eb45 0303 	adc.w	r3, r5, r3
 80028de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028fe:	4629      	mov	r1, r5
 8002900:	008b      	lsls	r3, r1, #2
 8002902:	4621      	mov	r1, r4
 8002904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002908:	4621      	mov	r1, r4
 800290a:	008a      	lsls	r2, r1, #2
 800290c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002910:	f7fd fc80 	bl	8000214 <__aeabi_uldivmod>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4b60      	ldr	r3, [pc, #384]	; (8002a9c <UART_SetConfig+0x4e4>)
 800291a:	fba3 2302 	umull	r2, r3, r3, r2
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	011c      	lsls	r4, r3, #4
 8002922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002926:	2200      	movs	r2, #0
 8002928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800292c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002930:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002934:	4642      	mov	r2, r8
 8002936:	464b      	mov	r3, r9
 8002938:	1891      	adds	r1, r2, r2
 800293a:	61b9      	str	r1, [r7, #24]
 800293c:	415b      	adcs	r3, r3
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002944:	4641      	mov	r1, r8
 8002946:	1851      	adds	r1, r2, r1
 8002948:	6139      	str	r1, [r7, #16]
 800294a:	4649      	mov	r1, r9
 800294c:	414b      	adcs	r3, r1
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800295c:	4659      	mov	r1, fp
 800295e:	00cb      	lsls	r3, r1, #3
 8002960:	4651      	mov	r1, sl
 8002962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002966:	4651      	mov	r1, sl
 8002968:	00ca      	lsls	r2, r1, #3
 800296a:	4610      	mov	r0, r2
 800296c:	4619      	mov	r1, r3
 800296e:	4603      	mov	r3, r0
 8002970:	4642      	mov	r2, r8
 8002972:	189b      	adds	r3, r3, r2
 8002974:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002978:	464b      	mov	r3, r9
 800297a:	460a      	mov	r2, r1
 800297c:	eb42 0303 	adc.w	r3, r2, r3
 8002980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	67bb      	str	r3, [r7, #120]	; 0x78
 800298e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800299c:	4649      	mov	r1, r9
 800299e:	008b      	lsls	r3, r1, #2
 80029a0:	4641      	mov	r1, r8
 80029a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029a6:	4641      	mov	r1, r8
 80029a8:	008a      	lsls	r2, r1, #2
 80029aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029ae:	f7fd fc31 	bl	8000214 <__aeabi_uldivmod>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <UART_SetConfig+0x4e4>)
 80029b8:	fba3 1302 	umull	r1, r3, r3, r2
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	2164      	movs	r1, #100	; 0x64
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	3332      	adds	r3, #50	; 0x32
 80029ca:	4a34      	ldr	r2, [pc, #208]	; (8002a9c <UART_SetConfig+0x4e4>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d6:	441c      	add	r4, r3
 80029d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029dc:	2200      	movs	r2, #0
 80029de:	673b      	str	r3, [r7, #112]	; 0x70
 80029e0:	677a      	str	r2, [r7, #116]	; 0x74
 80029e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029e6:	4642      	mov	r2, r8
 80029e8:	464b      	mov	r3, r9
 80029ea:	1891      	adds	r1, r2, r2
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	415b      	adcs	r3, r3
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029f6:	4641      	mov	r1, r8
 80029f8:	1851      	adds	r1, r2, r1
 80029fa:	6039      	str	r1, [r7, #0]
 80029fc:	4649      	mov	r1, r9
 80029fe:	414b      	adcs	r3, r1
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a0e:	4659      	mov	r1, fp
 8002a10:	00cb      	lsls	r3, r1, #3
 8002a12:	4651      	mov	r1, sl
 8002a14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a18:	4651      	mov	r1, sl
 8002a1a:	00ca      	lsls	r2, r1, #3
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4603      	mov	r3, r0
 8002a22:	4642      	mov	r2, r8
 8002a24:	189b      	adds	r3, r3, r2
 8002a26:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a28:	464b      	mov	r3, r9
 8002a2a:	460a      	mov	r2, r1
 8002a2c:	eb42 0303 	adc.w	r3, r2, r3
 8002a30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	663b      	str	r3, [r7, #96]	; 0x60
 8002a3c:	667a      	str	r2, [r7, #100]	; 0x64
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a4a:	4649      	mov	r1, r9
 8002a4c:	008b      	lsls	r3, r1, #2
 8002a4e:	4641      	mov	r1, r8
 8002a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a54:	4641      	mov	r1, r8
 8002a56:	008a      	lsls	r2, r1, #2
 8002a58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a5c:	f7fd fbda 	bl	8000214 <__aeabi_uldivmod>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <UART_SetConfig+0x4e4>)
 8002a66:	fba3 1302 	umull	r1, r3, r3, r2
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2164      	movs	r1, #100	; 0x64
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	3332      	adds	r3, #50	; 0x32
 8002a78:	4a08      	ldr	r2, [pc, #32]	; (8002a9c <UART_SetConfig+0x4e4>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4422      	add	r2, r4
 8002a8c:	609a      	str	r2, [r3, #8]
}
 8002a8e:	bf00      	nop
 8002a90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a94:	46bd      	mov	sp, r7
 8002a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a9a:	bf00      	nop
 8002a9c:	51eb851f 	.word	0x51eb851f

08002aa0 <__libc_init_array>:
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	4d0d      	ldr	r5, [pc, #52]	; (8002ad8 <__libc_init_array+0x38>)
 8002aa4:	4c0d      	ldr	r4, [pc, #52]	; (8002adc <__libc_init_array+0x3c>)
 8002aa6:	1b64      	subs	r4, r4, r5
 8002aa8:	10a4      	asrs	r4, r4, #2
 8002aaa:	2600      	movs	r6, #0
 8002aac:	42a6      	cmp	r6, r4
 8002aae:	d109      	bne.n	8002ac4 <__libc_init_array+0x24>
 8002ab0:	4d0b      	ldr	r5, [pc, #44]	; (8002ae0 <__libc_init_array+0x40>)
 8002ab2:	4c0c      	ldr	r4, [pc, #48]	; (8002ae4 <__libc_init_array+0x44>)
 8002ab4:	f000 f82e 	bl	8002b14 <_init>
 8002ab8:	1b64      	subs	r4, r4, r5
 8002aba:	10a4      	asrs	r4, r4, #2
 8002abc:	2600      	movs	r6, #0
 8002abe:	42a6      	cmp	r6, r4
 8002ac0:	d105      	bne.n	8002ace <__libc_init_array+0x2e>
 8002ac2:	bd70      	pop	{r4, r5, r6, pc}
 8002ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac8:	4798      	blx	r3
 8002aca:	3601      	adds	r6, #1
 8002acc:	e7ee      	b.n	8002aac <__libc_init_array+0xc>
 8002ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad2:	4798      	blx	r3
 8002ad4:	3601      	adds	r6, #1
 8002ad6:	e7f2      	b.n	8002abe <__libc_init_array+0x1e>
 8002ad8:	08002d5c 	.word	0x08002d5c
 8002adc:	08002d5c 	.word	0x08002d5c
 8002ae0:	08002d5c 	.word	0x08002d5c
 8002ae4:	08002d60 	.word	0x08002d60

08002ae8 <memcpy>:
 8002ae8:	440a      	add	r2, r1
 8002aea:	4291      	cmp	r1, r2
 8002aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8002af0:	d100      	bne.n	8002af4 <memcpy+0xc>
 8002af2:	4770      	bx	lr
 8002af4:	b510      	push	{r4, lr}
 8002af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002afe:	4291      	cmp	r1, r2
 8002b00:	d1f9      	bne.n	8002af6 <memcpy+0xe>
 8002b02:	bd10      	pop	{r4, pc}

08002b04 <memset>:
 8002b04:	4402      	add	r2, r0
 8002b06:	4603      	mov	r3, r0
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d100      	bne.n	8002b0e <memset+0xa>
 8002b0c:	4770      	bx	lr
 8002b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b12:	e7f9      	b.n	8002b08 <memset+0x4>

08002b14 <_init>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	bf00      	nop
 8002b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	469e      	mov	lr, r3
 8002b1e:	4770      	bx	lr

08002b20 <_fini>:
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b22:	bf00      	nop
 8002b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b26:	bc08      	pop	{r3}
 8002b28:	469e      	mov	lr, r3
 8002b2a:	4770      	bx	lr
