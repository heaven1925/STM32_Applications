
0010_EEMCANTest_FDV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f04  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800621c  0800621c  0001621c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006220  08006220  00016220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08006224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003a8  24000010  08006234  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00006000  240003b8  08006234  000203b8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011be0  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001fbc  00000000  00000000  00031c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ae0  00000000  00000000  00033be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a08  00000000  00000000  000346c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036bdc  00000000  00000000  000350c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d208  00000000  00000000  0006bca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015c0b0  00000000  00000000  00078eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d4f5c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002cfc  00000000  00000000  001d4fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006184 	.word	0x08006184

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08006184 	.word	0x08006184

080002d8 <HAL_FDCAN_RxFifo0Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// FDCAN1 Callback
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	b08d      	sub	sp, #52	; 0x34
 80002dc:	af08      	add	r7, sp, #32
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d02a      	beq.n	8000342 <HAL_FDCAN_RxFifo0Callback+0x6a>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(	&protocol.obj.fdHandle.hfdcanHandle ,
 80002ec:	4b17      	ldr	r3, [pc, #92]	; (800034c <HAL_FDCAN_RxFifo0Callback+0x74>)
 80002ee:	4a18      	ldr	r2, [pc, #96]	; (8000350 <HAL_FDCAN_RxFifo0Callback+0x78>)
 80002f0:	2140      	movs	r1, #64	; 0x40
 80002f2:	4818      	ldr	r0, [pc, #96]	; (8000354 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 80002f4:	f002 fb40 	bl	8002978 <HAL_FDCAN_GetRxMessage>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <HAL_FDCAN_RxFifo0Callback+0x2a>
    							FDCAN_RX_FIFO0						,
								&protocol.obj.fdHandle.rxHeader 	,
								&protocol.obj.fdHandle.rxData[0] ) != HAL_OK)
    {
    /* Reception Error */
    Error_Handler();
 80002fe:	f000 f9b1 	bl	8000664 <Error_Handler>
    }

    //@NEW: @a.ertekin
    protocol.ops.EEM_RX(&protocol.obj.canPacket  			,
 8000302:	4b14      	ldr	r3, [pc, #80]	; (8000354 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8000304:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	4e12      	ldr	r6, [pc, #72]	; (8000354 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <HAL_FDCAN_RxFifo0Callback+0x74>)
 800030e:	9307      	str	r3, [sp, #28]
 8000310:	466d      	mov	r5, sp
 8000312:	f106 04f0 	add.w	r4, r6, #240	; 0xf0
 8000316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800031a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800031e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000322:	f106 03e4 	add.w	r3, r6, #228	; 0xe4
 8000326:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000328:	480b      	ldr	r0, [pc, #44]	; (8000358 <HAL_FDCAN_RxFifo0Callback+0x80>)
 800032a:	687c      	ldr	r4, [r7, #4]
 800032c:	47a0      	blx	r4
    					 protocol.obj.fdHandle.rxHeader		,
						 &protocol.obj.fdHandle.rxData[0]	);

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800032e:	2200      	movs	r2, #0
 8000330:	2101      	movs	r1, #1
 8000332:	68f8      	ldr	r0, [r7, #12]
 8000334:	f002 fc8e 	bl	8002c54 <HAL_FDCAN_ActivateNotification>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <HAL_FDCAN_RxFifo0Callback+0x6a>
    {
      /* Notification Error */
      Error_Handler();
 800033e:	f000 f991 	bl	8000664 <Error_Handler>
    }

  }

}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034a:	bf00      	nop
 800034c:	240001e0 	.word	0x240001e0
 8000350:	240001b0 	.word	0x240001b0
 8000354:	240000cc 	.word	0x240000cc
 8000358:	240001e8 	.word	0x240001e8

0800035c <HAL_FDCAN_TxBufferCompleteCallback>:


void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
	return;
 8000366:	bf00      	nop
}
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
	...

08000374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000378:	f000 f948 	bl	800060c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037c:	f001 fda6 	bl	8001ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000380:	f000 f848 	bl	8000414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000384:	f000 f928 	bl	80005d8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000388:	f000 f8c2 	bl	8000510 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  protocol.obj.fdHandle.hfdcanHandle = hfdcan1;
 800038c:	4a19      	ldr	r2, [pc, #100]	; (80003f4 <main+0x80>)
 800038e:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <main+0x84>)
 8000390:	4610      	mov	r0, r2
 8000392:	4619      	mov	r1, r3
 8000394:	23a0      	movs	r3, #160	; 0xa0
 8000396:	461a      	mov	r2, r3
 8000398:	f005 fede 	bl	8006158 <memcpy>
  protocol.ops = ops;
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <main+0x80>)
 800039e:	4a17      	ldr	r2, [pc, #92]	; (80003fc <main+0x88>)
 80003a0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80003a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80003a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  protocol.ops.EEM_INIT(&protocol.obj);
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <main+0x80>)
 80003ac:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80003b0:	4810      	ldr	r0, [pc, #64]	; (80003f4 <main+0x80>)
 80003b2:	4798      	blx	r3
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	EEM_PERIODIC(&protocol.obj.canPacket);
 80003b4:	4812      	ldr	r0, [pc, #72]	; (8000400 <main+0x8c>)
 80003b6:	f000 fcb9 	bl	8000d2c <EEM_PERIODIC>

	static uint32_t loopVal = 0;

	BCM_MSG.Message08.SPN.MS1_Speed = loopVal;
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <main+0x90>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a12      	ldr	r2, [pc, #72]	; (8000408 <main+0x94>)
 80003c0:	6313      	str	r3, [r2, #48]	; 0x30
	loopVal++;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <main+0x90>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	3301      	adds	r3, #1
 80003c8:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <main+0x90>)
 80003ca:	6013      	str	r3, [r2, #0]

	memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message08.payload[0] , 8);
 80003cc:	2208      	movs	r2, #8
 80003ce:	490f      	ldr	r1, [pc, #60]	; (800040c <main+0x98>)
 80003d0:	480f      	ldr	r0, [pc, #60]	; (8000410 <main+0x9c>)
 80003d2:	f005 fec1 	bl	8006158 <memcpy>
	protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message08_ID;
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <main+0x94>)
 80003d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003da:	4a06      	ldr	r2, [pc, #24]	; (80003f4 <main+0x80>)
 80003dc:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c



	protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 80003e0:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <main+0x80>)
 80003e2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80003e6:	2100      	movs	r1, #0
 80003e8:	4805      	ldr	r0, [pc, #20]	; (8000400 <main+0x8c>)
 80003ea:	4798      	blx	r3
	HAL_Delay(100);
 80003ec:	2064      	movs	r0, #100	; 0x64
 80003ee:	f001 fdff 	bl	8001ff0 <HAL_Delay>
  {
 80003f2:	e7df      	b.n	80003b4 <main+0x40>
 80003f4:	240000cc 	.word	0x240000cc
 80003f8:	2400002c 	.word	0x2400002c
 80003fc:	08006200 	.word	0x08006200
 8000400:	240001e8 	.word	0x240001e8
 8000404:	24000300 	.word	0x24000300
 8000408:	24000304 	.word	0x24000304
 800040c:	24000334 	.word	0x24000334
 8000410:	240001ec 	.word	0x240001ec

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b09c      	sub	sp, #112	; 0x70
 8000418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800041e:	224c      	movs	r2, #76	; 0x4c
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f005 fea6 	bl	8006174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2220      	movs	r2, #32
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f005 fea0 	bl	8006174 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000434:	2002      	movs	r0, #2
 8000436:	f003 fb39 	bl	8003aac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800043a:	2300      	movs	r3, #0
 800043c:	603b      	str	r3, [r7, #0]
 800043e:	4b32      	ldr	r3, [pc, #200]	; (8000508 <SystemClock_Config+0xf4>)
 8000440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000442:	4a31      	ldr	r2, [pc, #196]	; (8000508 <SystemClock_Config+0xf4>)
 8000444:	f023 0301 	bic.w	r3, r3, #1
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
 800044a:	4b2f      	ldr	r3, [pc, #188]	; (8000508 <SystemClock_Config+0xf4>)
 800044c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	4b2d      	ldr	r3, [pc, #180]	; (800050c <SystemClock_Config+0xf8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800045c:	4a2b      	ldr	r2, [pc, #172]	; (800050c <SystemClock_Config+0xf8>)
 800045e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b29      	ldr	r3, [pc, #164]	; (800050c <SystemClock_Config+0xf8>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800046c:	603b      	str	r3, [r7, #0]
 800046e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000470:	bf00      	nop
 8000472:	4b26      	ldr	r3, [pc, #152]	; (800050c <SystemClock_Config+0xf8>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800047a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800047e:	d1f8      	bne.n	8000472 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000480:	2302      	movs	r3, #2
 8000482:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000484:	2301      	movs	r3, #1
 8000486:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000488:	2340      	movs	r3, #64	; 0x40
 800048a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048c:	2302      	movs	r3, #2
 800048e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000490:	2300      	movs	r3, #0
 8000492:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000494:	2304      	movs	r3, #4
 8000496:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000498:	230a      	movs	r3, #10
 800049a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800049c:	2302      	movs	r3, #2
 800049e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80004a0:	2304      	movs	r3, #4
 80004a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004a4:	2302      	movs	r3, #2
 80004a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004a8:	230c      	movs	r3, #12
 80004aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80004ac:	2302      	movs	r3, #2
 80004ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80004b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ba:	4618      	mov	r0, r3
 80004bc:	f003 fb30 	bl	8003b20 <HAL_RCC_OscConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80004c6:	f000 f8cd 	bl	8000664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ca:	233f      	movs	r3, #63	; 0x3f
 80004cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ce:	2303      	movs	r3, #3
 80004d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2101      	movs	r1, #1
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 ff70 	bl	80043d4 <HAL_RCC_ClockConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0xea>
  {
    Error_Handler();
 80004fa:	f000 f8b3 	bl	8000664 <Error_Handler>
  }
}
 80004fe:	bf00      	nop
 8000500:	3770      	adds	r7, #112	; 0x70
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	58000400 	.word	0x58000400
 800050c:	58024800 	.word	0x58024800

08000510 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000514:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 8000516:	4a2f      	ldr	r2, [pc, #188]	; (80005d4 <MX_FDCAN1_Init+0xc4>)
 8000518:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800051a:	4b2d      	ldr	r3, [pc, #180]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000520:	4b2b      	ldr	r3, [pc, #172]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000526:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 8000528:	2201      	movs	r2, #1
 800052a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800052c:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 800052e:	2200      	movs	r2, #0
 8000530:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000532:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 8000534:	2200      	movs	r2, #0
 8000536:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 12;
 8000538:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 800053a:	220c      	movs	r2, #12
 800053c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800053e:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 8000540:	2201      	movs	r2, #1
 8000542:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 8000546:	220b      	movs	r2, #11
 8000548:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800054a:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 800054c:	2202      	movs	r2, #2
 800054e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 8000552:	2201      	movs	r2, #1
 8000554:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 8000558:	2201      	movs	r2, #1
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 800055e:	2201      	movs	r2, #1
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000562:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 8000564:	2201      	movs	r2, #1
 8000566:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 800056a:	2200      	movs	r2, #0
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 8000570:	2200      	movs	r2, #0
 8000572:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 3;
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 8000576:	2203      	movs	r2, #3
 8000578:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 800057c:	2200      	movs	r2, #0
 800057e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000580:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 8000582:	2204      	movs	r2, #4
 8000584:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 8000588:	2200      	movs	r2, #0
 800058a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 800058e:	2204      	movs	r2, #4
 8000590:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 8000594:	2200      	movs	r2, #0
 8000596:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 800059a:	2204      	movs	r2, #4
 800059c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 24;
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 80005ac:	2218      	movs	r2, #24
 80005ae:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 80005b8:	2204      	movs	r2, #4
 80005ba:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <MX_FDCAN1_Init+0xc0>)
 80005be:	f001 fed3 	bl	8002368 <HAL_FDCAN_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80005c8:	f000 f84c 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2400002c 	.word	0x2400002c
 80005d4:	4000a000 	.word	0x4000a000

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <MX_GPIO_Init+0x30>)
 80005e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e4:	4a08      	ldr	r2, [pc, #32]	; (8000608 <MX_GPIO_Init+0x30>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_GPIO_Init+0x30>)
 80005f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	58024400 	.word	0x58024400

0800060c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800061e:	f001 fe27 	bl	8002270 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000622:	2301      	movs	r3, #1
 8000624:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000626:	2300      	movs	r3, #0
 8000628:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800062e:	231f      	movs	r3, #31
 8000630:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000632:	2387      	movs	r3, #135	; 0x87
 8000634:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000636:	2300      	movs	r3, #0
 8000638:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800063a:	2300      	movs	r3, #0
 800063c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800063e:	2301      	movs	r3, #1
 8000640:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000642:	2301      	movs	r3, #1
 8000644:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800064e:	463b      	mov	r3, r7
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fe45 	bl	80022e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000656:	2004      	movs	r0, #4
 8000658:	f001 fe22 	bl	80022a0 <HAL_MPU_Enable>

}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	e7fe      	b.n	800066c <Error_Handler+0x8>
	...

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <HAL_MspInit+0x30>)
 8000678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800067c:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <HAL_MspInit+0x30>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_MspInit+0x30>)
 8000688:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	58024400 	.word	0x58024400

080006a4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0ba      	sub	sp, #232	; 0xe8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	22c0      	movs	r2, #192	; 0xc0
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f005 fd55 	bl	8006174 <memset>
  if(hfdcan->Instance==FDCAN1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a2f      	ldr	r2, [pc, #188]	; (800078c <HAL_FDCAN_MspInit+0xe8>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d157      	bne.n	8000784 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006d8:	f04f 0300 	mov.w	r3, #0
 80006dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80006e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	4618      	mov	r0, r3
 80006ee:	f004 f9a1 	bl	8004a34 <HAL_RCCEx_PeriphCLKConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80006f8:	f7ff ffb4 	bl	8000664 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <HAL_FDCAN_MspInit+0xec>)
 80006fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000702:	4a23      	ldr	r2, [pc, #140]	; (8000790 <HAL_FDCAN_MspInit+0xec>)
 8000704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000708:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <HAL_FDCAN_MspInit+0xec>)
 800070e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <HAL_FDCAN_MspInit+0xec>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000720:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <HAL_FDCAN_MspInit+0xec>)
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <HAL_FDCAN_MspInit+0xec>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000738:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800073c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000752:	2309      	movs	r3, #9
 8000754:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800075c:	4619      	mov	r1, r3
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <HAL_FDCAN_MspInit+0xf0>)
 8000760:	f002 fff4 	bl	800374c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	2013      	movs	r0, #19
 800076a:	f001 fd4c 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800076e:	2013      	movs	r0, #19
 8000770:	f001 fd63 	bl	800223a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2015      	movs	r0, #21
 800077a:	f001 fd44 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800077e:	2015      	movs	r0, #21
 8000780:	f001 fd5b 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000784:	bf00      	nop
 8000786:	37e8      	adds	r7, #232	; 0xe8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	4000a000 	.word	0x4000a000
 8000790:	58024400 	.word	0x58024400
 8000794:	58020000 	.word	0x58020000

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e4:	f001 fbe4 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <FDCAN1_IT0_IRQHandler+0x10>)
 80007f2:	f002 faa9 	bl	8002d48 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2400002c 	.word	0x2400002c

08000800 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <FDCAN1_IT1_IRQHandler+0x10>)
 8000806:	f002 fa9f 	bl	8002d48 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2400002c 	.word	0x2400002c

08000814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000818:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <SystemInit+0xe4>)
 800081a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081e:	4a36      	ldr	r2, [pc, #216]	; (80008f8 <SystemInit+0xe4>)
 8000820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000828:	4b34      	ldr	r3, [pc, #208]	; (80008fc <SystemInit+0xe8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f003 030f 	and.w	r3, r3, #15
 8000830:	2b06      	cmp	r3, #6
 8000832:	d807      	bhi.n	8000844 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000834:	4b31      	ldr	r3, [pc, #196]	; (80008fc <SystemInit+0xe8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f023 030f 	bic.w	r3, r3, #15
 800083c:	4a2f      	ldr	r2, [pc, #188]	; (80008fc <SystemInit+0xe8>)
 800083e:	f043 0307 	orr.w	r3, r3, #7
 8000842:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000844:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <SystemInit+0xec>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a2d      	ldr	r2, [pc, #180]	; (8000900 <SystemInit+0xec>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000850:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <SystemInit+0xec>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <SystemInit+0xec>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4929      	ldr	r1, [pc, #164]	; (8000900 <SystemInit+0xec>)
 800085c:	4b29      	ldr	r3, [pc, #164]	; (8000904 <SystemInit+0xf0>)
 800085e:	4013      	ands	r3, r2
 8000860:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <SystemInit+0xe8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	2b00      	cmp	r3, #0
 800086c:	d007      	beq.n	800087e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <SystemInit+0xe8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f023 030f 	bic.w	r3, r3, #15
 8000876:	4a21      	ldr	r2, [pc, #132]	; (80008fc <SystemInit+0xe8>)
 8000878:	f043 0307 	orr.w	r3, r3, #7
 800087c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <SystemInit+0xec>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <SystemInit+0xec>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <SystemInit+0xec>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <SystemInit+0xec>)
 8000892:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <SystemInit+0xf4>)
 8000894:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <SystemInit+0xec>)
 8000898:	4a1c      	ldr	r2, [pc, #112]	; (800090c <SystemInit+0xf8>)
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <SystemInit+0xec>)
 800089e:	4a1c      	ldr	r2, [pc, #112]	; (8000910 <SystemInit+0xfc>)
 80008a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <SystemInit+0xec>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <SystemInit+0xec>)
 80008aa:	4a19      	ldr	r2, [pc, #100]	; (8000910 <SystemInit+0xfc>)
 80008ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <SystemInit+0xec>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <SystemInit+0xec>)
 80008b6:	4a16      	ldr	r2, [pc, #88]	; (8000910 <SystemInit+0xfc>)
 80008b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <SystemInit+0xec>)
 80008bc:	2200      	movs	r2, #0
 80008be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <SystemInit+0xec>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <SystemInit+0xec>)
 80008c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <SystemInit+0xec>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <SystemInit+0x100>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <SystemInit+0x104>)
 80008d8:	4013      	ands	r3, r2
 80008da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008de:	d202      	bcs.n	80008e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <SystemInit+0x108>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <SystemInit+0x10c>)
 80008e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80008ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000ed00 	.word	0xe000ed00
 80008fc:	52002000 	.word	0x52002000
 8000900:	58024400 	.word	0x58024400
 8000904:	eaf6ed7f 	.word	0xeaf6ed7f
 8000908:	02020200 	.word	0x02020200
 800090c:	01ff0000 	.word	0x01ff0000
 8000910:	01010280 	.word	0x01010280
 8000914:	5c001000 	.word	0x5c001000
 8000918:	ffff0000 	.word	0xffff0000
 800091c:	51008108 	.word	0x51008108
 8000920:	52004000 	.word	0x52004000

08000924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800095c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000928:	f7ff ff74 	bl	8000814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	; (8000964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	; (8000970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000952:	f005 fbdd 	bl	8006110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000956:	f7ff fd0d 	bl	8000374 <main>
  bx  lr
 800095a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800095c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000960:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000964:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000968:	08006224 	.word	0x08006224
  ldr r2, =_sbss
 800096c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000970:	240003b8 	.word	0x240003b8

08000974 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC3_IRQHandler>
	...

08000978 <EEM_INIT>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T EEM_INIT( EEM_Protocol_obj_st*  param )
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b090      	sub	sp, #64	; 0x40
 800097c:	af02      	add	r7, sp, #8
 800097e:	6078      	str	r0, [r7, #4]
	
	EEM_ERR_T result = EEM_EOK;
 8000980:	2300      	movs	r3, #0
 8000982:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

/* Ring Buffer Init Sequance */

	param->ringBuffer.head = 0;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
	param->ringBuffer.tail = 0;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
	param->ringBuffer.full = EEM_FALSE;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
	
	
#elif (defined(STM32H750xx) && defined(FDCAN_Protocol))
	/*@NOTICE: All Configs for 42MHz CAN BASE CLOCK */

	param->fdHandle.hfdcanHandle.Instance 					= FDCAN1;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a57      	ldr	r2, [pc, #348]	; (8000b00 <EEM_INIT+0x188>)
 80009a2:	601a      	str	r2, [r3, #0]
	param->fdHandle.hfdcanHandle.Init.FrameFormat 			= FDCAN_FRAME_CLASSIC;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
	param->fdHandle.hfdcanHandle.Init.Mode 					= FDCAN_MODE_NORMAL;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
	param->fdHandle.hfdcanHandle.Init.AutoRetransmission 	= ENABLE;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2201      	movs	r2, #1
 80009b4:	741a      	strb	r2, [r3, #16]
	param->fdHandle.hfdcanHandle.Init.TransmitPause 		= DISABLE;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	745a      	strb	r2, [r3, #17]
	param->fdHandle.hfdcanHandle.Init.ProtocolException 	= DISABLE;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	749a      	strb	r2, [r3, #18]
	param->fdHandle.hfdcanHandle.Init.NominalPrescaler 		= 12;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	220c      	movs	r2, #12
 80009c6:	615a      	str	r2, [r3, #20]
	param->fdHandle.hfdcanHandle.Init.NominalSyncJumpWidth 	= 1;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2201      	movs	r2, #1
 80009cc:	619a      	str	r2, [r3, #24]
	param->fdHandle.hfdcanHandle.Init.NominalTimeSeg1 		= 11;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	220b      	movs	r2, #11
 80009d2:	61da      	str	r2, [r3, #28]
	param->fdHandle.hfdcanHandle.Init.NominalTimeSeg2 		= 2;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2202      	movs	r2, #2
 80009d8:	621a      	str	r2, [r3, #32]
	param->fdHandle.hfdcanHandle.Init.DataPrescaler 		= 1;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2201      	movs	r2, #1
 80009de:	625a      	str	r2, [r3, #36]	; 0x24
	param->fdHandle.hfdcanHandle.Init.DataSyncJumpWidth 	= 1;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2201      	movs	r2, #1
 80009e4:	629a      	str	r2, [r3, #40]	; 0x28
	param->fdHandle.hfdcanHandle.Init.DataTimeSeg1 			= 1;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2201      	movs	r2, #1
 80009ea:	62da      	str	r2, [r3, #44]	; 0x2c
	param->fdHandle.hfdcanHandle.Init.DataTimeSeg2 			= 1;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2201      	movs	r2, #1
 80009f0:	631a      	str	r2, [r3, #48]	; 0x30
	param->fdHandle.hfdcanHandle.Init.MessageRAMOffset 		= 0;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	635a      	str	r2, [r3, #52]	; 0x34
	param->fdHandle.hfdcanHandle.Init.StdFiltersNbr 		= 0;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	639a      	str	r2, [r3, #56]	; 0x38
#if 	defined(BCM_MODULE)
	param->fdHandle.hfdcanHandle.Init.ExtFiltersNbr 		= 7;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2207      	movs	r2, #7
 8000a02:	63da      	str	r2, [r3, #60]	; 0x3c
#elif	defined( TLM_MODULE )
	param->fdHandle.hfdcanHandle.Init.ExtFiltersNbr 		= 1;
#else
	param->fdHandle.hfdcanHandle.Init.ExtFiltersNbr 		= 1; //@INFO: Tüm can paketleri alınır.
#endif
	param->fdHandle.hfdcanHandle.Init.RxFifo0ElmtsNbr 		= 1;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2201      	movs	r2, #1
 8000a08:	641a      	str	r2, [r3, #64]	; 0x40
	param->fdHandle.hfdcanHandle.Init.RxFifo0ElmtSize 		= FDCAN_DATA_BYTES_8;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	645a      	str	r2, [r3, #68]	; 0x44
	param->fdHandle.hfdcanHandle.Init.RxFifo1ElmtsNbr 		= 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	649a      	str	r2, [r3, #72]	; 0x48
	param->fdHandle.hfdcanHandle.Init.RxFifo1ElmtSize 		= FDCAN_DATA_BYTES_8;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2204      	movs	r2, #4
 8000a1a:	64da      	str	r2, [r3, #76]	; 0x4c
	param->fdHandle.hfdcanHandle.Init.RxBuffersNbr 			= 1;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	651a      	str	r2, [r3, #80]	; 0x50
	param->fdHandle.hfdcanHandle.Init.RxBufferSize 			= FDCAN_DATA_BYTES_8;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2204      	movs	r2, #4
 8000a26:	655a      	str	r2, [r3, #84]	; 0x54
	param->fdHandle.hfdcanHandle.Init.TxEventsNbr 			= 0;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	659a      	str	r2, [r3, #88]	; 0x58
	param->fdHandle.hfdcanHandle.Init.TxBuffersNbr 			= 0;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	65da      	str	r2, [r3, #92]	; 0x5c
	param->fdHandle.hfdcanHandle.Init.TxFifoQueueElmtsNbr 	= 24;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2218      	movs	r2, #24
 8000a38:	661a      	str	r2, [r3, #96]	; 0x60
	param->fdHandle.hfdcanHandle.Init.TxFifoQueueMode 		= FDCAN_TX_FIFO_OPERATION;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	665a      	str	r2, [r3, #100]	; 0x64
	param->fdHandle.hfdcanHandle.Init.TxElmtSize 			= FDCAN_DATA_BYTES_8;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2204      	movs	r2, #4
 8000a44:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&param->fdHandle.hfdcanHandle) != HAL_OK)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 fc8d 	bl	8002368 <HAL_FDCAN_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <EEM_INIT+0xe0>
	{
		return EEM_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	e04e      	b.n	8000af6 <EEM_INIT+0x17e>
#endif

#endif

#if defined(BCM_MODULE)
	if( EEM_FILTER_BCM( param ) != EEM_EOK ) return EEM_ERROR;
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f000 fffd 	bl	8001a58 <EEM_FILTER_BCM>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <EEM_INIT+0xf0>
 8000a64:	2301      	movs	r3, #1
 8000a66:	e046      	b.n	8000af6 <EEM_INIT+0x17e>


#elif (defined(STM32H750xx) && defined(FDCAN_Protocol))

	/* Configure global filter to reject all non-matching frames */
	 HAL_FDCAN_ConfigGlobalFilter(&param->fdHandle.hfdcanHandle, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	2202      	movs	r2, #2
 8000a72:	2102      	movs	r1, #2
 8000a74:	f001 fecc 	bl	8002810 <HAL_FDCAN_ConfigGlobalFilter>

	if(HAL_FDCAN_Start(&param->fdHandle.hfdcanHandle)!= HAL_OK)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 fef5 	bl	800286a <HAL_FDCAN_Start>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <EEM_INIT+0x112>
	{
		return EEM_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e035      	b.n	8000af6 <EEM_INIT+0x17e>
	}

	if (HAL_FDCAN_ActivateNotification(&param->fdHandle.hfdcanHandle, FDCAN_IT_RX_FIFO0_NEW_MESSAGE
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 f8df 	bl	8002c54 <HAL_FDCAN_ActivateNotification>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <EEM_INIT+0x128>
																	   , 0) != HAL_OK)
	{
		return EEM_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e02a      	b.n	8000af6 <EEM_INIT+0x17e>
	}

	/* TEST MESSAGE FOR CAN LINE */
	/*******************************************************************************/
	FDCAN_TxHeaderTypeDef   TestTxHeader;
	EEM_U8               	TestTxData[8] = { 0xEE , EEM_VERSION , 0xEE , EEM_SUBVERSION , 0xEE , EEM_REVISION , 0xEE , 0xEE};
 8000aa0:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <EEM_INIT+0x18c>)
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aaa:	e883 0003 	stmia.w	r3, {r0, r1}
	TestTxHeader.Identifier 			= 0x65D;
 8000aae:	f240 635d 	movw	r3, #1629	; 0x65d
 8000ab2:	613b      	str	r3, [r7, #16]
	TestTxHeader.IdType 				= FDCAN_STANDARD_ID;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
	TestTxHeader.TxFrameType 			= FDCAN_DATA_FRAME;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
	TestTxHeader.DataLength 			= FDCAN_DLC_BYTES_8;
 8000abc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ac0:	61fb      	str	r3, [r7, #28]
	TestTxHeader.ErrorStateIndicator 	= FDCAN_ESI_ACTIVE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
	TestTxHeader.BitRateSwitch	 		= FDCAN_BRS_OFF;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
	TestTxHeader.FDFormat 				= FDCAN_CLASSIC_CAN;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
	TestTxHeader.TxEventFifoControl 	= FDCAN_STORE_TX_EVENTS;
 8000ace:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
	TestTxHeader.MessageMarker 			= 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_FDCAN_AddMessageToTxFifoQ(&param->fdHandle.hfdcanHandle, &TestTxHeader, TestTxData)!= HAL_OK)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f107 0208 	add.w	r2, r7, #8
 8000ade:	f107 0110 	add.w	r1, r7, #16
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 feec 	bl	80028c0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <EEM_INIT+0x17a>
	{
		return EEM_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e001      	b.n	8000af6 <EEM_INIT+0x17e>

#endif

#endif

	return result;
 8000af2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3738      	adds	r7, #56	; 0x38
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	4000a000 	.word	0x4000a000
 8000b04:	0800619c 	.word	0x0800619c

08000b08 <EEM_PUSH>:
	 @return  : 
	 @date	  : 
	 @INFO	  :
********************************************************************************/
void   EEM_PUSH( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 8000b08:	b490      	push	{r4, r7}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 8000b12:	2300      	movs	r3, #0
 8000b14:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	e011      	b.n	8000b40 <EEM_PUSH+0x38>
	{
		ringBuf->data[ ringBuf->tail ][ loopVal ] = param->DATA[ loopVal ];
 8000b1c:	7bfa      	ldrb	r2, [r7, #15]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8000b24:	461c      	mov	r4, r3
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	6839      	ldr	r1, [r7, #0]
 8000b2a:	440a      	add	r2, r1
 8000b2c:	7910      	ldrb	r0, [r2, #4]
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	00e2      	lsls	r2, r4, #3
 8000b32:	440a      	add	r2, r1
 8000b34:	4413      	add	r3, r2
 8000b36:	4602      	mov	r2, r0
 8000b38:	701a      	strb	r2, [r3, #0]
	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b07      	cmp	r3, #7
 8000b44:	d9ea      	bls.n	8000b1c <EEM_PUSH+0x14>
	}
	ringBuf->id[ ringBuf->tail ].identifier = param->EXTENDED_ID.identifier;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	6819      	ldr	r1, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3228      	adds	r2, #40	; 0x28
 8000b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ringBuf->byte_count++;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	ringBuf->tail = ( ringBuf->tail + 1 ) % EEM_BUFFER_SIZE ;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <EEM_PUSH+0xa8>)
 8000b72:	fb83 1302 	smull	r1, r3, r3, r2
 8000b76:	10d9      	asrs	r1, r3, #3
 8000b78:	17d3      	asrs	r3, r2, #31
 8000b7a:	1ac9      	subs	r1, r1, r3
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	440b      	add	r3, r1
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	1ad1      	subs	r1, r2, r3
 8000b86:	b2ca      	uxtb	r2, r1
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
	
	if( ringBuf->tail == ringBuf->head )
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d103      	bne.n	8000ba6 <EEM_PUSH+0x9e>
	{
		ringBuf->full = EEM_TRUE ;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
	}
	
}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc90      	pop	{r4, r7}
 8000bae:	4770      	bx	lr
 8000bb0:	66666667 	.word	0x66666667

08000bb4 <EEM_POP>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void	EEM_POP( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal <= 8 ; loopVal++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	e011      	b.n	8000bec <EEM_POP+0x38>
	{
		param->DATA[ loopVal ] = ringBuf->data[ ringBuf->head ][ loopVal ];
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	7bfa      	ldrb	r2, [r7, #15]
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	00c9      	lsls	r1, r1, #3
 8000bd8:	4401      	add	r1, r0
 8000bda:	440a      	add	r2, r1
 8000bdc:	7811      	ldrb	r1, [r2, #0]
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	4413      	add	r3, r2
 8000be2:	460a      	mov	r2, r1
 8000be4:	711a      	strb	r2, [r3, #4]
	for(loopVal = 0 ; loopVal <= 8 ; loopVal++)
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	3301      	adds	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d9ea      	bls.n	8000bc8 <EEM_POP+0x14>
	}
	param->EXTENDED_ID.identifier = ringBuf->id[ ringBuf->head ].identifier;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3228      	adds	r2, #40	; 0x28
 8000bfe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	601a      	str	r2, [r3, #0]
	ringBuf->byte_count++;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c0c:	1c5a      	adds	r2, r3, #1
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	
	ringBuf->head = (ringBuf->head + 1) % EEM_BUFFER_SIZE ;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <EEM_POP+0x9c>)
 8000c1e:	fb83 1302 	smull	r1, r3, r3, r2
 8000c22:	10d9      	asrs	r1, r3, #3
 8000c24:	17d3      	asrs	r3, r2, #31
 8000c26:	1ac9      	subs	r1, r1, r3
 8000c28:	460b      	mov	r3, r1
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	1ad1      	subs	r1, r2, r3
 8000c32:	b2ca      	uxtb	r2, r1
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	ringBuf->full = EEM_FALSE;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6


}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	66666667 	.word	0x66666667

08000c54 <EEM_TX>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 		EEM_TX( EEM_CAN_Packet_st* param, EEM_U32 period )
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	EEM_ERR_T result = EEM_EOK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol))


#elif (defined(STM32H750xx) && defined(FDCAN_Protocol))

	memcpy( &protocol.obj.fdHandle.txData , &param->DATA[0] , EEM_MAX_SIZE );
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	1d1a      	adds	r2, r3, #4
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <EEM_TX+0x84>)
 8000c68:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000c6c:	6810      	ldr	r0, [r2, #0]
 8000c6e:	6851      	ldr	r1, [r2, #4]
 8000c70:	c303      	stmia	r3!, {r0, r1}

	protocol.obj.fdHandle.txHeader.IdType 				= FDCAN_EXTENDED_ID 				;
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <EEM_TX+0x84>)
 8000c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c78:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	protocol.obj.fdHandle.txHeader.Identifier			= param->EXTENDED_ID.identifier		;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <EEM_TX+0x84>)
 8000c82:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	protocol.obj.fdHandle.txHeader.TxFrameType			= FDCAN_DATA_FRAME			        ;
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <EEM_TX+0x84>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	protocol.obj.fdHandle.txHeader.DataLength			= FDCAN_DLC_BYTES_8			        ;
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <EEM_TX+0x84>)
 8000c90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c94:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	protocol.obj.fdHandle.txHeader.BitRateSwitch 		= FDCAN_BRS_OFF				        ;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <EEM_TX+0x84>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	protocol.obj.fdHandle.txHeader.FDFormat 			= FDCAN_CLASSIC_CAN			        ; //@BACK: Classic or FD format ?
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <EEM_TX+0x84>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	protocol.obj.fdHandle.txHeader.TxEventFifoControl 	= FDCAN_NO_TX_EVENTS		        ;
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <EEM_TX+0x84>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	protocol.obj.fdHandle.txHeader.MessageMarker 		= 0							        ;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <EEM_TX+0x84>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	
	if( HAL_FDCAN_AddMessageToTxFifoQ (&protocol.obj.fdHandle.hfdcanHandle  ,
 8000cb8:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <EEM_TX+0x88>)
 8000cba:	4909      	ldr	r1, [pc, #36]	; (8000ce0 <EEM_TX+0x8c>)
 8000cbc:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <EEM_TX+0x84>)
 8000cbe:	f001 fdff 	bl	80028c0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <EEM_TX+0x78>
									   &protocol.obj.fdHandle.txHeader		,
									    protocol.obj.fdHandle.txData			) != HAL_OK)
	{
		 	return EEM_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e000      	b.n	8000cce <EEM_TX+0x7a>
	
	



	return result;
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	240000cc 	.word	0x240000cc
 8000cdc:	240001d8 	.word	0x240001d8
 8000ce0:	2400018c 	.word	0x2400018c

08000ce4 <EEM_RX>:
#if defined(SPI2CAN_Protocol)
						uCAN_MSG*			rxPacked      ,
#endif
#endif
						EEM_U8*				rxData	  	   )
{
 8000ce4:	b084      	sub	sp, #16
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b084      	sub	sp, #16
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	f107 001c 	add.w	r0, r7, #28
 8000cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	EEM_ERR_T result = EEM_EOK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]



#elif defined(STM32H750xx)

	memcpy( &param->DATA[0] , &rxData[0] , EEM_MAX_SIZE );
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2208      	movs	r2, #8
 8000d00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000d02:	4618      	mov	r0, r3
 8000d04:	f005 fa28 	bl	8006158 <memcpy>
	param->EXTENDED_ID.identifier = rxHeader.Identifier;
 8000d08:	69fa      	ldr	r2, [r7, #28]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	601a      	str	r2, [r3, #0]
#endif

#endif

	/* Received Data Handled Push Ring Buffer */
	EEM_PUSH( &protocol.obj.ringBuffer , param);
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <EEM_RX+0x44>)
 8000d12:	f7ff fef9 	bl	8000b08 <EEM_PUSH>

	return result;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d22:	b004      	add	sp, #16
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	240001fc 	.word	0x240001fc

08000d2c <EEM_PERIODIC>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 	EEM_PERIODIC( EEM_CAN_Packet_st*  param )
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	EEM_ERR_T 	   result 	= EEM_EOK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]
	result = EEM_RX(param, &rxHandle, NULL);
	if( result != EEM_EOK ) return result;

#endif

	while( !EEM_IS_EMPTY(&protocol.obj.ringBuffer) )
 8000d38:	e003      	b.n	8000d42 <EEM_PERIODIC+0x16>
	{
	   EEM_POP(&protocol.obj.ringBuffer, param);
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	48a3      	ldr	r0, [pc, #652]	; (8000fcc <EEM_PERIODIC+0x2a0>)
 8000d3e:	f7ff ff39 	bl	8000bb4 <EEM_POP>
	while( !EEM_IS_EMPTY(&protocol.obj.ringBuffer) )
 8000d42:	48a2      	ldr	r0, [pc, #648]	; (8000fcc <EEM_PERIODIC+0x2a0>)
 8000d44:	f000 fe6c 	bl	8001a20 <EEM_IS_EMPTY>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f5      	beq.n	8000d3a <EEM_PERIODIC+0xe>
		                                              param->DATA[0] );
#endif
	}

	
	switch( param->EXTENDED_ID.Pages.messageID )
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	789b      	ldrb	r3, [r3, #2]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	2b24      	cmp	r3, #36	; 0x24
 8000d56:	f200 8659 	bhi.w	8001a0c <EEM_PERIODIC+0xce0>
 8000d5a:	a201      	add	r2, pc, #4	; (adr r2, 8000d60 <EEM_PERIODIC+0x34>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000df5 	.word	0x08000df5
 8000d64:	08000fd5 	.word	0x08000fd5
 8000d68:	08001a0d 	.word	0x08001a0d
 8000d6c:	08001a0d 	.word	0x08001a0d
 8000d70:	08001a0d 	.word	0x08001a0d
 8000d74:	08001a0d 	.word	0x08001a0d
 8000d78:	08001143 	.word	0x08001143
 8000d7c:	08001195 	.word	0x08001195
 8000d80:	080011dd 	.word	0x080011dd
 8000d84:	08001a0d 	.word	0x08001a0d
 8000d88:	08001a0d 	.word	0x08001a0d
 8000d8c:	08001a0d 	.word	0x08001a0d
 8000d90:	08001a0d 	.word	0x08001a0d
 8000d94:	08001a0d 	.word	0x08001a0d
 8000d98:	08001a0d 	.word	0x08001a0d
 8000d9c:	0800122f 	.word	0x0800122f
 8000da0:	08001a0d 	.word	0x08001a0d
 8000da4:	08001a0d 	.word	0x08001a0d
 8000da8:	08001a0d 	.word	0x08001a0d
 8000dac:	08001a0d 	.word	0x08001a0d
 8000db0:	08001a0d 	.word	0x08001a0d
 8000db4:	08001a0d 	.word	0x08001a0d
 8000db8:	08001a0d 	.word	0x08001a0d
 8000dbc:	08001279 	.word	0x08001279
 8000dc0:	08001521 	.word	0x08001521
 8000dc4:	08001a0d 	.word	0x08001a0d
 8000dc8:	08001a0d 	.word	0x08001a0d
 8000dcc:	08001a0d 	.word	0x08001a0d
 8000dd0:	08001a0d 	.word	0x08001a0d
 8000dd4:	08001a0d 	.word	0x08001a0d
 8000dd8:	08001a0d 	.word	0x08001a0d
 8000ddc:	080017c9 	.word	0x080017c9
 8000de0:	080018a5 	.word	0x080018a5
 8000de4:	080018eb 	.word	0x080018eb
 8000de8:	080019c7 	.word	0x080019c7
 8000dec:	08001a0d 	.word	0x08001a0d
 8000df0:	08001a0d 	.word	0x08001a0d
	{
//#if defined(BCM_MODULE)

	case MESSAGE01 :

		BCM_MSG.Message01.SPN.HVAC_led01_u1 = ( param->DATA[0] & 0x01 );
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	791b      	ldrb	r3, [r3, #4]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	b2d9      	uxtb	r1, r3
 8000dfe:	4a74      	ldr	r2, [pc, #464]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000e00:	7913      	ldrb	r3, [r2, #4]
 8000e02:	f361 0300 	bfi	r3, r1, #0, #1
 8000e06:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led02_u1 = (( param->DATA[0] & 0x02 ) >> 1 );
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	791b      	ldrb	r3, [r3, #4]
 8000e0c:	105b      	asrs	r3, r3, #1
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	b2d9      	uxtb	r1, r3
 8000e14:	4a6e      	ldr	r2, [pc, #440]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000e16:	7913      	ldrb	r3, [r2, #4]
 8000e18:	f361 0341 	bfi	r3, r1, #1, #1
 8000e1c:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led03_u1 = (( param->DATA[0] & 0x04 ) >> 2 );
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	791b      	ldrb	r3, [r3, #4]
 8000e22:	109b      	asrs	r3, r3, #2
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	b2d9      	uxtb	r1, r3
 8000e2a:	4a69      	ldr	r2, [pc, #420]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000e2c:	7913      	ldrb	r3, [r2, #4]
 8000e2e:	f361 0382 	bfi	r3, r1, #2, #1
 8000e32:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led04_u1 = (( param->DATA[0] & 0x08 ) >> 3 );
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	791b      	ldrb	r3, [r3, #4]
 8000e38:	10db      	asrs	r3, r3, #3
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	b2d9      	uxtb	r1, r3
 8000e40:	4a63      	ldr	r2, [pc, #396]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000e42:	7913      	ldrb	r3, [r2, #4]
 8000e44:	f361 03c3 	bfi	r3, r1, #3, #1
 8000e48:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led05_u1 = (( param->DATA[0] & 0x10 ) >> 4 );
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	791b      	ldrb	r3, [r3, #4]
 8000e4e:	111b      	asrs	r3, r3, #4
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	b2d9      	uxtb	r1, r3
 8000e56:	4a5e      	ldr	r2, [pc, #376]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000e58:	7913      	ldrb	r3, [r2, #4]
 8000e5a:	f361 1304 	bfi	r3, r1, #4, #1
 8000e5e:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led06_u1 = (( param->DATA[0] & 0x20 ) >> 5 );
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	791b      	ldrb	r3, [r3, #4]
 8000e64:	115b      	asrs	r3, r3, #5
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	b2d9      	uxtb	r1, r3
 8000e6c:	4a58      	ldr	r2, [pc, #352]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000e6e:	7913      	ldrb	r3, [r2, #4]
 8000e70:	f361 1345 	bfi	r3, r1, #5, #1
 8000e74:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led07_u1 = (( param->DATA[0] & 0x40 ) >> 6 );
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	791b      	ldrb	r3, [r3, #4]
 8000e7a:	119b      	asrs	r3, r3, #6
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	b2d9      	uxtb	r1, r3
 8000e82:	4a53      	ldr	r2, [pc, #332]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000e84:	7913      	ldrb	r3, [r2, #4]
 8000e86:	f361 1386 	bfi	r3, r1, #6, #1
 8000e8a:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led08_u1 = (( param->DATA[0] & 0x80 ) >> 7 );
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	791b      	ldrb	r3, [r3, #4]
 8000e90:	09db      	lsrs	r3, r3, #7
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	b2d9      	uxtb	r1, r3
 8000e9a:	4a4d      	ldr	r2, [pc, #308]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000e9c:	7913      	ldrb	r3, [r2, #4]
 8000e9e:	f361 13c7 	bfi	r3, r1, #7, #1
 8000ea2:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led09_u1 = ( param->DATA[1] & 0x01 );
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	795b      	ldrb	r3, [r3, #5]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	b2d9      	uxtb	r1, r3
 8000eae:	4a48      	ldr	r2, [pc, #288]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000eb0:	7953      	ldrb	r3, [r2, #5]
 8000eb2:	f361 0300 	bfi	r3, r1, #0, #1
 8000eb6:	7153      	strb	r3, [r2, #5]
		BCM_MSG.Message01.SPN.HVAC_led10_u1 = (( param->DATA[1] & 0x02 ) >> 1 );
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	795b      	ldrb	r3, [r3, #5]
 8000ebc:	105b      	asrs	r3, r3, #1
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	b2d9      	uxtb	r1, r3
 8000ec4:	4a42      	ldr	r2, [pc, #264]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000ec6:	7953      	ldrb	r3, [r2, #5]
 8000ec8:	f361 0341 	bfi	r3, r1, #1, #1
 8000ecc:	7153      	strb	r3, [r2, #5]
		BCM_MSG.Message01.SPN.HVAC_led11_u1 = (( param->DATA[1] & 0x04 ) >> 2 );
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	795b      	ldrb	r3, [r3, #5]
 8000ed2:	109b      	asrs	r3, r3, #2
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	b2d9      	uxtb	r1, r3
 8000eda:	4a3d      	ldr	r2, [pc, #244]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000edc:	7953      	ldrb	r3, [r2, #5]
 8000ede:	f361 0382 	bfi	r3, r1, #2, #1
 8000ee2:	7153      	strb	r3, [r2, #5]
		BCM_MSG.Message01.SPN.HVAC_led12_u1 = (( param->DATA[1] & 0x08 ) >> 3 );
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	795b      	ldrb	r3, [r3, #5]
 8000ee8:	10db      	asrs	r3, r3, #3
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	b2d9      	uxtb	r1, r3
 8000ef0:	4a37      	ldr	r2, [pc, #220]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000ef2:	7953      	ldrb	r3, [r2, #5]
 8000ef4:	f361 03c3 	bfi	r3, r1, #3, #1
 8000ef8:	7153      	strb	r3, [r2, #5]

		BCM_MSG.Message01.SPN.HVAC_pressureVal_u8 	= (EEM_U8)( (EEM_U8)( (param->DATA[1] & 0xF0) >> 4 )  |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	795b      	ldrb	r3, [r3, #5]
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	b2da      	uxtb	r2, r3
												   	    		(EEM_U8)( (param->DATA[2] & 0x0F) << 4 )  );
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	799b      	ldrb	r3, [r3, #6]
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	b2db      	uxtb	r3, r3
		BCM_MSG.Message01.SPN.HVAC_pressureVal_u8 	= (EEM_U8)( (EEM_U8)( (param->DATA[1] & 0xF0) >> 4 )  |
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000f10:	719a      	strb	r2, [r3, #6]

		BCM_MSG.Message01.SPN.HVAC_indoorTempVal_u8 = (EEM_U8)( (EEM_U8)( (param->DATA[2] & 0xF0) >> 4 ) |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	799b      	ldrb	r3, [r3, #6]
 8000f16:	091b      	lsrs	r3, r3, #4
 8000f18:	b2da      	uxtb	r2, r3
													 			(EEM_U8)( (param->DATA[3] & 0x0F) << 4 ) );
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	79db      	ldrb	r3, [r3, #7]
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	b2db      	uxtb	r3, r3
		BCM_MSG.Message01.SPN.HVAC_indoorTempVal_u8 = (EEM_U8)( (EEM_U8)( (param->DATA[2] & 0xF0) >> 4 ) |
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000f28:	71da      	strb	r2, [r3, #7]

		BCM_MSG.Message01.SPN.HVAC_indoorHumidVal_u8 = (EEM_U8)( (EEM_U8)( (param->DATA[3] & 0xF0) >> 4 ) |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	79db      	ldrb	r3, [r3, #7]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	b2da      	uxtb	r2, r3
				 	 	 	 	 	 	 	 	 	 	  		(EEM_U8)( (param->DATA[4] & 0x0F) << 4 ) );
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7a1b      	ldrb	r3, [r3, #8]
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	b2db      	uxtb	r3, r3
		BCM_MSG.Message01.SPN.HVAC_indoorHumidVal_u8 = (EEM_U8)( (EEM_U8)( (param->DATA[3] & 0xF0) >> 4 ) |
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000f40:	721a      	strb	r2, [r3, #8]

		BCM_MSG.Message01.SPN.HVAC_rtcCalib_u1 			= (EEM_U8)( ( param->DATA[4] & 0x10) >> 4 );
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	7a1b      	ldrb	r3, [r3, #8]
 8000f46:	111b      	asrs	r3, r3, #4
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	b2d9      	uxtb	r1, r3
 8000f4e:	4a20      	ldr	r2, [pc, #128]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000f50:	7a53      	ldrb	r3, [r2, #9]
 8000f52:	f361 0300 	bfi	r3, r1, #0, #1
 8000f56:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewSecond_u8 		= (EEM_U8)( ( param->DATA[4] & 0x20) >> 5 );
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7a1b      	ldrb	r3, [r3, #8]
 8000f5c:	115b      	asrs	r3, r3, #5
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	b2d9      	uxtb	r1, r3
 8000f64:	4a1a      	ldr	r2, [pc, #104]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000f66:	7a53      	ldrb	r3, [r2, #9]
 8000f68:	f361 0341 	bfi	r3, r1, #1, #1
 8000f6c:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewMinutes_u8 	= (EEM_U8)( ( param->DATA[4] & 0x40) >> 6 );
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7a1b      	ldrb	r3, [r3, #8]
 8000f72:	119b      	asrs	r3, r3, #6
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	b2d9      	uxtb	r1, r3
 8000f7a:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000f7c:	7a53      	ldrb	r3, [r2, #9]
 8000f7e:	f361 0382 	bfi	r3, r1, #2, #1
 8000f82:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewHour_u8 		= (EEM_U8)( ( param->DATA[4] & 0x80) >> 7 );
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7a1b      	ldrb	r3, [r3, #8]
 8000f88:	09db      	lsrs	r3, r3, #7
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	b2d9      	uxtb	r1, r3
 8000f92:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000f94:	7a53      	ldrb	r3, [r2, #9]
 8000f96:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f9a:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewDay_u8 		= (EEM_U8)(   param->DATA[5] & 0x01 );
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7a5b      	ldrb	r3, [r3, #9]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	b2d9      	uxtb	r1, r3
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000fa8:	7a53      	ldrb	r3, [r2, #9]
 8000faa:	f361 1304 	bfi	r3, r1, #4, #1
 8000fae:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewMonth_u8 		= (EEM_U8)( ( param->DATA[5] & 0x02 ) >> 1 );
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7a5b      	ldrb	r3, [r3, #9]
 8000fb4:	105b      	asrs	r3, r3, #1
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	b2d9      	uxtb	r1, r3
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <EEM_PERIODIC+0x2a4>)
 8000fbe:	7a53      	ldrb	r3, [r2, #9]
 8000fc0:	f361 1345 	bfi	r3, r1, #5, #1
 8000fc4:	7253      	strb	r3, [r2, #9]


	break;
 8000fc6:	f000 bd21 	b.w	8001a0c <EEM_PERIODIC+0xce0>
 8000fca:	bf00      	nop
 8000fcc:	240001fc 	.word	0x240001fc
 8000fd0:	24000304 	.word	0x24000304

	case MESSAGE02 :


		BCM_MSG.Message02.SPN.HVAC_fireVal				= (EEM_U8)( param->DATA[0] & 0x0F );
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	791b      	ldrb	r3, [r3, #4]
 8000fd8:	f003 030f 	and.w	r3, r3, #15
 8000fdc:	b2d9      	uxtb	r1, r3
 8000fde:	4aa5      	ldr	r2, [pc, #660]	; (8001274 <EEM_PERIODIC+0x548>)
 8000fe0:	7d13      	ldrb	r3, [r2, #20]
 8000fe2:	f361 0303 	bfi	r3, r1, #0, #4
 8000fe6:	7513      	strb	r3, [r2, #20]
		BCM_MSG.Message02.SPN.HVAC_smokeVal 			= (EEM_U8)(( param->DATA[0] & 0xF0 ) >> 4 );
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	791b      	ldrb	r3, [r3, #4]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	b2d9      	uxtb	r1, r3
 8000ff6:	4a9f      	ldr	r2, [pc, #636]	; (8001274 <EEM_PERIODIC+0x548>)
 8000ff8:	7d13      	ldrb	r3, [r2, #20]
 8000ffa:	f361 1307 	bfi	r3, r1, #4, #4
 8000ffe:	7513      	strb	r3, [r2, #20]

		BCM_MSG.Message02.SPN.HVAC_windPressure1 		= ( param->DATA[0] );
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	791a      	ldrb	r2, [r3, #4]
 8001004:	4b9b      	ldr	r3, [pc, #620]	; (8001274 <EEM_PERIODIC+0x548>)
 8001006:	755a      	strb	r2, [r3, #21]
		BCM_MSG.Message02.SPN.HVAC_windPressure2 		= ( param->DATA[1] );
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	795a      	ldrb	r2, [r3, #5]
 800100c:	4b99      	ldr	r3, [pc, #612]	; (8001274 <EEM_PERIODIC+0x548>)
 800100e:	759a      	strb	r2, [r3, #22]
		BCM_MSG.Message02.SPN.HVAC_leftFrontWheel_xy 	= ( param->DATA[2] );
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	799a      	ldrb	r2, [r3, #6]
 8001014:	4b97      	ldr	r3, [pc, #604]	; (8001274 <EEM_PERIODIC+0x548>)
 8001016:	75da      	strb	r2, [r3, #23]
		BCM_MSG.Message02.SPN.HVAC_rightFrontWheel_xy 	= ( param->DATA[3] );
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	79da      	ldrb	r2, [r3, #7]
 800101c:	4b95      	ldr	r3, [pc, #596]	; (8001274 <EEM_PERIODIC+0x548>)
 800101e:	761a      	strb	r2, [r3, #24]
		BCM_MSG.Message02.SPN.HVAC_status00_u1 	        = ( param->DATA[4] & 0x01 );
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7a1b      	ldrb	r3, [r3, #8]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	b2d9      	uxtb	r1, r3
 800102a:	4a92      	ldr	r2, [pc, #584]	; (8001274 <EEM_PERIODIC+0x548>)
 800102c:	7e53      	ldrb	r3, [r2, #25]
 800102e:	f361 0300 	bfi	r3, r1, #0, #1
 8001032:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status01_u1 	        = (( param->DATA[4] & 0x02 ) >> 1 );
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7a1b      	ldrb	r3, [r3, #8]
 8001038:	105b      	asrs	r3, r3, #1
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	b2d9      	uxtb	r1, r3
 8001040:	4a8c      	ldr	r2, [pc, #560]	; (8001274 <EEM_PERIODIC+0x548>)
 8001042:	7e53      	ldrb	r3, [r2, #25]
 8001044:	f361 0341 	bfi	r3, r1, #1, #1
 8001048:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status02_u1 	        = (( param->DATA[4] & 0x04 ) >> 2 );
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7a1b      	ldrb	r3, [r3, #8]
 800104e:	109b      	asrs	r3, r3, #2
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	b2d9      	uxtb	r1, r3
 8001056:	4a87      	ldr	r2, [pc, #540]	; (8001274 <EEM_PERIODIC+0x548>)
 8001058:	7e53      	ldrb	r3, [r2, #25]
 800105a:	f361 0382 	bfi	r3, r1, #2, #1
 800105e:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status03_u1 	        = (( param->DATA[4] & 0x08 ) >> 3 );
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7a1b      	ldrb	r3, [r3, #8]
 8001064:	10db      	asrs	r3, r3, #3
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	b2d9      	uxtb	r1, r3
 800106c:	4a81      	ldr	r2, [pc, #516]	; (8001274 <EEM_PERIODIC+0x548>)
 800106e:	7e53      	ldrb	r3, [r2, #25]
 8001070:	f361 03c3 	bfi	r3, r1, #3, #1
 8001074:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status04_u1 	        = (( param->DATA[4] & 0x10 ) >> 4 );
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7a1b      	ldrb	r3, [r3, #8]
 800107a:	111b      	asrs	r3, r3, #4
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	b2d9      	uxtb	r1, r3
 8001082:	4a7c      	ldr	r2, [pc, #496]	; (8001274 <EEM_PERIODIC+0x548>)
 8001084:	7e53      	ldrb	r3, [r2, #25]
 8001086:	f361 1304 	bfi	r3, r1, #4, #1
 800108a:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status05_u1 	        = (( param->DATA[4] & 0x20 ) >> 5 );
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7a1b      	ldrb	r3, [r3, #8]
 8001090:	115b      	asrs	r3, r3, #5
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	b2d9      	uxtb	r1, r3
 8001098:	4a76      	ldr	r2, [pc, #472]	; (8001274 <EEM_PERIODIC+0x548>)
 800109a:	7e53      	ldrb	r3, [r2, #25]
 800109c:	f361 1345 	bfi	r3, r1, #5, #1
 80010a0:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status06_u1 	        = (( param->DATA[4] & 0x40 ) >> 6 );
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7a1b      	ldrb	r3, [r3, #8]
 80010a6:	119b      	asrs	r3, r3, #6
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	b2d9      	uxtb	r1, r3
 80010ae:	4a71      	ldr	r2, [pc, #452]	; (8001274 <EEM_PERIODIC+0x548>)
 80010b0:	7e53      	ldrb	r3, [r2, #25]
 80010b2:	f361 1386 	bfi	r3, r1, #6, #1
 80010b6:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status07_u1 	        = (( param->DATA[4] & 0x80 ) >> 7 );
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7a1b      	ldrb	r3, [r3, #8]
 80010bc:	09db      	lsrs	r3, r3, #7
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	b2d9      	uxtb	r1, r3
 80010c6:	4a6b      	ldr	r2, [pc, #428]	; (8001274 <EEM_PERIODIC+0x548>)
 80010c8:	7e53      	ldrb	r3, [r2, #25]
 80010ca:	f361 13c7 	bfi	r3, r1, #7, #1
 80010ce:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_Hgear_cmd 		    = (  param->DATA[5] & 0x07 );
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7a5b      	ldrb	r3, [r3, #9]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	b2d9      	uxtb	r1, r3
 80010da:	4a66      	ldr	r2, [pc, #408]	; (8001274 <EEM_PERIODIC+0x548>)
 80010dc:	7e93      	ldrb	r3, [r2, #26]
 80010de:	f361 0302 	bfi	r3, r1, #0, #3
 80010e2:	7693      	strb	r3, [r2, #26]
		BCM_MSG.Message02.SPN.HVAC_Gear_cmd 		    = (( param->DATA[5] & 0x18 ) >> 3 );
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7a5b      	ldrb	r3, [r3, #9]
 80010e8:	10db      	asrs	r3, r3, #3
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	b2d9      	uxtb	r1, r3
 80010f0:	4a60      	ldr	r2, [pc, #384]	; (8001274 <EEM_PERIODIC+0x548>)
 80010f2:	7e93      	ldrb	r3, [r2, #26]
 80010f4:	f361 03c4 	bfi	r3, r1, #3, #2
 80010f8:	7693      	strb	r3, [r2, #26]
		BCM_MSG.Message02.SPN.HVAC_cmdbit05_u1 	        = (( param->DATA[5] & 0x20 ) >> 5 );
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7a5b      	ldrb	r3, [r3, #9]
 80010fe:	115b      	asrs	r3, r3, #5
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	b2d9      	uxtb	r1, r3
 8001106:	4a5b      	ldr	r2, [pc, #364]	; (8001274 <EEM_PERIODIC+0x548>)
 8001108:	7e93      	ldrb	r3, [r2, #26]
 800110a:	f361 1345 	bfi	r3, r1, #5, #1
 800110e:	7693      	strb	r3, [r2, #26]
		BCM_MSG.Message02.SPN.HVAC_cmdbit06_u1 	        = (( param->DATA[5] & 0x40 ) >> 6 );
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7a5b      	ldrb	r3, [r3, #9]
 8001114:	119b      	asrs	r3, r3, #6
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	b2d9      	uxtb	r1, r3
 800111c:	4a55      	ldr	r2, [pc, #340]	; (8001274 <EEM_PERIODIC+0x548>)
 800111e:	7e93      	ldrb	r3, [r2, #26]
 8001120:	f361 1386 	bfi	r3, r1, #6, #1
 8001124:	7693      	strb	r3, [r2, #26]
		BCM_MSG.Message02.SPN.HVAC_cmdbit07_u1 	        = (( param->DATA[5] & 0x80 ) >> 7 );
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7a5b      	ldrb	r3, [r3, #9]
 800112a:	09db      	lsrs	r3, r3, #7
 800112c:	b2db      	uxtb	r3, r3
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	b2d9      	uxtb	r1, r3
 8001134:	4a4f      	ldr	r2, [pc, #316]	; (8001274 <EEM_PERIODIC+0x548>)
 8001136:	7e93      	ldrb	r3, [r2, #26]
 8001138:	f361 13c7 	bfi	r3, r1, #7, #1
 800113c:	7693      	strb	r3, [r2, #26]



	break;
 800113e:	f000 bc65 	b.w	8001a0c <EEM_PERIODIC+0xce0>

	case MESSAGE07 :

		BCM_MSG.Message07.SPN.MS1_rpm 		= param->DATA[0] ;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	791a      	ldrb	r2, [r3, #4]
 8001146:	4b4b      	ldr	r3, [pc, #300]	; (8001274 <EEM_PERIODIC+0x548>)
 8001148:	f883 2020 	strb.w	r2, [r3, #32]

		BCM_MSG.Message07.SPN.MS1_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	795b      	ldrb	r3, [r3, #5]
 8001150:	461a      	mov	r2, r3
														(EEM_U32)( param->DATA[2] << 8  )   |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	799b      	ldrb	r3, [r3, #6]
 8001156:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message07.SPN.MS1_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 8001158:	4313      	orrs	r3, r2
														(EEM_U32)( param->DATA[3] << 16 )   |
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	79d2      	ldrb	r2, [r2, #7]
 800115e:	0412      	lsls	r2, r2, #16
														(EEM_U32)( param->DATA[2] << 8  )   |
 8001160:	4313      	orrs	r3, r2
														(EEM_U32)( param->DATA[4] << 24 )   );
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	7a12      	ldrb	r2, [r2, #8]
 8001166:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message07.SPN.MS1_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 8001168:	4313      	orrs	r3, r2
 800116a:	4a42      	ldr	r2, [pc, #264]	; (8001274 <EEM_PERIODIC+0x548>)
 800116c:	6253      	str	r3, [r2, #36]	; 0x24


		BCM_MSG.Message07.SPN.MS1_current 	= (EEM_U16)((EEM_U16)( param->DATA[5]	    )	|
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7a5b      	ldrb	r3, [r3, #9]
 8001172:	b29a      	uxth	r2, r3
														(EEM_U16)( param->DATA[6] << 8  )   );
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7a9b      	ldrb	r3, [r3, #10]
 8001178:	b29b      	uxth	r3, r3
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b29b      	uxth	r3, r3
		BCM_MSG.Message07.SPN.MS1_current 	= (EEM_U16)((EEM_U16)( param->DATA[5]	    )	|
 800117e:	4313      	orrs	r3, r2
 8001180:	b29a      	uxth	r2, r3
 8001182:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <EEM_PERIODIC+0x548>)
 8001184:	851a      	strh	r2, [r3, #40]	; 0x28

		BCM_MSG.Message07.SPN.MS1_temp 		= param->DATA[7] ;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7ada      	ldrb	r2, [r3, #11]
 800118a:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <EEM_PERIODIC+0x548>)
 800118c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	break;
 8001190:	f000 bc3c 	b.w	8001a0c <EEM_PERIODIC+0xce0>

	case MESSAGE08 :

		BCM_MSG.Message08.SPN.MS1_Speed  = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	 |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	791b      	ldrb	r3, [r3, #4]
 8001198:	461a      	mov	r2, r3
													 (EEM_U32)( param->DATA[1] << 8  )   |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	795b      	ldrb	r3, [r3, #5]
 800119e:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message08.SPN.MS1_Speed  = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	 |
 80011a0:	4313      	orrs	r3, r2
			                                         (EEM_U32)( param->DATA[2] << 16 )   |
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	7992      	ldrb	r2, [r2, #6]
 80011a6:	0412      	lsls	r2, r2, #16
													 (EEM_U32)( param->DATA[1] << 8  )   |
 80011a8:	4313      	orrs	r3, r2
			                                         (EEM_U32)( param->DATA[3] << 24 )   );
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	79d2      	ldrb	r2, [r2, #7]
 80011ae:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message08.SPN.MS1_Speed  = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	 |
 80011b0:	4313      	orrs	r3, r2
 80011b2:	4a30      	ldr	r2, [pc, #192]	; (8001274 <EEM_PERIODIC+0x548>)
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30

		BCM_MSG.Message08.SPN.MS1_Direction = (EEM_U32)( (EEM_U32)( param->DATA[4]	     )	 |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7a1b      	ldrb	r3, [r3, #8]
 80011ba:	461a      	mov	r2, r3
													 	 (EEM_U32)( param->DATA[5] << 8  )   |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7a5b      	ldrb	r3, [r3, #9]
 80011c0:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message08.SPN.MS1_Direction = (EEM_U32)( (EEM_U32)( param->DATA[4]	     )	 |
 80011c2:	4313      	orrs	r3, r2
														 (EEM_U32)( param->DATA[6] << 16 )   |
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	7a92      	ldrb	r2, [r2, #10]
 80011c8:	0412      	lsls	r2, r2, #16
													 	 (EEM_U32)( param->DATA[5] << 8  )   |
 80011ca:	4313      	orrs	r3, r2
														 (EEM_U32)( param->DATA[7] << 24 )   );
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	7ad2      	ldrb	r2, [r2, #11]
 80011d0:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message08.SPN.MS1_Direction = (EEM_U32)( (EEM_U32)( param->DATA[4]	     )	 |
 80011d2:	4313      	orrs	r3, r2
 80011d4:	4a27      	ldr	r2, [pc, #156]	; (8001274 <EEM_PERIODIC+0x548>)
 80011d6:	6353      	str	r3, [r2, #52]	; 0x34

	break;
 80011d8:	f000 bc18 	b.w	8001a0c <EEM_PERIODIC+0xce0>

	case MESSAGE09 :

		BCM_MSG.Message09.SPN.MS2_rpm 		= param->DATA[0] ;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	791a      	ldrb	r2, [r3, #4]
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <EEM_PERIODIC+0x548>)
 80011e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		BCM_MSG.Message09.SPN.MS2_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	795b      	ldrb	r3, [r3, #5]
 80011ea:	461a      	mov	r2, r3
														(EEM_U32)( param->DATA[2] << 8  )   |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	799b      	ldrb	r3, [r3, #6]
 80011f0:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message09.SPN.MS2_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 80011f2:	4313      	orrs	r3, r2
														(EEM_U32)( param->DATA[3] << 16 )   |
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	79d2      	ldrb	r2, [r2, #7]
 80011f8:	0412      	lsls	r2, r2, #16
														(EEM_U32)( param->DATA[2] << 8  )   |
 80011fa:	4313      	orrs	r3, r2
														(EEM_U32)( param->DATA[4] << 24 )   );
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	7a12      	ldrb	r2, [r2, #8]
 8001200:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message09.SPN.MS2_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 8001202:	4313      	orrs	r3, r2
 8001204:	4a1b      	ldr	r2, [pc, #108]	; (8001274 <EEM_PERIODIC+0x548>)
 8001206:	6413      	str	r3, [r2, #64]	; 0x40


		BCM_MSG.Message09.SPN.MS2_current 	= (EEM_U16)((EEM_U16)( param->DATA[5]	    )	|
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7a5b      	ldrb	r3, [r3, #9]
 800120c:	b29a      	uxth	r2, r3
														(EEM_U16)( param->DATA[6] << 8  )   );
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7a9b      	ldrb	r3, [r3, #10]
 8001212:	b29b      	uxth	r3, r3
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b29b      	uxth	r3, r3
		BCM_MSG.Message09.SPN.MS2_current 	= (EEM_U16)((EEM_U16)( param->DATA[5]	    )	|
 8001218:	4313      	orrs	r3, r2
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <EEM_PERIODIC+0x548>)
 800121e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

		BCM_MSG.Message09.SPN.MS2_temp 		= param->DATA[7] ;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7ada      	ldrb	r2, [r3, #11]
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <EEM_PERIODIC+0x548>)
 8001228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	break;
 800122c:	e3ee      	b.n	8001a0c <EEM_PERIODIC+0xce0>

	case MESSAGE10 :

		BCM_MSG.Message10.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	  |
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	791b      	ldrb	r3, [r3, #4]
 8001232:	461a      	mov	r2, r3
													  (EEM_U32)( param->DATA[1] << 8  )   |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	795b      	ldrb	r3, [r3, #5]
 8001238:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message10.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	  |
 800123a:	4313      	orrs	r3, r2
			                                          (EEM_U32)( param->DATA[2] << 16 )   |
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	7992      	ldrb	r2, [r2, #6]
 8001240:	0412      	lsls	r2, r2, #16
													  (EEM_U32)( param->DATA[1] << 8  )   |
 8001242:	4313      	orrs	r3, r2
			                                          (EEM_U32)( param->DATA[3] << 24 )   );
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	79d2      	ldrb	r2, [r2, #7]
 8001248:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message10.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	  |
 800124a:	4313      	orrs	r3, r2
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <EEM_PERIODIC+0x548>)
 800124e:	64d3      	str	r3, [r2, #76]	; 0x4c

		BCM_MSG.Message10.SPN.MS2_Direction  = (EEM_U32)( (EEM_U32)( param->DATA[4]	      )	  |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7a1b      	ldrb	r3, [r3, #8]
 8001254:	461a      	mov	r2, r3
													 	  (EEM_U32)( param->DATA[5] << 8  )   |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7a5b      	ldrb	r3, [r3, #9]
 800125a:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message10.SPN.MS2_Direction  = (EEM_U32)( (EEM_U32)( param->DATA[4]	      )	  |
 800125c:	4313      	orrs	r3, r2
														  (EEM_U32)( param->DATA[6] << 16 )   |
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	7a92      	ldrb	r2, [r2, #10]
 8001262:	0412      	lsls	r2, r2, #16
													 	  (EEM_U32)( param->DATA[5] << 8  )   |
 8001264:	4313      	orrs	r3, r2
														  (EEM_U32)( param->DATA[7] << 24 )   );
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	7ad2      	ldrb	r2, [r2, #11]
 800126a:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message10.SPN.MS2_Direction  = (EEM_U32)( (EEM_U32)( param->DATA[4]	      )	  |
 800126c:	4313      	orrs	r3, r2
 800126e:	4a01      	ldr	r2, [pc, #4]	; (8001274 <EEM_PERIODIC+0x548>)
 8001270:	6513      	str	r3, [r2, #80]	; 0x50

	break;
 8001272:	e3cb      	b.n	8001a0c <EEM_PERIODIC+0xce0>
 8001274:	24000304 	.word	0x24000304

	case MESSAGE18 :

		BCM_MSG.Message18.SPN.MS1_warningFlag01 =  ( param->DATA[0] & 0x01 );
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	791b      	ldrb	r3, [r3, #4]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	b2d9      	uxtb	r1, r3
 8001282:	4aa6      	ldr	r2, [pc, #664]	; (800151c <EEM_PERIODIC+0x7f0>)
 8001284:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8001288:	f361 0300 	bfi	r3, r1, #0, #1
 800128c:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag02 = (( param->DATA[0] & 0x02 ) >> 1 );
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	791b      	ldrb	r3, [r3, #4]
 8001294:	105b      	asrs	r3, r3, #1
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	b2d9      	uxtb	r1, r3
 800129c:	4a9f      	ldr	r2, [pc, #636]	; (800151c <EEM_PERIODIC+0x7f0>)
 800129e:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80012a2:	f361 0341 	bfi	r3, r1, #1, #1
 80012a6:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag03 = (( param->DATA[0] & 0x04 ) >> 2 );
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	791b      	ldrb	r3, [r3, #4]
 80012ae:	109b      	asrs	r3, r3, #2
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	b2d9      	uxtb	r1, r3
 80012b6:	4a99      	ldr	r2, [pc, #612]	; (800151c <EEM_PERIODIC+0x7f0>)
 80012b8:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80012bc:	f361 0382 	bfi	r3, r1, #2, #1
 80012c0:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag04 = (( param->DATA[0] & 0x08 ) >> 3 );
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	791b      	ldrb	r3, [r3, #4]
 80012c8:	10db      	asrs	r3, r3, #3
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	b2d9      	uxtb	r1, r3
 80012d0:	4a92      	ldr	r2, [pc, #584]	; (800151c <EEM_PERIODIC+0x7f0>)
 80012d2:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80012d6:	f361 03c3 	bfi	r3, r1, #3, #1
 80012da:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag05 = (( param->DATA[0] & 0x10 ) >> 4 );
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	791b      	ldrb	r3, [r3, #4]
 80012e2:	111b      	asrs	r3, r3, #4
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	b2d9      	uxtb	r1, r3
 80012ea:	4a8c      	ldr	r2, [pc, #560]	; (800151c <EEM_PERIODIC+0x7f0>)
 80012ec:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80012f0:	f361 1304 	bfi	r3, r1, #4, #1
 80012f4:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag06 = (( param->DATA[0] & 0x20 ) >> 5 );
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	791b      	ldrb	r3, [r3, #4]
 80012fc:	115b      	asrs	r3, r3, #5
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	b2d9      	uxtb	r1, r3
 8001304:	4a85      	ldr	r2, [pc, #532]	; (800151c <EEM_PERIODIC+0x7f0>)
 8001306:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 800130a:	f361 1345 	bfi	r3, r1, #5, #1
 800130e:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag07 = (( param->DATA[0] & 0x40 ) >> 6 );
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	791b      	ldrb	r3, [r3, #4]
 8001316:	119b      	asrs	r3, r3, #6
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	4a7f      	ldr	r2, [pc, #508]	; (800151c <EEM_PERIODIC+0x7f0>)
 8001320:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8001324:	f361 1386 	bfi	r3, r1, #6, #1
 8001328:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag08 = (( param->DATA[0] & 0x80 ) >> 7 );
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	791b      	ldrb	r3, [r3, #4]
 8001330:	09db      	lsrs	r3, r3, #7
 8001332:	b2db      	uxtb	r3, r3
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	b2d9      	uxtb	r1, r3
 800133a:	4a78      	ldr	r2, [pc, #480]	; (800151c <EEM_PERIODIC+0x7f0>)
 800133c:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8001340:	f361 13c7 	bfi	r3, r1, #7, #1
 8001344:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

		BCM_MSG.Message18.SPN.MS1_errorFlag01 =  ( param->DATA[1] & 0x01 );
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	795b      	ldrb	r3, [r3, #5]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	b2d9      	uxtb	r1, r3
 8001352:	4a72      	ldr	r2, [pc, #456]	; (800151c <EEM_PERIODIC+0x7f0>)
 8001354:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 8001358:	f361 0300 	bfi	r3, r1, #0, #1
 800135c:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag02 = (( param->DATA[1] & 0x02 ) >> 1 );
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	795b      	ldrb	r3, [r3, #5]
 8001364:	105b      	asrs	r3, r3, #1
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	b2d9      	uxtb	r1, r3
 800136c:	4a6b      	ldr	r2, [pc, #428]	; (800151c <EEM_PERIODIC+0x7f0>)
 800136e:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 8001372:	f361 0341 	bfi	r3, r1, #1, #1
 8001376:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag03 = (( param->DATA[1] & 0x04 ) >> 2 );
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	795b      	ldrb	r3, [r3, #5]
 800137e:	109b      	asrs	r3, r3, #2
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	b2d9      	uxtb	r1, r3
 8001386:	4a65      	ldr	r2, [pc, #404]	; (800151c <EEM_PERIODIC+0x7f0>)
 8001388:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 800138c:	f361 0382 	bfi	r3, r1, #2, #1
 8001390:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag04 = (( param->DATA[1] & 0x08 ) >> 3 );
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	795b      	ldrb	r3, [r3, #5]
 8001398:	10db      	asrs	r3, r3, #3
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	b2d9      	uxtb	r1, r3
 80013a0:	4a5e      	ldr	r2, [pc, #376]	; (800151c <EEM_PERIODIC+0x7f0>)
 80013a2:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 80013a6:	f361 03c3 	bfi	r3, r1, #3, #1
 80013aa:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag05 = (( param->DATA[1] & 0x10 ) >> 4 );
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	795b      	ldrb	r3, [r3, #5]
 80013b2:	111b      	asrs	r3, r3, #4
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	b2d9      	uxtb	r1, r3
 80013ba:	4a58      	ldr	r2, [pc, #352]	; (800151c <EEM_PERIODIC+0x7f0>)
 80013bc:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 80013c0:	f361 1304 	bfi	r3, r1, #4, #1
 80013c4:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag06 = (( param->DATA[1] & 0x20 ) >> 5 );
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	795b      	ldrb	r3, [r3, #5]
 80013cc:	115b      	asrs	r3, r3, #5
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	b2d9      	uxtb	r1, r3
 80013d4:	4a51      	ldr	r2, [pc, #324]	; (800151c <EEM_PERIODIC+0x7f0>)
 80013d6:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 80013da:	f361 1345 	bfi	r3, r1, #5, #1
 80013de:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag07 = (( param->DATA[1] & 0x40 ) >> 6 );
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	795b      	ldrb	r3, [r3, #5]
 80013e6:	119b      	asrs	r3, r3, #6
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	b2d9      	uxtb	r1, r3
 80013ee:	4a4b      	ldr	r2, [pc, #300]	; (800151c <EEM_PERIODIC+0x7f0>)
 80013f0:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 80013f4:	f361 1386 	bfi	r3, r1, #6, #1
 80013f8:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag08 = (( param->DATA[1] & 0x80 ) >> 7 );
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	795b      	ldrb	r3, [r3, #5]
 8001400:	09db      	lsrs	r3, r3, #7
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	b2d9      	uxtb	r1, r3
 800140a:	4a44      	ldr	r2, [pc, #272]	; (800151c <EEM_PERIODIC+0x7f0>)
 800140c:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 8001410:	f361 13c7 	bfi	r3, r1, #7, #1
 8001414:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59

		BCM_MSG.Message18.SPN.MS1_statusBit01 =  ( param->DATA[2] & 0x01 );
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	799b      	ldrb	r3, [r3, #6]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	b2d9      	uxtb	r1, r3
 8001422:	4a3e      	ldr	r2, [pc, #248]	; (800151c <EEM_PERIODIC+0x7f0>)
 8001424:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 8001428:	f361 0300 	bfi	r3, r1, #0, #1
 800142c:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit02 = (( param->DATA[2] & 0x02 ) >> 1 );
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	799b      	ldrb	r3, [r3, #6]
 8001434:	105b      	asrs	r3, r3, #1
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	b2d9      	uxtb	r1, r3
 800143c:	4a37      	ldr	r2, [pc, #220]	; (800151c <EEM_PERIODIC+0x7f0>)
 800143e:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 8001442:	f361 0341 	bfi	r3, r1, #1, #1
 8001446:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit03 = (( param->DATA[2] & 0x04 ) >> 2 );
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	799b      	ldrb	r3, [r3, #6]
 800144e:	109b      	asrs	r3, r3, #2
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	b2d9      	uxtb	r1, r3
 8001456:	4a31      	ldr	r2, [pc, #196]	; (800151c <EEM_PERIODIC+0x7f0>)
 8001458:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 800145c:	f361 0382 	bfi	r3, r1, #2, #1
 8001460:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit04 = (( param->DATA[2] & 0x08 ) >> 3 );
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	799b      	ldrb	r3, [r3, #6]
 8001468:	10db      	asrs	r3, r3, #3
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	b2d9      	uxtb	r1, r3
 8001470:	4a2a      	ldr	r2, [pc, #168]	; (800151c <EEM_PERIODIC+0x7f0>)
 8001472:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 8001476:	f361 03c3 	bfi	r3, r1, #3, #1
 800147a:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit05 = (( param->DATA[2] & 0x10 ) >> 4 );
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	799b      	ldrb	r3, [r3, #6]
 8001482:	111b      	asrs	r3, r3, #4
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	b2d9      	uxtb	r1, r3
 800148a:	4a24      	ldr	r2, [pc, #144]	; (800151c <EEM_PERIODIC+0x7f0>)
 800148c:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 8001490:	f361 1304 	bfi	r3, r1, #4, #1
 8001494:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit06 = (( param->DATA[2] & 0x20 ) >> 5 );
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	799b      	ldrb	r3, [r3, #6]
 800149c:	115b      	asrs	r3, r3, #5
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	b2d9      	uxtb	r1, r3
 80014a4:	4a1d      	ldr	r2, [pc, #116]	; (800151c <EEM_PERIODIC+0x7f0>)
 80014a6:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 80014aa:	f361 1345 	bfi	r3, r1, #5, #1
 80014ae:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit07 = (( param->DATA[2] & 0x40 ) >> 6 );
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	799b      	ldrb	r3, [r3, #6]
 80014b6:	119b      	asrs	r3, r3, #6
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	b2d9      	uxtb	r1, r3
 80014be:	4a17      	ldr	r2, [pc, #92]	; (800151c <EEM_PERIODIC+0x7f0>)
 80014c0:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 80014c4:	f361 1386 	bfi	r3, r1, #6, #1
 80014c8:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit08 = (( param->DATA[2] & 0x80 ) >> 7 );
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	799b      	ldrb	r3, [r3, #6]
 80014d0:	09db      	lsrs	r3, r3, #7
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	b2d9      	uxtb	r1, r3
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <EEM_PERIODIC+0x7f0>)
 80014dc:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 80014e0:	f361 13c7 	bfi	r3, r1, #7, #1
 80014e4:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a

		BCM_MSG.Message18.SPN.MS1_dummyByte01 = param->DATA[3];
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	79da      	ldrb	r2, [r3, #7]
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <EEM_PERIODIC+0x7f0>)
 80014ee:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
		BCM_MSG.Message18.SPN.MS1_dummyByte02 = param->DATA[4];
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7a1a      	ldrb	r2, [r3, #8]
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <EEM_PERIODIC+0x7f0>)
 80014f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		BCM_MSG.Message18.SPN.MS1_dummyByte03 = param->DATA[5];
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	7a5a      	ldrb	r2, [r3, #9]
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <EEM_PERIODIC+0x7f0>)
 8001502:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		BCM_MSG.Message18.SPN.MS1_dummyByte04 = param->DATA[6];
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7a9a      	ldrb	r2, [r3, #10]
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <EEM_PERIODIC+0x7f0>)
 800150c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		BCM_MSG.Message18.SPN.MS1_dummyByte04 = param->DATA[7];
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7ada      	ldrb	r2, [r3, #11]
 8001514:	4b01      	ldr	r3, [pc, #4]	; (800151c <EEM_PERIODIC+0x7f0>)
 8001516:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

	break;
 800151a:	e277      	b.n	8001a0c <EEM_PERIODIC+0xce0>
 800151c:	24000304 	.word	0x24000304


	case MESSAGE19 :

		BCM_MSG.Message19.SPN.MS2_warningFlag01 =  ( param->DATA[0] & 0x01 );
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	791b      	ldrb	r3, [r3, #4]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	b2d9      	uxtb	r1, r3
 800152a:	4aa6      	ldr	r2, [pc, #664]	; (80017c4 <EEM_PERIODIC+0xa98>)
 800152c:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 8001530:	f361 0300 	bfi	r3, r1, #0, #1
 8001534:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag02 = (( param->DATA[0] & 0x02 ) >> 1 );
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	791b      	ldrb	r3, [r3, #4]
 800153c:	105b      	asrs	r3, r3, #1
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	b2d9      	uxtb	r1, r3
 8001544:	4a9f      	ldr	r2, [pc, #636]	; (80017c4 <EEM_PERIODIC+0xa98>)
 8001546:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 800154a:	f361 0341 	bfi	r3, r1, #1, #1
 800154e:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag03 = (( param->DATA[0] & 0x04 ) >> 2 );
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	791b      	ldrb	r3, [r3, #4]
 8001556:	109b      	asrs	r3, r3, #2
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	b2d9      	uxtb	r1, r3
 800155e:	4a99      	ldr	r2, [pc, #612]	; (80017c4 <EEM_PERIODIC+0xa98>)
 8001560:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 8001564:	f361 0382 	bfi	r3, r1, #2, #1
 8001568:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag04 = (( param->DATA[0] & 0x08 ) >> 3 );
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	791b      	ldrb	r3, [r3, #4]
 8001570:	10db      	asrs	r3, r3, #3
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	b2d9      	uxtb	r1, r3
 8001578:	4a92      	ldr	r2, [pc, #584]	; (80017c4 <EEM_PERIODIC+0xa98>)
 800157a:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 800157e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001582:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag05 = (( param->DATA[0] & 0x10 ) >> 4 );
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	791b      	ldrb	r3, [r3, #4]
 800158a:	111b      	asrs	r3, r3, #4
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	b2d9      	uxtb	r1, r3
 8001592:	4a8c      	ldr	r2, [pc, #560]	; (80017c4 <EEM_PERIODIC+0xa98>)
 8001594:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 8001598:	f361 1304 	bfi	r3, r1, #4, #1
 800159c:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag06 = (( param->DATA[0] & 0x20 ) >> 5 );
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	791b      	ldrb	r3, [r3, #4]
 80015a4:	115b      	asrs	r3, r3, #5
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	b2d9      	uxtb	r1, r3
 80015ac:	4a85      	ldr	r2, [pc, #532]	; (80017c4 <EEM_PERIODIC+0xa98>)
 80015ae:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 80015b2:	f361 1345 	bfi	r3, r1, #5, #1
 80015b6:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag07 = (( param->DATA[0] & 0x40 ) >> 6 );
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	791b      	ldrb	r3, [r3, #4]
 80015be:	119b      	asrs	r3, r3, #6
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	b2d9      	uxtb	r1, r3
 80015c6:	4a7f      	ldr	r2, [pc, #508]	; (80017c4 <EEM_PERIODIC+0xa98>)
 80015c8:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 80015cc:	f361 1386 	bfi	r3, r1, #6, #1
 80015d0:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag08 = (( param->DATA[0] & 0x80 ) >> 7 );
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	791b      	ldrb	r3, [r3, #4]
 80015d8:	09db      	lsrs	r3, r3, #7
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	b2d9      	uxtb	r1, r3
 80015e2:	4a78      	ldr	r2, [pc, #480]	; (80017c4 <EEM_PERIODIC+0xa98>)
 80015e4:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 80015e8:	f361 13c7 	bfi	r3, r1, #7, #1
 80015ec:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64

		BCM_MSG.Message19.SPN.MS2_errorFlag01 =  ( param->DATA[1] & 0x01 );
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	795b      	ldrb	r3, [r3, #5]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	b2d9      	uxtb	r1, r3
 80015fa:	4a72      	ldr	r2, [pc, #456]	; (80017c4 <EEM_PERIODIC+0xa98>)
 80015fc:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001600:	f361 0300 	bfi	r3, r1, #0, #1
 8001604:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag02 = (( param->DATA[1] & 0x02 ) >> 1 );
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	795b      	ldrb	r3, [r3, #5]
 800160c:	105b      	asrs	r3, r3, #1
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	b2d9      	uxtb	r1, r3
 8001614:	4a6b      	ldr	r2, [pc, #428]	; (80017c4 <EEM_PERIODIC+0xa98>)
 8001616:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 800161a:	f361 0341 	bfi	r3, r1, #1, #1
 800161e:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag03 = (( param->DATA[1] & 0x04 ) >> 2 );
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	795b      	ldrb	r3, [r3, #5]
 8001626:	109b      	asrs	r3, r3, #2
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	b2d9      	uxtb	r1, r3
 800162e:	4a65      	ldr	r2, [pc, #404]	; (80017c4 <EEM_PERIODIC+0xa98>)
 8001630:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001634:	f361 0382 	bfi	r3, r1, #2, #1
 8001638:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag04 = (( param->DATA[1] & 0x08 ) >> 3 );
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	795b      	ldrb	r3, [r3, #5]
 8001640:	10db      	asrs	r3, r3, #3
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	b2d9      	uxtb	r1, r3
 8001648:	4a5e      	ldr	r2, [pc, #376]	; (80017c4 <EEM_PERIODIC+0xa98>)
 800164a:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 800164e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001652:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag05 = (( param->DATA[1] & 0x10 ) >> 4 );
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	795b      	ldrb	r3, [r3, #5]
 800165a:	111b      	asrs	r3, r3, #4
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	b2d9      	uxtb	r1, r3
 8001662:	4a58      	ldr	r2, [pc, #352]	; (80017c4 <EEM_PERIODIC+0xa98>)
 8001664:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001668:	f361 1304 	bfi	r3, r1, #4, #1
 800166c:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag06 = (( param->DATA[1] & 0x20 ) >> 5 );
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	795b      	ldrb	r3, [r3, #5]
 8001674:	115b      	asrs	r3, r3, #5
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	b2d9      	uxtb	r1, r3
 800167c:	4a51      	ldr	r2, [pc, #324]	; (80017c4 <EEM_PERIODIC+0xa98>)
 800167e:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001682:	f361 1345 	bfi	r3, r1, #5, #1
 8001686:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag07 = (( param->DATA[1] & 0x40 ) >> 6 );
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	795b      	ldrb	r3, [r3, #5]
 800168e:	119b      	asrs	r3, r3, #6
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	b2d9      	uxtb	r1, r3
 8001696:	4a4b      	ldr	r2, [pc, #300]	; (80017c4 <EEM_PERIODIC+0xa98>)
 8001698:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 800169c:	f361 1386 	bfi	r3, r1, #6, #1
 80016a0:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag08 = (( param->DATA[1] & 0x80 ) >> 7 );
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	795b      	ldrb	r3, [r3, #5]
 80016a8:	09db      	lsrs	r3, r3, #7
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	b2d9      	uxtb	r1, r3
 80016b2:	4a44      	ldr	r2, [pc, #272]	; (80017c4 <EEM_PERIODIC+0xa98>)
 80016b4:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 80016b8:	f361 13c7 	bfi	r3, r1, #7, #1
 80016bc:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65

		BCM_MSG.Message19.SPN.MS2_statusBit01 =  ( param->DATA[2] & 0x01 );
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	799b      	ldrb	r3, [r3, #6]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	b2d9      	uxtb	r1, r3
 80016ca:	4a3e      	ldr	r2, [pc, #248]	; (80017c4 <EEM_PERIODIC+0xa98>)
 80016cc:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80016d0:	f361 0300 	bfi	r3, r1, #0, #1
 80016d4:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit02 = (( param->DATA[2] & 0x02 ) >> 1 );
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	799b      	ldrb	r3, [r3, #6]
 80016dc:	105b      	asrs	r3, r3, #1
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	b2d9      	uxtb	r1, r3
 80016e4:	4a37      	ldr	r2, [pc, #220]	; (80017c4 <EEM_PERIODIC+0xa98>)
 80016e6:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80016ea:	f361 0341 	bfi	r3, r1, #1, #1
 80016ee:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit03 = (( param->DATA[2] & 0x04 ) >> 2 );
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	799b      	ldrb	r3, [r3, #6]
 80016f6:	109b      	asrs	r3, r3, #2
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	b2d9      	uxtb	r1, r3
 80016fe:	4a31      	ldr	r2, [pc, #196]	; (80017c4 <EEM_PERIODIC+0xa98>)
 8001700:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001704:	f361 0382 	bfi	r3, r1, #2, #1
 8001708:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit04 = (( param->DATA[2] & 0x08 ) >> 3 );
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	799b      	ldrb	r3, [r3, #6]
 8001710:	10db      	asrs	r3, r3, #3
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	b2d9      	uxtb	r1, r3
 8001718:	4a2a      	ldr	r2, [pc, #168]	; (80017c4 <EEM_PERIODIC+0xa98>)
 800171a:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 800171e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001722:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit05 = (( param->DATA[2] & 0x10 ) >> 4 );
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	799b      	ldrb	r3, [r3, #6]
 800172a:	111b      	asrs	r3, r3, #4
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	b2d9      	uxtb	r1, r3
 8001732:	4a24      	ldr	r2, [pc, #144]	; (80017c4 <EEM_PERIODIC+0xa98>)
 8001734:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001738:	f361 1304 	bfi	r3, r1, #4, #1
 800173c:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit06 = (( param->DATA[2] & 0x20 ) >> 5 );
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	799b      	ldrb	r3, [r3, #6]
 8001744:	115b      	asrs	r3, r3, #5
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	b2d9      	uxtb	r1, r3
 800174c:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <EEM_PERIODIC+0xa98>)
 800174e:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001752:	f361 1345 	bfi	r3, r1, #5, #1
 8001756:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit07 = (( param->DATA[2] & 0x40 ) >> 6 );
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	799b      	ldrb	r3, [r3, #6]
 800175e:	119b      	asrs	r3, r3, #6
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	b2d9      	uxtb	r1, r3
 8001766:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <EEM_PERIODIC+0xa98>)
 8001768:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 800176c:	f361 1386 	bfi	r3, r1, #6, #1
 8001770:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit08 = (( param->DATA[2] & 0x80 ) >> 7 );
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	799b      	ldrb	r3, [r3, #6]
 8001778:	09db      	lsrs	r3, r3, #7
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	b2d9      	uxtb	r1, r3
 8001782:	4a10      	ldr	r2, [pc, #64]	; (80017c4 <EEM_PERIODIC+0xa98>)
 8001784:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001788:	f361 13c7 	bfi	r3, r1, #7, #1
 800178c:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

		BCM_MSG.Message19.SPN.MS2_dummyByte01 = param->DATA[3];
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	79da      	ldrb	r2, [r3, #7]
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <EEM_PERIODIC+0xa98>)
 8001796:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		BCM_MSG.Message19.SPN.MS2_dummyByte02 = param->DATA[4];
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7a1a      	ldrb	r2, [r3, #8]
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <EEM_PERIODIC+0xa98>)
 80017a0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		BCM_MSG.Message19.SPN.MS2_dummyByte03 = param->DATA[5];
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7a5a      	ldrb	r2, [r3, #9]
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <EEM_PERIODIC+0xa98>)
 80017aa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		BCM_MSG.Message19.SPN.MS2_dummyByte04 = param->DATA[6];
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7a9a      	ldrb	r2, [r3, #10]
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <EEM_PERIODIC+0xa98>)
 80017b4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		BCM_MSG.Message19.SPN.MS2_dummyByte04 = param->DATA[7];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7ada      	ldrb	r2, [r3, #11]
 80017bc:	4b01      	ldr	r3, [pc, #4]	; (80017c4 <EEM_PERIODIC+0xa98>)
 80017be:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a


	break;
 80017c2:	e123      	b.n	8001a0c <EEM_PERIODIC+0xce0>
 80017c4:	24000304 	.word	0x24000304

//#elif defined(MS1_MODULE)

	case MESSAGE20 :

		MS1_MSG.Message20.SPN.MS1_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	791b      	ldrb	r3, [r3, #4]
 80017cc:	461a      	mov	r2, r3
				 	 	 	 	 	 	 	 	 	  (EEM_U32)( param->DATA[1] << 8  )   |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	795b      	ldrb	r3, [r3, #5]
 80017d2:	021b      	lsls	r3, r3, #8
		MS1_MSG.Message20.SPN.MS1_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 80017d4:	4313      	orrs	r3, r2
													  (EEM_U32)( param->DATA[2] << 16 )   |
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	7992      	ldrb	r2, [r2, #6]
 80017da:	0412      	lsls	r2, r2, #16
				 	 	 	 	 	 	 	 	 	  (EEM_U32)( param->DATA[1] << 8  )   |
 80017dc:	4313      	orrs	r3, r2
													  (EEM_U32)( param->DATA[3] << 24 )   );
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	79d2      	ldrb	r2, [r2, #7]
 80017e2:	0612      	lsls	r2, r2, #24
		MS1_MSG.Message20.SPN.MS1_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 80017e4:	4313      	orrs	r3, r2
 80017e6:	4a8c      	ldr	r2, [pc, #560]	; (8001a18 <EEM_PERIODIC+0xcec>)
 80017e8:	6053      	str	r3, [r2, #4]
		MS1_MSG.Message20.SPN.MS1_Mode	  = param->DATA[4];
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7a1a      	ldrb	r2, [r3, #8]
 80017ee:	4b8a      	ldr	r3, [pc, #552]	; (8001a18 <EEM_PERIODIC+0xcec>)
 80017f0:	721a      	strb	r2, [r3, #8]
		MS1_MSG.Message20.SPN.MS1_SuddenBrake = (param->DATA[5] & 0x01 );
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7a5b      	ldrb	r3, [r3, #9]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	b2d9      	uxtb	r1, r3
 80017fc:	4a86      	ldr	r2, [pc, #536]	; (8001a18 <EEM_PERIODIC+0xcec>)
 80017fe:	7a53      	ldrb	r3, [r2, #9]
 8001800:	f361 0300 	bfi	r3, r1, #0, #1
 8001804:	7253      	strb	r3, [r2, #9]
		//@INFO: RFU Bits
		MS1_MSG.Message20.SPN.MS1_otherflag02 = ( (param->DATA[5] & 0x02 ) >> 1 );
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7a5b      	ldrb	r3, [r3, #9]
 800180a:	105b      	asrs	r3, r3, #1
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	b2d9      	uxtb	r1, r3
 8001812:	4a81      	ldr	r2, [pc, #516]	; (8001a18 <EEM_PERIODIC+0xcec>)
 8001814:	7a53      	ldrb	r3, [r2, #9]
 8001816:	f361 0341 	bfi	r3, r1, #1, #1
 800181a:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag03 = ( (param->DATA[5] & 0x04 ) >> 2 );
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7a5b      	ldrb	r3, [r3, #9]
 8001820:	109b      	asrs	r3, r3, #2
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	b2d9      	uxtb	r1, r3
 8001828:	4a7b      	ldr	r2, [pc, #492]	; (8001a18 <EEM_PERIODIC+0xcec>)
 800182a:	7a53      	ldrb	r3, [r2, #9]
 800182c:	f361 0382 	bfi	r3, r1, #2, #1
 8001830:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag04 = ( (param->DATA[5] & 0x08 ) >> 3 );
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7a5b      	ldrb	r3, [r3, #9]
 8001836:	10db      	asrs	r3, r3, #3
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	b2d9      	uxtb	r1, r3
 800183e:	4a76      	ldr	r2, [pc, #472]	; (8001a18 <EEM_PERIODIC+0xcec>)
 8001840:	7a53      	ldrb	r3, [r2, #9]
 8001842:	f361 03c3 	bfi	r3, r1, #3, #1
 8001846:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag05 = ( (param->DATA[5] & 0x10 ) >> 4 );
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7a5b      	ldrb	r3, [r3, #9]
 800184c:	111b      	asrs	r3, r3, #4
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	b2d9      	uxtb	r1, r3
 8001854:	4a70      	ldr	r2, [pc, #448]	; (8001a18 <EEM_PERIODIC+0xcec>)
 8001856:	7a53      	ldrb	r3, [r2, #9]
 8001858:	f361 1304 	bfi	r3, r1, #4, #1
 800185c:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag06 = ( (param->DATA[5] & 0x20 ) >> 5 );
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7a5b      	ldrb	r3, [r3, #9]
 8001862:	115b      	asrs	r3, r3, #5
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	b2d9      	uxtb	r1, r3
 800186a:	4a6b      	ldr	r2, [pc, #428]	; (8001a18 <EEM_PERIODIC+0xcec>)
 800186c:	7a53      	ldrb	r3, [r2, #9]
 800186e:	f361 1345 	bfi	r3, r1, #5, #1
 8001872:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag07 = ( (param->DATA[5] & 0x40 ) >> 6 );
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7a5b      	ldrb	r3, [r3, #9]
 8001878:	119b      	asrs	r3, r3, #6
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	b2d9      	uxtb	r1, r3
 8001880:	4a65      	ldr	r2, [pc, #404]	; (8001a18 <EEM_PERIODIC+0xcec>)
 8001882:	7a53      	ldrb	r3, [r2, #9]
 8001884:	f361 1386 	bfi	r3, r1, #6, #1
 8001888:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag08 = ( (param->DATA[5] & 0x80 ) >> 7 );
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7a5b      	ldrb	r3, [r3, #9]
 800188e:	09db      	lsrs	r3, r3, #7
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	b2d9      	uxtb	r1, r3
 8001898:	4a5f      	ldr	r2, [pc, #380]	; (8001a18 <EEM_PERIODIC+0xcec>)
 800189a:	7a53      	ldrb	r3, [r2, #9]
 800189c:	f361 13c7 	bfi	r3, r1, #7, #1
 80018a0:	7253      	strb	r3, [r2, #9]

	break;
 80018a2:	e0b3      	b.n	8001a0c <EEM_PERIODIC+0xce0>

	case MESSAGE21 :

		MS1_MSG.Message21.SPN.MS1_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	791b      	ldrb	r3, [r3, #4]
 80018a8:	461a      	mov	r2, r3
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	795b      	ldrb	r3, [r3, #5]
 80018ae:	021b      	lsls	r3, r3, #8
		MS1_MSG.Message21.SPN.MS1_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 80018b0:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[2] << 16 )   |
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	7992      	ldrb	r2, [r2, #6]
 80018b6:	0412      	lsls	r2, r2, #16
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 80018b8:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[3] << 24 )   );
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	79d2      	ldrb	r2, [r2, #7]
 80018be:	0612      	lsls	r2, r2, #24
		MS1_MSG.Message21.SPN.MS1_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 80018c0:	4313      	orrs	r3, r2
 80018c2:	4a55      	ldr	r2, [pc, #340]	; (8001a18 <EEM_PERIODIC+0xcec>)
 80018c4:	6113      	str	r3, [r2, #16]

		MS1_MSG.Message21.SPN.MS1_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	791b      	ldrb	r3, [r3, #4]
 80018ca:	461a      	mov	r2, r3
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	795b      	ldrb	r3, [r3, #5]
 80018d0:	021b      	lsls	r3, r3, #8
		MS1_MSG.Message21.SPN.MS1_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 80018d2:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[2] << 16 )   |
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	7992      	ldrb	r2, [r2, #6]
 80018d8:	0412      	lsls	r2, r2, #16
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 80018da:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[3] << 24 )   );
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	79d2      	ldrb	r2, [r2, #7]
 80018e0:	0612      	lsls	r2, r2, #24
		MS1_MSG.Message21.SPN.MS1_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 80018e2:	4313      	orrs	r3, r2
 80018e4:	4a4c      	ldr	r2, [pc, #304]	; (8001a18 <EEM_PERIODIC+0xcec>)
 80018e6:	6153      	str	r3, [r2, #20]

	break;
 80018e8:	e090      	b.n	8001a0c <EEM_PERIODIC+0xce0>

//#elif defined(MS2_MODULE)
	case MESSAGE22 :

		MS2_MSG.Message22.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	791b      	ldrb	r3, [r3, #4]
 80018ee:	461a      	mov	r2, r3
				 	 	 	 	 	 	 	 	 	  (EEM_U32)( param->DATA[1] << 8  )   |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	795b      	ldrb	r3, [r3, #5]
 80018f4:	021b      	lsls	r3, r3, #8
		MS2_MSG.Message22.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 80018f6:	4313      	orrs	r3, r2
													  (EEM_U32)( param->DATA[2] << 16 )   |
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	7992      	ldrb	r2, [r2, #6]
 80018fc:	0412      	lsls	r2, r2, #16
				 	 	 	 	 	 	 	 	 	  (EEM_U32)( param->DATA[1] << 8  )   |
 80018fe:	4313      	orrs	r3, r2
													  (EEM_U32)( param->DATA[3] << 24 )   );
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	79d2      	ldrb	r2, [r2, #7]
 8001904:	0612      	lsls	r2, r2, #24
		MS2_MSG.Message22.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 8001906:	4313      	orrs	r3, r2
 8001908:	4a44      	ldr	r2, [pc, #272]	; (8001a1c <EEM_PERIODIC+0xcf0>)
 800190a:	6053      	str	r3, [r2, #4]
		MS2_MSG.Message22.SPN.MS2_Mode	  = param->DATA[4];
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7a1a      	ldrb	r2, [r3, #8]
 8001910:	4b42      	ldr	r3, [pc, #264]	; (8001a1c <EEM_PERIODIC+0xcf0>)
 8001912:	721a      	strb	r2, [r3, #8]
		MS2_MSG.Message22.SPN.MS2_SuddenBrake = (param->DATA[5] & 0x01 );
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7a5b      	ldrb	r3, [r3, #9]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	b2d9      	uxtb	r1, r3
 800191e:	4a3f      	ldr	r2, [pc, #252]	; (8001a1c <EEM_PERIODIC+0xcf0>)
 8001920:	7a53      	ldrb	r3, [r2, #9]
 8001922:	f361 0300 	bfi	r3, r1, #0, #1
 8001926:	7253      	strb	r3, [r2, #9]
		//@INFO: RFU Bits
		MS2_MSG.Message22.SPN.MS2_otherflag02 = ( (param->DATA[5] & 0x02 ) >> 1 );
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7a5b      	ldrb	r3, [r3, #9]
 800192c:	105b      	asrs	r3, r3, #1
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	b2d9      	uxtb	r1, r3
 8001934:	4a39      	ldr	r2, [pc, #228]	; (8001a1c <EEM_PERIODIC+0xcf0>)
 8001936:	7a53      	ldrb	r3, [r2, #9]
 8001938:	f361 0341 	bfi	r3, r1, #1, #1
 800193c:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag03 = ( (param->DATA[5] & 0x04 ) >> 2 );
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7a5b      	ldrb	r3, [r3, #9]
 8001942:	109b      	asrs	r3, r3, #2
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	b2d9      	uxtb	r1, r3
 800194a:	4a34      	ldr	r2, [pc, #208]	; (8001a1c <EEM_PERIODIC+0xcf0>)
 800194c:	7a53      	ldrb	r3, [r2, #9]
 800194e:	f361 0382 	bfi	r3, r1, #2, #1
 8001952:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag04 = ( (param->DATA[5] & 0x08 ) >> 3 );
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7a5b      	ldrb	r3, [r3, #9]
 8001958:	10db      	asrs	r3, r3, #3
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	b2d9      	uxtb	r1, r3
 8001960:	4a2e      	ldr	r2, [pc, #184]	; (8001a1c <EEM_PERIODIC+0xcf0>)
 8001962:	7a53      	ldrb	r3, [r2, #9]
 8001964:	f361 03c3 	bfi	r3, r1, #3, #1
 8001968:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag05 = ( (param->DATA[5] & 0x10 ) >> 4 );
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7a5b      	ldrb	r3, [r3, #9]
 800196e:	111b      	asrs	r3, r3, #4
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	b2d9      	uxtb	r1, r3
 8001976:	4a29      	ldr	r2, [pc, #164]	; (8001a1c <EEM_PERIODIC+0xcf0>)
 8001978:	7a53      	ldrb	r3, [r2, #9]
 800197a:	f361 1304 	bfi	r3, r1, #4, #1
 800197e:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag06 = ( (param->DATA[5] & 0x20 ) >> 5 );
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7a5b      	ldrb	r3, [r3, #9]
 8001984:	115b      	asrs	r3, r3, #5
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	b2d9      	uxtb	r1, r3
 800198c:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <EEM_PERIODIC+0xcf0>)
 800198e:	7a53      	ldrb	r3, [r2, #9]
 8001990:	f361 1345 	bfi	r3, r1, #5, #1
 8001994:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag07 = ( (param->DATA[5] & 0x40 ) >> 6 );
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7a5b      	ldrb	r3, [r3, #9]
 800199a:	119b      	asrs	r3, r3, #6
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	b2d9      	uxtb	r1, r3
 80019a2:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <EEM_PERIODIC+0xcf0>)
 80019a4:	7a53      	ldrb	r3, [r2, #9]
 80019a6:	f361 1386 	bfi	r3, r1, #6, #1
 80019aa:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag08 = ( (param->DATA[5] & 0x80 ) >> 7 );
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	7a5b      	ldrb	r3, [r3, #9]
 80019b0:	09db      	lsrs	r3, r3, #7
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	b2d9      	uxtb	r1, r3
 80019ba:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <EEM_PERIODIC+0xcf0>)
 80019bc:	7a53      	ldrb	r3, [r2, #9]
 80019be:	f361 13c7 	bfi	r3, r1, #7, #1
 80019c2:	7253      	strb	r3, [r2, #9]

	break;
 80019c4:	e022      	b.n	8001a0c <EEM_PERIODIC+0xce0>

	case MESSAGE23 :

		MS2_MSG.Message23.SPN.MS2_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	791b      	ldrb	r3, [r3, #4]
 80019ca:	461a      	mov	r2, r3
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	795b      	ldrb	r3, [r3, #5]
 80019d0:	021b      	lsls	r3, r3, #8
		MS2_MSG.Message23.SPN.MS2_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 80019d2:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[2] << 16 )   |
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	7992      	ldrb	r2, [r2, #6]
 80019d8:	0412      	lsls	r2, r2, #16
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 80019da:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[3] << 24 )   );
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	79d2      	ldrb	r2, [r2, #7]
 80019e0:	0612      	lsls	r2, r2, #24
		MS2_MSG.Message23.SPN.MS2_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 80019e2:	4313      	orrs	r3, r2
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <EEM_PERIODIC+0xcf0>)
 80019e6:	6113      	str	r3, [r2, #16]

		MS2_MSG.Message23.SPN.MS2_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	791b      	ldrb	r3, [r3, #4]
 80019ec:	461a      	mov	r2, r3
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	795b      	ldrb	r3, [r3, #5]
 80019f2:	021b      	lsls	r3, r3, #8
		MS2_MSG.Message23.SPN.MS2_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 80019f4:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[2] << 16 )   |
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	7992      	ldrb	r2, [r2, #6]
 80019fa:	0412      	lsls	r2, r2, #16
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 80019fc:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[3] << 24 )   );
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	79d2      	ldrb	r2, [r2, #7]
 8001a02:	0612      	lsls	r2, r2, #24
		MS2_MSG.Message23.SPN.MS2_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001a04:	4313      	orrs	r3, r2
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <EEM_PERIODIC+0xcf0>)
 8001a08:	6153      	str	r3, [r2, #20]

	break;
 8001a0a:	bf00      	nop

//#endif
	}

	
	return result;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2400037c 	.word	0x2400037c
 8001a1c:	2400039c 	.word	0x2400039c

08001a20 <EEM_IS_EMPTY>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
EEM_BOOL_T	EEM_IS_EMPTY( const EEM_RING_Buffer_st* buffer )
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	 return (buffer->head == buffer->tail && !buffer->full);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d106      	bne.n	8001a46 <EEM_IS_EMPTY+0x26>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <EEM_IS_EMPTY+0x26>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <EEM_IS_EMPTY+0x28>
 8001a46:	2300      	movs	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <EEM_FILTER_BCM>:
	 @return  : EEM_ERR_T
	 @date	  : 7.02.2023
	 @INFO	  :	BCM Specific CANBUS Filtering Function
********************************************************************************/
EEM_ERR_T EEM_FILTER_BCM( EEM_Protocol_obj_st* param )
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	; 0x30
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	EEM_ERR_T result = EEM_EOK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	EEM_CAN_ID_st MessageID_01   = {0}			 ;	/* 29 Bit Extended ID Frame */
 8001a66:	2300      	movs	r3, #0
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
	MessageID_01.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 8001a6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f362 0384 	bfi	r3, r2, #2, #3
 8001a74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	MessageID_01.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 8001a78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a7c:	f36f 0341 	bfc	r3, #1, #1
 8001a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	MessageID_01.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 8001a84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a88:	f36f 0300 	bfc	r3, #0, #1
 8001a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	MessageID_01.Pages.messageID = MESSAGE01 	 ;  /* 8 Bit Message Soft ID 	*/
 8001a90:	2301      	movs	r3, #1
 8001a92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	MessageID_01.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 8001a96:	2311      	movs	r3, #17
 8001a98:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	MessageID_01.Pages.SA		  = HVAC_NODE	 ;	/* 8 Bit Source Addr		*/
 8001a9c:	2322      	movs	r3, #34	; 0x22
 8001a9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	BCM_MSG.Message01_ID		  = MessageID_01.identifier ;
 8001aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa4:	4ac6      	ldr	r2, [pc, #792]	; (8001dc0 <EEM_FILTER_BCM+0x368>)
 8001aa6:	6013      	str	r3, [r2, #0]

	EEM_CAN_ID_st MessageID_02   = {0}			 ;	/* 29 Bit Extended ID Frame */
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    MessageID_02.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 8001aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f362 0384 	bfi	r3, r2, #2, #3
 8001ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MessageID_02.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 8001aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001abe:	f36f 0341 	bfc	r3, #1, #1
 8001ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MessageID_02.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 8001ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aca:	f36f 0300 	bfc	r3, #0, #1
 8001ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MessageID_02.Pages.messageID = MESSAGE02 	 ;  /* 8 Bit Message Soft ID 	*/
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    MessageID_02.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 8001ad8:	2311      	movs	r3, #17
 8001ada:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    MessageID_02.Pages.SA		  = HVAC_NODE	 ;	/* 8 Bit Source Addr		*/
 8001ade:	2322      	movs	r3, #34	; 0x22
 8001ae0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    BCM_MSG.Message02_ID		  = MessageID_02.identifier ;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	4ab6      	ldr	r2, [pc, #728]	; (8001dc0 <EEM_FILTER_BCM+0x368>)
 8001ae8:	6113      	str	r3, [r2, #16]

    EEM_CAN_ID_st MessageID_07   = {0}			 ;	/* 29 Bit Extended ID Frame */
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
    MessageID_07.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 8001aee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001af2:	2201      	movs	r2, #1
 8001af4:	f362 0384 	bfi	r3, r2, #2, #3
 8001af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    MessageID_07.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 8001afc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b00:	f36f 0341 	bfc	r3, #1, #1
 8001b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    MessageID_07.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 8001b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b0c:	f36f 0300 	bfc	r3, #0, #1
 8001b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    MessageID_07.Pages.messageID = MESSAGE07 	 ;  /* 8 Bit Message Soft ID 	*/
 8001b14:	2307      	movs	r3, #7
 8001b16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    MessageID_07.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 8001b1a:	2311      	movs	r3, #17
 8001b1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    MessageID_07.Pages.SA		  = MS1_NODE	 ;	/* 8 Bit Source Addr		*/
 8001b20:	2355      	movs	r3, #85	; 0x55
 8001b22:	f887 3020 	strb.w	r3, [r7, #32]
    BCM_MSG.Message07_ID		  = MessageID_07.identifier ;
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	4aa5      	ldr	r2, [pc, #660]	; (8001dc0 <EEM_FILTER_BCM+0x368>)
 8001b2a:	61d3      	str	r3, [r2, #28]

	 EEM_CAN_ID_st MessageID_08   = {0}			 ;	/* 29 Bit Extended ID Frame */
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
	 MessageID_08.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 8001b30:	7ffb      	ldrb	r3, [r7, #31]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f362 0384 	bfi	r3, r2, #2, #3
 8001b38:	77fb      	strb	r3, [r7, #31]
	 MessageID_08.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 8001b3a:	7ffb      	ldrb	r3, [r7, #31]
 8001b3c:	f36f 0341 	bfc	r3, #1, #1
 8001b40:	77fb      	strb	r3, [r7, #31]
	 MessageID_08.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 8001b42:	7ffb      	ldrb	r3, [r7, #31]
 8001b44:	f36f 0300 	bfc	r3, #0, #1
 8001b48:	77fb      	strb	r3, [r7, #31]
	 MessageID_08.Pages.messageID = MESSAGE08 	 ;  /* 8 Bit Message Soft ID 	*/
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	77bb      	strb	r3, [r7, #30]
	 MessageID_08.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 8001b4e:	2311      	movs	r3, #17
 8001b50:	777b      	strb	r3, [r7, #29]
	 MessageID_08.Pages.SA		  = MS1_NODE	 ;	/* 8 Bit Source Addr		*/
 8001b52:	2355      	movs	r3, #85	; 0x55
 8001b54:	773b      	strb	r3, [r7, #28]
	 BCM_MSG.Message08_ID		  = MessageID_08.identifier ;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	4a99      	ldr	r2, [pc, #612]	; (8001dc0 <EEM_FILTER_BCM+0x368>)
 8001b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

	 EEM_CAN_ID_st MessageID_09   = {0}			 ;	/* 29 Bit Extended ID Frame */
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
	 MessageID_09.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 8001b60:	7efb      	ldrb	r3, [r7, #27]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f362 0384 	bfi	r3, r2, #2, #3
 8001b68:	76fb      	strb	r3, [r7, #27]
	 MessageID_09.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 8001b6a:	7efb      	ldrb	r3, [r7, #27]
 8001b6c:	f36f 0341 	bfc	r3, #1, #1
 8001b70:	76fb      	strb	r3, [r7, #27]
	 MessageID_09.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 8001b72:	7efb      	ldrb	r3, [r7, #27]
 8001b74:	f36f 0300 	bfc	r3, #0, #1
 8001b78:	76fb      	strb	r3, [r7, #27]
	 MessageID_09.Pages.messageID = MESSAGE09 	 ;  /* 8 Bit Message Soft ID 	*/
 8001b7a:	2309      	movs	r3, #9
 8001b7c:	76bb      	strb	r3, [r7, #26]
	 MessageID_09.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 8001b7e:	2311      	movs	r3, #17
 8001b80:	767b      	strb	r3, [r7, #25]
	 MessageID_09.Pages.SA		  = MS2_NODE	 ;	/* 8 Bit Source Addr		*/
 8001b82:	2366      	movs	r3, #102	; 0x66
 8001b84:	763b      	strb	r3, [r7, #24]
	 BCM_MSG.Message09_ID		  = MessageID_09.identifier ;
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4a8d      	ldr	r2, [pc, #564]	; (8001dc0 <EEM_FILTER_BCM+0x368>)
 8001b8a:	6393      	str	r3, [r2, #56]	; 0x38

	 EEM_CAN_ID_st MessageID_10   = {0}			 ;	/* 29 Bit Extended ID Frame */
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
	 MessageID_10.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f362 0384 	bfi	r3, r2, #2, #3
 8001b98:	75fb      	strb	r3, [r7, #23]
	 MessageID_10.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
 8001b9c:	f36f 0341 	bfc	r3, #1, #1
 8001ba0:	75fb      	strb	r3, [r7, #23]
	 MessageID_10.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
 8001ba4:	f36f 0300 	bfc	r3, #0, #1
 8001ba8:	75fb      	strb	r3, [r7, #23]
	 MessageID_10.Pages.messageID = MESSAGE10 	 ;  /* 8 Bit Message Soft ID 	*/
 8001baa:	2310      	movs	r3, #16
 8001bac:	75bb      	strb	r3, [r7, #22]
	 MessageID_10.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 8001bae:	2311      	movs	r3, #17
 8001bb0:	757b      	strb	r3, [r7, #21]
	 MessageID_10.Pages.SA		  = MS2_NODE	 ;	/* 8 Bit Source Addr		*/
 8001bb2:	2366      	movs	r3, #102	; 0x66
 8001bb4:	753b      	strb	r3, [r7, #20]
	 BCM_MSG.Message10_ID		  = MessageID_10.identifier ;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	4a81      	ldr	r2, [pc, #516]	; (8001dc0 <EEM_FILTER_BCM+0x368>)
 8001bba:	6493      	str	r3, [r2, #72]	; 0x48

	 EEM_CAN_ID_st MessageID_18   = {0}			 ;	/* 29 Bit Extended ID Frame */
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
	 MessageID_18.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 8001bc0:	7cfb      	ldrb	r3, [r7, #19]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f362 0384 	bfi	r3, r2, #2, #3
 8001bc8:	74fb      	strb	r3, [r7, #19]
	 MessageID_18.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 8001bca:	7cfb      	ldrb	r3, [r7, #19]
 8001bcc:	f36f 0341 	bfc	r3, #1, #1
 8001bd0:	74fb      	strb	r3, [r7, #19]
	 MessageID_18.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 8001bd2:	7cfb      	ldrb	r3, [r7, #19]
 8001bd4:	f36f 0300 	bfc	r3, #0, #1
 8001bd8:	74fb      	strb	r3, [r7, #19]
	 MessageID_18.Pages.messageID = MESSAGE09 	 ;  /* 8 Bit Message Soft ID 	*/
 8001bda:	2309      	movs	r3, #9
 8001bdc:	74bb      	strb	r3, [r7, #18]
	 MessageID_18.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 8001bde:	2311      	movs	r3, #17
 8001be0:	747b      	strb	r3, [r7, #17]
	 MessageID_18.Pages.SA		  = MS1_NODE	 ;	/* 8 Bit Source Addr		*/
 8001be2:	2355      	movs	r3, #85	; 0x55
 8001be4:	743b      	strb	r3, [r7, #16]
	 BCM_MSG.Message18_ID		  = MessageID_18.identifier ;
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4a75      	ldr	r2, [pc, #468]	; (8001dc0 <EEM_FILTER_BCM+0x368>)
 8001bea:	6553      	str	r3, [r2, #84]	; 0x54

	 EEM_CAN_ID_st MessageID_19   = {0}			 ;	/* 29 Bit Extended ID Frame */
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
	 MessageID_19.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f362 0384 	bfi	r3, r2, #2, #3
 8001bf8:	73fb      	strb	r3, [r7, #15]
	 MessageID_19.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	f36f 0341 	bfc	r3, #1, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
	 MessageID_19.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	f36f 0300 	bfc	r3, #0, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
	 MessageID_19.Pages.messageID = MESSAGE10 	 ;  /* 8 Bit Message Soft ID 	*/
 8001c0a:	2310      	movs	r3, #16
 8001c0c:	73bb      	strb	r3, [r7, #14]
	 MessageID_19.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 8001c0e:	2311      	movs	r3, #17
 8001c10:	737b      	strb	r3, [r7, #13]
	 MessageID_19.Pages.SA		  = MS2_NODE	 ;	/* 8 Bit Source Addr		*/
 8001c12:	2366      	movs	r3, #102	; 0x66
 8001c14:	733b      	strb	r3, [r7, #12]
	 BCM_MSG.Message19_ID		  = MessageID_19.identifier ;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4a69      	ldr	r2, [pc, #420]	; (8001dc0 <EEM_FILTER_BCM+0x368>)
 8001c1a:	6613      	str	r3, [r2, #96]	; 0x60



#elif (defined(STM32H750xx) && defined(FDCAN_Protocol))

	 param->fdHandle.sFilterConfig.IdType 			= FDCAN_EXTENDED_ID;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c22:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 param->fdHandle.sFilterConfig.FilterIndex 		= 0;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	 param->fdHandle.sFilterConfig.FilterType 		= FDCAN_FILTER_MASK;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2202      	movs	r2, #2
 8001c32:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	 param->fdHandle.sFilterConfig.FilterConfig 	= FDCAN_FILTER_TO_RXFIFO0;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 param->fdHandle.sFilterConfig.FilterID1 		= MessageID_01.identifier ;
 8001c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	 param->fdHandle.sFilterConfig.FilterID2 		= 0x1FFFFFFF ;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001c4c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	 param->fdHandle.sFilterConfig.RxBufferIndex 	= 0;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	 if(HAL_FDCAN_ConfigFilter(&param->fdHandle.hfdcanHandle , &param->fdHandle.sFilterConfig) != HAL_OK)
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	33a0      	adds	r3, #160	; 0xa0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4610      	mov	r0, r2
 8001c62:	f000 fd5f 	bl	8002724 <HAL_FDCAN_ConfigFilter>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <EEM_FILTER_BCM+0x218>
	 {
		 return EEM_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e129      	b.n	8001ec4 <EEM_FILTER_BCM+0x46c>
	 }

	 param->fdHandle.sFilterConfig.IdType 			= FDCAN_EXTENDED_ID;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 param->fdHandle.sFilterConfig.FilterIndex 		= 1;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	 param->fdHandle.sFilterConfig.FilterType 		= FDCAN_FILTER_MASK;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2202      	movs	r2, #2
 8001c86:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	 param->fdHandle.sFilterConfig.FilterConfig 	= FDCAN_FILTER_TO_RXFIFO0;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 param->fdHandle.sFilterConfig.FilterID1 		= MessageID_02.identifier ;
 8001c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	 param->fdHandle.sFilterConfig.FilterID2 		= 0x1FFFFFFF ;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001ca0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	 param->fdHandle.sFilterConfig.RxBufferIndex 	= 0;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	 if(HAL_FDCAN_ConfigFilter(&param->fdHandle.hfdcanHandle , &param->fdHandle.sFilterConfig) != HAL_OK)
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	33a0      	adds	r3, #160	; 0xa0
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f000 fd35 	bl	8002724 <HAL_FDCAN_ConfigFilter>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <EEM_FILTER_BCM+0x26c>
	 {
		 return EEM_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0ff      	b.n	8001ec4 <EEM_FILTER_BCM+0x46c>
	 }

	 param->fdHandle.sFilterConfig.IdType 			= FDCAN_EXTENDED_ID;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 param->fdHandle.sFilterConfig.FilterIndex 		= 2;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	 param->fdHandle.sFilterConfig.FilterType 		= FDCAN_FILTER_MASK;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	 param->fdHandle.sFilterConfig.FilterConfig 	= FDCAN_FILTER_TO_RXFIFO0;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 param->fdHandle.sFilterConfig.FilterID1 		= MessageID_07.identifier ;
 8001ce6:	6a3a      	ldr	r2, [r7, #32]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	 param->fdHandle.sFilterConfig.FilterID2 		= 0x1FFFFFFF ;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001cf4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	 param->fdHandle.sFilterConfig.RxBufferIndex 	= 0;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	 if(HAL_FDCAN_ConfigFilter(&param->fdHandle.hfdcanHandle , &param->fdHandle.sFilterConfig) != HAL_OK)
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	33a0      	adds	r3, #160	; 0xa0
 8001d06:	4619      	mov	r1, r3
 8001d08:	4610      	mov	r0, r2
 8001d0a:	f000 fd0b 	bl	8002724 <HAL_FDCAN_ConfigFilter>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <EEM_FILTER_BCM+0x2c0>
	 {
		 return EEM_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0d5      	b.n	8001ec4 <EEM_FILTER_BCM+0x46c>
	 }

	 param->fdHandle.sFilterConfig.IdType 			= FDCAN_EXTENDED_ID;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 param->fdHandle.sFilterConfig.FilterIndex 		= 3;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2203      	movs	r2, #3
 8001d26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	 param->fdHandle.sFilterConfig.FilterType 		= FDCAN_FILTER_MASK;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	 param->fdHandle.sFilterConfig.FilterConfig 	= FDCAN_FILTER_TO_RXFIFO0;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 param->fdHandle.sFilterConfig.FilterID1 		= MessageID_08.identifier ;
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	 param->fdHandle.sFilterConfig.FilterID2 		= 0x1FFFFFFF ;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001d48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	 param->fdHandle.sFilterConfig.RxBufferIndex 	= 0;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	 if(HAL_FDCAN_ConfigFilter(&param->fdHandle.hfdcanHandle , &param->fdHandle.sFilterConfig) != HAL_OK)
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	33a0      	adds	r3, #160	; 0xa0
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f000 fce1 	bl	8002724 <HAL_FDCAN_ConfigFilter>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <EEM_FILTER_BCM+0x314>
	 {
		 return EEM_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0ab      	b.n	8001ec4 <EEM_FILTER_BCM+0x46c>
	 }

	 param->fdHandle.sFilterConfig.IdType 			= FDCAN_EXTENDED_ID;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d72:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 param->fdHandle.sFilterConfig.FilterIndex 		= 4;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2204      	movs	r2, #4
 8001d7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	 param->fdHandle.sFilterConfig.FilterType 		= FDCAN_FILTER_MASK;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2202      	movs	r2, #2
 8001d82:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	 param->fdHandle.sFilterConfig.FilterConfig 	= FDCAN_FILTER_TO_RXFIFO0;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 param->fdHandle.sFilterConfig.FilterID1 		= MessageID_09.identifier ;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	 param->fdHandle.sFilterConfig.FilterID2 		= 0x1FFFFFFF ;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001d9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	 param->fdHandle.sFilterConfig.RxBufferIndex 	= 0;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	 if(HAL_FDCAN_ConfigFilter(&param->fdHandle.hfdcanHandle , &param->fdHandle.sFilterConfig) != HAL_OK)
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	33a0      	adds	r3, #160	; 0xa0
 8001dae:	4619      	mov	r1, r3
 8001db0:	4610      	mov	r0, r2
 8001db2:	f000 fcb7 	bl	8002724 <HAL_FDCAN_ConfigFilter>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <EEM_FILTER_BCM+0x36c>
	 {
		 return EEM_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e081      	b.n	8001ec4 <EEM_FILTER_BCM+0x46c>
 8001dc0:	24000304 	.word	0x24000304
	 }

	 param->fdHandle.sFilterConfig.IdType 			= FDCAN_EXTENDED_ID;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 param->fdHandle.sFilterConfig.FilterIndex 		= 5;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2205      	movs	r2, #5
 8001dd2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	 param->fdHandle.sFilterConfig.FilterType 		= FDCAN_FILTER_MASK;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	 param->fdHandle.sFilterConfig.FilterConfig 	= FDCAN_FILTER_TO_RXFIFO0;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 param->fdHandle.sFilterConfig.FilterID1 		= MessageID_10.identifier ;
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	 param->fdHandle.sFilterConfig.FilterID2 		= 0x1FFFFFFF ;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001df4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	 param->fdHandle.sFilterConfig.RxBufferIndex 	= 0;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	 if(HAL_FDCAN_ConfigFilter(&param->fdHandle.hfdcanHandle , &param->fdHandle.sFilterConfig) != HAL_OK)
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	33a0      	adds	r3, #160	; 0xa0
 8001e06:	4619      	mov	r1, r3
 8001e08:	4610      	mov	r0, r2
 8001e0a:	f000 fc8b 	bl	8002724 <HAL_FDCAN_ConfigFilter>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <EEM_FILTER_BCM+0x3c0>
	 {
		 return EEM_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e055      	b.n	8001ec4 <EEM_FILTER_BCM+0x46c>
	 }

	 param->fdHandle.sFilterConfig.IdType 			= FDCAN_EXTENDED_ID;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 param->fdHandle.sFilterConfig.FilterIndex 		= 6;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2206      	movs	r2, #6
 8001e26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	 param->fdHandle.sFilterConfig.FilterType 		= FDCAN_FILTER_MASK;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	 param->fdHandle.sFilterConfig.FilterConfig 	= FDCAN_FILTER_TO_RXFIFO0;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 param->fdHandle.sFilterConfig.FilterID1 		= MessageID_18.identifier ;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	 param->fdHandle.sFilterConfig.FilterID2 		= 0x1FFFFFFF ;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001e48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	 param->fdHandle.sFilterConfig.RxBufferIndex 	= 0;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	 if(HAL_FDCAN_ConfigFilter(&param->fdHandle.hfdcanHandle , &param->fdHandle.sFilterConfig) != HAL_OK)
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	33a0      	adds	r3, #160	; 0xa0
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	f000 fc61 	bl	8002724 <HAL_FDCAN_ConfigFilter>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <EEM_FILTER_BCM+0x414>
	 {
		 return EEM_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e02b      	b.n	8001ec4 <EEM_FILTER_BCM+0x46c>
	 }

	 param->fdHandle.sFilterConfig.IdType 			= FDCAN_EXTENDED_ID;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e72:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 param->fdHandle.sFilterConfig.FilterIndex 		= 7;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2207      	movs	r2, #7
 8001e7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	 param->fdHandle.sFilterConfig.FilterType 		= FDCAN_FILTER_MASK;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2202      	movs	r2, #2
 8001e82:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	 param->fdHandle.sFilterConfig.FilterConfig 	= FDCAN_FILTER_TO_RXFIFO0;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 param->fdHandle.sFilterConfig.FilterID1 		= MessageID_19.identifier ;
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	 param->fdHandle.sFilterConfig.FilterID2 		= 0x1FFFFFFF ;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001e9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	 param->fdHandle.sFilterConfig.RxBufferIndex 	= 0;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	 if(HAL_FDCAN_ConfigFilter(&param->fdHandle.hfdcanHandle , &param->fdHandle.sFilterConfig) != HAL_OK)
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	33a0      	adds	r3, #160	; 0xa0
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f000 fc37 	bl	8002724 <HAL_FDCAN_ConfigFilter>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <EEM_FILTER_BCM+0x468>
	 {
		 return EEM_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e001      	b.n	8001ec4 <EEM_FILTER_BCM+0x46c>
//ERROR
#endif


#endif
	return result;
 8001ec0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3730      	adds	r7, #48	; 0x30
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed2:	2003      	movs	r0, #3
 8001ed4:	f000 f98c 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ed8:	f002 fc32 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_Init+0x68>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	4913      	ldr	r1, [pc, #76]	; (8001f38 <HAL_Init+0x6c>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_Init+0x68>)
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_Init+0x6c>)
 8001f00:	5cd3      	ldrb	r3, [r2, r3]
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0c:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <HAL_Init+0x70>)
 8001f0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f10:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <HAL_Init+0x74>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f16:	200f      	movs	r0, #15
 8001f18:	f000 f814 	bl	8001f44 <HAL_InitTick>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e002      	b.n	8001f2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f26:	f7fe fba3 	bl	8000670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	58024400 	.word	0x58024400
 8001f38:	080061f0 	.word	0x080061f0
 8001f3c:	24000004 	.word	0x24000004
 8001f40:	24000000 	.word	0x24000000

08001f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <HAL_InitTick+0x60>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e021      	b.n	8001f9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_InitTick+0x64>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_InitTick+0x60>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f971 	bl	8002256 <HAL_SYSTICK_Config>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00e      	b.n	8001f9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b0f      	cmp	r3, #15
 8001f82:	d80a      	bhi.n	8001f9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f000 f93b 	bl	8002206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f90:	4a06      	ldr	r2, [pc, #24]	; (8001fac <HAL_InitTick+0x68>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e000      	b.n	8001f9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2400000c 	.word	0x2400000c
 8001fa8:	24000000 	.word	0x24000000
 8001fac:	24000008 	.word	0x24000008

08001fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x20>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	2400000c 	.word	0x2400000c
 8001fd4:	240003b4 	.word	0x240003b4

08001fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return uwTick;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_GetTick+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	240003b4 	.word	0x240003b4

08001ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff ffee 	bl	8001fd8 <HAL_GetTick>
 8001ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d005      	beq.n	8002016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_Delay+0x44>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002016:	bf00      	nop
 8002018:	f7ff ffde 	bl	8001fd8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	429a      	cmp	r2, r3
 8002026:	d8f7      	bhi.n	8002018 <HAL_Delay+0x28>
  {
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2400000c 	.word	0x2400000c

08002038 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_GetREVID+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0c1b      	lsrs	r3, r3, #16
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	5c001000 	.word	0x5c001000

08002050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <__NVIC_SetPriorityGrouping+0x40>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	4313      	orrs	r3, r2
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	; (8002090 <__NVIC_SetPriorityGrouping+0x40>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00
 8002094:	05fa0000 	.word	0x05fa0000

08002098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <__NVIC_GetPriorityGrouping+0x18>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	f003 0307 	and.w	r3, r3, #7
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db0b      	blt.n	80020de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	f003 021f 	and.w	r2, r3, #31
 80020cc:	4907      	ldr	r1, [pc, #28]	; (80020ec <__NVIC_EnableIRQ+0x38>)
 80020ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	2001      	movs	r0, #1
 80020d6:	fa00 f202 	lsl.w	r2, r0, r2
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002100:	2b00      	cmp	r3, #0
 8002102:	db0a      	blt.n	800211a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	490c      	ldr	r1, [pc, #48]	; (800213c <__NVIC_SetPriority+0x4c>)
 800210a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210e:	0112      	lsls	r2, r2, #4
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	440b      	add	r3, r1
 8002114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002118:	e00a      	b.n	8002130 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4908      	ldr	r1, [pc, #32]	; (8002140 <__NVIC_SetPriority+0x50>)
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3b04      	subs	r3, #4
 8002128:	0112      	lsls	r2, r2, #4
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	440b      	add	r3, r1
 800212e:	761a      	strb	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000e100 	.word	0xe000e100
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f1c3 0307 	rsb	r3, r3, #7
 800215e:	2b04      	cmp	r3, #4
 8002160:	bf28      	it	cs
 8002162:	2304      	movcs	r3, #4
 8002164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3304      	adds	r3, #4
 800216a:	2b06      	cmp	r3, #6
 800216c:	d902      	bls.n	8002174 <NVIC_EncodePriority+0x30>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3b03      	subs	r3, #3
 8002172:	e000      	b.n	8002176 <NVIC_EncodePriority+0x32>
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43d9      	mvns	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	4313      	orrs	r3, r2
         );
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021bc:	d301      	bcc.n	80021c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021be:	2301      	movs	r3, #1
 80021c0:	e00f      	b.n	80021e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <SysTick_Config+0x40>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ca:	210f      	movs	r1, #15
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f7ff ff8e 	bl	80020f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <SysTick_Config+0x40>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <SysTick_Config+0x40>)
 80021dc:	2207      	movs	r2, #7
 80021de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	e000e010 	.word	0xe000e010

080021f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff29 	bl	8002050 <__NVIC_SetPriorityGrouping>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002214:	f7ff ff40 	bl	8002098 <__NVIC_GetPriorityGrouping>
 8002218:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	6978      	ldr	r0, [r7, #20]
 8002220:	f7ff ff90 	bl	8002144 <NVIC_EncodePriority>
 8002224:	4602      	mov	r2, r0
 8002226:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff5f 	bl	80020f0 <__NVIC_SetPriority>
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002244:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff33 	bl	80020b4 <__NVIC_EnableIRQ>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ffa4 	bl	80021ac <SysTick_Config>
 8002264:	4603      	mov	r3, r0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002274:	f3bf 8f5f 	dmb	sy
}
 8002278:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <HAL_MPU_Disable+0x28>)
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	4a06      	ldr	r2, [pc, #24]	; (8002298 <HAL_MPU_Disable+0x28>)
 8002280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002284:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002286:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_MPU_Disable+0x2c>)
 8002288:	2200      	movs	r2, #0
 800228a:	605a      	str	r2, [r3, #4]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00
 800229c:	e000ed90 	.word	0xe000ed90

080022a0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80022a8:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <HAL_MPU_Enable+0x38>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_MPU_Enable+0x3c>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	4a09      	ldr	r2, [pc, #36]	; (80022dc <HAL_MPU_Enable+0x3c>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80022be:	f3bf 8f4f 	dsb	sy
}
 80022c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022c4:	f3bf 8f6f 	isb	sy
}
 80022c8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000ed90 	.word	0xe000ed90
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	785a      	ldrb	r2, [r3, #1]
 80022ec:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_MPU_ConfigRegion+0x84>)
 80022ee:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d029      	beq.n	800234c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80022f8:	4a1a      	ldr	r2, [pc, #104]	; (8002364 <HAL_MPU_ConfigRegion+0x84>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7b1b      	ldrb	r3, [r3, #12]
 8002304:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7adb      	ldrb	r3, [r3, #11]
 800230a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800230c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7a9b      	ldrb	r3, [r3, #10]
 8002312:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002314:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7b5b      	ldrb	r3, [r3, #13]
 800231a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800231c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7b9b      	ldrb	r3, [r3, #14]
 8002322:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002324:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7bdb      	ldrb	r3, [r3, #15]
 800232a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800232c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7a5b      	ldrb	r3, [r3, #9]
 8002332:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002334:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7a1b      	ldrb	r3, [r3, #8]
 800233a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800233c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	7812      	ldrb	r2, [r2, #0]
 8002342:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002344:	4a07      	ldr	r2, [pc, #28]	; (8002364 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002346:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002348:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800234a:	e005      	b.n	8002358 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_MPU_ConfigRegion+0x84>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <HAL_MPU_ConfigRegion+0x84>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed90 	.word	0xe000ed90

08002368 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b098      	sub	sp, #96	; 0x60
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002370:	4a84      	ldr	r2, [pc, #528]	; (8002584 <HAL_FDCAN_Init+0x21c>)
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	4611      	mov	r1, r2
 8002378:	224c      	movs	r2, #76	; 0x4c
 800237a:	4618      	mov	r0, r3
 800237c:	f003 feec 	bl	8006158 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e1c6      	b.n	8002718 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a7e      	ldr	r2, [pc, #504]	; (8002588 <HAL_FDCAN_Init+0x220>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d106      	bne.n	80023a2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800239c:	461a      	mov	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe f974 	bl	80006a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0210 	bic.w	r2, r2, #16
 80023ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023cc:	f7ff fe04 	bl	8001fd8 <HAL_GetTick>
 80023d0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80023d2:	e014      	b.n	80023fe <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80023d4:	f7ff fe00 	bl	8001fd8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b0a      	cmp	r3, #10
 80023e0:	d90d      	bls.n	80023fe <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2203      	movs	r2, #3
 80023f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e18c      	b.n	8002718 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b08      	cmp	r3, #8
 800240a:	d0e3      	beq.n	80023d4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800241c:	f7ff fddc 	bl	8001fd8 <HAL_GetTick>
 8002420:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002422:	e014      	b.n	800244e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002424:	f7ff fdd8 	bl	8001fd8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b0a      	cmp	r3, #10
 8002430:	d90d      	bls.n	800244e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002438:	f043 0201 	orr.w	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2203      	movs	r2, #3
 8002446:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e164      	b.n	8002718 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0e3      	beq.n	8002424 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0202 	orr.w	r2, r2, #2
 800246a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7c1b      	ldrb	r3, [r3, #16]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d108      	bne.n	8002486 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002482:	619a      	str	r2, [r3, #24]
 8002484:	e007      	b.n	8002496 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002494:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	7c5b      	ldrb	r3, [r3, #17]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d108      	bne.n	80024b0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ac:	619a      	str	r2, [r3, #24]
 80024ae:	e007      	b.n	80024c0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024be:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7c9b      	ldrb	r3, [r3, #18]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d108      	bne.n	80024da <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024d6:	619a      	str	r2, [r3, #24]
 80024d8:	e007      	b.n	80024ea <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024e8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800250e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0210 	bic.w	r2, r2, #16
 800251e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d108      	bne.n	800253a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0204 	orr.w	r2, r2, #4
 8002536:	619a      	str	r2, [r3, #24]
 8002538:	e030      	b.n	800259c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d02c      	beq.n	800259c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d020      	beq.n	800258c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699a      	ldr	r2, [r3, #24]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002558:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0210 	orr.w	r2, r2, #16
 8002568:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d114      	bne.n	800259c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699a      	ldr	r2, [r3, #24]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0220 	orr.w	r2, r2, #32
 8002580:	619a      	str	r2, [r3, #24]
 8002582:	e00b      	b.n	800259c <HAL_FDCAN_Init+0x234>
 8002584:	080061a4 	.word	0x080061a4
 8002588:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0220 	orr.w	r2, r2, #32
 800259a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80025ac:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80025b4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	3b01      	subs	r3, #1
 80025be:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80025c4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80025c6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025d0:	d115      	bne.n	80025fe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	3b01      	subs	r3, #1
 80025de:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80025e0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	3b01      	subs	r3, #1
 80025e8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80025ea:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	3b01      	subs	r3, #1
 80025f4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80025fa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80025fc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002624:	4413      	add	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d011      	beq.n	800264e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002632:	f023 0107 	bic.w	r1, r3, #7
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	3360      	adds	r3, #96	; 0x60
 800263e:	443b      	add	r3, r7
 8002640:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d011      	beq.n	800267a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800265e:	f023 0107 	bic.w	r1, r3, #7
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	3360      	adds	r3, #96	; 0x60
 800266a:	443b      	add	r3, r7
 800266c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267e:	2b00      	cmp	r3, #0
 8002680:	d012      	beq.n	80026a8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800268a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	3360      	adds	r3, #96	; 0x60
 8002696:	443b      	add	r3, r7
 8002698:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800269c:	011a      	lsls	r2, r3, #4
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d012      	beq.n	80026d6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80026b8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	3360      	adds	r3, #96	; 0x60
 80026c4:	443b      	add	r3, r7
 80026c6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80026ca:	021a      	lsls	r2, r3, #8
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a11      	ldr	r2, [pc, #68]	; (8002720 <HAL_FDCAN_Init+0x3b8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d107      	bne.n	80026f0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f022 0203 	bic.w	r2, r2, #3
 80026ee:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fe1b 	bl	8003344 <FDCAN_CalcultateRamBlockAddresses>
 800270e:	4603      	mov	r3, r0
 8002710:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002714:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002718:	4618      	mov	r0, r3
 800271a:	3760      	adds	r7, #96	; 0x60
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	4000a000 	.word	0x4000a000

08002724 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002734:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d002      	beq.n	8002742 <HAL_FDCAN_ConfigFilter+0x1e>
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d157      	bne.n	80027f2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d12b      	bne.n	80027a2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b07      	cmp	r3, #7
 8002750:	d10d      	bne.n	800276e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800275e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002764:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8002766:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	e00e      	b.n	800278c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800277a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8002782:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e025      	b.n	80027ee <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	075a      	lsls	r2, r3, #29
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b07      	cmp	r3, #7
 80027b6:	d103      	bne.n	80027c0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	e006      	b.n	80027ce <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	079a      	lsls	r2, r3, #30
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4413      	add	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	3304      	adds	r3, #4
 80027e6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e008      	b.n	8002804 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027f8:	f043 0202 	orr.w	r2, r3, #2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
  }
}
 8002804:	4618      	mov	r0, r3
 8002806:	371c      	adds	r7, #28
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b01      	cmp	r3, #1
 8002828:	d110      	bne.n	800284c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8002832:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8002838:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8002844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	e008      	b.n	800285e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002852:	f043 0204 	orr.w	r2, r3, #4
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
  }
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d111      	bne.n	80028a2 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2202      	movs	r2, #2
 8002882:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0201 	bic.w	r2, r2, #1
 8002894:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e008      	b.n	80028b4 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028a8:	f043 0204 	orr.w	r2, r3, #4
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
  }
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d141      	bne.n	800295c <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028e0:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028ee:	f043 0220 	orr.w	r2, r3, #32
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e038      	b.n	800296e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d009      	beq.n	8002920 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002912:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e026      	b.n	800296e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002928:	0c1b      	lsrs	r3, r3, #16
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fe8a 	bl	8003650 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	fa01 f202 	lsl.w	r2, r1, r2
 8002948:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800294c:	2201      	movs	r2, #1
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	409a      	lsls	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e008      	b.n	800296e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002962:	f043 0208 	orr.w	r2, r3, #8
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002978:	b480      	push	{r7}
 800297a:	b08b      	sub	sp, #44	; 0x2c
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002990:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8002992:	7efb      	ldrb	r3, [r7, #27]
 8002994:	2b02      	cmp	r3, #2
 8002996:	f040 814b 	bne.w	8002c30 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d14d      	bne.n	8002a3c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80029a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d109      	bne.n	80029c4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b6:	f043 0220 	orr.w	r2, r3, #32
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e13e      	b.n	8002c42 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d109      	bne.n	80029e8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e12c      	b.n	8002c42 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029f0:	0e1b      	lsrs	r3, r3, #24
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d10b      	bne.n	8002a12 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a02:	0fdb      	lsrs	r3, r3, #31
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a0c:	d101      	bne.n	8002a12 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	4413      	add	r3, r2
 8002a24:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	69f9      	ldr	r1, [r7, #28]
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	e069      	b.n	8002b10 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b41      	cmp	r3, #65	; 0x41
 8002a40:	d14d      	bne.n	8002ade <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0ed      	b.n	8002c42 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e0db      	b.n	8002c42 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a92:	0e1b      	lsrs	r3, r3, #24
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002aa4:	0fdb      	lsrs	r3, r3, #31
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aae:	d101      	bne.n	8002ab4 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad0:	69f9      	ldr	r1, [r7, #28]
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
 8002adc:	e018      	b.n	8002b10 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d309      	bcc.n	8002afc <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aee:	f043 0220 	orr.w	r2, r3, #32
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0a2      	b.n	8002c42 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0c9b      	lsrs	r3, r3, #18
 8002b2a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e005      	b.n	8002b40 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0e1b      	lsrs	r3, r3, #24
 8002b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	0fda      	lsrs	r2, r3, #31
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	623b      	str	r3, [r7, #32]
 8002bb2:	e00a      	b.n	8002bca <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	441a      	add	r2, r3
 8002bba:	6839      	ldr	r1, [r7, #0]
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	440b      	add	r3, r1
 8002bc0:	7812      	ldrb	r2, [r2, #0]
 8002bc2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	623b      	str	r3, [r7, #32]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	0c1b      	lsrs	r3, r3, #16
 8002bd0:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d3eb      	bcc.n	8002bb4 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b40      	cmp	r3, #64	; 0x40
 8002be0:	d105      	bne.n	8002bee <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002bec:	e01e      	b.n	8002c2c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b41      	cmp	r3, #65	; 0x41
 8002bf2:	d105      	bne.n	8002c00 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002bfe:	e015      	b.n	8002c2c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b1f      	cmp	r3, #31
 8002c04:	d808      	bhi.n	8002c18 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c12:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002c16:	e009      	b.n	8002c2c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 021f 	and.w	r2, r3, #31
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2101      	movs	r1, #1
 8002c24:	fa01 f202 	lsl.w	r2, r1, r2
 8002c28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e008      	b.n	8002c42 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c36:	f043 0208 	orr.w	r2, r3, #8
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
  }
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	372c      	adds	r7, #44	; 0x2c
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	0800620c 	.word	0x0800620c

08002c54 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002c66:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d002      	beq.n	8002c74 <HAL_FDCAN_ActivateNotification+0x20>
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d155      	bne.n	8002d20 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d108      	bne.n	8002c94 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0201 	orr.w	r2, r2, #1
 8002c90:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c92:	e014      	b.n	8002cbe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d108      	bne.n	8002cb6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0202 	orr.w	r2, r2, #2
 8002cb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cb4:	e003      	b.n	8002cbe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2203      	movs	r2, #3
 8002cbc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d009      	beq.n	8002cdc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_FDCAN_ActivateNotification+0xec>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	6553      	str	r3, [r2, #84]	; 0x54
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	0f9b      	lsrs	r3, r3, #30
 8002d16:	490b      	ldr	r1, [pc, #44]	; (8002d44 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e008      	b.n	8002d32 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d26:	f043 0202 	orr.w	r2, r3, #2
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	3fcfffff 	.word	0x3fcfffff
 8002d44:	4000a800 	.word	0x4000a800

08002d48 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b096      	sub	sp, #88	; 0x58
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002d50:	4b9a      	ldr	r3, [pc, #616]	; (8002fbc <HAL_FDCAN_IRQHandler+0x274>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	079b      	lsls	r3, r3, #30
 8002d56:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002d58:	4b98      	ldr	r3, [pc, #608]	; (8002fbc <HAL_FDCAN_IRQHandler+0x274>)
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	079b      	lsls	r3, r3, #30
 8002d5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d60:	4013      	ands	r3, r2
 8002d62:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002d6e:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d78:	4013      	ands	r3, r2
 8002d7a:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d90:	4013      	ands	r3, r2
 8002d92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002da8:	4013      	ands	r3, r2
 8002daa:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002db6:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dca:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8002dce:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dd8:	4013      	ands	r3, r2
 8002dda:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d010      	beq.n	8002e1a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e0c:	651a      	str	r2, [r3, #80]	; 0x50
 8002e0e:	4b6b      	ldr	r3, [pc, #428]	; (8002fbc <HAL_FDCAN_IRQHandler+0x274>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fa49 	bl	80032ac <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1c:	0a9b      	lsrs	r3, r3, #10
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d01d      	beq.n	8002e62 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e28:	0a9b      	lsrs	r3, r3, #10
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d017      	beq.n	8002e62 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e46:	4013      	ands	r3, r2
 8002e48:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e52:	651a      	str	r2, [r3, #80]	; 0x50
 8002e54:	4b59      	ldr	r3, [pc, #356]	; (8002fbc <HAL_FDCAN_IRQHandler+0x274>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002e5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f9fc 	bl	800325a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00d      	beq.n	8002e84 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e6e:	4b54      	ldr	r3, [pc, #336]	; (8002fc0 <HAL_FDCAN_IRQHandler+0x278>)
 8002e70:	400b      	ands	r3, r1
 8002e72:	6513      	str	r3, [r2, #80]	; 0x50
 8002e74:	4a51      	ldr	r2, [pc, #324]	; (8002fbc <HAL_FDCAN_IRQHandler+0x274>)
 8002e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e78:	0f9b      	lsrs	r3, r3, #30
 8002e7a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002e7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f9c0 	bl	8003204 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00d      	beq.n	8002ea6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002e90:	4b4b      	ldr	r3, [pc, #300]	; (8002fc0 <HAL_FDCAN_IRQHandler+0x278>)
 8002e92:	400b      	ands	r3, r1
 8002e94:	6513      	str	r3, [r2, #80]	; 0x50
 8002e96:	4a49      	ldr	r2, [pc, #292]	; (8002fbc <HAL_FDCAN_IRQHandler+0x274>)
 8002e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e9a:	0f9b      	lsrs	r3, r3, #30
 8002e9c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002e9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f9ba 	bl	800321a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00d      	beq.n	8002ec8 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002eb2:	4b43      	ldr	r3, [pc, #268]	; (8002fc0 <HAL_FDCAN_IRQHandler+0x278>)
 8002eb4:	400b      	ands	r3, r1
 8002eb6:	6513      	str	r3, [r2, #80]	; 0x50
 8002eb8:	4a40      	ldr	r2, [pc, #256]	; (8002fbc <HAL_FDCAN_IRQHandler+0x274>)
 8002eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ebc:	0f9b      	lsrs	r3, r3, #30
 8002ebe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002ec0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd fa08 	bl	80002d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00d      	beq.n	8002eea <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002ed4:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <HAL_FDCAN_IRQHandler+0x278>)
 8002ed6:	400b      	ands	r3, r1
 8002ed8:	6513      	str	r3, [r2, #80]	; 0x50
 8002eda:	4a38      	ldr	r2, [pc, #224]	; (8002fbc <HAL_FDCAN_IRQHandler+0x274>)
 8002edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ede:	0f9b      	lsrs	r3, r3, #30
 8002ee0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002ee2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f9a3 	bl	8003230 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eec:	0adb      	lsrs	r3, r3, #11
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d010      	beq.n	8002f18 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	0adb      	lsrs	r3, r3, #11
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f0a:	651a      	str	r2, [r3, #80]	; 0x50
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <HAL_FDCAN_IRQHandler+0x274>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f997 	bl	8003246 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8002f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1a:	0a5b      	lsrs	r3, r3, #9
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01d      	beq.n	8002f60 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f26:	0a5b      	lsrs	r3, r3, #9
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d017      	beq.n	8002f60 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f44:	4013      	ands	r3, r2
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f50:	651a      	str	r2, [r3, #80]	; 0x50
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_FDCAN_IRQHandler+0x274>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fd f9fe 	bl	800035c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f62:	0cdb      	lsrs	r3, r3, #19
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d010      	beq.n	8002f8e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	0cdb      	lsrs	r3, r3, #19
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f80:	651a      	str	r2, [r3, #80]	; 0x50
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <HAL_FDCAN_IRQHandler+0x274>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f971 	bl	8003270 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d016      	beq.n	8002fc8 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9c:	0c1b      	lsrs	r3, r3, #16
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d010      	beq.n	8002fc8 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fae:	651a      	str	r2, [r3, #80]	; 0x50
 8002fb0:	4b02      	ldr	r3, [pc, #8]	; (8002fbc <HAL_FDCAN_IRQHandler+0x274>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	e004      	b.n	8002fc4 <HAL_FDCAN_IRQHandler+0x27c>
 8002fba:	bf00      	nop
 8002fbc:	4000a800 	.word	0x4000a800
 8002fc0:	3fcfffff 	.word	0x3fcfffff
 8002fc4:	f000 f95e 	bl	8003284 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fca:	0c9b      	lsrs	r3, r3, #18
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d010      	beq.n	8002ff6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	0c9b      	lsrs	r3, r3, #18
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002fe8:	651a      	str	r2, [r3, #80]	; 0x50
 8002fea:	4b83      	ldr	r3, [pc, #524]	; (80031f8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f951 	bl	8003298 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff8:	0c5b      	lsrs	r3, r3, #17
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d015      	beq.n	800302e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003004:	0c5b      	lsrs	r3, r3, #17
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00f      	beq.n	800302e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003016:	651a      	str	r2, [r3, #80]	; 0x50
 8003018:	4b77      	ldr	r3, [pc, #476]	; (80031f8 <HAL_FDCAN_IRQHandler+0x4b0>)
 800301a:	2200      	movs	r2, #0
 800301c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003024:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800302e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00d      	beq.n	8003050 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800303a:	4b70      	ldr	r3, [pc, #448]	; (80031fc <HAL_FDCAN_IRQHandler+0x4b4>)
 800303c:	400b      	ands	r3, r1
 800303e:	6513      	str	r3, [r2, #80]	; 0x50
 8003040:	4a6d      	ldr	r2, [pc, #436]	; (80031f8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003044:	0f9b      	lsrs	r3, r3, #30
 8003046:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003048:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f942 	bl	80032d4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003052:	2b00      	cmp	r3, #0
 8003054:	d011      	beq.n	800307a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800305c:	4b67      	ldr	r3, [pc, #412]	; (80031fc <HAL_FDCAN_IRQHandler+0x4b4>)
 800305e:	400b      	ands	r3, r1
 8003060:	6513      	str	r3, [r2, #80]	; 0x50
 8003062:	4a65      	ldr	r2, [pc, #404]	; (80031f8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003066:	0f9b      	lsrs	r3, r3, #30
 8003068:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a60      	ldr	r2, [pc, #384]	; (8003200 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	f040 80ac 	bne.w	80031de <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80a4 	beq.w	80031de <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030aa:	4013      	ands	r3, r2
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030c2:	4013      	ands	r3, r2
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030da:	4013      	ands	r3, r2
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80030e8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	6a3a      	ldr	r2, [r7, #32]
 80030f2:	4013      	ands	r3, r2
 80030f4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8003100:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	4013      	ands	r3, r2
 800310c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800312a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800312c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f8db 	bl	80032ea <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003140:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003142:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f8db 	bl	8003300 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d01a      	beq.n	800318c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	099b      	lsrs	r3, r3, #6
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d014      	beq.n	800318c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	b29b      	uxth	r3, r3
 800316c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003178:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2240      	movs	r2, #64	; 0x40
 8003180:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	6939      	ldr	r1, [r7, #16]
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f8c5 	bl	8003316 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003198:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800319a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f8c6 	bl	800332e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00b      	beq.n	80031c0 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	6a3a      	ldr	r2, [r7, #32]
 80031ae:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f869 	bl	80032c0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80031ee:	bf00      	nop
 80031f0:	3758      	adds	r7, #88	; 0x58
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	4000a800 	.word	0x4000a800
 80031fc:	3fcfffff 	.word	0x3fcfffff
 8003200:	4000a000 	.word	0x4000a000

08003204 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003316:	b480      	push	{r7}
 8003318:	b085      	sub	sp, #20
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003350:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800335a:	4ba7      	ldr	r3, [pc, #668]	; (80035f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800335c:	4013      	ands	r3, r2
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	0091      	lsls	r1, r2, #2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	430b      	orrs	r3, r1
 8003368:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003374:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	041a      	lsls	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	4413      	add	r3, r2
 8003390:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800339a:	4b97      	ldr	r3, [pc, #604]	; (80035f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800339c:	4013      	ands	r3, r2
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	0091      	lsls	r1, r2, #2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	430b      	orrs	r3, r1
 80033a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033bc:	041a      	lsls	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4413      	add	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80033dc:	4b86      	ldr	r3, [pc, #536]	; (80035f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80033de:	4013      	ands	r3, r2
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	0091      	lsls	r1, r2, #2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	430b      	orrs	r3, r1
 80033ea:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033f6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	041a      	lsls	r2, r3, #16
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	4413      	add	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003424:	4b74      	ldr	r3, [pc, #464]	; (80035f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003426:	4013      	ands	r3, r2
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	0091      	lsls	r1, r2, #2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	430b      	orrs	r3, r1
 8003432:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800343e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003446:	041a      	lsls	r2, r3, #16
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	4413      	add	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800346c:	4b62      	ldr	r3, [pc, #392]	; (80035f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800346e:	4013      	ands	r3, r2
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	0091      	lsls	r1, r2, #2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	430b      	orrs	r3, r1
 800347a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	4413      	add	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003498:	4b57      	ldr	r3, [pc, #348]	; (80035f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800349a:	4013      	ands	r3, r2
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	0091      	lsls	r1, r2, #2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034b2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ba:	041a      	lsls	r2, r3, #16
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	4413      	add	r3, r2
 80034d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80034da:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80034dc:	4013      	ands	r3, r2
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	0091      	lsls	r1, r2, #2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	430b      	orrs	r3, r1
 80034e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80034f4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	041a      	lsls	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003510:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003518:	061a      	lsls	r2, r3, #24
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003528:	4b34      	ldr	r3, [pc, #208]	; (80035fc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800352a:	4413      	add	r3, r2
 800352c:	009a      	lsls	r2, r3, #2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	441a      	add	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	441a      	add	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	441a      	add	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	441a      	add	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	441a      	add	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	441a      	add	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	441a      	add	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	441a      	add	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	4a04      	ldr	r2, [pc, #16]	; (8003600 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d915      	bls.n	8003620 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80035f4:	e006      	b.n	8003604 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80035f6:	bf00      	nop
 80035f8:	ffff0003 	.word	0xffff0003
 80035fc:	10002b00 	.word	0x10002b00
 8003600:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800360a:	f043 0220 	orr.w	r2, r3, #32
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2203      	movs	r2, #3
 8003618:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e010      	b.n	8003642 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	e005      	b.n	8003634 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3304      	adds	r3, #4
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	429a      	cmp	r2, r3
 800363e:	d3f3      	bcc.n	8003628 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop

08003650 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800366e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003676:	4313      	orrs	r3, r2
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	e00a      	b.n	8003692 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003684:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800368a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800368c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003690:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800369c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80036a2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80036a8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036bc:	6839      	ldr	r1, [r7, #0]
 80036be:	fb01 f303 	mul.w	r3, r1, r3
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	3304      	adds	r3, #4
 80036d2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	3304      	adds	r3, #4
 80036de:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e020      	b.n	8003728 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	3303      	adds	r3, #3
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3302      	adds	r3, #2
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	440b      	add	r3, r1
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80036fe:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	3301      	adds	r3, #1
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	440b      	add	r3, r1
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800370c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	440a      	add	r2, r1
 8003714:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003716:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	3304      	adds	r3, #4
 8003720:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	3304      	adds	r3, #4
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	4a06      	ldr	r2, [pc, #24]	; (8003748 <FDCAN_CopyMessageToRAM+0xf8>)
 8003730:	5cd3      	ldrb	r3, [r2, r3]
 8003732:	461a      	mov	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	4293      	cmp	r3, r2
 8003738:	d3d5      	bcc.n	80036e6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	3724      	adds	r7, #36	; 0x24
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	0800620c 	.word	0x0800620c

0800374c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	; 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800375a:	4b89      	ldr	r3, [pc, #548]	; (8003980 <HAL_GPIO_Init+0x234>)
 800375c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800375e:	e194      	b.n	8003a8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	2101      	movs	r1, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa01 f303 	lsl.w	r3, r1, r3
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 8186 	beq.w	8003a84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b01      	cmp	r3, #1
 8003782:	d005      	beq.n	8003790 <HAL_GPIO_Init+0x44>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d130      	bne.n	80037f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2203      	movs	r2, #3
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037c6:	2201      	movs	r2, #1
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	091b      	lsrs	r3, r3, #4
 80037dc:	f003 0201 	and.w	r2, r3, #1
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d017      	beq.n	800382e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	2203      	movs	r2, #3
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d123      	bne.n	8003882 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	08da      	lsrs	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3208      	adds	r2, #8
 8003842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	220f      	movs	r2, #15
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	08da      	lsrs	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3208      	adds	r2, #8
 800387c:	69b9      	ldr	r1, [r7, #24]
 800387e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	2203      	movs	r2, #3
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0203 	and.w	r2, r3, #3
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80e0 	beq.w	8003a84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c4:	4b2f      	ldr	r3, [pc, #188]	; (8003984 <HAL_GPIO_Init+0x238>)
 80038c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038ca:	4a2e      	ldr	r2, [pc, #184]	; (8003984 <HAL_GPIO_Init+0x238>)
 80038cc:	f043 0302 	orr.w	r3, r3, #2
 80038d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80038d4:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <HAL_GPIO_Init+0x238>)
 80038d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038e2:	4a29      	ldr	r2, [pc, #164]	; (8003988 <HAL_GPIO_Init+0x23c>)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	3302      	adds	r3, #2
 80038ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	220f      	movs	r2, #15
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a20      	ldr	r2, [pc, #128]	; (800398c <HAL_GPIO_Init+0x240>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d052      	beq.n	80039b4 <HAL_GPIO_Init+0x268>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1f      	ldr	r2, [pc, #124]	; (8003990 <HAL_GPIO_Init+0x244>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d031      	beq.n	800397a <HAL_GPIO_Init+0x22e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a1e      	ldr	r2, [pc, #120]	; (8003994 <HAL_GPIO_Init+0x248>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d02b      	beq.n	8003976 <HAL_GPIO_Init+0x22a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a1d      	ldr	r2, [pc, #116]	; (8003998 <HAL_GPIO_Init+0x24c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d025      	beq.n	8003972 <HAL_GPIO_Init+0x226>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1c      	ldr	r2, [pc, #112]	; (800399c <HAL_GPIO_Init+0x250>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01f      	beq.n	800396e <HAL_GPIO_Init+0x222>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1b      	ldr	r2, [pc, #108]	; (80039a0 <HAL_GPIO_Init+0x254>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d019      	beq.n	800396a <HAL_GPIO_Init+0x21e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <HAL_GPIO_Init+0x258>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <HAL_GPIO_Init+0x21a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <HAL_GPIO_Init+0x25c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00d      	beq.n	8003962 <HAL_GPIO_Init+0x216>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a18      	ldr	r2, [pc, #96]	; (80039ac <HAL_GPIO_Init+0x260>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d007      	beq.n	800395e <HAL_GPIO_Init+0x212>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <HAL_GPIO_Init+0x264>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <HAL_GPIO_Init+0x20e>
 8003956:	2309      	movs	r3, #9
 8003958:	e02d      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 800395a:	230a      	movs	r3, #10
 800395c:	e02b      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 800395e:	2308      	movs	r3, #8
 8003960:	e029      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 8003962:	2307      	movs	r3, #7
 8003964:	e027      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 8003966:	2306      	movs	r3, #6
 8003968:	e025      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 800396a:	2305      	movs	r3, #5
 800396c:	e023      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 800396e:	2304      	movs	r3, #4
 8003970:	e021      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 8003972:	2303      	movs	r3, #3
 8003974:	e01f      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 8003976:	2302      	movs	r3, #2
 8003978:	e01d      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 800397a:	2301      	movs	r3, #1
 800397c:	e01b      	b.n	80039b6 <HAL_GPIO_Init+0x26a>
 800397e:	bf00      	nop
 8003980:	58000080 	.word	0x58000080
 8003984:	58024400 	.word	0x58024400
 8003988:	58000400 	.word	0x58000400
 800398c:	58020000 	.word	0x58020000
 8003990:	58020400 	.word	0x58020400
 8003994:	58020800 	.word	0x58020800
 8003998:	58020c00 	.word	0x58020c00
 800399c:	58021000 	.word	0x58021000
 80039a0:	58021400 	.word	0x58021400
 80039a4:	58021800 	.word	0x58021800
 80039a8:	58021c00 	.word	0x58021c00
 80039ac:	58022000 	.word	0x58022000
 80039b0:	58022400 	.word	0x58022400
 80039b4:	2300      	movs	r3, #0
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	f002 0203 	and.w	r2, r2, #3
 80039bc:	0092      	lsls	r2, r2, #2
 80039be:	4093      	lsls	r3, r2
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039c6:	4938      	ldr	r1, [pc, #224]	; (8003aa8 <HAL_GPIO_Init+0x35c>)
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	3302      	adds	r3, #2
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4013      	ands	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	3301      	adds	r3, #1
 8003a88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f47f ae63 	bne.w	8003760 <HAL_GPIO_Init+0x14>
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	bf00      	nop
 8003a9e:	3724      	adds	r7, #36	; 0x24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	58000400 	.word	0x58000400

08003aac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003ab4:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_PWREx_ConfigSupply+0x70>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d00a      	beq.n	8003ad6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ac0:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <HAL_PWREx_ConfigSupply+0x70>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d001      	beq.n	8003ad2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e01f      	b.n	8003b12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e01d      	b.n	8003b12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ad6:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <HAL_PWREx_ConfigSupply+0x70>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f023 0207 	bic.w	r2, r3, #7
 8003ade:	490f      	ldr	r1, [pc, #60]	; (8003b1c <HAL_PWREx_ConfigSupply+0x70>)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003ae6:	f7fe fa77 	bl	8001fd8 <HAL_GetTick>
 8003aea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003aec:	e009      	b.n	8003b02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003aee:	f7fe fa73 	bl	8001fd8 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003afc:	d901      	bls.n	8003b02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e007      	b.n	8003b12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_PWREx_ConfigSupply+0x70>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b0e:	d1ee      	bne.n	8003aee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	58024800 	.word	0x58024800

08003b20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	; 0x30
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f000 bc48 	b.w	80043c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8088 	beq.w	8003c52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b42:	4b99      	ldr	r3, [pc, #612]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b4c:	4b96      	ldr	r3, [pc, #600]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d007      	beq.n	8003b68 <HAL_RCC_OscConfig+0x48>
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	2b18      	cmp	r3, #24
 8003b5c:	d111      	bne.n	8003b82 <HAL_RCC_OscConfig+0x62>
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d10c      	bne.n	8003b82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b68:	4b8f      	ldr	r3, [pc, #572]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d06d      	beq.n	8003c50 <HAL_RCC_OscConfig+0x130>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d169      	bne.n	8003c50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f000 bc21 	b.w	80043c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8a:	d106      	bne.n	8003b9a <HAL_RCC_OscConfig+0x7a>
 8003b8c:	4b86      	ldr	r3, [pc, #536]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a85      	ldr	r2, [pc, #532]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	e02e      	b.n	8003bf8 <HAL_RCC_OscConfig+0xd8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x9c>
 8003ba2:	4b81      	ldr	r3, [pc, #516]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a80      	ldr	r2, [pc, #512]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b7e      	ldr	r3, [pc, #504]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a7d      	ldr	r2, [pc, #500]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e01d      	b.n	8003bf8 <HAL_RCC_OscConfig+0xd8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bc4:	d10c      	bne.n	8003be0 <HAL_RCC_OscConfig+0xc0>
 8003bc6:	4b78      	ldr	r3, [pc, #480]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a77      	ldr	r2, [pc, #476]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	4b75      	ldr	r3, [pc, #468]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a74      	ldr	r2, [pc, #464]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e00b      	b.n	8003bf8 <HAL_RCC_OscConfig+0xd8>
 8003be0:	4b71      	ldr	r3, [pc, #452]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a70      	ldr	r2, [pc, #448]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	4b6e      	ldr	r3, [pc, #440]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a6d      	ldr	r2, [pc, #436]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d013      	beq.n	8003c28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fe f9ea 	bl	8001fd8 <HAL_GetTick>
 8003c04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c08:	f7fe f9e6 	bl	8001fd8 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	; 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e3d4      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c1a:	4b63      	ldr	r3, [pc, #396]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0xe8>
 8003c26:	e014      	b.n	8003c52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fe f9d6 	bl	8001fd8 <HAL_GetTick>
 8003c2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c30:	f7fe f9d2 	bl	8001fd8 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	; 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e3c0      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c42:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x110>
 8003c4e:	e000      	b.n	8003c52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80ca 	beq.w	8003df4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c60:	4b51      	ldr	r3, [pc, #324]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c6a:	4b4f      	ldr	r3, [pc, #316]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <HAL_RCC_OscConfig+0x166>
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	2b18      	cmp	r3, #24
 8003c7a:	d156      	bne.n	8003d2a <HAL_RCC_OscConfig+0x20a>
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d151      	bne.n	8003d2a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c86:	4b48      	ldr	r3, [pc, #288]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d005      	beq.n	8003c9e <HAL_RCC_OscConfig+0x17e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e392      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c9e:	4b42      	ldr	r3, [pc, #264]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 0219 	bic.w	r2, r3, #25
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	493f      	ldr	r1, [pc, #252]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fe f992 	bl	8001fd8 <HAL_GetTick>
 8003cb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb8:	f7fe f98e 	bl	8001fd8 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e37c      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cca:	4b37      	ldr	r3, [pc, #220]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	f7fe f9af 	bl	8002038 <HAL_GetREVID>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d817      	bhi.n	8003d14 <HAL_RCC_OscConfig+0x1f4>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d108      	bne.n	8003cfe <HAL_RCC_OscConfig+0x1de>
 8003cec:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003cf4:	4a2c      	ldr	r2, [pc, #176]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cfc:	e07a      	b.n	8003df4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfe:	4b2a      	ldr	r3, [pc, #168]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	031b      	lsls	r3, r3, #12
 8003d0c:	4926      	ldr	r1, [pc, #152]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d12:	e06f      	b.n	8003df4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d14:	4b24      	ldr	r3, [pc, #144]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	061b      	lsls	r3, r3, #24
 8003d22:	4921      	ldr	r1, [pc, #132]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d28:	e064      	b.n	8003df4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d047      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d32:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 0219 	bic.w	r2, r3, #25
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	491a      	ldr	r1, [pc, #104]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fe f948 	bl	8001fd8 <HAL_GetTick>
 8003d48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d4c:	f7fe f944 	bl	8001fd8 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e332      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6a:	f7fe f965 	bl	8002038 <HAL_GetREVID>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d819      	bhi.n	8003dac <HAL_RCC_OscConfig+0x28c>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	d108      	bne.n	8003d92 <HAL_RCC_OscConfig+0x272>
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d88:	4a07      	ldr	r2, [pc, #28]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d8e:	6053      	str	r3, [r2, #4]
 8003d90:	e030      	b.n	8003df4 <HAL_RCC_OscConfig+0x2d4>
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	031b      	lsls	r3, r3, #12
 8003da0:	4901      	ldr	r1, [pc, #4]	; (8003da8 <HAL_RCC_OscConfig+0x288>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]
 8003da6:	e025      	b.n	8003df4 <HAL_RCC_OscConfig+0x2d4>
 8003da8:	58024400 	.word	0x58024400
 8003dac:	4b9a      	ldr	r3, [pc, #616]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	061b      	lsls	r3, r3, #24
 8003dba:	4997      	ldr	r1, [pc, #604]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
 8003dc0:	e018      	b.n	8003df4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc2:	4b95      	ldr	r3, [pc, #596]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a94      	ldr	r2, [pc, #592]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fe f903 	bl	8001fd8 <HAL_GetTick>
 8003dd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd6:	f7fe f8ff 	bl	8001fd8 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e2ed      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003de8:	4b8b      	ldr	r3, [pc, #556]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f0      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80a9 	beq.w	8003f54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e02:	4b85      	ldr	r3, [pc, #532]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e0c:	4b82      	ldr	r3, [pc, #520]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d007      	beq.n	8003e28 <HAL_RCC_OscConfig+0x308>
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b18      	cmp	r3, #24
 8003e1c:	d13a      	bne.n	8003e94 <HAL_RCC_OscConfig+0x374>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d135      	bne.n	8003e94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e28:	4b7b      	ldr	r3, [pc, #492]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_RCC_OscConfig+0x320>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	2b80      	cmp	r3, #128	; 0x80
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e2c1      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e40:	f7fe f8fa 	bl	8002038 <HAL_GetREVID>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d817      	bhi.n	8003e7e <HAL_RCC_OscConfig+0x35e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d108      	bne.n	8003e68 <HAL_RCC_OscConfig+0x348>
 8003e56:	4b70      	ldr	r3, [pc, #448]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e5e:	4a6e      	ldr	r2, [pc, #440]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003e60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e64:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e66:	e075      	b.n	8003f54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e68:	4b6b      	ldr	r3, [pc, #428]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	069b      	lsls	r3, r3, #26
 8003e76:	4968      	ldr	r1, [pc, #416]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e7c:	e06a      	b.n	8003f54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e7e:	4b66      	ldr	r3, [pc, #408]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	061b      	lsls	r3, r3, #24
 8003e8c:	4962      	ldr	r1, [pc, #392]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e92:	e05f      	b.n	8003f54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d042      	beq.n	8003f22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e9c:	4b5e      	ldr	r3, [pc, #376]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a5d      	ldr	r2, [pc, #372]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe f896 	bl	8001fd8 <HAL_GetTick>
 8003eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003eb0:	f7fe f892 	bl	8001fd8 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e280      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ec2:	4b55      	ldr	r3, [pc, #340]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ece:	f7fe f8b3 	bl	8002038 <HAL_GetREVID>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d817      	bhi.n	8003f0c <HAL_RCC_OscConfig+0x3ec>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d108      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x3d6>
 8003ee4:	4b4c      	ldr	r3, [pc, #304]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003eec:	4a4a      	ldr	r2, [pc, #296]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003eee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ef2:	6053      	str	r3, [r2, #4]
 8003ef4:	e02e      	b.n	8003f54 <HAL_RCC_OscConfig+0x434>
 8003ef6:	4b48      	ldr	r3, [pc, #288]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	069b      	lsls	r3, r3, #26
 8003f04:	4944      	ldr	r1, [pc, #272]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	604b      	str	r3, [r1, #4]
 8003f0a:	e023      	b.n	8003f54 <HAL_RCC_OscConfig+0x434>
 8003f0c:	4b42      	ldr	r3, [pc, #264]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	061b      	lsls	r3, r3, #24
 8003f1a:	493f      	ldr	r1, [pc, #252]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60cb      	str	r3, [r1, #12]
 8003f20:	e018      	b.n	8003f54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f22:	4b3d      	ldr	r3, [pc, #244]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a3c      	ldr	r2, [pc, #240]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2e:	f7fe f853 	bl	8001fd8 <HAL_GetTick>
 8003f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f36:	f7fe f84f 	bl	8001fd8 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e23d      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f48:	4b33      	ldr	r3, [pc, #204]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f0      	bne.n	8003f36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d036      	beq.n	8003fce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d019      	beq.n	8003f9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f68:	4b2b      	ldr	r3, [pc, #172]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6c:	4a2a      	ldr	r2, [pc, #168]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7fe f830 	bl	8001fd8 <HAL_GetTick>
 8003f78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f7c:	f7fe f82c 	bl	8001fd8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e21a      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f8e:	4b22      	ldr	r3, [pc, #136]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x45c>
 8003f9a:	e018      	b.n	8003fce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f9c:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa0:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fe f816 	bl	8001fd8 <HAL_GetTick>
 8003fac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb0:	f7fe f812 	bl	8001fd8 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e200      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fc2:	4b15      	ldr	r3, [pc, #84]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d039      	beq.n	800404e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d01c      	beq.n	800401c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a0c      	ldr	r2, [pc, #48]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 8003fe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fee:	f7fd fff3 	bl	8001fd8 <HAL_GetTick>
 8003ff2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ff6:	f7fd ffef 	bl	8001fd8 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e1dd      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <HAL_RCC_OscConfig+0x4f8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x4d6>
 8004014:	e01b      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
 8004016:	bf00      	nop
 8004018:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800401c:	4b9b      	ldr	r3, [pc, #620]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a9a      	ldr	r2, [pc, #616]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004026:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004028:	f7fd ffd6 	bl	8001fd8 <HAL_GetTick>
 800402c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004030:	f7fd ffd2 	bl	8001fd8 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e1c0      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004042:	4b92      	ldr	r3, [pc, #584]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8081 	beq.w	800415e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800405c:	4b8c      	ldr	r3, [pc, #560]	; (8004290 <HAL_RCC_OscConfig+0x770>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a8b      	ldr	r2, [pc, #556]	; (8004290 <HAL_RCC_OscConfig+0x770>)
 8004062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004066:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004068:	f7fd ffb6 	bl	8001fd8 <HAL_GetTick>
 800406c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004070:	f7fd ffb2 	bl	8001fd8 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e1a0      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004082:	4b83      	ldr	r3, [pc, #524]	; (8004290 <HAL_RCC_OscConfig+0x770>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d106      	bne.n	80040a4 <HAL_RCC_OscConfig+0x584>
 8004096:	4b7d      	ldr	r3, [pc, #500]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	4a7c      	ldr	r2, [pc, #496]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	6713      	str	r3, [r2, #112]	; 0x70
 80040a2:	e02d      	b.n	8004100 <HAL_RCC_OscConfig+0x5e0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10c      	bne.n	80040c6 <HAL_RCC_OscConfig+0x5a6>
 80040ac:	4b77      	ldr	r3, [pc, #476]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b0:	4a76      	ldr	r2, [pc, #472]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	6713      	str	r3, [r2, #112]	; 0x70
 80040b8:	4b74      	ldr	r3, [pc, #464]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	4a73      	ldr	r2, [pc, #460]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80040be:	f023 0304 	bic.w	r3, r3, #4
 80040c2:	6713      	str	r3, [r2, #112]	; 0x70
 80040c4:	e01c      	b.n	8004100 <HAL_RCC_OscConfig+0x5e0>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b05      	cmp	r3, #5
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x5c8>
 80040ce:	4b6f      	ldr	r3, [pc, #444]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a6e      	ldr	r2, [pc, #440]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80040d4:	f043 0304 	orr.w	r3, r3, #4
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
 80040da:	4b6c      	ldr	r3, [pc, #432]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a6b      	ldr	r2, [pc, #428]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_OscConfig+0x5e0>
 80040e8:	4b68      	ldr	r3, [pc, #416]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ec:	4a67      	ldr	r2, [pc, #412]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	6713      	str	r3, [r2, #112]	; 0x70
 80040f4:	4b65      	ldr	r3, [pc, #404]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	4a64      	ldr	r2, [pc, #400]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80040fa:	f023 0304 	bic.w	r3, r3, #4
 80040fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004108:	f7fd ff66 	bl	8001fd8 <HAL_GetTick>
 800410c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800410e:	e00a      	b.n	8004126 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fd ff62 	bl	8001fd8 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	; 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e14e      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004126:	4b59      	ldr	r3, [pc, #356]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0ee      	beq.n	8004110 <HAL_RCC_OscConfig+0x5f0>
 8004132:	e014      	b.n	800415e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fd ff50 	bl	8001fd8 <HAL_GetTick>
 8004138:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800413a:	e00a      	b.n	8004152 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7fd ff4c 	bl	8001fd8 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	; 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e138      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004152:	4b4e      	ldr	r3, [pc, #312]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1ee      	bne.n	800413c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 812d 	beq.w	80043c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004168:	4b48      	ldr	r3, [pc, #288]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004170:	2b18      	cmp	r3, #24
 8004172:	f000 80bd 	beq.w	80042f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	2b02      	cmp	r3, #2
 800417c:	f040 809e 	bne.w	80042bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004180:	4b42      	ldr	r3, [pc, #264]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a41      	ldr	r2, [pc, #260]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800418a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd ff24 	bl	8001fd8 <HAL_GetTick>
 8004190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004194:	f7fd ff20 	bl	8001fd8 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e10e      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041a6:	4b39      	ldr	r3, [pc, #228]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041b2:	4b36      	ldr	r3, [pc, #216]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80041b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041b6:	4b37      	ldr	r3, [pc, #220]	; (8004294 <HAL_RCC_OscConfig+0x774>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041c2:	0112      	lsls	r2, r2, #4
 80041c4:	430a      	orrs	r2, r1
 80041c6:	4931      	ldr	r1, [pc, #196]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	628b      	str	r3, [r1, #40]	; 0x28
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	3b01      	subs	r3, #1
 80041d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041da:	3b01      	subs	r3, #1
 80041dc:	025b      	lsls	r3, r3, #9
 80041de:	b29b      	uxth	r3, r3
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	3b01      	subs	r3, #1
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f4:	3b01      	subs	r3, #1
 80041f6:	061b      	lsls	r3, r3, #24
 80041f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041fc:	4923      	ldr	r1, [pc, #140]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004202:	4b22      	ldr	r3, [pc, #136]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	4a21      	ldr	r2, [pc, #132]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800420e:	4b1f      	ldr	r3, [pc, #124]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004212:	4b21      	ldr	r3, [pc, #132]	; (8004298 <HAL_RCC_OscConfig+0x778>)
 8004214:	4013      	ands	r3, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800421a:	00d2      	lsls	r2, r2, #3
 800421c:	491b      	ldr	r1, [pc, #108]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 800421e:	4313      	orrs	r3, r2
 8004220:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004222:	4b1a      	ldr	r3, [pc, #104]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	f023 020c 	bic.w	r2, r3, #12
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	4917      	ldr	r1, [pc, #92]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004230:	4313      	orrs	r3, r2
 8004232:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004234:	4b15      	ldr	r3, [pc, #84]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	f023 0202 	bic.w	r2, r3, #2
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004240:	4912      	ldr	r1, [pc, #72]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004242:	4313      	orrs	r3, r2
 8004244:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004246:	4b11      	ldr	r3, [pc, #68]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	4a10      	ldr	r2, [pc, #64]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 800424c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004250:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004252:	4b0e      	ldr	r3, [pc, #56]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	4a0d      	ldr	r2, [pc, #52]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800425e:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	4a0a      	ldr	r2, [pc, #40]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004268:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800426a:	4b08      	ldr	r3, [pc, #32]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	4a07      	ldr	r2, [pc, #28]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a04      	ldr	r2, [pc, #16]	; (800428c <HAL_RCC_OscConfig+0x76c>)
 800427c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004282:	f7fd fea9 	bl	8001fd8 <HAL_GetTick>
 8004286:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004288:	e011      	b.n	80042ae <HAL_RCC_OscConfig+0x78e>
 800428a:	bf00      	nop
 800428c:	58024400 	.word	0x58024400
 8004290:	58024800 	.word	0x58024800
 8004294:	fffffc0c 	.word	0xfffffc0c
 8004298:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429c:	f7fd fe9c 	bl	8001fd8 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e08a      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042ae:	4b47      	ldr	r3, [pc, #284]	; (80043cc <HAL_RCC_OscConfig+0x8ac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x77c>
 80042ba:	e082      	b.n	80043c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042bc:	4b43      	ldr	r3, [pc, #268]	; (80043cc <HAL_RCC_OscConfig+0x8ac>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a42      	ldr	r2, [pc, #264]	; (80043cc <HAL_RCC_OscConfig+0x8ac>)
 80042c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fd fe86 	bl	8001fd8 <HAL_GetTick>
 80042cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d0:	f7fd fe82 	bl	8001fd8 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e070      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042e2:	4b3a      	ldr	r3, [pc, #232]	; (80043cc <HAL_RCC_OscConfig+0x8ac>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0x7b0>
 80042ee:	e068      	b.n	80043c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80042f0:	4b36      	ldr	r3, [pc, #216]	; (80043cc <HAL_RCC_OscConfig+0x8ac>)
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80042f6:	4b35      	ldr	r3, [pc, #212]	; (80043cc <HAL_RCC_OscConfig+0x8ac>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2b01      	cmp	r3, #1
 8004302:	d031      	beq.n	8004368 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f003 0203 	and.w	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430e:	429a      	cmp	r2, r3
 8004310:	d12a      	bne.n	8004368 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431e:	429a      	cmp	r2, r3
 8004320:	d122      	bne.n	8004368 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d11a      	bne.n	8004368 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	0a5b      	lsrs	r3, r3, #9
 8004336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004340:	429a      	cmp	r2, r3
 8004342:	d111      	bne.n	8004368 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	0c1b      	lsrs	r3, r3, #16
 8004348:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d108      	bne.n	8004368 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	0e1b      	lsrs	r3, r3, #24
 800435a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004362:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e02b      	b.n	80043c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800436c:	4b17      	ldr	r3, [pc, #92]	; (80043cc <HAL_RCC_OscConfig+0x8ac>)
 800436e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004370:	08db      	lsrs	r3, r3, #3
 8004372:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004376:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	429a      	cmp	r2, r3
 8004380:	d01f      	beq.n	80043c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004382:	4b12      	ldr	r3, [pc, #72]	; (80043cc <HAL_RCC_OscConfig+0x8ac>)
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	4a11      	ldr	r2, [pc, #68]	; (80043cc <HAL_RCC_OscConfig+0x8ac>)
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800438e:	f7fd fe23 	bl	8001fd8 <HAL_GetTick>
 8004392:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004394:	bf00      	nop
 8004396:	f7fd fe1f 	bl	8001fd8 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	4293      	cmp	r3, r2
 80043a0:	d0f9      	beq.n	8004396 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043a2:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <HAL_RCC_OscConfig+0x8ac>)
 80043a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <HAL_RCC_OscConfig+0x8b0>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043ae:	00d2      	lsls	r2, r2, #3
 80043b0:	4906      	ldr	r1, [pc, #24]	; (80043cc <HAL_RCC_OscConfig+0x8ac>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_RCC_OscConfig+0x8ac>)
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	4a04      	ldr	r2, [pc, #16]	; (80043cc <HAL_RCC_OscConfig+0x8ac>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3730      	adds	r7, #48	; 0x30
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	58024400 	.word	0x58024400
 80043d0:	ffff0007 	.word	0xffff0007

080043d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e19c      	b.n	8004722 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043e8:	4b8a      	ldr	r3, [pc, #552]	; (8004614 <HAL_RCC_ClockConfig+0x240>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d910      	bls.n	8004418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f6:	4b87      	ldr	r3, [pc, #540]	; (8004614 <HAL_RCC_ClockConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 020f 	bic.w	r2, r3, #15
 80043fe:	4985      	ldr	r1, [pc, #532]	; (8004614 <HAL_RCC_ClockConfig+0x240>)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	4313      	orrs	r3, r2
 8004404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b83      	ldr	r3, [pc, #524]	; (8004614 <HAL_RCC_ClockConfig+0x240>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e184      	b.n	8004722 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d010      	beq.n	8004446 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	4b7b      	ldr	r3, [pc, #492]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004430:	429a      	cmp	r2, r3
 8004432:	d908      	bls.n	8004446 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004434:	4b78      	ldr	r3, [pc, #480]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	4975      	ldr	r1, [pc, #468]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 8004442:	4313      	orrs	r3, r2
 8004444:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d010      	beq.n	8004474 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	4b70      	ldr	r3, [pc, #448]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800445e:	429a      	cmp	r2, r3
 8004460:	d908      	bls.n	8004474 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004462:	4b6d      	ldr	r3, [pc, #436]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	496a      	ldr	r1, [pc, #424]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 8004470:	4313      	orrs	r3, r2
 8004472:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b00      	cmp	r3, #0
 800447e:	d010      	beq.n	80044a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699a      	ldr	r2, [r3, #24]
 8004484:	4b64      	ldr	r3, [pc, #400]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800448c:	429a      	cmp	r2, r3
 800448e:	d908      	bls.n	80044a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004490:	4b61      	ldr	r3, [pc, #388]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	495e      	ldr	r1, [pc, #376]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d010      	beq.n	80044d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	4b59      	ldr	r3, [pc, #356]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d908      	bls.n	80044d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80044be:	4b56      	ldr	r3, [pc, #344]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	4953      	ldr	r1, [pc, #332]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d010      	beq.n	80044fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	4b4d      	ldr	r3, [pc, #308]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d908      	bls.n	80044fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ec:	4b4a      	ldr	r3, [pc, #296]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f023 020f 	bic.w	r2, r3, #15
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4947      	ldr	r1, [pc, #284]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d055      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800450a:	4b43      	ldr	r3, [pc, #268]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	4940      	ldr	r1, [pc, #256]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 8004518:	4313      	orrs	r3, r2
 800451a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d107      	bne.n	8004534 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004524:	4b3c      	ldr	r3, [pc, #240]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d121      	bne.n	8004574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0f6      	b.n	8004722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b03      	cmp	r3, #3
 800453a:	d107      	bne.n	800454c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800453c:	4b36      	ldr	r3, [pc, #216]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d115      	bne.n	8004574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0ea      	b.n	8004722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d107      	bne.n	8004564 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004554:	4b30      	ldr	r3, [pc, #192]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0de      	b.n	8004722 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004564:	4b2c      	ldr	r3, [pc, #176]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0d6      	b.n	8004722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004574:	4b28      	ldr	r3, [pc, #160]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f023 0207 	bic.w	r2, r3, #7
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4925      	ldr	r1, [pc, #148]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 8004582:	4313      	orrs	r3, r2
 8004584:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004586:	f7fd fd27 	bl	8001fd8 <HAL_GetTick>
 800458a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458c:	e00a      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800458e:	f7fd fd23 	bl	8001fd8 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	f241 3288 	movw	r2, #5000	; 0x1388
 800459c:	4293      	cmp	r3, r2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e0be      	b.n	8004722 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a4:	4b1c      	ldr	r3, [pc, #112]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d1eb      	bne.n	800458e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d010      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d208      	bcs.n	80045e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d2:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f023 020f 	bic.w	r2, r3, #15
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	490e      	ldr	r1, [pc, #56]	; (8004618 <HAL_RCC_ClockConfig+0x244>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RCC_ClockConfig+0x240>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d214      	bcs.n	800461c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <HAL_RCC_ClockConfig+0x240>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 020f 	bic.w	r2, r3, #15
 80045fa:	4906      	ldr	r1, [pc, #24]	; (8004614 <HAL_RCC_ClockConfig+0x240>)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004602:	4b04      	ldr	r3, [pc, #16]	; (8004614 <HAL_RCC_ClockConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d005      	beq.n	800461c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e086      	b.n	8004722 <HAL_RCC_ClockConfig+0x34e>
 8004614:	52002000 	.word	0x52002000
 8004618:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d010      	beq.n	800464a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_RCC_ClockConfig+0x358>)
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004634:	429a      	cmp	r2, r3
 8004636:	d208      	bcs.n	800464a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004638:	4b3c      	ldr	r3, [pc, #240]	; (800472c <HAL_RCC_ClockConfig+0x358>)
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	4939      	ldr	r1, [pc, #228]	; (800472c <HAL_RCC_ClockConfig+0x358>)
 8004646:	4313      	orrs	r3, r2
 8004648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d010      	beq.n	8004678 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	4b34      	ldr	r3, [pc, #208]	; (800472c <HAL_RCC_ClockConfig+0x358>)
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004662:	429a      	cmp	r2, r3
 8004664:	d208      	bcs.n	8004678 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004666:	4b31      	ldr	r3, [pc, #196]	; (800472c <HAL_RCC_ClockConfig+0x358>)
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	492e      	ldr	r1, [pc, #184]	; (800472c <HAL_RCC_ClockConfig+0x358>)
 8004674:	4313      	orrs	r3, r2
 8004676:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	d010      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	4b28      	ldr	r3, [pc, #160]	; (800472c <HAL_RCC_ClockConfig+0x358>)
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004690:	429a      	cmp	r2, r3
 8004692:	d208      	bcs.n	80046a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004694:	4b25      	ldr	r3, [pc, #148]	; (800472c <HAL_RCC_ClockConfig+0x358>)
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	4922      	ldr	r1, [pc, #136]	; (800472c <HAL_RCC_ClockConfig+0x358>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d010      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69da      	ldr	r2, [r3, #28]
 80046b6:	4b1d      	ldr	r3, [pc, #116]	; (800472c <HAL_RCC_ClockConfig+0x358>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046be:	429a      	cmp	r2, r3
 80046c0:	d208      	bcs.n	80046d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80046c2:	4b1a      	ldr	r3, [pc, #104]	; (800472c <HAL_RCC_ClockConfig+0x358>)
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	4917      	ldr	r1, [pc, #92]	; (800472c <HAL_RCC_ClockConfig+0x358>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046d4:	f000 f834 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80046d8:	4602      	mov	r2, r0
 80046da:	4b14      	ldr	r3, [pc, #80]	; (800472c <HAL_RCC_ClockConfig+0x358>)
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	0a1b      	lsrs	r3, r3, #8
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	4912      	ldr	r1, [pc, #72]	; (8004730 <HAL_RCC_ClockConfig+0x35c>)
 80046e6:	5ccb      	ldrb	r3, [r1, r3]
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	fa22 f303 	lsr.w	r3, r2, r3
 80046f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046f2:	4b0e      	ldr	r3, [pc, #56]	; (800472c <HAL_RCC_ClockConfig+0x358>)
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	4a0d      	ldr	r2, [pc, #52]	; (8004730 <HAL_RCC_ClockConfig+0x35c>)
 80046fc:	5cd3      	ldrb	r3, [r2, r3]
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
 8004708:	4a0a      	ldr	r2, [pc, #40]	; (8004734 <HAL_RCC_ClockConfig+0x360>)
 800470a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800470c:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <HAL_RCC_ClockConfig+0x364>)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <HAL_RCC_ClockConfig+0x368>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fd fc14 	bl	8001f44 <HAL_InitTick>
 800471c:	4603      	mov	r3, r0
 800471e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004720:	7bfb      	ldrb	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	58024400 	.word	0x58024400
 8004730:	080061f0 	.word	0x080061f0
 8004734:	24000004 	.word	0x24000004
 8004738:	24000000 	.word	0x24000000
 800473c:	24000008 	.word	0x24000008

08004740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004746:	4bb3      	ldr	r3, [pc, #716]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800474e:	2b18      	cmp	r3, #24
 8004750:	f200 8155 	bhi.w	80049fe <HAL_RCC_GetSysClockFreq+0x2be>
 8004754:	a201      	add	r2, pc, #4	; (adr r2, 800475c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	080047c1 	.word	0x080047c1
 8004760:	080049ff 	.word	0x080049ff
 8004764:	080049ff 	.word	0x080049ff
 8004768:	080049ff 	.word	0x080049ff
 800476c:	080049ff 	.word	0x080049ff
 8004770:	080049ff 	.word	0x080049ff
 8004774:	080049ff 	.word	0x080049ff
 8004778:	080049ff 	.word	0x080049ff
 800477c:	080047e7 	.word	0x080047e7
 8004780:	080049ff 	.word	0x080049ff
 8004784:	080049ff 	.word	0x080049ff
 8004788:	080049ff 	.word	0x080049ff
 800478c:	080049ff 	.word	0x080049ff
 8004790:	080049ff 	.word	0x080049ff
 8004794:	080049ff 	.word	0x080049ff
 8004798:	080049ff 	.word	0x080049ff
 800479c:	080047ed 	.word	0x080047ed
 80047a0:	080049ff 	.word	0x080049ff
 80047a4:	080049ff 	.word	0x080049ff
 80047a8:	080049ff 	.word	0x080049ff
 80047ac:	080049ff 	.word	0x080049ff
 80047b0:	080049ff 	.word	0x080049ff
 80047b4:	080049ff 	.word	0x080049ff
 80047b8:	080049ff 	.word	0x080049ff
 80047bc:	080047f3 	.word	0x080047f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047c0:	4b94      	ldr	r3, [pc, #592]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d009      	beq.n	80047e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047cc:	4b91      	ldr	r3, [pc, #580]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	08db      	lsrs	r3, r3, #3
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	4a90      	ldr	r2, [pc, #576]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
 80047dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80047de:	e111      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80047e0:	4b8d      	ldr	r3, [pc, #564]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047e2:	61bb      	str	r3, [r7, #24]
      break;
 80047e4:	e10e      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80047e6:	4b8d      	ldr	r3, [pc, #564]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047e8:	61bb      	str	r3, [r7, #24]
      break;
 80047ea:	e10b      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80047ec:	4b8c      	ldr	r3, [pc, #560]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80047ee:	61bb      	str	r3, [r7, #24]
      break;
 80047f0:	e108      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047f2:	4b88      	ldr	r3, [pc, #544]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80047fc:	4b85      	ldr	r3, [pc, #532]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004806:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004808:	4b82      	ldr	r3, [pc, #520]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004812:	4b80      	ldr	r3, [pc, #512]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	08db      	lsrs	r3, r3, #3
 8004818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80e1 	beq.w	80049f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b02      	cmp	r3, #2
 800483a:	f000 8083 	beq.w	8004944 <HAL_RCC_GetSysClockFreq+0x204>
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b02      	cmp	r3, #2
 8004842:	f200 80a1 	bhi.w	8004988 <HAL_RCC_GetSysClockFreq+0x248>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_RCC_GetSysClockFreq+0x114>
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d056      	beq.n	8004900 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004852:	e099      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004854:	4b6f      	ldr	r3, [pc, #444]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d02d      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004860:	4b6c      	ldr	r3, [pc, #432]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	08db      	lsrs	r3, r3, #3
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	4a6b      	ldr	r2, [pc, #428]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
 8004870:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488a:	4b62      	ldr	r3, [pc, #392]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489a:	ed97 6a02 	vldr	s12, [r7, #8]
 800489e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80048ba:	e087      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004a28 <HAL_RCC_GetSysClockFreq+0x2e8>
 80048ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ce:	4b51      	ldr	r3, [pc, #324]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048de:	ed97 6a02 	vldr	s12, [r7, #8]
 80048e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048fe:	e065      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004a2c <HAL_RCC_GetSysClockFreq+0x2ec>
 800490e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004912:	4b40      	ldr	r3, [pc, #256]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004922:	ed97 6a02 	vldr	s12, [r7, #8]
 8004926:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800492a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800492e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800493a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004942:	e043      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004a30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004956:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004966:	ed97 6a02 	vldr	s12, [r7, #8]
 800496a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800496e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800497a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800497e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004986:	e021      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004a2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499a:	4b1e      	ldr	r3, [pc, #120]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80049ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	0a5b      	lsrs	r3, r3, #9
 80049d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d6:	3301      	adds	r3, #1
 80049d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f0:	ee17 3a90 	vmov	r3, s15
 80049f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80049f6:	e005      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61bb      	str	r3, [r7, #24]
      break;
 80049fc:	e002      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a00:	61bb      	str	r3, [r7, #24]
      break;
 8004a02:	bf00      	nop
  }

  return sysclockfreq;
 8004a04:	69bb      	ldr	r3, [r7, #24]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3724      	adds	r7, #36	; 0x24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	58024400 	.word	0x58024400
 8004a18:	03d09000 	.word	0x03d09000
 8004a1c:	003d0900 	.word	0x003d0900
 8004a20:	017d7840 	.word	0x017d7840
 8004a24:	46000000 	.word	0x46000000
 8004a28:	4c742400 	.word	0x4c742400
 8004a2c:	4a742400 	.word	0x4a742400
 8004a30:	4bbebc20 	.word	0x4bbebc20

08004a34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a38:	b0ca      	sub	sp, #296	; 0x128
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a40:	2300      	movs	r3, #0
 8004a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a46:	2300      	movs	r3, #0
 8004a48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004a58:	2500      	movs	r5, #0
 8004a5a:	ea54 0305 	orrs.w	r3, r4, r5
 8004a5e:	d049      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a6a:	d02f      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004a6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a70:	d828      	bhi.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a76:	d01a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a7c:	d822      	bhi.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a86:	d007      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a88:	e01c      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a8a:	4bb8      	ldr	r3, [pc, #736]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8e:	4ab7      	ldr	r2, [pc, #732]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a96:	e01a      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	2102      	movs	r1, #2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f001 f9d1 	bl	8005e48 <RCCEx_PLL2_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004aac:	e00f      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab2:	3328      	adds	r3, #40	; 0x28
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f001 fa78 	bl	8005fac <RCCEx_PLL3_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ac2:	e004      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004aca:	e000      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10a      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ad6:	4ba5      	ldr	r3, [pc, #660]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ada:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ae4:	4aa1      	ldr	r2, [pc, #644]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	6513      	str	r3, [r2, #80]	; 0x50
 8004aea:	e003      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004af0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004b00:	f04f 0900 	mov.w	r9, #0
 8004b04:	ea58 0309 	orrs.w	r3, r8, r9
 8004b08:	d047      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d82a      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004b14:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1a:	bf00      	nop
 8004b1c:	08004b31 	.word	0x08004b31
 8004b20:	08004b3f 	.word	0x08004b3f
 8004b24:	08004b55 	.word	0x08004b55
 8004b28:	08004b73 	.word	0x08004b73
 8004b2c:	08004b73 	.word	0x08004b73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b30:	4b8e      	ldr	r3, [pc, #568]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	4a8d      	ldr	r2, [pc, #564]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b3c:	e01a      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b42:	3308      	adds	r3, #8
 8004b44:	2100      	movs	r1, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f001 f97e 	bl	8005e48 <RCCEx_PLL2_Config>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b52:	e00f      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b58:	3328      	adds	r3, #40	; 0x28
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f001 fa25 	bl	8005fac <RCCEx_PLL3_Config>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b68:	e004      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b70:	e000      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10a      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b7c:	4b7b      	ldr	r3, [pc, #492]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b80:	f023 0107 	bic.w	r1, r3, #7
 8004b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8a:	4a78      	ldr	r2, [pc, #480]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	6513      	str	r3, [r2, #80]	; 0x50
 8004b90:	e003      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004ba6:	f04f 0b00 	mov.w	fp, #0
 8004baa:	ea5a 030b 	orrs.w	r3, sl, fp
 8004bae:	d04c      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bba:	d030      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc0:	d829      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc4:	d02d      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc8:	d825      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bca:	2b80      	cmp	r3, #128	; 0x80
 8004bcc:	d018      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004bce:	2b80      	cmp	r3, #128	; 0x80
 8004bd0:	d821      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d007      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004bda:	e01c      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bdc:	4b63      	ldr	r3, [pc, #396]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	4a62      	ldr	r2, [pc, #392]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004be8:	e01c      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bee:	3308      	adds	r3, #8
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f001 f928 	bl	8005e48 <RCCEx_PLL2_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004bfe:	e011      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c04:	3328      	adds	r3, #40	; 0x28
 8004c06:	2100      	movs	r1, #0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 f9cf 	bl	8005fac <RCCEx_PLL3_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c14:	e006      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c1c:	e002      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c1e:	bf00      	nop
 8004c20:	e000      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c2c:	4b4f      	ldr	r3, [pc, #316]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c30:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3a:	4a4c      	ldr	r2, [pc, #304]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	6513      	str	r3, [r2, #80]	; 0x50
 8004c40:	e003      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004c56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c60:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004c64:	460b      	mov	r3, r1
 8004c66:	4313      	orrs	r3, r2
 8004c68:	d053      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c76:	d035      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004c78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c7c:	d82e      	bhi.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c82:	d031      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004c84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c88:	d828      	bhi.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c8e:	d01a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c94:	d822      	bhi.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004c9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c9e:	d007      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004ca0:	e01c      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca2:	4b32      	ldr	r3, [pc, #200]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	4a31      	ldr	r2, [pc, #196]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cae:	e01c      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 f8c5 	bl	8005e48 <RCCEx_PLL2_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004cc4:	e011      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cca:	3328      	adds	r3, #40	; 0x28
 8004ccc:	2100      	movs	r1, #0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 f96c 	bl	8005fac <RCCEx_PLL3_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cda:	e006      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ce2:	e002      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004ce4:	bf00      	nop
 8004ce6:	e000      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10b      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004cf2:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d02:	4a1a      	ldr	r2, [pc, #104]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d04:	430b      	orrs	r3, r1
 8004d06:	6593      	str	r3, [r2, #88]	; 0x58
 8004d08:	e003      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004d1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d22:	2300      	movs	r3, #0
 8004d24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d28:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	d056      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d3e:	d038      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004d40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d44:	d831      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d4a:	d034      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004d4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d50:	d82b      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d56:	d01d      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004d58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d5c:	d825      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d006      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004d62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d68:	e01f      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d6a:	bf00      	nop
 8004d6c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d70:	4ba2      	ldr	r3, [pc, #648]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4aa1      	ldr	r2, [pc, #644]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d7c:	e01c      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d82:	3308      	adds	r3, #8
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 f85e 	bl	8005e48 <RCCEx_PLL2_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004d92:	e011      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d98:	3328      	adds	r3, #40	; 0x28
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 f905 	bl	8005fac <RCCEx_PLL3_Config>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004da8:	e006      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004db0:	e002      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004db2:	bf00      	nop
 8004db4:	e000      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10b      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004dc0:	4b8e      	ldr	r3, [pc, #568]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004dd0:	4a8a      	ldr	r2, [pc, #552]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8004dd6:	e003      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ddc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004dec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004df0:	2300      	movs	r3, #0
 8004df2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004df6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	d03a      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e06:	2b30      	cmp	r3, #48	; 0x30
 8004e08:	d01f      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004e0a:	2b30      	cmp	r3, #48	; 0x30
 8004e0c:	d819      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d00c      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d815      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d019      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004e1a:	2b10      	cmp	r3, #16
 8004e1c:	d111      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e1e:	4b77      	ldr	r3, [pc, #476]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	4a76      	ldr	r2, [pc, #472]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e2a:	e011      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e30:	3308      	adds	r3, #8
 8004e32:	2102      	movs	r1, #2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f001 f807 	bl	8005e48 <RCCEx_PLL2_Config>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e40:	e006      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e48:	e002      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e4a:	bf00      	nop
 8004e4c:	e000      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e58:	4b68      	ldr	r3, [pc, #416]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e66:	4a65      	ldr	r2, [pc, #404]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e6c:	e003      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004e82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e86:	2300      	movs	r3, #0
 8004e88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e8c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4313      	orrs	r3, r2
 8004e94:	d051      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea0:	d035      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004ea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea6:	d82e      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ea8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eac:	d031      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004eae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eb2:	d828      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb8:	d01a      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ebe:	d822      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec8:	d007      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004eca:	e01c      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ecc:	4b4b      	ldr	r3, [pc, #300]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	4a4a      	ldr	r2, [pc, #296]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ed8:	e01c      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ede:	3308      	adds	r3, #8
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 ffb0 	bl	8005e48 <RCCEx_PLL2_Config>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004eee:	e011      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef4:	3328      	adds	r3, #40	; 0x28
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 f857 	bl	8005fac <RCCEx_PLL3_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f04:	e006      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f0c:	e002      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f0e:	bf00      	nop
 8004f10:	e000      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f1c:	4b37      	ldr	r3, [pc, #220]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f20:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2a:	4a34      	ldr	r2, [pc, #208]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	6513      	str	r3, [r2, #80]	; 0x50
 8004f30:	e003      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f42:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004f46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f50:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004f54:	460b      	mov	r3, r1
 8004f56:	4313      	orrs	r3, r2
 8004f58:	d056      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f64:	d033      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004f66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f6a:	d82c      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f70:	d02f      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004f72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f76:	d826      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f7c:	d02b      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004f7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f82:	d820      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f88:	d012      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004f8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f8e:	d81a      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d022      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f98:	d115      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 ff50 	bl	8005e48 <RCCEx_PLL2_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004fae:	e015      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fb4:	3328      	adds	r3, #40	; 0x28
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fff7 	bl	8005fac <RCCEx_PLL3_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004fc4:	e00a      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fcc:	e006      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fce:	bf00      	nop
 8004fd0:	e004      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fd2:	bf00      	nop
 8004fd4:	e002      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fd6:	bf00      	nop
 8004fd8:	e000      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10d      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ff2:	4a02      	ldr	r2, [pc, #8]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	6513      	str	r3, [r2, #80]	; 0x50
 8004ff8:	e006      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004ffa:	bf00      	nop
 8004ffc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005004:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005018:	2300      	movs	r3, #0
 800501a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800501e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005022:	460b      	mov	r3, r1
 8005024:	4313      	orrs	r3, r2
 8005026:	d055      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800502c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005034:	d033      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800503a:	d82c      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800503c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005040:	d02f      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005046:	d826      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005048:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800504c:	d02b      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800504e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005052:	d820      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005058:	d012      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800505a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800505e:	d81a      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d022      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005064:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005068:	d115      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800506a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800506e:	3308      	adds	r3, #8
 8005070:	2101      	movs	r1, #1
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fee8 	bl	8005e48 <RCCEx_PLL2_Config>
 8005078:	4603      	mov	r3, r0
 800507a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800507e:	e015      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005084:	3328      	adds	r3, #40	; 0x28
 8005086:	2101      	movs	r1, #1
 8005088:	4618      	mov	r0, r3
 800508a:	f000 ff8f 	bl	8005fac <RCCEx_PLL3_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005094:	e00a      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800509c:	e006      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800509e:	bf00      	nop
 80050a0:	e004      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050a2:	bf00      	nop
 80050a4:	e002      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050a6:	bf00      	nop
 80050a8:	e000      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050b4:	4ba3      	ldr	r3, [pc, #652]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80050bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050c4:	4a9f      	ldr	r2, [pc, #636]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c6:	430b      	orrs	r3, r1
 80050c8:	6593      	str	r3, [r2, #88]	; 0x58
 80050ca:	e003      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80050e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050e4:	2300      	movs	r3, #0
 80050e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80050ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80050ee:	460b      	mov	r3, r1
 80050f0:	4313      	orrs	r3, r2
 80050f2:	d037      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80050f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050fe:	d00e      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005104:	d816      	bhi.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d018      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800510a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800510e:	d111      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005110:	4b8c      	ldr	r3, [pc, #560]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	4a8b      	ldr	r2, [pc, #556]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800511a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800511c:	e00f      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005122:	3308      	adds	r3, #8
 8005124:	2101      	movs	r1, #1
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fe8e 	bl	8005e48 <RCCEx_PLL2_Config>
 800512c:	4603      	mov	r3, r0
 800512e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005132:	e004      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800513a:	e000      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800513c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800513e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10a      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005146:	4b7f      	ldr	r3, [pc, #508]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800514e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	4a7b      	ldr	r2, [pc, #492]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005156:	430b      	orrs	r3, r1
 8005158:	6513      	str	r3, [r2, #80]	; 0x50
 800515a:	e003      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005160:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005174:	2300      	movs	r3, #0
 8005176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800517a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800517e:	460b      	mov	r3, r1
 8005180:	4313      	orrs	r3, r2
 8005182:	d039      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518a:	2b03      	cmp	r3, #3
 800518c:	d81c      	bhi.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800518e:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051d1 	.word	0x080051d1
 8005198:	080051a5 	.word	0x080051a5
 800519c:	080051b3 	.word	0x080051b3
 80051a0:	080051d1 	.word	0x080051d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a4:	4b67      	ldr	r3, [pc, #412]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	4a66      	ldr	r2, [pc, #408]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051b0:	e00f      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b6:	3308      	adds	r3, #8
 80051b8:	2102      	movs	r1, #2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fe44 	bl	8005e48 <RCCEx_PLL2_Config>
 80051c0:	4603      	mov	r3, r0
 80051c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051c6:	e004      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051ce:	e000      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80051d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10a      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80051da:	4b5a      	ldr	r3, [pc, #360]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051de:	f023 0103 	bic.w	r1, r3, #3
 80051e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e8:	4a56      	ldr	r2, [pc, #344]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ea:	430b      	orrs	r3, r1
 80051ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051ee:	e003      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005204:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005208:	2300      	movs	r3, #0
 800520a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800520e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005212:	460b      	mov	r3, r1
 8005214:	4313      	orrs	r3, r2
 8005216:	f000 809f 	beq.w	8005358 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800521a:	4b4b      	ldr	r3, [pc, #300]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a4a      	ldr	r2, [pc, #296]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005224:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005226:	f7fc fed7 	bl	8001fd8 <HAL_GetTick>
 800522a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800522e:	e00b      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005230:	f7fc fed2 	bl	8001fd8 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b64      	cmp	r3, #100	; 0x64
 800523e:	d903      	bls.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005246:	e005      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005248:	4b3f      	ldr	r3, [pc, #252]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ed      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005254:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005258:	2b00      	cmp	r3, #0
 800525a:	d179      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800525c:	4b39      	ldr	r3, [pc, #228]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800525e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005264:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005268:	4053      	eors	r3, r2
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d015      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005272:	4b34      	ldr	r3, [pc, #208]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800527e:	4b31      	ldr	r3, [pc, #196]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	4a30      	ldr	r2, [pc, #192]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005288:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800528a:	4b2e      	ldr	r3, [pc, #184]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	4a2d      	ldr	r2, [pc, #180]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005294:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005296:	4a2b      	ldr	r2, [pc, #172]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005298:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800529c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800529e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80052a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052aa:	d118      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ac:	f7fc fe94 	bl	8001fd8 <HAL_GetTick>
 80052b0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052b4:	e00d      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b6:	f7fc fe8f 	bl	8001fd8 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052c0:	1ad2      	subs	r2, r2, r3
 80052c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d903      	bls.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80052d0:	e005      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052d2:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0eb      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80052de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d129      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80052ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f6:	d10e      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80052f8:	4b12      	ldr	r3, [pc, #72]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005304:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005308:	091a      	lsrs	r2, r3, #4
 800530a:	4b10      	ldr	r3, [pc, #64]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800530c:	4013      	ands	r3, r2
 800530e:	4a0d      	ldr	r2, [pc, #52]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005310:	430b      	orrs	r3, r1
 8005312:	6113      	str	r3, [r2, #16]
 8005314:	e005      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	4a0a      	ldr	r2, [pc, #40]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800531c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005320:	6113      	str	r3, [r2, #16]
 8005322:	4b08      	ldr	r3, [pc, #32]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005324:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800532a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800532e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005332:	4a04      	ldr	r2, [pc, #16]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005334:	430b      	orrs	r3, r1
 8005336:	6713      	str	r3, [r2, #112]	; 0x70
 8005338:	e00e      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800533a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800533e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005342:	e009      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005344:	58024400 	.word	0x58024400
 8005348:	58024800 	.word	0x58024800
 800534c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005354:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	f002 0301 	and.w	r3, r2, #1
 8005364:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005368:	2300      	movs	r3, #0
 800536a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800536e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005372:	460b      	mov	r3, r1
 8005374:	4313      	orrs	r3, r2
 8005376:	f000 8089 	beq.w	800548c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800537a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800537e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005380:	2b28      	cmp	r3, #40	; 0x28
 8005382:	d86b      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005384:	a201      	add	r2, pc, #4	; (adr r2, 800538c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	08005465 	.word	0x08005465
 8005390:	0800545d 	.word	0x0800545d
 8005394:	0800545d 	.word	0x0800545d
 8005398:	0800545d 	.word	0x0800545d
 800539c:	0800545d 	.word	0x0800545d
 80053a0:	0800545d 	.word	0x0800545d
 80053a4:	0800545d 	.word	0x0800545d
 80053a8:	0800545d 	.word	0x0800545d
 80053ac:	08005431 	.word	0x08005431
 80053b0:	0800545d 	.word	0x0800545d
 80053b4:	0800545d 	.word	0x0800545d
 80053b8:	0800545d 	.word	0x0800545d
 80053bc:	0800545d 	.word	0x0800545d
 80053c0:	0800545d 	.word	0x0800545d
 80053c4:	0800545d 	.word	0x0800545d
 80053c8:	0800545d 	.word	0x0800545d
 80053cc:	08005447 	.word	0x08005447
 80053d0:	0800545d 	.word	0x0800545d
 80053d4:	0800545d 	.word	0x0800545d
 80053d8:	0800545d 	.word	0x0800545d
 80053dc:	0800545d 	.word	0x0800545d
 80053e0:	0800545d 	.word	0x0800545d
 80053e4:	0800545d 	.word	0x0800545d
 80053e8:	0800545d 	.word	0x0800545d
 80053ec:	08005465 	.word	0x08005465
 80053f0:	0800545d 	.word	0x0800545d
 80053f4:	0800545d 	.word	0x0800545d
 80053f8:	0800545d 	.word	0x0800545d
 80053fc:	0800545d 	.word	0x0800545d
 8005400:	0800545d 	.word	0x0800545d
 8005404:	0800545d 	.word	0x0800545d
 8005408:	0800545d 	.word	0x0800545d
 800540c:	08005465 	.word	0x08005465
 8005410:	0800545d 	.word	0x0800545d
 8005414:	0800545d 	.word	0x0800545d
 8005418:	0800545d 	.word	0x0800545d
 800541c:	0800545d 	.word	0x0800545d
 8005420:	0800545d 	.word	0x0800545d
 8005424:	0800545d 	.word	0x0800545d
 8005428:	0800545d 	.word	0x0800545d
 800542c:	08005465 	.word	0x08005465
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005434:	3308      	adds	r3, #8
 8005436:	2101      	movs	r1, #1
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fd05 	bl	8005e48 <RCCEx_PLL2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005444:	e00f      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544a:	3328      	adds	r3, #40	; 0x28
 800544c:	2101      	movs	r1, #1
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fdac 	bl	8005fac <RCCEx_PLL3_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800545a:	e004      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005462:	e000      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800546e:	4bbf      	ldr	r3, [pc, #764]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005472:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800547c:	4abb      	ldr	r2, [pc, #748]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800547e:	430b      	orrs	r3, r1
 8005480:	6553      	str	r3, [r2, #84]	; 0x54
 8005482:	e003      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005484:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005488:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800548c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f002 0302 	and.w	r3, r2, #2
 8005498:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800549c:	2300      	movs	r3, #0
 800549e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80054a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80054a6:	460b      	mov	r3, r1
 80054a8:	4313      	orrs	r3, r2
 80054aa:	d041      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80054ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054b2:	2b05      	cmp	r3, #5
 80054b4:	d824      	bhi.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80054b6:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	08005509 	.word	0x08005509
 80054c0:	080054d5 	.word	0x080054d5
 80054c4:	080054eb 	.word	0x080054eb
 80054c8:	08005509 	.word	0x08005509
 80054cc:	08005509 	.word	0x08005509
 80054d0:	08005509 	.word	0x08005509
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d8:	3308      	adds	r3, #8
 80054da:	2101      	movs	r1, #1
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fcb3 	bl	8005e48 <RCCEx_PLL2_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054e8:	e00f      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ee:	3328      	adds	r3, #40	; 0x28
 80054f0:	2101      	movs	r1, #1
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fd5a 	bl	8005fac <RCCEx_PLL3_Config>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054fe:	e004      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005506:	e000      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800550a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005512:	4b96      	ldr	r3, [pc, #600]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005516:	f023 0107 	bic.w	r1, r3, #7
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800551e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005520:	4a92      	ldr	r2, [pc, #584]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005522:	430b      	orrs	r3, r1
 8005524:	6553      	str	r3, [r2, #84]	; 0x54
 8005526:	e003      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005528:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800552c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	f002 0304 	and.w	r3, r2, #4
 800553c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005540:	2300      	movs	r3, #0
 8005542:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005546:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800554a:	460b      	mov	r3, r1
 800554c:	4313      	orrs	r3, r2
 800554e:	d044      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005558:	2b05      	cmp	r3, #5
 800555a:	d825      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800555c:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	080055b1 	.word	0x080055b1
 8005568:	0800557d 	.word	0x0800557d
 800556c:	08005593 	.word	0x08005593
 8005570:	080055b1 	.word	0x080055b1
 8005574:	080055b1 	.word	0x080055b1
 8005578:	080055b1 	.word	0x080055b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800557c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005580:	3308      	adds	r3, #8
 8005582:	2101      	movs	r1, #1
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fc5f 	bl	8005e48 <RCCEx_PLL2_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005590:	e00f      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005596:	3328      	adds	r3, #40	; 0x28
 8005598:	2101      	movs	r1, #1
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fd06 	bl	8005fac <RCCEx_PLL3_Config>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055a6:	e004      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055ae:	e000      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80055b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10b      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055ba:	4b6c      	ldr	r3, [pc, #432]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055be:	f023 0107 	bic.w	r1, r3, #7
 80055c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ca:	4a68      	ldr	r2, [pc, #416]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055cc:	430b      	orrs	r3, r1
 80055ce:	6593      	str	r3, [r2, #88]	; 0x58
 80055d0:	e003      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	f002 0320 	and.w	r3, r2, #32
 80055e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055ea:	2300      	movs	r3, #0
 80055ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055f4:	460b      	mov	r3, r1
 80055f6:	4313      	orrs	r3, r2
 80055f8:	d055      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005606:	d033      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800560c:	d82c      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800560e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005612:	d02f      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005618:	d826      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800561a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800561e:	d02b      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005620:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005624:	d820      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800562a:	d012      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800562c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005630:	d81a      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d022      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800563a:	d115      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800563c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005640:	3308      	adds	r3, #8
 8005642:	2100      	movs	r1, #0
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fbff 	bl	8005e48 <RCCEx_PLL2_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005650:	e015      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005656:	3328      	adds	r3, #40	; 0x28
 8005658:	2102      	movs	r1, #2
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fca6 	bl	8005fac <RCCEx_PLL3_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005666:	e00a      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800566e:	e006      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005670:	bf00      	nop
 8005672:	e004      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005674:	bf00      	nop
 8005676:	e002      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005678:	bf00      	nop
 800567a:	e000      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800567c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800567e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10b      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005686:	4b39      	ldr	r3, [pc, #228]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800568e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005696:	4a35      	ldr	r2, [pc, #212]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005698:	430b      	orrs	r3, r1
 800569a:	6553      	str	r3, [r2, #84]	; 0x54
 800569c:	e003      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80056b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056b6:	2300      	movs	r3, #0
 80056b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80056c0:	460b      	mov	r3, r1
 80056c2:	4313      	orrs	r3, r2
 80056c4:	d058      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80056d2:	d033      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80056d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80056d8:	d82c      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056de:	d02f      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e4:	d826      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056ea:	d02b      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80056ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056f0:	d820      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f6:	d012      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80056f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fc:	d81a      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d022      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005706:	d115      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800570c:	3308      	adds	r3, #8
 800570e:	2100      	movs	r1, #0
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fb99 	bl	8005e48 <RCCEx_PLL2_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800571c:	e015      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800571e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005722:	3328      	adds	r3, #40	; 0x28
 8005724:	2102      	movs	r1, #2
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fc40 	bl	8005fac <RCCEx_PLL3_Config>
 800572c:	4603      	mov	r3, r0
 800572e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005732:	e00a      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800573a:	e006      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800573c:	bf00      	nop
 800573e:	e004      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005740:	bf00      	nop
 8005742:	e002      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005744:	bf00      	nop
 8005746:	e000      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800574a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10e      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005752:	4b06      	ldr	r3, [pc, #24]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005756:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800575e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005762:	4a02      	ldr	r2, [pc, #8]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005764:	430b      	orrs	r3, r1
 8005766:	6593      	str	r3, [r2, #88]	; 0x58
 8005768:	e006      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800576a:	bf00      	nop
 800576c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005770:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005774:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005788:	2300      	movs	r3, #0
 800578a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800578e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005792:	460b      	mov	r3, r1
 8005794:	4313      	orrs	r3, r2
 8005796:	d055      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800579c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80057a4:	d033      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80057a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80057aa:	d82c      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b0:	d02f      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80057b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b6:	d826      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80057bc:	d02b      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80057be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80057c2:	d820      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057c8:	d012      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80057ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ce:	d81a      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d022      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80057d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d8:	d115      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057de:	3308      	adds	r3, #8
 80057e0:	2100      	movs	r1, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fb30 	bl	8005e48 <RCCEx_PLL2_Config>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80057ee:	e015      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f4:	3328      	adds	r3, #40	; 0x28
 80057f6:	2102      	movs	r1, #2
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fbd7 	bl	8005fac <RCCEx_PLL3_Config>
 80057fe:	4603      	mov	r3, r0
 8005800:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005804:	e00a      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800580c:	e006      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800580e:	bf00      	nop
 8005810:	e004      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005812:	bf00      	nop
 8005814:	e002      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005816:	bf00      	nop
 8005818:	e000      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800581a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800581c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10b      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005824:	4ba1      	ldr	r3, [pc, #644]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005828:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800582c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005830:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005834:	4a9d      	ldr	r2, [pc, #628]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005836:	430b      	orrs	r3, r1
 8005838:	6593      	str	r3, [r2, #88]	; 0x58
 800583a:	e003      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005840:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f002 0308 	and.w	r3, r2, #8
 8005850:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005854:	2300      	movs	r3, #0
 8005856:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800585a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800585e:	460b      	mov	r3, r1
 8005860:	4313      	orrs	r3, r2
 8005862:	d01e      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800586c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005870:	d10c      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005876:	3328      	adds	r3, #40	; 0x28
 8005878:	2102      	movs	r1, #2
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fb96 	bl	8005fac <RCCEx_PLL3_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800588c:	4b87      	ldr	r3, [pc, #540]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800588e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005890:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800589c:	4a83      	ldr	r2, [pc, #524]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800589e:	430b      	orrs	r3, r1
 80058a0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058aa:	f002 0310 	and.w	r3, r2, #16
 80058ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058b2:	2300      	movs	r3, #0
 80058b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80058b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80058bc:	460b      	mov	r3, r1
 80058be:	4313      	orrs	r3, r2
 80058c0:	d01e      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ce:	d10c      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d4:	3328      	adds	r3, #40	; 0x28
 80058d6:	2102      	movs	r1, #2
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fb67 	bl	8005fac <RCCEx_PLL3_Config>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058ea:	4b70      	ldr	r3, [pc, #448]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058fa:	4a6c      	ldr	r2, [pc, #432]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058fc:	430b      	orrs	r3, r1
 80058fe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800590c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005910:	2300      	movs	r3, #0
 8005912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005916:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800591a:	460b      	mov	r3, r1
 800591c:	4313      	orrs	r3, r2
 800591e:	d03e      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005924:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800592c:	d022      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800592e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005932:	d81b      	bhi.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800593c:	d00b      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800593e:	e015      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005944:	3308      	adds	r3, #8
 8005946:	2100      	movs	r1, #0
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fa7d 	bl	8005e48 <RCCEx_PLL2_Config>
 800594e:	4603      	mov	r3, r0
 8005950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005954:	e00f      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595a:	3328      	adds	r3, #40	; 0x28
 800595c:	2102      	movs	r1, #2
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fb24 	bl	8005fac <RCCEx_PLL3_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800596a:	e004      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005972:	e000      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10b      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800597e:	4b4b      	ldr	r3, [pc, #300]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005982:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800598e:	4a47      	ldr	r2, [pc, #284]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005990:	430b      	orrs	r3, r1
 8005992:	6593      	str	r3, [r2, #88]	; 0x58
 8005994:	e003      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800599a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800599e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80059aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80059ac:	2300      	movs	r3, #0
 80059ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80059b4:	460b      	mov	r3, r1
 80059b6:	4313      	orrs	r3, r2
 80059b8:	d03b      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059c6:	d01f      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80059c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059cc:	d818      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80059ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059d2:	d003      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80059d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059d8:	d007      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80059da:	e011      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059dc:	4b33      	ldr	r3, [pc, #204]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	4a32      	ldr	r2, [pc, #200]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80059e8:	e00f      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ee:	3328      	adds	r3, #40	; 0x28
 80059f0:	2101      	movs	r1, #1
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fada 	bl	8005fac <RCCEx_PLL3_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80059fe:	e004      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a06:	e000      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10b      	bne.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a12:	4b26      	ldr	r3, [pc, #152]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a16:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a22:	4a22      	ldr	r2, [pc, #136]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a24:	430b      	orrs	r3, r1
 8005a26:	6553      	str	r3, [r2, #84]	; 0x54
 8005a28:	e003      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005a3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a40:	2300      	movs	r3, #0
 8005a42:	677b      	str	r3, [r7, #116]	; 0x74
 8005a44:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	d034      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5c:	d007      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005a5e:	e011      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a60:	4b12      	ldr	r3, [pc, #72]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	4a11      	ldr	r2, [pc, #68]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a6c:	e00e      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a72:	3308      	adds	r3, #8
 8005a74:	2102      	movs	r1, #2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 f9e6 	bl	8005e48 <RCCEx_PLL2_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a82:	e003      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10d      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a94:	4b05      	ldr	r3, [pc, #20]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa2:	4a02      	ldr	r2, [pc, #8]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005aa8:	e006      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005aaa:	bf00      	nop
 8005aac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ab4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005ac4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005aca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	d00c      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad8:	3328      	adds	r3, #40	; 0x28
 8005ada:	2102      	movs	r1, #2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fa65 	bl	8005fac <RCCEx_PLL3_Config>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005afa:	663b      	str	r3, [r7, #96]	; 0x60
 8005afc:	2300      	movs	r3, #0
 8005afe:	667b      	str	r3, [r7, #100]	; 0x64
 8005b00:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005b04:	460b      	mov	r3, r1
 8005b06:	4313      	orrs	r3, r2
 8005b08:	d038      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b16:	d018      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b1c:	d811      	bhi.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b22:	d014      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b28:	d80b      	bhi.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d011      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b32:	d106      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b34:	4bc3      	ldr	r3, [pc, #780]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	4ac2      	ldr	r2, [pc, #776]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b40:	e008      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b48:	e004      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b4a:	bf00      	nop
 8005b4c:	e002      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b4e:	bf00      	nop
 8005b50:	e000      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10b      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b5c:	4bb9      	ldr	r3, [pc, #740]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b6c:	4ab5      	ldr	r2, [pc, #724]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	6553      	str	r3, [r2, #84]	; 0x54
 8005b72:	e003      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005b88:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b8e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005b92:	460b      	mov	r3, r1
 8005b94:	4313      	orrs	r3, r2
 8005b96:	d009      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b98:	4baa      	ldr	r3, [pc, #680]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba6:	4aa7      	ldr	r2, [pc, #668]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005bb8:	653b      	str	r3, [r7, #80]	; 0x50
 8005bba:	2300      	movs	r3, #0
 8005bbc:	657b      	str	r3, [r7, #84]	; 0x54
 8005bbe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	d00a      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005bc8:	4b9e      	ldr	r3, [pc, #632]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005bd8:	4a9a      	ldr	r2, [pc, #616]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bda:	430b      	orrs	r3, r1
 8005bdc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bec:	2300      	movs	r3, #0
 8005bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bf0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	d009      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bfa:	4b92      	ldr	r3, [pc, #584]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bfe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c08:	4a8e      	ldr	r2, [pc, #568]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c20:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005c24:	460b      	mov	r3, r1
 8005c26:	4313      	orrs	r3, r2
 8005c28:	d00e      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c2a:	4b86      	ldr	r3, [pc, #536]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	4a85      	ldr	r2, [pc, #532]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c34:	6113      	str	r3, [r2, #16]
 8005c36:	4b83      	ldr	r3, [pc, #524]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c38:	6919      	ldr	r1, [r3, #16]
 8005c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005c42:	4a80      	ldr	r2, [pc, #512]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005c54:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c56:	2300      	movs	r3, #0
 8005c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c5a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4313      	orrs	r3, r2
 8005c62:	d009      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c64:	4b77      	ldr	r3, [pc, #476]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c68:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c72:	4a74      	ldr	r2, [pc, #464]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c74:	430b      	orrs	r3, r1
 8005c76:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005c84:	633b      	str	r3, [r7, #48]	; 0x30
 8005c86:	2300      	movs	r3, #0
 8005c88:	637b      	str	r3, [r7, #52]	; 0x34
 8005c8a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	d00a      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c94:	4b6b      	ldr	r3, [pc, #428]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c98:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ca4:	4a67      	ldr	r2, [pc, #412]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ca6:	430b      	orrs	r3, r1
 8005ca8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cbc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	d011      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cca:	3308      	adds	r3, #8
 8005ccc:	2100      	movs	r1, #0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f8ba 	bl	8005e48 <RCCEx_PLL2_Config>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ce6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	6239      	str	r1, [r7, #32]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d00:	460b      	mov	r3, r1
 8005d02:	4313      	orrs	r3, r2
 8005d04:	d011      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 f89a 	bl	8005e48 <RCCEx_PLL2_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d32:	2100      	movs	r1, #0
 8005d34:	61b9      	str	r1, [r7, #24]
 8005d36:	f003 0304 	and.w	r3, r3, #4
 8005d3a:	61fb      	str	r3, [r7, #28]
 8005d3c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d40:	460b      	mov	r3, r1
 8005d42:	4313      	orrs	r3, r2
 8005d44:	d011      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	2102      	movs	r1, #2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 f87a 	bl	8005e48 <RCCEx_PLL2_Config>
 8005d54:	4603      	mov	r3, r0
 8005d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	2100      	movs	r1, #0
 8005d74:	6139      	str	r1, [r7, #16]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d80:	460b      	mov	r3, r1
 8005d82:	4313      	orrs	r3, r2
 8005d84:	d011      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d8a:	3328      	adds	r3, #40	; 0x28
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 f90c 	bl	8005fac <RCCEx_PLL3_Config>
 8005d94:	4603      	mov	r3, r0
 8005d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005da6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	2100      	movs	r1, #0
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	f003 0310 	and.w	r3, r3, #16
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	d011      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dca:	3328      	adds	r3, #40	; 0x28
 8005dcc:	2101      	movs	r1, #1
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 f8ec 	bl	8005fac <RCCEx_PLL3_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005de6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	2100      	movs	r1, #0
 8005df4:	6039      	str	r1, [r7, #0]
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	607b      	str	r3, [r7, #4]
 8005dfc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e00:	460b      	mov	r3, r1
 8005e02:	4313      	orrs	r3, r2
 8005e04:	d011      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e0a:	3328      	adds	r3, #40	; 0x28
 8005e0c:	2102      	movs	r1, #2
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 f8cc 	bl	8005fac <RCCEx_PLL3_Config>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005e2a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	e000      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e44:	58024400 	.word	0x58024400

08005e48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e56:	4b53      	ldr	r3, [pc, #332]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d101      	bne.n	8005e66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e099      	b.n	8005f9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005e66:	4b4f      	ldr	r3, [pc, #316]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a4e      	ldr	r2, [pc, #312]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005e6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e72:	f7fc f8b1 	bl	8001fd8 <HAL_GetTick>
 8005e76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e78:	e008      	b.n	8005e8c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e7a:	f7fc f8ad 	bl	8001fd8 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e086      	b.n	8005f9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e8c:	4b45      	ldr	r3, [pc, #276]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1f0      	bne.n	8005e7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e98:	4b42      	ldr	r3, [pc, #264]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	031b      	lsls	r3, r3, #12
 8005ea6:	493f      	ldr	r1, [pc, #252]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	628b      	str	r3, [r1, #40]	; 0x28
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	025b      	lsls	r3, r3, #9
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	041b      	lsls	r3, r3, #16
 8005eca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	061b      	lsls	r3, r3, #24
 8005ed8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005edc:	4931      	ldr	r1, [pc, #196]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005ee2:	4b30      	ldr	r3, [pc, #192]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	492d      	ldr	r1, [pc, #180]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ef4:	4b2b      	ldr	r3, [pc, #172]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	f023 0220 	bic.w	r2, r3, #32
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	4928      	ldr	r1, [pc, #160]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f06:	4b27      	ldr	r3, [pc, #156]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	4a26      	ldr	r2, [pc, #152]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f0c:	f023 0310 	bic.w	r3, r3, #16
 8005f10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f12:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <RCCEx_PLL2_Config+0x160>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	69d2      	ldr	r2, [r2, #28]
 8005f1e:	00d2      	lsls	r2, r2, #3
 8005f20:	4920      	ldr	r1, [pc, #128]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f26:	4b1f      	ldr	r3, [pc, #124]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	4a1e      	ldr	r2, [pc, #120]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f2c:	f043 0310 	orr.w	r3, r3, #16
 8005f30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d106      	bne.n	8005f46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f38:	4b1a      	ldr	r3, [pc, #104]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	4a19      	ldr	r2, [pc, #100]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f44:	e00f      	b.n	8005f66 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d106      	bne.n	8005f5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005f4c:	4b15      	ldr	r3, [pc, #84]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	4a14      	ldr	r2, [pc, #80]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f58:	e005      	b.n	8005f66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005f5a:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5e:	4a11      	ldr	r2, [pc, #68]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005f66:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a0e      	ldr	r2, [pc, #56]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f72:	f7fc f831 	bl	8001fd8 <HAL_GetTick>
 8005f76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f78:	e008      	b.n	8005f8c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f7a:	f7fc f82d 	bl	8001fd8 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d901      	bls.n	8005f8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e006      	b.n	8005f9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f8c:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d0f0      	beq.n	8005f7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	58024400 	.word	0x58024400
 8005fa8:	ffff0007 	.word	0xffff0007

08005fac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fba:	4b53      	ldr	r3, [pc, #332]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d101      	bne.n	8005fca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e099      	b.n	80060fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005fca:	4b4f      	ldr	r3, [pc, #316]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a4e      	ldr	r2, [pc, #312]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8005fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd6:	f7fb ffff 	bl	8001fd8 <HAL_GetTick>
 8005fda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fdc:	e008      	b.n	8005ff0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005fde:	f7fb fffb 	bl	8001fd8 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e086      	b.n	80060fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ff0:	4b45      	ldr	r3, [pc, #276]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f0      	bne.n	8005fde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ffc:	4b42      	ldr	r3, [pc, #264]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	051b      	lsls	r3, r3, #20
 800600a:	493f      	ldr	r1, [pc, #252]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 800600c:	4313      	orrs	r3, r2
 800600e:	628b      	str	r3, [r1, #40]	; 0x28
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	3b01      	subs	r3, #1
 8006016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	3b01      	subs	r3, #1
 8006020:	025b      	lsls	r3, r3, #9
 8006022:	b29b      	uxth	r3, r3
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	3b01      	subs	r3, #1
 800602c:	041b      	lsls	r3, r3, #16
 800602e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	3b01      	subs	r3, #1
 800603a:	061b      	lsls	r3, r3, #24
 800603c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006040:	4931      	ldr	r1, [pc, #196]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006042:	4313      	orrs	r3, r2
 8006044:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006046:	4b30      	ldr	r3, [pc, #192]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	492d      	ldr	r1, [pc, #180]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006054:	4313      	orrs	r3, r2
 8006056:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006058:	4b2b      	ldr	r3, [pc, #172]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	4928      	ldr	r1, [pc, #160]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006066:	4313      	orrs	r3, r2
 8006068:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800606a:	4b27      	ldr	r3, [pc, #156]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 800606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606e:	4a26      	ldr	r2, [pc, #152]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006074:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006076:	4b24      	ldr	r3, [pc, #144]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800607a:	4b24      	ldr	r3, [pc, #144]	; (800610c <RCCEx_PLL3_Config+0x160>)
 800607c:	4013      	ands	r3, r2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	69d2      	ldr	r2, [r2, #28]
 8006082:	00d2      	lsls	r2, r2, #3
 8006084:	4920      	ldr	r1, [pc, #128]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006086:	4313      	orrs	r3, r2
 8006088:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800608a:	4b1f      	ldr	r3, [pc, #124]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 800608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608e:	4a1e      	ldr	r2, [pc, #120]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006094:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800609c:	4b1a      	ldr	r3, [pc, #104]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	4a19      	ldr	r2, [pc, #100]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060a8:	e00f      	b.n	80060ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d106      	bne.n	80060be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80060b0:	4b15      	ldr	r3, [pc, #84]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	4a14      	ldr	r2, [pc, #80]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80060ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060bc:	e005      	b.n	80060ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c2:	4a11      	ldr	r2, [pc, #68]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80060ca:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a0e      	ldr	r2, [pc, #56]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d6:	f7fb ff7f 	bl	8001fd8 <HAL_GetTick>
 80060da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060dc:	e008      	b.n	80060f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80060de:	f7fb ff7b 	bl	8001fd8 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d901      	bls.n	80060f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e006      	b.n	80060fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060f0:	4b05      	ldr	r3, [pc, #20]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0f0      	beq.n	80060de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	58024400 	.word	0x58024400
 800610c:	ffff0007 	.word	0xffff0007

08006110 <__libc_init_array>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4d0d      	ldr	r5, [pc, #52]	; (8006148 <__libc_init_array+0x38>)
 8006114:	4c0d      	ldr	r4, [pc, #52]	; (800614c <__libc_init_array+0x3c>)
 8006116:	1b64      	subs	r4, r4, r5
 8006118:	10a4      	asrs	r4, r4, #2
 800611a:	2600      	movs	r6, #0
 800611c:	42a6      	cmp	r6, r4
 800611e:	d109      	bne.n	8006134 <__libc_init_array+0x24>
 8006120:	4d0b      	ldr	r5, [pc, #44]	; (8006150 <__libc_init_array+0x40>)
 8006122:	4c0c      	ldr	r4, [pc, #48]	; (8006154 <__libc_init_array+0x44>)
 8006124:	f000 f82e 	bl	8006184 <_init>
 8006128:	1b64      	subs	r4, r4, r5
 800612a:	10a4      	asrs	r4, r4, #2
 800612c:	2600      	movs	r6, #0
 800612e:	42a6      	cmp	r6, r4
 8006130:	d105      	bne.n	800613e <__libc_init_array+0x2e>
 8006132:	bd70      	pop	{r4, r5, r6, pc}
 8006134:	f855 3b04 	ldr.w	r3, [r5], #4
 8006138:	4798      	blx	r3
 800613a:	3601      	adds	r6, #1
 800613c:	e7ee      	b.n	800611c <__libc_init_array+0xc>
 800613e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006142:	4798      	blx	r3
 8006144:	3601      	adds	r6, #1
 8006146:	e7f2      	b.n	800612e <__libc_init_array+0x1e>
 8006148:	0800621c 	.word	0x0800621c
 800614c:	0800621c 	.word	0x0800621c
 8006150:	0800621c 	.word	0x0800621c
 8006154:	08006220 	.word	0x08006220

08006158 <memcpy>:
 8006158:	440a      	add	r2, r1
 800615a:	4291      	cmp	r1, r2
 800615c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006160:	d100      	bne.n	8006164 <memcpy+0xc>
 8006162:	4770      	bx	lr
 8006164:	b510      	push	{r4, lr}
 8006166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800616e:	4291      	cmp	r1, r2
 8006170:	d1f9      	bne.n	8006166 <memcpy+0xe>
 8006172:	bd10      	pop	{r4, pc}

08006174 <memset>:
 8006174:	4402      	add	r2, r0
 8006176:	4603      	mov	r3, r0
 8006178:	4293      	cmp	r3, r2
 800617a:	d100      	bne.n	800617e <memset+0xa>
 800617c:	4770      	bx	lr
 800617e:	f803 1b01 	strb.w	r1, [r3], #1
 8006182:	e7f9      	b.n	8006178 <memset+0x4>

08006184 <_init>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	bf00      	nop
 8006188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618a:	bc08      	pop	{r3}
 800618c:	469e      	mov	lr, r3
 800618e:	4770      	bx	lr

08006190 <_fini>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	bf00      	nop
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr
