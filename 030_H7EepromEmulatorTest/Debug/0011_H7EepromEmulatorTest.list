
0011_H7EepromEmulatorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002998  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002c30  08002c30  00012c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002c40  08002c40  00012c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002c44  08002c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b4  24000000  08002c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000040  240000b4  08002cfc  000200b4  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240000f4  08002cfc  000200f4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009439  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000018a7  00000000  00000000  0002951b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000007c0  00000000  00000000  0002adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000006f8  00000000  00000000  0002b588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035113  00000000  00000000  0002bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00009484  00000000  00000000  00060d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150395  00000000  00000000  0006a217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001ba5ac  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001da4  00000000  00000000  001ba5fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000b4 	.word	0x240000b4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002c18 	.word	0x08002c18

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000b8 	.word	0x240000b8
 80002d4:	08002c18 	.word	0x08002c18

080002d8 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08c      	sub	sp, #48	; 0x30
 80002dc:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80002de:	2306      	movs	r3, #6
 80002e0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80002e2:	2306      	movs	r3, #6
 80002e4:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t VarIdx = 0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80002ee:	2300      	movs	r3, #0
 80002f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t x = -1;
 80002f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[1] = {0x0000}; //@BACK
 80002fc:	2300      	movs	r3, #0
 80002fe:	607b      	str	r3, [r7, #4]

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000300:	4bb6      	ldr	r3, [pc, #728]	; (80005dc <EE_Init+0x304>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	857b      	strh	r3, [r7, #42]	; 0x2a
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000306:	4bb6      	ldr	r3, [pc, #728]	; (80005e0 <EE_Init+0x308>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	853b      	strh	r3, [r7, #40]	; 0x28

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800030c:	2300      	movs	r3, #0
 800030e:	60bb      	str	r3, [r7, #8]
  pEraseInit.Banks = FLASH_BANK_1 ;
 8000310:	2301      	movs	r3, #1
 8000312:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector = PAGE0_ID;
 8000314:	2306      	movs	r3, #6
 8000316:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8000318:	2301      	movs	r3, #1
 800031a:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800031c:	2320      	movs	r3, #32
 800031e:	61bb      	str	r3, [r7, #24]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000320:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000326:	4293      	cmp	r3, r2
 8000328:	d00b      	beq.n	8000342 <EE_Init+0x6a>
 800032a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800032e:	f280 81c5 	bge.w	80006bc <EE_Init+0x3e4>
 8000332:	2b00      	cmp	r3, #0
 8000334:	f000 8115 	beq.w	8000562 <EE_Init+0x28a>
 8000338:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800033c:	4293      	cmp	r3, r2
 800033e:	d05c      	beq.n	80003fa <EE_Init+0x122>
 8000340:	e1bc      	b.n	80006bc <EE_Init+0x3e4>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000342:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000344:	2b00      	cmp	r3, #0
 8000346:	d11a      	bne.n	800037e <EE_Init+0xa6>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000348:	48a4      	ldr	r0, [pc, #656]	; (80005dc <EE_Init+0x304>)
 800034a:	f000 f9db 	bl	8000704 <EE_VerifyPageFullyErased>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	f040 81c0 	bne.w	80006d6 <EE_Init+0x3fe>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000356:	f107 021c 	add.w	r2, r7, #28
 800035a:	f107 0308 	add.w	r3, r7, #8
 800035e:	4611      	mov	r1, r2
 8000360:	4618      	mov	r0, r3
 8000362:	f001 f9dd 	bl	8001720 <HAL_FLASHEx_Erase>
 8000366:	4603      	mov	r3, r0
 8000368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800036c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000370:	2b00      	cmp	r3, #0
 8000372:	f000 81b0 	beq.w	80006d6 <EE_Init+0x3fe>
          {
            return FlashStatus;
 8000376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800037a:	b29b      	uxth	r3, r3
 800037c:	e1b3      	b.n	80006e6 <EE_Init+0x40e>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800037e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000380:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000384:	4293      	cmp	r3, r2
 8000386:	d12a      	bne.n	80003de <EE_Init+0x106>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000388:	4894      	ldr	r0, [pc, #592]	; (80005dc <EE_Init+0x304>)
 800038a:	f000 f9bb 	bl	8000704 <EE_VerifyPageFullyErased>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d112      	bne.n	80003ba <EE_Init+0xe2>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000394:	f107 021c 	add.w	r2, r7, #28
 8000398:	f107 0308 	add.w	r3, r7, #8
 800039c:	4611      	mov	r1, r2
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 f9be 	bl	8001720 <HAL_FLASHEx_Erase>
 80003a4:	4603      	mov	r3, r0
 80003a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80003aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d003      	beq.n	80003ba <EE_Init+0xe2>
          {
            return FlashStatus;
 80003b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	e195      	b.n	80006e6 <EE_Init+0x40e>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	461a      	mov	r2, r3
 80003be:	4988      	ldr	r1, [pc, #544]	; (80005e0 <EE_Init+0x308>)
 80003c0:	2001      	movs	r0, #1
 80003c2:	f001 f8c5 	bl	8001550 <HAL_FLASH_Program>
 80003c6:	4603      	mov	r3, r0
 80003c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80003cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	f000 8180 	beq.w	80006d6 <EE_Init+0x3fe>
        {
          return FlashStatus;
 80003d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80003da:	b29b      	uxth	r3, r3
 80003dc:	e183      	b.n	80006e6 <EE_Init+0x40e>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80003de:	f000 fa21 	bl	8000824 <EE_Format>
 80003e2:	4603      	mov	r3, r0
 80003e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80003e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	f000 8172 	beq.w	80006d6 <EE_Init+0x3fe>
        {
          return FlashStatus;
 80003f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	e175      	b.n	80006e6 <EE_Init+0x40e>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80003fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d16a      	bne.n	80004d6 <EE_Init+0x1fe>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000400:	2300      	movs	r3, #0
 8000402:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000404:	e030      	b.n	8000468 <EE_Init+0x190>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000406:	4b77      	ldr	r3, [pc, #476]	; (80005e4 <EE_Init+0x30c>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	b29a      	uxth	r2, r3
 800040c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800040e:	4976      	ldr	r1, [pc, #472]	; (80005e8 <EE_Init+0x310>)
 8000410:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000414:	429a      	cmp	r2, r3
 8000416:	d101      	bne.n	800041c <EE_Init+0x144>
          {
            x = VarIdx;
 8000418:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800041a:	85bb      	strh	r3, [r7, #44]	; 0x2c
          }
          if (VarIdx != x)
 800041c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800041e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000422:	429a      	cmp	r2, r3
 8000424:	d01d      	beq.n	8000462 <EE_Init+0x18a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000426:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000428:	4a6f      	ldr	r2, [pc, #444]	; (80005e8 <EE_Init+0x310>)
 800042a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800042e:	496f      	ldr	r1, [pc, #444]	; (80005ec <EE_Init+0x314>)
 8000430:	4618      	mov	r0, r3
 8000432:	f000 f98d 	bl	8000750 <EE_ReadVariable>
 8000436:	4603      	mov	r3, r0
 8000438:	84bb      	strh	r3, [r7, #36]	; 0x24
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800043a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800043c:	2b01      	cmp	r3, #1
 800043e:	d010      	beq.n	8000462 <EE_Init+0x18a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000440:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000442:	4a69      	ldr	r2, [pc, #420]	; (80005e8 <EE_Init+0x310>)
 8000444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000448:	4a68      	ldr	r2, [pc, #416]	; (80005ec <EE_Init+0x314>)
 800044a:	8812      	ldrh	r2, [r2, #0]
 800044c:	4611      	mov	r1, r2
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fa92 	bl	8000978 <EE_VerifyPageFullWriteVariable>
 8000454:	4603      	mov	r3, r0
 8000456:	84fb      	strh	r3, [r7, #38]	; 0x26
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8000458:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <EE_Init+0x18a>
              {
                return EepromStatus;
 800045e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000460:	e141      	b.n	80006e6 <EE_Init+0x40e>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000462:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000464:	3301      	adds	r3, #1
 8000466:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000468:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800046a:	2b27      	cmp	r3, #39	; 0x27
 800046c:	d9cb      	bls.n	8000406 <EE_Init+0x12e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	461a      	mov	r2, r3
 8000472:	495a      	ldr	r1, [pc, #360]	; (80005dc <EE_Init+0x304>)
 8000474:	2001      	movs	r0, #1
 8000476:	f001 f86b 	bl	8001550 <HAL_FLASH_Program>
 800047a:	4603      	mov	r3, r0
 800047c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000480:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000484:	2b00      	cmp	r3, #0
 8000486:	d003      	beq.n	8000490 <EE_Init+0x1b8>
        {
          return FlashStatus;
 8000488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800048c:	b29b      	uxth	r3, r3
 800048e:	e12a      	b.n	80006e6 <EE_Init+0x40e>
        }
        pEraseInit.Sector = PAGE1_ID;
 8000490:	2307      	movs	r3, #7
 8000492:	613b      	str	r3, [r7, #16]
        pEraseInit.Banks = FLASH_BANK_1 ;
 8000494:	2301      	movs	r3, #1
 8000496:	60fb      	str	r3, [r7, #12]
        pEraseInit.NbSectors = 1;
 8000498:	2301      	movs	r3, #1
 800049a:	617b      	str	r3, [r7, #20]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800049c:	2320      	movs	r3, #32
 800049e:	61bb      	str	r3, [r7, #24]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80004a0:	484f      	ldr	r0, [pc, #316]	; (80005e0 <EE_Init+0x308>)
 80004a2:	f000 f92f 	bl	8000704 <EE_VerifyPageFullyErased>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	f040 8116 	bne.w	80006da <EE_Init+0x402>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80004ae:	f107 021c 	add.w	r2, r7, #28
 80004b2:	f107 0308 	add.w	r3, r7, #8
 80004b6:	4611      	mov	r1, r2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f001 f931 	bl	8001720 <HAL_FLASHEx_Erase>
 80004be:	4603      	mov	r3, r0
 80004c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80004c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	f000 8106 	beq.w	80006da <EE_Init+0x402>
          {
            return FlashStatus;
 80004ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	e107      	b.n	80006e6 <EE_Init+0x40e>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 80004d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80004d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004dc:	4293      	cmp	r3, r2
 80004de:	d132      	bne.n	8000546 <EE_Init+0x26e>
      {
        pEraseInit.Sector = PAGE1_ID;
 80004e0:	2307      	movs	r3, #7
 80004e2:	613b      	str	r3, [r7, #16]
        pEraseInit.Banks = FLASH_BANK_1 ;
 80004e4:	2301      	movs	r3, #1
 80004e6:	60fb      	str	r3, [r7, #12]
        pEraseInit.NbSectors = 1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80004ec:	2320      	movs	r3, #32
 80004ee:	61bb      	str	r3, [r7, #24]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80004f0:	483b      	ldr	r0, [pc, #236]	; (80005e0 <EE_Init+0x308>)
 80004f2:	f000 f907 	bl	8000704 <EE_VerifyPageFullyErased>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d112      	bne.n	8000522 <EE_Init+0x24a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80004fc:	f107 021c 	add.w	r2, r7, #28
 8000500:	f107 0308 	add.w	r3, r7, #8
 8000504:	4611      	mov	r1, r2
 8000506:	4618      	mov	r0, r3
 8000508:	f001 f90a 	bl	8001720 <HAL_FLASHEx_Erase>
 800050c:	4603      	mov	r3, r0
 800050e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000512:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000516:	2b00      	cmp	r3, #0
 8000518:	d003      	beq.n	8000522 <EE_Init+0x24a>
          {
            return FlashStatus;
 800051a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800051e:	b29b      	uxth	r3, r3
 8000520:	e0e1      	b.n	80006e6 <EE_Init+0x40e>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	461a      	mov	r2, r3
 8000526:	492d      	ldr	r1, [pc, #180]	; (80005dc <EE_Init+0x304>)
 8000528:	2001      	movs	r0, #1
 800052a:	f001 f811 	bl	8001550 <HAL_FLASH_Program>
 800052e:	4603      	mov	r3, r0
 8000530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000538:	2b00      	cmp	r3, #0
 800053a:	f000 80ce 	beq.w	80006da <EE_Init+0x402>
        {
          return FlashStatus;
 800053e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000542:	b29b      	uxth	r3, r3
 8000544:	e0cf      	b.n	80006e6 <EE_Init+0x40e>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000546:	f000 f96d 	bl	8000824 <EE_Format>
 800054a:	4603      	mov	r3, r0
 800054c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000554:	2b00      	cmp	r3, #0
 8000556:	f000 80c0 	beq.w	80006da <EE_Init+0x402>
        {
          return FlashStatus;
 800055a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800055e:	b29b      	uxth	r3, r3
 8000560:	e0c1      	b.n	80006e6 <EE_Init+0x40e>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000562:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000564:	2b00      	cmp	r3, #0
 8000566:	d10d      	bne.n	8000584 <EE_Init+0x2ac>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000568:	f000 f95c 	bl	8000824 <EE_Format>
 800056c:	4603      	mov	r3, r0
 800056e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000572:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000576:	2b00      	cmp	r3, #0
 8000578:	f000 80b1 	beq.w	80006de <EE_Init+0x406>
        {
          return FlashStatus;
 800057c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000580:	b29b      	uxth	r3, r3
 8000582:	e0b0      	b.n	80006e6 <EE_Init+0x40e>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000584:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800058a:	4293      	cmp	r3, r2
 800058c:	d122      	bne.n	80005d4 <EE_Init+0x2fc>
      {
        pEraseInit.Sector = PAGE1_ID;
 800058e:	2307      	movs	r3, #7
 8000590:	613b      	str	r3, [r7, #16]
        pEraseInit.Banks = FLASH_BANK_1 ;
 8000592:	2301      	movs	r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
        pEraseInit.NbSectors = 1;
 8000596:	2301      	movs	r3, #1
 8000598:	617b      	str	r3, [r7, #20]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800059a:	2320      	movs	r3, #32
 800059c:	61bb      	str	r3, [r7, #24]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800059e:	4810      	ldr	r0, [pc, #64]	; (80005e0 <EE_Init+0x308>)
 80005a0:	f000 f8b0 	bl	8000704 <EE_VerifyPageFullyErased>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	f040 8099 	bne.w	80006de <EE_Init+0x406>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80005ac:	f107 021c 	add.w	r2, r7, #28
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	4611      	mov	r1, r2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 f8b2 	bl	8001720 <HAL_FLASHEx_Erase>
 80005bc:	4603      	mov	r3, r0
 80005be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80005c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	f000 8089 	beq.w	80006de <EE_Init+0x406>
          {
            return FlashStatus;
 80005cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	e088      	b.n	80006e6 <EE_Init+0x40e>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80005d8:	e03b      	b.n	8000652 <EE_Init+0x37a>
 80005da:	bf00      	nop
 80005dc:	08010000 	.word	0x08010000
 80005e0:	08030000 	.word	0x08030000
 80005e4:	08010006 	.word	0x08010006
 80005e8:	24000000 	.word	0x24000000
 80005ec:	240000d0 	.word	0x240000d0
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80005f0:	4b3f      	ldr	r3, [pc, #252]	; (80006f0 <EE_Init+0x418>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80005f8:	493e      	ldr	r1, [pc, #248]	; (80006f4 <EE_Init+0x41c>)
 80005fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d101      	bne.n	8000606 <EE_Init+0x32e>
          {
            x = VarIdx;
 8000602:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000604:	85bb      	strh	r3, [r7, #44]	; 0x2c
          }
          if (VarIdx != x)
 8000606:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000608:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800060c:	429a      	cmp	r2, r3
 800060e:	d01d      	beq.n	800064c <EE_Init+0x374>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000610:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000612:	4a38      	ldr	r2, [pc, #224]	; (80006f4 <EE_Init+0x41c>)
 8000614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000618:	4937      	ldr	r1, [pc, #220]	; (80006f8 <EE_Init+0x420>)
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f898 	bl	8000750 <EE_ReadVariable>
 8000620:	4603      	mov	r3, r0
 8000622:	84bb      	strh	r3, [r7, #36]	; 0x24
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8000624:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000626:	2b01      	cmp	r3, #1
 8000628:	d010      	beq.n	800064c <EE_Init+0x374>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800062a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800062c:	4a31      	ldr	r2, [pc, #196]	; (80006f4 <EE_Init+0x41c>)
 800062e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000632:	4a31      	ldr	r2, [pc, #196]	; (80006f8 <EE_Init+0x420>)
 8000634:	8812      	ldrh	r2, [r2, #0]
 8000636:	4611      	mov	r1, r2
 8000638:	4618      	mov	r0, r3
 800063a:	f000 f99d 	bl	8000978 <EE_VerifyPageFullWriteVariable>
 800063e:	4603      	mov	r3, r0
 8000640:	84fb      	strh	r3, [r7, #38]	; 0x26
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8000642:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <EE_Init+0x374>
              {
                return EepromStatus;
 8000648:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800064a:	e04c      	b.n	80006e6 <EE_Init+0x40e>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800064c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800064e:	3301      	adds	r3, #1
 8000650:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000652:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000654:	2b27      	cmp	r3, #39	; 0x27
 8000656:	d9cb      	bls.n	80005f0 <EE_Init+0x318>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	461a      	mov	r2, r3
 800065c:	4927      	ldr	r1, [pc, #156]	; (80006fc <EE_Init+0x424>)
 800065e:	2001      	movs	r0, #1
 8000660:	f000 ff76 	bl	8001550 <HAL_FLASH_Program>
 8000664:	4603      	mov	r3, r0
 8000666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800066a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800066e:	2b00      	cmp	r3, #0
 8000670:	d003      	beq.n	800067a <EE_Init+0x3a2>
        {
          return FlashStatus;
 8000672:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000676:	b29b      	uxth	r3, r3
 8000678:	e035      	b.n	80006e6 <EE_Init+0x40e>
        }
        pEraseInit.Sector = PAGE0_ID;
 800067a:	2306      	movs	r3, #6
 800067c:	613b      	str	r3, [r7, #16]
        pEraseInit.Banks = FLASH_BANK_1 ;
 800067e:	2301      	movs	r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
        pEraseInit.NbSectors = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000686:	2320      	movs	r3, #32
 8000688:	61bb      	str	r3, [r7, #24]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800068a:	481d      	ldr	r0, [pc, #116]	; (8000700 <EE_Init+0x428>)
 800068c:	f000 f83a 	bl	8000704 <EE_VerifyPageFullyErased>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d123      	bne.n	80006de <EE_Init+0x406>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000696:	f107 021c 	add.w	r2, r7, #28
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	4611      	mov	r1, r2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 f83d 	bl	8001720 <HAL_FLASHEx_Erase>
 80006a6:	4603      	mov	r3, r0
 80006a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80006ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d014      	beq.n	80006de <EE_Init+0x406>
          {
            return FlashStatus;
 80006b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	e014      	b.n	80006e6 <EE_Init+0x40e>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80006bc:	f000 f8b2 	bl	8000824 <EE_Format>
 80006c0:	4603      	mov	r3, r0
 80006c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80006c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d009      	beq.n	80006e2 <EE_Init+0x40a>
      {
        return FlashStatus;
 80006ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	e007      	b.n	80006e6 <EE_Init+0x40e>
      break;
 80006d6:	bf00      	nop
 80006d8:	e004      	b.n	80006e4 <EE_Init+0x40c>
      break;
 80006da:	bf00      	nop
 80006dc:	e002      	b.n	80006e4 <EE_Init+0x40c>
      break;
 80006de:	bf00      	nop
 80006e0:	e000      	b.n	80006e4 <EE_Init+0x40c>
      }
      break;
 80006e2:	bf00      	nop
  }

  return HAL_OK;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3730      	adds	r7, #48	; 0x30
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	08030006 	.word	0x08030006
 80006f4:	24000000 	.word	0x24000000
 80006f8:	240000d0 	.word	0x240000d0
 80006fc:	08030000 	.word	0x08030000
 8000700:	08010000 	.word	0x08010000

08000704 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 800070c:	2301      	movs	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8000710:	f245 5355 	movw	r3, #21845	; 0x5555
 8000714:	817b      	strh	r3, [r7, #10]

  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8000716:	e00d      	b.n	8000734 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 800071e:	897b      	ldrh	r3, [r7, #10]
 8000720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000724:	4293      	cmp	r3, r2
 8000726:	d002      	beq.n	800072e <EE_VerifyPageFullyErased+0x2a>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]

      break;
 800072c:	e006      	b.n	800073c <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3304      	adds	r3, #4
 8000732:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a05      	ldr	r2, [pc, #20]	; (800074c <EE_VerifyPageFullyErased+0x48>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d9ed      	bls.n	8000718 <EE_VerifyPageFullyErased+0x14>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	b29b      	uxth	r3, r3
}
 8000740:	4618      	mov	r0, r3
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	0802ffff 	.word	0x0802ffff

08000750 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 800075c:	2300      	movs	r3, #0
 800075e:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8000760:	f245 5355 	movw	r3, #21845	; 0x5555
 8000764:	81bb      	strh	r3, [r7, #12]
 8000766:	2301      	movs	r3, #1
 8000768:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <EE_ReadVariable+0x88>)
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <EE_ReadVariable+0x88>)
 8000770:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000772:	2000      	movs	r0, #0
 8000774:	f000 f8ba 	bl	80008ec <EE_FindValidPage>
 8000778:	4603      	mov	r3, r0
 800077a:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800077c:	89fb      	ldrh	r3, [r7, #14]
 800077e:	2bab      	cmp	r3, #171	; 0xab
 8000780:	d101      	bne.n	8000786 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000782:	23ab      	movs	r3, #171	; 0xab
 8000784:	e024      	b.n	80007d0 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	045a      	lsls	r2, r3, #17
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <EE_ReadVariable+0x88>)
 800078c:	4413      	add	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8000790:	89fb      	ldrh	r3, [r7, #14]
 8000792:	3301      	adds	r3, #1
 8000794:	045a      	lsls	r2, r3, #17
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <EE_ReadVariable+0x8c>)
 8000798:	4413      	add	r3, r2
 800079a:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 800079c:	e012      	b.n	80007c4 <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 80007a4:	89ba      	ldrh	r2, [r7, #12]
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d108      	bne.n	80007be <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	3b20      	subs	r3, #32
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	82fb      	strh	r3, [r7, #22]

      break;
 80007bc:	e007      	b.n	80007ce <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	3b40      	subs	r3, #64	; 0x40
 80007c2:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	3320      	adds	r3, #32
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d8e7      	bhi.n	800079e <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80007ce:	8afb      	ldrh	r3, [r7, #22]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	08010000 	.word	0x08010000
 80007dc:	0800ffe0 	.word	0x0800ffe0

080007e0 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	460a      	mov	r2, r1
 80007ea:	80fb      	strh	r3, [r7, #6]
 80007ec:	4613      	mov	r3, r2
 80007ee:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80007f4:	88ba      	ldrh	r2, [r7, #4]
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f8bc 	bl	8000978 <EE_VerifyPageFullWriteVariable>
 8000800:	4603      	mov	r3, r0
 8000802:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000804:	89fb      	ldrh	r3, [r7, #14]
 8000806:	2b80      	cmp	r3, #128	; 0x80
 8000808:	d107      	bne.n	800081a <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800080a:	88ba      	ldrh	r2, [r7, #4]
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f927 	bl	8000a64 <EE_PageTransfer>
 8000816:	4603      	mov	r3, r0
 8000818:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800081a:	89fb      	ldrh	r3, [r7, #14]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b090      	sub	sp, #64	; 0x40
 8000828:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800082a:	2300      	movs	r3, #0
 800082c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2220      	movs	r2, #32
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f002 f9e4 	bl	8002c08 <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_1 ;
 8000844:	2301      	movs	r3, #1
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8000848:	2306      	movs	r3, #6
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 800084c:	2301      	movs	r3, #1
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000850:	2320      	movs	r3, #32
 8000852:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000854:	4823      	ldr	r0, [pc, #140]	; (80008e4 <EE_Format+0xc0>)
 8000856:	f7ff ff55 	bl	8000704 <EE_VerifyPageFullyErased>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d111      	bne.n	8000884 <EE_Format+0x60>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000860:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	4611      	mov	r1, r2
 800086a:	4618      	mov	r0, r3
 800086c:	f000 ff58 	bl	8001720 <HAL_FLASHEx_Erase>
 8000870:	4603      	mov	r3, r0
 8000872:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000876:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <EE_Format+0x60>
    {
      return FlashStatus;
 800087e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000882:	e02a      	b.n	80008da <EE_Format+0xb6>
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	461a      	mov	r2, r3
 8000888:	4916      	ldr	r1, [pc, #88]	; (80008e4 <EE_Format+0xc0>)
 800088a:	2001      	movs	r0, #1
 800088c:	f000 fe60 	bl	8001550 <HAL_FLASH_Program>
 8000890:	4603      	mov	r3, r0
 8000892:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000896:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800089a:	2b00      	cmp	r3, #0
 800089c:	d002      	beq.n	80008a4 <EE_Format+0x80>
  {
    return FlashStatus;
 800089e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008a2:	e01a      	b.n	80008da <EE_Format+0xb6>
  }

  pEraseInit.Sector = PAGE1_ID;
 80008a4:	2307      	movs	r3, #7
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80008a8:	480f      	ldr	r0, [pc, #60]	; (80008e8 <EE_Format+0xc4>)
 80008aa:	f7ff ff2b 	bl	8000704 <EE_VerifyPageFullyErased>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d111      	bne.n	80008d8 <EE_Format+0xb4>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80008b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80008b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 ff2e 	bl	8001720 <HAL_FLASHEx_Erase>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80008ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d002      	beq.n	80008d8 <EE_Format+0xb4>
    {
      return FlashStatus;
 80008d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008d6:	e000      	b.n	80008da <EE_Format+0xb6>
    }
  }

  return HAL_OK;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3740      	adds	r7, #64	; 0x40
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	08010000 	.word	0x08010000
 80008e8:	08030000 	.word	0x08030000

080008ec <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80008f6:	2306      	movs	r3, #6
 80008f8:	81fb      	strh	r3, [r7, #14]
 80008fa:	2306      	movs	r3, #6
 80008fc:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <EE_FindValidPage+0x84>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <EE_FindValidPage+0x88>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d01b      	beq.n	8000948 <EE_FindValidPage+0x5c>
 8000910:	2b01      	cmp	r3, #1
 8000912:	d125      	bne.n	8000960 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000914:	89bb      	ldrh	r3, [r7, #12]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d108      	bne.n	800092c <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 800091a:	89fb      	ldrh	r3, [r7, #14]
 800091c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000920:	4293      	cmp	r3, r2
 8000922:	d101      	bne.n	8000928 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000924:	2300      	movs	r3, #0
 8000926:	e01c      	b.n	8000962 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000928:	2301      	movs	r3, #1
 800092a:	e01a      	b.n	8000962 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 800092c:	89fb      	ldrh	r3, [r7, #14]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d108      	bne.n	8000944 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000932:	89bb      	ldrh	r3, [r7, #12]
 8000934:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000938:	4293      	cmp	r3, r2
 800093a:	d101      	bne.n	8000940 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 800093c:	2301      	movs	r3, #1
 800093e:	e010      	b.n	8000962 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000940:	2300      	movs	r3, #0
 8000942:	e00e      	b.n	8000962 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000944:	23ab      	movs	r3, #171	; 0xab
 8000946:	e00c      	b.n	8000962 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000948:	89fb      	ldrh	r3, [r7, #14]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d101      	bne.n	8000952 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800094e:	2300      	movs	r3, #0
 8000950:	e007      	b.n	8000962 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000952:	89bb      	ldrh	r3, [r7, #12]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d101      	bne.n	800095c <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000958:	2301      	movs	r3, #1
 800095a:	e002      	b.n	8000962 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 800095c:	23ab      	movs	r3, #171	; 0xab
 800095e:	e000      	b.n	8000962 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000960:	2300      	movs	r3, #0
  }
}
 8000962:	4618      	mov	r0, r3
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	08010000 	.word	0x08010000
 8000974:	08030000 	.word	0x08030000

08000978 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b096      	sub	sp, #88	; 0x58
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	460a      	mov	r2, r1
 8000982:	80fb      	strh	r3, [r7, #6]
 8000984:	4613      	mov	r3, r2
 8000986:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000988:	2300      	movs	r3, #0
 800098a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 800098e:	2300      	movs	r3, #0
 8000990:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <EE_VerifyPageFullWriteVariable+0xe0>)
 8000996:	657b      	str	r3, [r7, #84]	; 0x54
 8000998:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <EE_VerifyPageFullWriteVariable+0xe4>)
 800099a:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};				//@BACK: 4'ler 8 olacak
 800099c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a0:	2220      	movs	r2, #32
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 f92f 	bl	8002c08 <memset>
 80009aa:	88bb      	ldrh	r3, [r7, #4]
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress}; //@BACK: 4'ler 8 olacak
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	2220      	movs	r2, #32
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 f926 	bl	8002c08 <memset>
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff ff93 	bl	80008ec <EE_FindValidPage>
 80009c6:	4603      	mov	r3, r0
 80009c8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80009cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80009d0:	2bab      	cmp	r3, #171	; 0xab
 80009d2:	d101      	bne.n	80009d8 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 80009d4:	23ab      	movs	r3, #171	; 0xab
 80009d6:	e03b      	b.n	8000a50 <EE_VerifyPageFullWriteVariable+0xd8>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80009d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80009dc:	045a      	lsls	r2, r3, #17
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <EE_VerifyPageFullWriteVariable+0xe0>)
 80009e0:	4413      	add	r3, r2
 80009e2:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 80009e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80009e8:	3301      	adds	r3, #1
 80009ea:	045a      	lsls	r2, r3, #17
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <EE_VerifyPageFullWriteVariable+0xe8>)
 80009ee:	4413      	add	r3, r2
 80009f0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 80009f2:	e028      	b.n	8000a46 <EE_VerifyPageFullWriteVariable+0xce>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80009f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009fc:	d120      	bne.n	8000a40 <EE_VerifyPageFullWriteVariable+0xc8>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program( FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 80009fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a02:	461a      	mov	r2, r3
 8000a04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000a06:	2001      	movs	r0, #1
 8000a08:	f000 fda2 	bl	8001550 <HAL_FLASH_Program>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000a12:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <EE_VerifyPageFullWriteVariable+0xaa>
      {
        return FlashStatus;
 8000a1a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	e016      	b.n	8000a50 <EE_VerifyPageFullWriteVariable+0xd8>
      }
      /* Set variable virtual address */								/* @BACK 32 OLACAK */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1)); //@BACK
 8000a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a24:	3320      	adds	r3, #32
 8000a26:	f107 020c 	add.w	r2, r7, #12
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 fd8f 	bl	8001550 <HAL_FLASH_Program>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8000a38:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	e007      	b.n	8000a50 <EE_VerifyPageFullWriteVariable+0xd8>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;	//@BACK: 64 OLACAK
 8000a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a42:	3340      	adds	r3, #64	; 0x40
 8000a44:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8000a46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d3d2      	bcc.n	80009f4 <EE_VerifyPageFullWriteVariable+0x7c>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000a4e:	2380      	movs	r3, #128	; 0x80
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3758      	adds	r7, #88	; 0x58
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	08010000 	.word	0x08010000
 8000a5c:	08030000 	.word	0x08030000
 8000a60:	0800ffff 	.word	0x0800ffff

08000a64 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b09c      	sub	sp, #112	; 0x70
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	460a      	mov	r2, r1
 8000a6e:	80fb      	strh	r3, [r7, #6]
 8000a70:	4613      	mov	r3, r2
 8000a72:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8000a7a:	4b6c      	ldr	r3, [pc, #432]	; (8000c2c <EE_PageTransfer+0x1c8>)
 8000a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8000a96:	2300      	movs	r3, #0
 8000a98:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000aa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa4:	2220      	movs	r2, #32
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 f8ad 	bl	8002c08 <memset>
  uint32_t receive[8] = {0xEEEE};
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 f8a6 	bl	8002c08 <memset>
 8000abc:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8000ac0:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff ff12 	bl	80008ec <EE_FindValidPage>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000ace:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d105      	bne.n	8000ae2 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000ad6:	4b55      	ldr	r3, [pc, #340]	; (8000c2c <EE_PageTransfer+0x1c8>)
 8000ad8:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8000ada:	2307      	movs	r3, #7
 8000adc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8000ae0:	e00b      	b.n	8000afa <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8000ae2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d105      	bne.n	8000af6 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8000aea:	4b51      	ldr	r3, [pc, #324]	; (8000c30 <EE_PageTransfer+0x1cc>)
 8000aec:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8000aee:	2306      	movs	r3, #6
 8000af0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8000af4:	e001      	b.n	8000afa <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000af6:	23ab      	movs	r3, #171	; 0xab
 8000af8:	e094      	b.n	8000c24 <EE_PageTransfer+0x1c0>
  }

  /* Set the new Page status to RECEIVE_DATA status */

  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	461a      	mov	r2, r3
 8000b00:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000b02:	2001      	movs	r0, #1
 8000b04:	f000 fd24 	bl	8001550 <HAL_FLASH_Program>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000b0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <EE_PageTransfer+0xba>
  {
    return FlashStatus;
 8000b16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	e082      	b.n	8000c24 <EE_PageTransfer+0x1c0>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000b1e:	88ba      	ldrh	r2, [r7, #4]
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff27 	bl	8000978 <EE_VerifyPageFullWriteVariable>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8000b30:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d002      	beq.n	8000b3e <EE_PageTransfer+0xda>
  {
    return EepromStatus;
 8000b38:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000b3c:	e072      	b.n	8000c24 <EE_PageTransfer+0x1c0>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8000b44:	e031      	b.n	8000baa <EE_PageTransfer+0x146>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000b46:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000b4a:	4a3a      	ldr	r2, [pc, #232]	; (8000c34 <EE_PageTransfer+0x1d0>)
 8000b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b50:	88fa      	ldrh	r2, [r7, #6]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d024      	beq.n	8000ba0 <EE_PageTransfer+0x13c>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000b56:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000b5a:	4a36      	ldr	r2, [pc, #216]	; (8000c34 <EE_PageTransfer+0x1d0>)
 8000b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b60:	4935      	ldr	r1, [pc, #212]	; (8000c38 <EE_PageTransfer+0x1d4>)
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fdf4 	bl	8000750 <EE_ReadVariable>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8000b6e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d014      	beq.n	8000ba0 <EE_PageTransfer+0x13c>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000b76:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000b7a:	4a2e      	ldr	r2, [pc, #184]	; (8000c34 <EE_PageTransfer+0x1d0>)
 8000b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b80:	4a2d      	ldr	r2, [pc, #180]	; (8000c38 <EE_PageTransfer+0x1d4>)
 8000b82:	8812      	ldrh	r2, [r2, #0]
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fef6 	bl	8000978 <EE_VerifyPageFullWriteVariable>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8000b92:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d002      	beq.n	8000ba0 <EE_PageTransfer+0x13c>
        {
          return EepromStatus;
 8000b9a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000b9e:	e041      	b.n	8000c24 <EE_PageTransfer+0x1c0>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000ba0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8000baa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000bae:	2b27      	cmp	r3, #39	; 0x27
 8000bb0:	d9c9      	bls.n	8000b46 <EE_PageTransfer+0xe2>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8000bb2:	f000 fd3d 	bl	8001630 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <EE_PageTransfer+0x1d8>)
 8000bb8:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8000bbc:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_1 ;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8000bc6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000bca:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000bd0:	2320      	movs	r3, #32
 8000bd2:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000bd4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000bd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 fd9e 	bl	8001720 <HAL_FLASHEx_Erase>
 8000be4:	4603      	mov	r3, r0
 8000be6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000bea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <EE_PageTransfer+0x196>
  {
    return FlashStatus;
 8000bf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	e014      	b.n	8000c24 <EE_PageTransfer+0x1c0>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8000bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfe:	461a      	mov	r2, r3
 8000c00:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 fca4 	bl	8001550 <HAL_FLASH_Program>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000c0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <EE_PageTransfer+0x1ba>
  {
    return FlashStatus;
 8000c16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	e002      	b.n	8000c24 <EE_PageTransfer+0x1c0>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8000c1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c22:	b29b      	uxth	r3, r3
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3770      	adds	r7, #112	; 0x70
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	08010000 	.word	0x08010000
 8000c30:	08030000 	.word	0x08030000
 8000c34:	24000000 	.word	0x24000000
 8000c38:	240000d0 	.word	0x240000d0
 8000c3c:	52002000 	.word	0x52002000

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c44:	f000 fb02 	bl	800124c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c48:	f000 f950 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4c:	f000 f9cc 	bl	8000fe8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  HAL_FLASH_Unlock();
 8000c50:	f000 fcee 	bl	8001630 <HAL_FLASH_Unlock>

  if( EE_Init() != EE_OK)
 8000c54:	f7ff fb40 	bl	80002d8 <EE_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <main+0x22>
  {
      Error_Handler();
 8000c5e:	f000 f9f9 	bl	8001054 <Error_Handler>
  }

  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c66:	489a      	ldr	r0, [pc, #616]	; (8000ed0 <main+0x290>)
 8000c68:	f000 fff7 	bl	8001c5a <HAL_GPIO_TogglePin>

  /* --- Store successively many values of the three variables in the EEPROM ---*/
    /* Store 0x1000 values of Variable1 in EEPROM */
    for (VarValue = 1; VarValue <= 0x1000; VarValue++)
 8000c6c:	4b99      	ldr	r3, [pc, #612]	; (8000ed4 <main+0x294>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	801a      	strh	r2, [r3, #0]
 8000c72:	e076      	b.n	8000d62 <main+0x122>
    {
      /* Sequence 1 */
      if((EE_WriteVariable(VirtAddVarTab[0],  VarValue)) != HAL_OK)
 8000c74:	4b98      	ldr	r3, [pc, #608]	; (8000ed8 <main+0x298>)
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	4a96      	ldr	r2, [pc, #600]	; (8000ed4 <main+0x294>)
 8000c7a:	8812      	ldrh	r2, [r2, #0]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fdae 	bl	80007e0 <EE_WriteVariable>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <main+0x4e>
      {
        Error_Handler();
 8000c8a:	f000 f9e3 	bl	8001054 <Error_Handler>
      }

      if((EE_ReadVariable(VirtAddVarTab[0],  &VarDataTab[0])) != HAL_OK)
 8000c8e:	4b92      	ldr	r3, [pc, #584]	; (8000ed8 <main+0x298>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	4992      	ldr	r1, [pc, #584]	; (8000edc <main+0x29c>)
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fd5b 	bl	8000750 <EE_ReadVariable>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <main+0x64>
      {
        Error_Handler();
 8000ca0:	f000 f9d8 	bl	8001054 <Error_Handler>
      }
      if (VarValue != VarDataTab[0])
 8000ca4:	4b8d      	ldr	r3, [pc, #564]	; (8000edc <main+0x29c>)
 8000ca6:	881a      	ldrh	r2, [r3, #0]
 8000ca8:	4b8a      	ldr	r3, [pc, #552]	; (8000ed4 <main+0x294>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d001      	beq.n	8000cb4 <main+0x74>
      {
        Error_Handler();
 8000cb0:	f000 f9d0 	bl	8001054 <Error_Handler>
      }

      /* Sequence 2 */
      if(EE_WriteVariable(VirtAddVarTab[1], ~VarValue) != HAL_OK)
 8000cb4:	4b88      	ldr	r3, [pc, #544]	; (8000ed8 <main+0x298>)
 8000cb6:	885a      	ldrh	r2, [r3, #2]
 8000cb8:	4b86      	ldr	r3, [pc, #536]	; (8000ed4 <main+0x294>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4610      	mov	r0, r2
 8000cc4:	f7ff fd8c 	bl	80007e0 <EE_WriteVariable>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <main+0x92>
      {
        Error_Handler();
 8000cce:	f000 f9c1 	bl	8001054 <Error_Handler>
      }

      if(EE_ReadVariable(VirtAddVarTab[1],  &VarDataTab[1]) != HAL_OK)
 8000cd2:	4b81      	ldr	r3, [pc, #516]	; (8000ed8 <main+0x298>)
 8000cd4:	885b      	ldrh	r3, [r3, #2]
 8000cd6:	4982      	ldr	r1, [pc, #520]	; (8000ee0 <main+0x2a0>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fd39 	bl	8000750 <EE_ReadVariable>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <main+0xa8>
      {
        Error_Handler();
 8000ce4:	f000 f9b6 	bl	8001054 <Error_Handler>
      }
      if(((uint16_t)~VarValue) != VarDataTab[1])
 8000ce8:	4b7a      	ldr	r3, [pc, #488]	; (8000ed4 <main+0x294>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b7a      	ldr	r3, [pc, #488]	; (8000edc <main+0x29c>)
 8000cf2:	885b      	ldrh	r3, [r3, #2]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d001      	beq.n	8000cfc <main+0xbc>
      {
        Error_Handler();
 8000cf8:	f000 f9ac 	bl	8001054 <Error_Handler>
      }
      /* Toggle LED3 */
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000cfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d00:	4873      	ldr	r0, [pc, #460]	; (8000ed0 <main+0x290>)
 8000d02:	f000 ffaa 	bl	8001c5a <HAL_GPIO_TogglePin>
      /* Sequence 3 */
      if(EE_WriteVariable(VirtAddVarTab[2],  VarValue << 1) != HAL_OK)
 8000d06:	4b74      	ldr	r3, [pc, #464]	; (8000ed8 <main+0x298>)
 8000d08:	889a      	ldrh	r2, [r3, #4]
 8000d0a:	4b72      	ldr	r3, [pc, #456]	; (8000ed4 <main+0x294>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4619      	mov	r1, r3
 8000d14:	4610      	mov	r0, r2
 8000d16:	f7ff fd63 	bl	80007e0 <EE_WriteVariable>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <main+0xe4>
      {
        Error_Handler();
 8000d20:	f000 f998 	bl	8001054 <Error_Handler>
      }

      if(EE_ReadVariable(VirtAddVarTab[2],  &VarDataTab[2]) != HAL_OK)
 8000d24:	4b6c      	ldr	r3, [pc, #432]	; (8000ed8 <main+0x298>)
 8000d26:	889b      	ldrh	r3, [r3, #4]
 8000d28:	496e      	ldr	r1, [pc, #440]	; (8000ee4 <main+0x2a4>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fd10 	bl	8000750 <EE_ReadVariable>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <main+0xfa>
      {
        Error_Handler();
 8000d36:	f000 f98d 	bl	8001054 <Error_Handler>
      }
      if ((VarValue << 1) != VarDataTab[2])
 8000d3a:	4b66      	ldr	r3, [pc, #408]	; (8000ed4 <main+0x294>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4a66      	ldr	r2, [pc, #408]	; (8000edc <main+0x29c>)
 8000d42:	8892      	ldrh	r2, [r2, #4]
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d001      	beq.n	8000d4c <main+0x10c>
      {
        Error_Handler();
 8000d48:	f000 f984 	bl	8001054 <Error_Handler>
      }
      /* Toggle LED3 */
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d50:	485f      	ldr	r0, [pc, #380]	; (8000ed0 <main+0x290>)
 8000d52:	f000 ff82 	bl	8001c5a <HAL_GPIO_TogglePin>
    for (VarValue = 1; VarValue <= 0x1000; VarValue++)
 8000d56:	4b5f      	ldr	r3, [pc, #380]	; (8000ed4 <main+0x294>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b5d      	ldr	r3, [pc, #372]	; (8000ed4 <main+0x294>)
 8000d60:	801a      	strh	r2, [r3, #0]
 8000d62:	4b5c      	ldr	r3, [pc, #368]	; (8000ed4 <main+0x294>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d6a:	d983      	bls.n	8000c74 <main+0x34>

    }


    /* read the last stored variables data*/
    if(EE_ReadVariable(VirtAddVarTab[0], &VarDataTmp) != HAL_OK)
 8000d6c:	4b5a      	ldr	r3, [pc, #360]	; (8000ed8 <main+0x298>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	495d      	ldr	r1, [pc, #372]	; (8000ee8 <main+0x2a8>)
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fcec 	bl	8000750 <EE_ReadVariable>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <main+0x142>
    {
      Error_Handler();
 8000d7e:	f000 f969 	bl	8001054 <Error_Handler>
    }

    if (VarDataTmp != VarDataTab[0])
 8000d82:	4b56      	ldr	r3, [pc, #344]	; (8000edc <main+0x29c>)
 8000d84:	881a      	ldrh	r2, [r3, #0]
 8000d86:	4b58      	ldr	r3, [pc, #352]	; (8000ee8 <main+0x2a8>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d001      	beq.n	8000d92 <main+0x152>
    {
      Error_Handler();
 8000d8e:	f000 f961 	bl	8001054 <Error_Handler>
    }

    if(EE_ReadVariable(VirtAddVarTab[1], &VarDataTmp) != HAL_OK)
 8000d92:	4b51      	ldr	r3, [pc, #324]	; (8000ed8 <main+0x298>)
 8000d94:	885b      	ldrh	r3, [r3, #2]
 8000d96:	4954      	ldr	r1, [pc, #336]	; (8000ee8 <main+0x2a8>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fcd9 	bl	8000750 <EE_ReadVariable>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <main+0x168>
    {
      Error_Handler();
 8000da4:	f000 f956 	bl	8001054 <Error_Handler>
    }

    if (VarDataTmp != VarDataTab[1])
 8000da8:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <main+0x29c>)
 8000daa:	885a      	ldrh	r2, [r3, #2]
 8000dac:	4b4e      	ldr	r3, [pc, #312]	; (8000ee8 <main+0x2a8>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d001      	beq.n	8000db8 <main+0x178>
    {
      Error_Handler();
 8000db4:	f000 f94e 	bl	8001054 <Error_Handler>
    }

    if(EE_ReadVariable(VirtAddVarTab[2], &VarDataTmp) != HAL_OK)
 8000db8:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <main+0x298>)
 8000dba:	889b      	ldrh	r3, [r3, #4]
 8000dbc:	494a      	ldr	r1, [pc, #296]	; (8000ee8 <main+0x2a8>)
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fcc6 	bl	8000750 <EE_ReadVariable>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <main+0x18e>
    {
      Error_Handler();
 8000dca:	f000 f943 	bl	8001054 <Error_Handler>
    }

    if (VarDataTmp != VarDataTab[2])
 8000dce:	4b43      	ldr	r3, [pc, #268]	; (8000edc <main+0x29c>)
 8000dd0:	889a      	ldrh	r2, [r3, #4]
 8000dd2:	4b45      	ldr	r3, [pc, #276]	; (8000ee8 <main+0x2a8>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d001      	beq.n	8000dde <main+0x19e>
    {
      Error_Handler();
 8000dda:	f000 f93b 	bl	8001054 <Error_Handler>
    }
    /* Toggle LED3 */
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de2:	483b      	ldr	r0, [pc, #236]	; (8000ed0 <main+0x290>)
 8000de4:	f000 ff39 	bl	8001c5a <HAL_GPIO_TogglePin>


    /* Store 0x3000 values of Variable3 in EEPROM */
    for (VarValue = 1; VarValue <= 0x3000; VarValue++)
 8000de8:	4b3a      	ldr	r3, [pc, #232]	; (8000ed4 <main+0x294>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	801a      	strh	r2, [r3, #0]
 8000dee:	e02a      	b.n	8000e46 <main+0x206>
    {
      if(EE_WriteVariable(VirtAddVarTab[2], VarValue) != HAL_OK)
 8000df0:	4b39      	ldr	r3, [pc, #228]	; (8000ed8 <main+0x298>)
 8000df2:	889b      	ldrh	r3, [r3, #4]
 8000df4:	4a37      	ldr	r2, [pc, #220]	; (8000ed4 <main+0x294>)
 8000df6:	8812      	ldrh	r2, [r2, #0]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fcf0 	bl	80007e0 <EE_WriteVariable>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <main+0x1ca>
      {
        Error_Handler();
 8000e06:	f000 f925 	bl	8001054 <Error_Handler>
      }

      if(EE_ReadVariable(VirtAddVarTab[2], &VarDataTab[2]) != HAL_OK)
 8000e0a:	4b33      	ldr	r3, [pc, #204]	; (8000ed8 <main+0x298>)
 8000e0c:	889b      	ldrh	r3, [r3, #4]
 8000e0e:	4935      	ldr	r1, [pc, #212]	; (8000ee4 <main+0x2a4>)
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fc9d 	bl	8000750 <EE_ReadVariable>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <main+0x1e0>
      {
        Error_Handler();
 8000e1c:	f000 f91a 	bl	8001054 <Error_Handler>
      }
      if(VarValue != VarDataTab[2])
 8000e20:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <main+0x29c>)
 8000e22:	889a      	ldrh	r2, [r3, #4]
 8000e24:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <main+0x294>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d001      	beq.n	8000e30 <main+0x1f0>
      {
        Error_Handler();
 8000e2c:	f000 f912 	bl	8001054 <Error_Handler>
      }
      /* Toggle LED3 */
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e34:	4826      	ldr	r0, [pc, #152]	; (8000ed0 <main+0x290>)
 8000e36:	f000 ff10 	bl	8001c5a <HAL_GPIO_TogglePin>
    for (VarValue = 1; VarValue <= 0x3000; VarValue++)
 8000e3a:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <main+0x294>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <main+0x294>)
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <main+0x294>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000e4e:	d9cf      	bls.n	8000df0 <main+0x1b0>
    }

    /* read the last stored variables data*/
    if(EE_ReadVariable(VirtAddVarTab[0], &VarDataTmp) != HAL_OK)
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <main+0x298>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	4924      	ldr	r1, [pc, #144]	; (8000ee8 <main+0x2a8>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fc7a 	bl	8000750 <EE_ReadVariable>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <main+0x226>
    {
      Error_Handler();
 8000e62:	f000 f8f7 	bl	8001054 <Error_Handler>
    }

    if (VarDataTmp != VarDataTab[0])
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <main+0x29c>)
 8000e68:	881a      	ldrh	r2, [r3, #0]
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <main+0x2a8>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d001      	beq.n	8000e76 <main+0x236>
    {
      Error_Handler();
 8000e72:	f000 f8ef 	bl	8001054 <Error_Handler>
    }

    if(EE_ReadVariable(VirtAddVarTab[1], &VarDataTmp) != HAL_OK)
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <main+0x298>)
 8000e78:	885b      	ldrh	r3, [r3, #2]
 8000e7a:	491b      	ldr	r1, [pc, #108]	; (8000ee8 <main+0x2a8>)
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fc67 	bl	8000750 <EE_ReadVariable>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <main+0x24c>
    {
      Error_Handler();
 8000e88:	f000 f8e4 	bl	8001054 <Error_Handler>
    }
    if (VarDataTmp != VarDataTab[1])
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <main+0x29c>)
 8000e8e:	885a      	ldrh	r2, [r3, #2]
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <main+0x2a8>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d001      	beq.n	8000e9c <main+0x25c>
    {
      Error_Handler();
 8000e98:	f000 f8dc 	bl	8001054 <Error_Handler>
    }

    /* Toggle LED3 */
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000e9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea0:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <main+0x290>)
 8000ea2:	f000 feda 	bl	8001c5a <HAL_GPIO_TogglePin>

    if(EE_ReadVariable(VirtAddVarTab[2], &VarDataTmp) != HAL_OK)
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <main+0x298>)
 8000ea8:	889b      	ldrh	r3, [r3, #4]
 8000eaa:	490f      	ldr	r1, [pc, #60]	; (8000ee8 <main+0x2a8>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fc4f 	bl	8000750 <EE_ReadVariable>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <main+0x27c>
    {
      Error_Handler();
 8000eb8:	f000 f8cc 	bl	8001054 <Error_Handler>
    }
    if (VarDataTmp != VarDataTab[2])
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <main+0x29c>)
 8000ebe:	889a      	ldrh	r2, [r3, #4]
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <main+0x2a8>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d001      	beq.n	8000ecc <main+0x28c>
    {
      Error_Handler();
 8000ec8:	f000 f8c4 	bl	8001054 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <main+0x28c>
 8000ece:	bf00      	nop
 8000ed0:	58020c00 	.word	0x58020c00
 8000ed4:	240000a0 	.word	0x240000a0
 8000ed8:	24000000 	.word	0x24000000
 8000edc:	24000050 	.word	0x24000050
 8000ee0:	24000052 	.word	0x24000052
 8000ee4:	24000054 	.word	0x24000054
 8000ee8:	240000a2 	.word	0x240000a2

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b09c      	sub	sp, #112	; 0x70
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef6:	224c      	movs	r2, #76	; 0x4c
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fe84 	bl	8002c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2220      	movs	r2, #32
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fe7e 	bl	8002c08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f000 febf 	bl	8001c90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <SystemClock_Config+0xf4>)
 8000f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1a:	4a31      	ldr	r2, [pc, #196]	; (8000fe0 <SystemClock_Config+0xf4>)
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f22:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <SystemClock_Config+0xf4>)
 8000f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <SystemClock_Config+0xf8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f34:	4a2b      	ldr	r2, [pc, #172]	; (8000fe4 <SystemClock_Config+0xf8>)
 8000f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <SystemClock_Config+0xf8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f48:	bf00      	nop
 8000f4a:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <SystemClock_Config+0xf8>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f56:	d1f8      	bne.n	8000f4a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f60:	2340      	movs	r3, #64	; 0x40
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f64:	2302      	movs	r3, #2
 8000f66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f70:	230a      	movs	r3, #10
 8000f72:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f80:	230c      	movs	r3, #12
 8000f82:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000f84:	2302      	movs	r3, #2
 8000f86:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 feb6 	bl	8001d04 <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f9e:	f000 f859 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa2:	233f      	movs	r3, #63	; 0x3f
 8000fa4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f001 faca 	bl	8002560 <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000fd2:	f000 f83f 	bl	8001054 <Error_Handler>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3770      	adds	r7, #112	; 0x70
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	58000400 	.word	0x58000400
 8000fe4:	58024800 	.word	0x58024800

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <MX_GPIO_Init+0x64>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <MX_GPIO_Init+0x64>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_GPIO_Init+0x64>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <MX_GPIO_Init+0x68>)
 8001022:	f000 fe01 	bl	8001c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_GPIO_Init+0x68>)
 800103e:	f000 fc43 	bl	80018c8 <HAL_GPIO_Init>

}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	58024400 	.word	0x58024400
 8001050:	58020c00 	.word	0x58020c00

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	e7fe      	b.n	800105c <Error_Handler+0x8>
	...

08001060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_MspInit+0x30>)
 8001068:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800106c:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_MspInit+0x30>)
 800106e:	f043 0302 	orr.w	r3, r3, #2
 8001072:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_MspInit+0x30>)
 8001078:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	58024400 	.word	0x58024400

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f926 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010ec:	4b37      	ldr	r3, [pc, #220]	; (80011cc <SystemInit+0xe4>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f2:	4a36      	ldr	r2, [pc, #216]	; (80011cc <SystemInit+0xe4>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010fc:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <SystemInit+0xe8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	2b06      	cmp	r3, #6
 8001106:	d807      	bhi.n	8001118 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <SystemInit+0xe8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 030f 	bic.w	r3, r3, #15
 8001110:	4a2f      	ldr	r2, [pc, #188]	; (80011d0 <SystemInit+0xe8>)
 8001112:	f043 0307 	orr.w	r3, r3, #7
 8001116:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <SystemInit+0xec>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a2d      	ldr	r2, [pc, #180]	; (80011d4 <SystemInit+0xec>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <SystemInit+0xec>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800112a:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <SystemInit+0xec>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4929      	ldr	r1, [pc, #164]	; (80011d4 <SystemInit+0xec>)
 8001130:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <SystemInit+0xf0>)
 8001132:	4013      	ands	r3, r2
 8001134:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001136:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <SystemInit+0xe8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <SystemInit+0xe8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 030f 	bic.w	r3, r3, #15
 800114a:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <SystemInit+0xe8>)
 800114c:	f043 0307 	orr.w	r3, r3, #7
 8001150:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <SystemInit+0xec>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <SystemInit+0xec>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <SystemInit+0xec>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <SystemInit+0xec>)
 8001166:	4a1d      	ldr	r2, [pc, #116]	; (80011dc <SystemInit+0xf4>)
 8001168:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <SystemInit+0xec>)
 800116c:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <SystemInit+0xf8>)
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <SystemInit+0xec>)
 8001172:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <SystemInit+0xfc>)
 8001174:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <SystemInit+0xec>)
 8001178:	2200      	movs	r2, #0
 800117a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <SystemInit+0xec>)
 800117e:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <SystemInit+0xfc>)
 8001180:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <SystemInit+0xec>)
 8001184:	2200      	movs	r2, #0
 8001186:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <SystemInit+0xec>)
 800118a:	4a16      	ldr	r2, [pc, #88]	; (80011e4 <SystemInit+0xfc>)
 800118c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <SystemInit+0xec>)
 8001190:	2200      	movs	r2, #0
 8001192:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <SystemInit+0xec>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <SystemInit+0xec>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <SystemInit+0xec>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <SystemInit+0x100>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <SystemInit+0x104>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011b2:	d202      	bcs.n	80011ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <SystemInit+0x108>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <SystemInit+0x10c>)
 80011bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00
 80011d0:	52002000 	.word	0x52002000
 80011d4:	58024400 	.word	0x58024400
 80011d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80011dc:	02020200 	.word	0x02020200
 80011e0:	01ff0000 	.word	0x01ff0000
 80011e4:	01010280 	.word	0x01010280
 80011e8:	5c001000 	.word	0x5c001000
 80011ec:	ffff0000 	.word	0xffff0000
 80011f0:	51008108 	.word	0x51008108
 80011f4:	52004000 	.word	0x52004000

080011f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001230 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011fc:	f7ff ff74 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	; (8001238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	; (8001244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001226:	f001 fccb 	bl	8002bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122a:	f7ff fd09 	bl	8000c40 <main>
  bx  lr
 800122e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001230:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001234:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001238:	240000b4 	.word	0x240000b4
  ldr r2, =_sidata
 800123c:	08002c48 	.word	0x08002c48
  ldr r2, =_sbss
 8001240:	240000b4 	.word	0x240000b4
  ldr r4, =_ebss
 8001244:	240000f4 	.word	0x240000f4

08001248 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC3_IRQHandler>
	...

0800124c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001252:	2003      	movs	r0, #3
 8001254:	f000 f94a 	bl	80014ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001258:	f001 fb38 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 800125c:	4602      	mov	r2, r0
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_Init+0x68>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	4913      	ldr	r1, [pc, #76]	; (80012b8 <HAL_Init+0x6c>)
 800126a:	5ccb      	ldrb	r3, [r1, r3]
 800126c:	f003 031f 	and.w	r3, r3, #31
 8001270:	fa22 f303 	lsr.w	r3, r2, r3
 8001274:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_Init+0x68>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_Init+0x6c>)
 8001280:	5cd3      	ldrb	r3, [r2, r3]
 8001282:	f003 031f 	and.w	r3, r3, #31
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	fa22 f303 	lsr.w	r3, r2, r3
 800128c:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <HAL_Init+0x70>)
 800128e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001290:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <HAL_Init+0x74>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001296:	200f      	movs	r0, #15
 8001298:	f000 f814 	bl	80012c4 <HAL_InitTick>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e002      	b.n	80012ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012a6:	f7ff fedb 	bl	8001060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	58024400 	.word	0x58024400
 80012b8:	08002c30 	.word	0x08002c30
 80012bc:	240000a8 	.word	0x240000a8
 80012c0:	240000a4 	.word	0x240000a4

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_InitTick+0x60>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e021      	b.n	800131c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_InitTick+0x64>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_InitTick+0x60>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f921 	bl	8001536 <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00e      	b.n	800131c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d80a      	bhi.n	800131a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f000 f8f9 	bl	8001502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_InitTick+0x68>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	240000b0 	.word	0x240000b0
 8001328:	240000a4 	.word	0x240000a4
 800132c:	240000ac 	.word	0x240000ac

08001330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x20>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x24>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <HAL_IncTick+0x24>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	240000b0 	.word	0x240000b0
 8001354:	240000d4 	.word	0x240000d4

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	240000d4 	.word	0x240000d4

08001370 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_GetREVID+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	0c1b      	lsrs	r3, r3, #16
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	5c001000 	.word	0x5c001000

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <__NVIC_SetPriorityGrouping+0x40>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x40>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	05fa0000 	.word	0x05fa0000

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	; (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <__NVIC_SetPriority+0x50>)
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b8:	d301      	bcc.n	80014be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00f      	b.n	80014de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <SysTick_Config+0x40>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c6:	210f      	movs	r1, #15
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f7ff ff8e 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <SysTick_Config+0x40>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d6:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <SysTick_Config+0x40>)
 80014d8:	2207      	movs	r2, #7
 80014da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	e000e010 	.word	0xe000e010

080014ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff47 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff5e 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff90 	bl	8001440 <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5f 	bl	80013ec <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffb2 	bl	80014a8 <SysTick_Config>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8001564:	2308      	movs	r3, #8
 8001566:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001568:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <HAL_FLASH_Program+0xd4>)
 800156a:	7d1b      	ldrb	r3, [r3, #20]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_FLASH_Program+0x24>
 8001570:	2302      	movs	r3, #2
 8001572:	e053      	b.n	800161c <HAL_FLASH_Program+0xcc>
 8001574:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <HAL_FLASH_Program+0xd4>)
 8001576:	2201      	movs	r2, #1
 8001578:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001580:	d315      	bcc.n	80015ae <HAL_FLASH_Program+0x5e>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	4a28      	ldr	r2, [pc, #160]	; (8001628 <HAL_FLASH_Program+0xd8>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d811      	bhi.n	80015ae <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800158a:	2301      	movs	r3, #1
 800158c:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <HAL_FLASH_Program+0xd4>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001594:	6979      	ldr	r1, [r7, #20]
 8001596:	f24c 3050 	movw	r0, #50000	; 0xc350
 800159a:	f000 f86b 	bl	8001674 <FLASH_WaitForLastOperation>
 800159e:	4603      	mov	r3, r0
 80015a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 80015a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <HAL_FLASH_Program+0x62>
 80015ac:	e031      	b.n	8001612 <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e034      	b.n	800161c <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <HAL_FLASH_Program+0xdc>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	4a1d      	ldr	r2, [pc, #116]	; (800162c <HAL_FLASH_Program+0xdc>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	60d3      	str	r3, [r2, #12]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80015be:	f3bf 8f6f 	isb	sy
}
 80015c2:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015c4:	f3bf 8f4f 	dsb	sy
}
 80015c8:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	601a      	str	r2, [r3, #0]
        dest_addr++;
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	3304      	adds	r3, #4
 80015d6:	623b      	str	r3, [r7, #32]
        src_addr++;
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	3304      	adds	r3, #4
 80015dc:	61fb      	str	r3, [r7, #28]
        row_index--;
 80015de:	7efb      	ldrb	r3, [r7, #27]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 80015e4:	7efb      	ldrb	r3, [r7, #27]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ef      	bne.n	80015ca <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 80015ea:	f3bf 8f6f 	isb	sy
}
 80015ee:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80015f0:	f3bf 8f4f 	dsb	sy
}
 80015f4:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80015f6:	6979      	ldr	r1, [r7, #20]
 80015f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015fc:	f000 f83a 	bl	8001674 <FLASH_WaitForLastOperation>
 8001600:	4603      	mov	r3, r0
 8001602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_FLASH_Program+0xdc>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_FLASH_Program+0xdc>)
 800160c:	f023 0302 	bic.w	r3, r3, #2
 8001610:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <HAL_FLASH_Program+0xd4>)
 8001614:	2200      	movs	r2, #0
 8001616:	751a      	strb	r2, [r3, #20]

  return status;
 8001618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800161c:	4618      	mov	r0, r3
 800161e:	3728      	adds	r7, #40	; 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	240000d8 	.word	0x240000d8
 8001628:	0801ffff 	.word	0x0801ffff
 800162c:	52002000 	.word	0x52002000

08001630 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_FLASH_Unlock+0x38>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00d      	beq.n	800165c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_FLASH_Unlock+0x38>)
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_FLASH_Unlock+0x3c>)
 8001644:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_FLASH_Unlock+0x38>)
 8001648:	4a09      	ldr	r2, [pc, #36]	; (8001670 <HAL_FLASH_Unlock+0x40>)
 800164a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_FLASH_Unlock+0x38>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	52002000 	.word	0x52002000
 800166c:	45670123 	.word	0x45670123
 8001670:	cdef89ab 	.word	0xcdef89ab

08001674 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800167e:	2304      	movs	r3, #4
 8001680:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001686:	f7ff fe67 	bl	8001358 <HAL_GetTick>
 800168a:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800168c:	e010      	b.n	80016b0 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d00c      	beq.n	80016b0 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001696:	f7ff fe5f 	bl	8001358 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d302      	bcc.n	80016ac <FLASH_WaitForLastOperation+0x38>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e02d      	b.n	800170c <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <FLASH_WaitForLastOperation+0xa0>)
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d0e7      	beq.n	800168e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d104      	bne.n	80016ce <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <FLASH_WaitForLastOperation+0xa0>)
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <FLASH_WaitForLastOperation+0xa4>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00a      	beq.n	80016ee <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <FLASH_WaitForLastOperation+0xa8>)
 80016da:	699a      	ldr	r2, [r3, #24]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	4313      	orrs	r3, r2
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <FLASH_WaitForLastOperation+0xa8>)
 80016e2:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <FLASH_WaitForLastOperation+0xa0>)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10a      	bne.n	800170a <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <FLASH_WaitForLastOperation+0xa0>)
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001700:	d103      	bne.n	800170a <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <FLASH_WaitForLastOperation+0xa0>)
 8001704:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001708:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	52002000 	.word	0x52002000
 8001718:	17ee0000 	.word	0x17ee0000
 800171c:	240000d8 	.word	0x240000d8

08001720 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800172e:	4b3f      	ldr	r3, [pc, #252]	; (800182c <HAL_FLASHEx_Erase+0x10c>)
 8001730:	7d1b      	ldrb	r3, [r3, #20]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_FLASHEx_Erase+0x1a>
 8001736:	2302      	movs	r3, #2
 8001738:	e074      	b.n	8001824 <HAL_FLASHEx_Erase+0x104>
 800173a:	4b3c      	ldr	r3, [pc, #240]	; (800182c <HAL_FLASHEx_Erase+0x10c>)
 800173c:	2201      	movs	r2, #1
 800173e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001740:	4b3a      	ldr	r3, [pc, #232]	; (800182c <HAL_FLASHEx_Erase+0x10c>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8001752:	2101      	movs	r1, #1
 8001754:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001758:	f7ff ff8c 	bl	8001674 <FLASH_WaitForLastOperation>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d157      	bne.n	800181c <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d11e      	bne.n	80017b2 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4619      	mov	r1, r3
 800177e:	4610      	mov	r0, r2
 8001780:	f000 f85a 	bl	8001838 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d045      	beq.n	800181c <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8001790:	2101      	movs	r1, #1
 8001792:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001796:	f7ff ff6d 	bl	8001674 <FLASH_WaitForLastOperation>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80017a4:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_FLASHEx_Erase+0x110>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4a21      	ldr	r2, [pc, #132]	; (8001830 <HAL_FLASHEx_Erase+0x110>)
 80017aa:	f023 0308 	bic.w	r3, r3, #8
 80017ae:	60d3      	str	r3, [r2, #12]
 80017b0:	e034      	b.n	800181c <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	e024      	b.n	800180c <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6859      	ldr	r1, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	461a      	mov	r2, r3
 80017cc:	68b8      	ldr	r0, [r7, #8]
 80017ce:	f000 f857 	bl	8001880 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00c      	beq.n	80017f8 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80017de:	2101      	movs	r1, #1
 80017e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017e4:	f7ff ff46 	bl	8001674 <FLASH_WaitForLastOperation>
 80017e8:	4603      	mov	r3, r0
 80017ea:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_FLASHEx_Erase+0x110>)
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	490f      	ldr	r1, [pc, #60]	; (8001830 <HAL_FLASHEx_Erase+0x110>)
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_FLASHEx_Erase+0x114>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	601a      	str	r2, [r3, #0]
          break;
 8001804:	e00a      	b.n	800181c <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	3301      	adds	r3, #1
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4413      	add	r3, r2
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	429a      	cmp	r2, r3
 800181a:	d3d2      	bcc.n	80017c2 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_FLASHEx_Erase+0x10c>)
 800181e:	2200      	movs	r2, #0
 8001820:	751a      	strb	r2, [r3, #20]

  return status;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	240000d8 	.word	0x240000d8
 8001830:	52002000 	.word	0x52002000
 8001834:	fffff8fb 	.word	0xfffff8fb

08001838 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d011      	beq.n	8001870 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <FLASH_MassErase+0x44>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <FLASH_MassErase+0x44>)
 8001852:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001856:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <FLASH_MassErase+0x44>)
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	4907      	ldr	r1, [pc, #28]	; (800187c <FLASH_MassErase+0x44>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4313      	orrs	r3, r2
 8001862:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <FLASH_MassErase+0x44>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <FLASH_MassErase+0x44>)
 800186a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800186e:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	52002000 	.word	0x52002000

08001880 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <FLASH_Erase_Sector+0x44>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <FLASH_Erase_Sector+0x44>)
 800189c:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80018a0:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <FLASH_Erase_Sector+0x44>)
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	0219      	lsls	r1, r3, #8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	430b      	orrs	r3, r1
 80018ae:	4313      	orrs	r3, r2
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <FLASH_Erase_Sector+0x44>)
 80018b2:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80018b6:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	52002000 	.word	0x52002000

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80018d6:	4b89      	ldr	r3, [pc, #548]	; (8001afc <HAL_GPIO_Init+0x234>)
 80018d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018da:	e194      	b.n	8001c06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2101      	movs	r1, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8186 	beq.w	8001c00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d005      	beq.n	800190c <HAL_GPIO_Init+0x44>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d130      	bne.n	800196e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001942:	2201      	movs	r2, #1
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	f003 0201 	and.w	r2, r3, #1
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b03      	cmp	r3, #3
 8001978:	d017      	beq.n	80019aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	2203      	movs	r2, #3
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d123      	bne.n	80019fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	220f      	movs	r2, #15
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	691a      	ldr	r2, [r3, #16]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	08da      	lsrs	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3208      	adds	r2, #8
 80019f8:	69b9      	ldr	r1, [r7, #24]
 80019fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0203 	and.w	r2, r3, #3
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 80e0 	beq.w	8001c00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a40:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <HAL_GPIO_Init+0x238>)
 8001a42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a46:	4a2e      	ldr	r2, [pc, #184]	; (8001b00 <HAL_GPIO_Init+0x238>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a50:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_GPIO_Init+0x238>)
 8001a52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a5e:	4a29      	ldr	r2, [pc, #164]	; (8001b04 <HAL_GPIO_Init+0x23c>)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a20      	ldr	r2, [pc, #128]	; (8001b08 <HAL_GPIO_Init+0x240>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d052      	beq.n	8001b30 <HAL_GPIO_Init+0x268>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a1f      	ldr	r2, [pc, #124]	; (8001b0c <HAL_GPIO_Init+0x244>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d031      	beq.n	8001af6 <HAL_GPIO_Init+0x22e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a1e      	ldr	r2, [pc, #120]	; (8001b10 <HAL_GPIO_Init+0x248>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d02b      	beq.n	8001af2 <HAL_GPIO_Init+0x22a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <HAL_GPIO_Init+0x24c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d025      	beq.n	8001aee <HAL_GPIO_Init+0x226>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a1c      	ldr	r2, [pc, #112]	; (8001b18 <HAL_GPIO_Init+0x250>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d01f      	beq.n	8001aea <HAL_GPIO_Init+0x222>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_GPIO_Init+0x254>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d019      	beq.n	8001ae6 <HAL_GPIO_Init+0x21e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <HAL_GPIO_Init+0x258>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d013      	beq.n	8001ae2 <HAL_GPIO_Init+0x21a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <HAL_GPIO_Init+0x25c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d00d      	beq.n	8001ade <HAL_GPIO_Init+0x216>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <HAL_GPIO_Init+0x260>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d007      	beq.n	8001ada <HAL_GPIO_Init+0x212>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <HAL_GPIO_Init+0x264>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d101      	bne.n	8001ad6 <HAL_GPIO_Init+0x20e>
 8001ad2:	2309      	movs	r3, #9
 8001ad4:	e02d      	b.n	8001b32 <HAL_GPIO_Init+0x26a>
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	e02b      	b.n	8001b32 <HAL_GPIO_Init+0x26a>
 8001ada:	2308      	movs	r3, #8
 8001adc:	e029      	b.n	8001b32 <HAL_GPIO_Init+0x26a>
 8001ade:	2307      	movs	r3, #7
 8001ae0:	e027      	b.n	8001b32 <HAL_GPIO_Init+0x26a>
 8001ae2:	2306      	movs	r3, #6
 8001ae4:	e025      	b.n	8001b32 <HAL_GPIO_Init+0x26a>
 8001ae6:	2305      	movs	r3, #5
 8001ae8:	e023      	b.n	8001b32 <HAL_GPIO_Init+0x26a>
 8001aea:	2304      	movs	r3, #4
 8001aec:	e021      	b.n	8001b32 <HAL_GPIO_Init+0x26a>
 8001aee:	2303      	movs	r3, #3
 8001af0:	e01f      	b.n	8001b32 <HAL_GPIO_Init+0x26a>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e01d      	b.n	8001b32 <HAL_GPIO_Init+0x26a>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e01b      	b.n	8001b32 <HAL_GPIO_Init+0x26a>
 8001afa:	bf00      	nop
 8001afc:	58000080 	.word	0x58000080
 8001b00:	58024400 	.word	0x58024400
 8001b04:	58000400 	.word	0x58000400
 8001b08:	58020000 	.word	0x58020000
 8001b0c:	58020400 	.word	0x58020400
 8001b10:	58020800 	.word	0x58020800
 8001b14:	58020c00 	.word	0x58020c00
 8001b18:	58021000 	.word	0x58021000
 8001b1c:	58021400 	.word	0x58021400
 8001b20:	58021800 	.word	0x58021800
 8001b24:	58021c00 	.word	0x58021c00
 8001b28:	58022000 	.word	0x58022000
 8001b2c:	58022400 	.word	0x58022400
 8001b30:	2300      	movs	r3, #0
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	f002 0203 	and.w	r2, r2, #3
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b42:	4938      	ldr	r1, [pc, #224]	; (8001c24 <HAL_GPIO_Init+0x35c>)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	3301      	adds	r3, #1
 8001c04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f47f ae63 	bne.w	80018dc <HAL_GPIO_Init+0x14>
  }
}
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
 8001c1a:	3724      	adds	r7, #36	; 0x24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	58000400 	.word	0x58000400

08001c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]
 8001c34:	4613      	mov	r3, r2
 8001c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c38:	787b      	ldrb	r3, [r7, #1]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001c44:	e003      	b.n	8001c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c46:	887b      	ldrh	r3, [r7, #2]
 8001c48:	041a      	lsls	r2, r3, #16
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	619a      	str	r2, [r3, #24]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c6c:	887a      	ldrh	r2, [r7, #2]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4013      	ands	r3, r2
 8001c72:	041a      	lsls	r2, r3, #16
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	400b      	ands	r3, r1
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	619a      	str	r2, [r3, #24]
}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_PWREx_ConfigSupply+0x70>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d00a      	beq.n	8001cba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_PWREx_ConfigSupply+0x70>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d001      	beq.n	8001cb6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e01f      	b.n	8001cf6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e01d      	b.n	8001cf6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_PWREx_ConfigSupply+0x70>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f023 0207 	bic.w	r2, r3, #7
 8001cc2:	490f      	ldr	r1, [pc, #60]	; (8001d00 <HAL_PWREx_ConfigSupply+0x70>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001cca:	f7ff fb45 	bl	8001358 <HAL_GetTick>
 8001cce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cd0:	e009      	b.n	8001ce6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001cd2:	f7ff fb41 	bl	8001358 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ce0:	d901      	bls.n	8001ce6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e007      	b.n	8001cf6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_PWREx_ConfigSupply+0x70>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	58024800 	.word	0x58024800

08001d04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	; 0x30
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	f000 bc1d 	b.w	8002552 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8087 	beq.w	8001e34 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d26:	4b99      	ldr	r3, [pc, #612]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d30:	4b96      	ldr	r3, [pc, #600]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d38:	2b10      	cmp	r3, #16
 8001d3a:	d007      	beq.n	8001d4c <HAL_RCC_OscConfig+0x48>
 8001d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3e:	2b18      	cmp	r3, #24
 8001d40:	d110      	bne.n	8001d64 <HAL_RCC_OscConfig+0x60>
 8001d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d10b      	bne.n	8001d64 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	4b8f      	ldr	r3, [pc, #572]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d06c      	beq.n	8001e32 <HAL_RCC_OscConfig+0x12e>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d168      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e3f6      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6c:	d106      	bne.n	8001d7c <HAL_RCC_OscConfig+0x78>
 8001d6e:	4b87      	ldr	r3, [pc, #540]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a86      	ldr	r2, [pc, #536]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e02e      	b.n	8001dda <HAL_RCC_OscConfig+0xd6>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10c      	bne.n	8001d9e <HAL_RCC_OscConfig+0x9a>
 8001d84:	4b81      	ldr	r3, [pc, #516]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a80      	ldr	r2, [pc, #512]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b7e      	ldr	r3, [pc, #504]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a7d      	ldr	r2, [pc, #500]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e01d      	b.n	8001dda <HAL_RCC_OscConfig+0xd6>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da6:	d10c      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xbe>
 8001da8:	4b78      	ldr	r3, [pc, #480]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a77      	ldr	r2, [pc, #476]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b75      	ldr	r3, [pc, #468]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a74      	ldr	r2, [pc, #464]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	e00b      	b.n	8001dda <HAL_RCC_OscConfig+0xd6>
 8001dc2:	4b72      	ldr	r3, [pc, #456]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a71      	ldr	r2, [pc, #452]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d013      	beq.n	8001e0a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7ff fab9 	bl	8001358 <HAL_GetTick>
 8001de6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dea:	f7ff fab5 	bl	8001358 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b64      	cmp	r3, #100	; 0x64
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e3aa      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dfc:	4b63      	ldr	r3, [pc, #396]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0xe6>
 8001e08:	e014      	b.n	8001e34 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7ff faa5 	bl	8001358 <HAL_GetTick>
 8001e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e12:	f7ff faa1 	bl	8001358 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b64      	cmp	r3, #100	; 0x64
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e396      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e24:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x10e>
 8001e30:	e000      	b.n	8001e34 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80cb 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e42:	4b52      	ldr	r3, [pc, #328]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e4a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <HAL_RCC_OscConfig+0x164>
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	2b18      	cmp	r3, #24
 8001e5c:	d156      	bne.n	8001f0c <HAL_RCC_OscConfig+0x208>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d151      	bne.n	8001f0c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e68:	4b48      	ldr	r3, [pc, #288]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_OscConfig+0x17c>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e368      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e80:	4b42      	ldr	r3, [pc, #264]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 0219 	bic.w	r2, r3, #25
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	493f      	ldr	r1, [pc, #252]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e92:	f7ff fa61 	bl	8001358 <HAL_GetTick>
 8001e96:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7ff fa5d 	bl	8001358 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e352      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eac:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb8:	f7ff fa5a 	bl	8001370 <HAL_GetREVID>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d817      	bhi.n	8001ef6 <HAL_RCC_OscConfig+0x1f2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b40      	cmp	r3, #64	; 0x40
 8001ecc:	d108      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x1dc>
 8001ece:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001ed6:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ede:	e07b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	031b      	lsls	r3, r3, #12
 8001eee:	4927      	ldr	r1, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef4:	e070      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef6:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	061b      	lsls	r3, r3, #24
 8001f04:	4921      	ldr	r1, [pc, #132]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f0a:	e065      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d048      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 0219 	bic.w	r2, r3, #25
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	491a      	ldr	r1, [pc, #104]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7ff fa17 	bl	8001358 <HAL_GetTick>
 8001f2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7ff fa13 	bl	8001358 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e308      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	f7ff fa10 	bl	8001370 <HAL_GetREVID>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d81a      	bhi.n	8001f90 <HAL_RCC_OscConfig+0x28c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b40      	cmp	r3, #64	; 0x40
 8001f60:	d108      	bne.n	8001f74 <HAL_RCC_OscConfig+0x270>
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	6053      	str	r3, [r2, #4]
 8001f72:	e031      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2d4>
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	031b      	lsls	r3, r3, #12
 8001f82:	4902      	ldr	r1, [pc, #8]	; (8001f8c <HAL_RCC_OscConfig+0x288>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
 8001f88:	e026      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2d4>
 8001f8a:	bf00      	nop
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	4b9a      	ldr	r3, [pc, #616]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	061b      	lsls	r3, r3, #24
 8001f9e:	4997      	ldr	r1, [pc, #604]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
 8001fa4:	e018      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa6:	4b95      	ldr	r3, [pc, #596]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a94      	ldr	r2, [pc, #592]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7ff f9d1 	bl	8001358 <HAL_GetTick>
 8001fb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fba:	f7ff f9cd 	bl	8001358 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e2c2      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fcc:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f0      	bne.n	8001fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80a9 	beq.w	8002138 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe6:	4b85      	ldr	r3, [pc, #532]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ff0:	4b82      	ldr	r3, [pc, #520]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d007      	beq.n	800200c <HAL_RCC_OscConfig+0x308>
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b18      	cmp	r3, #24
 8002000:	d13a      	bne.n	8002078 <HAL_RCC_OscConfig+0x374>
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b01      	cmp	r3, #1
 800200a:	d135      	bne.n	8002078 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800200c:	4b7b      	ldr	r3, [pc, #492]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_RCC_OscConfig+0x320>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	2b80      	cmp	r3, #128	; 0x80
 800201e:	d001      	beq.n	8002024 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e296      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002024:	f7ff f9a4 	bl	8001370 <HAL_GetREVID>
 8002028:	4603      	mov	r3, r0
 800202a:	f241 0203 	movw	r2, #4099	; 0x1003
 800202e:	4293      	cmp	r3, r2
 8002030:	d817      	bhi.n	8002062 <HAL_RCC_OscConfig+0x35e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	2b20      	cmp	r3, #32
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x348>
 800203a:	4b70      	ldr	r3, [pc, #448]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002042:	4a6e      	ldr	r2, [pc, #440]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8002044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002048:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800204a:	e075      	b.n	8002138 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800204c:	4b6b      	ldr	r3, [pc, #428]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	069b      	lsls	r3, r3, #26
 800205a:	4968      	ldr	r1, [pc, #416]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002060:	e06a      	b.n	8002138 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002062:	4b66      	ldr	r3, [pc, #408]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	061b      	lsls	r3, r3, #24
 8002070:	4962      	ldr	r1, [pc, #392]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8002072:	4313      	orrs	r3, r2
 8002074:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002076:	e05f      	b.n	8002138 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d042      	beq.n	8002106 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002080:	4b5e      	ldr	r3, [pc, #376]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a5d      	ldr	r2, [pc, #372]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8002086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800208a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7ff f964 	bl	8001358 <HAL_GetTick>
 8002090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002094:	f7ff f960 	bl	8001358 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e255      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020a6:	4b55      	ldr	r3, [pc, #340]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020b2:	f7ff f95d 	bl	8001370 <HAL_GetREVID>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80020bc:	4293      	cmp	r3, r2
 80020be:	d817      	bhi.n	80020f0 <HAL_RCC_OscConfig+0x3ec>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d108      	bne.n	80020da <HAL_RCC_OscConfig+0x3d6>
 80020c8:	4b4c      	ldr	r3, [pc, #304]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80020d0:	4a4a      	ldr	r2, [pc, #296]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 80020d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020d6:	6053      	str	r3, [r2, #4]
 80020d8:	e02e      	b.n	8002138 <HAL_RCC_OscConfig+0x434>
 80020da:	4b48      	ldr	r3, [pc, #288]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	069b      	lsls	r3, r3, #26
 80020e8:	4944      	ldr	r1, [pc, #272]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
 80020ee:	e023      	b.n	8002138 <HAL_RCC_OscConfig+0x434>
 80020f0:	4b42      	ldr	r3, [pc, #264]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	061b      	lsls	r3, r3, #24
 80020fe:	493f      	ldr	r1, [pc, #252]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8002100:	4313      	orrs	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
 8002104:	e018      	b.n	8002138 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002106:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a3c      	ldr	r2, [pc, #240]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 800210c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002112:	f7ff f921 	bl	8001358 <HAL_GetTick>
 8002116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800211a:	f7ff f91d 	bl	8001358 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e212      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800212c:	4b33      	ldr	r3, [pc, #204]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f0      	bne.n	800211a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d036      	beq.n	80021b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d019      	beq.n	8002180 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214c:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 800214e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002150:	4a2a      	ldr	r2, [pc, #168]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002158:	f7ff f8fe 	bl	8001358 <HAL_GetTick>
 800215c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002160:	f7ff f8fa 	bl	8001358 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e1ef      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8002174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x45c>
 800217e:	e018      	b.n	80021b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002180:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8002182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002184:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7ff f8e4 	bl	8001358 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002194:	f7ff f8e0 	bl	8001358 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e1d5      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 80021a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d039      	beq.n	8002232 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01c      	beq.n	8002200 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 80021cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021d2:	f7ff f8c1 	bl	8001358 <HAL_GetTick>
 80021d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80021da:	f7ff f8bd 	bl	8001358 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e1b2      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x4d6>
 80021f8:	e01b      	b.n	8002232 <HAL_RCC_OscConfig+0x52e>
 80021fa:	bf00      	nop
 80021fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002200:	4b9b      	ldr	r3, [pc, #620]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a9a      	ldr	r2, [pc, #616]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800220a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800220c:	f7ff f8a4 	bl	8001358 <HAL_GetTick>
 8002210:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002214:	f7ff f8a0 	bl	8001358 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e195      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002226:	4b92      	ldr	r3, [pc, #584]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8081 	beq.w	8002342 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002240:	4b8c      	ldr	r3, [pc, #560]	; (8002474 <HAL_RCC_OscConfig+0x770>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a8b      	ldr	r2, [pc, #556]	; (8002474 <HAL_RCC_OscConfig+0x770>)
 8002246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800224c:	f7ff f884 	bl	8001358 <HAL_GetTick>
 8002250:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002254:	f7ff f880 	bl	8001358 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e175      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002266:	4b83      	ldr	r3, [pc, #524]	; (8002474 <HAL_RCC_OscConfig+0x770>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d106      	bne.n	8002288 <HAL_RCC_OscConfig+0x584>
 800227a:	4b7d      	ldr	r3, [pc, #500]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a7c      	ldr	r2, [pc, #496]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
 8002286:	e02d      	b.n	80022e4 <HAL_RCC_OscConfig+0x5e0>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10c      	bne.n	80022aa <HAL_RCC_OscConfig+0x5a6>
 8002290:	4b77      	ldr	r3, [pc, #476]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	4a76      	ldr	r2, [pc, #472]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	6713      	str	r3, [r2, #112]	; 0x70
 800229c:	4b74      	ldr	r3, [pc, #464]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a73      	ldr	r2, [pc, #460]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 80022a2:	f023 0304 	bic.w	r3, r3, #4
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
 80022a8:	e01c      	b.n	80022e4 <HAL_RCC_OscConfig+0x5e0>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x5c8>
 80022b2:	4b6f      	ldr	r3, [pc, #444]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a6e      	ldr	r2, [pc, #440]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70
 80022be:	4b6c      	ldr	r3, [pc, #432]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	4a6b      	ldr	r2, [pc, #428]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ca:	e00b      	b.n	80022e4 <HAL_RCC_OscConfig+0x5e0>
 80022cc:	4b68      	ldr	r3, [pc, #416]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	4a67      	ldr	r2, [pc, #412]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 80022d2:	f023 0301 	bic.w	r3, r3, #1
 80022d6:	6713      	str	r3, [r2, #112]	; 0x70
 80022d8:	4b65      	ldr	r3, [pc, #404]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	4a64      	ldr	r2, [pc, #400]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 80022de:	f023 0304 	bic.w	r3, r3, #4
 80022e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d015      	beq.n	8002318 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7ff f834 	bl	8001358 <HAL_GetTick>
 80022f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022f2:	e00a      	b.n	800230a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7ff f830 	bl	8001358 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e123      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800230a:	4b59      	ldr	r3, [pc, #356]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0ee      	beq.n	80022f4 <HAL_RCC_OscConfig+0x5f0>
 8002316:	e014      	b.n	8002342 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7ff f81e 	bl	8001358 <HAL_GetTick>
 800231c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800231e:	e00a      	b.n	8002336 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7ff f81a 	bl	8001358 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e10d      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002336:	4b4e      	ldr	r3, [pc, #312]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1ee      	bne.n	8002320 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8102 	beq.w	8002550 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800234c:	4b48      	ldr	r3, [pc, #288]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002354:	2b18      	cmp	r3, #24
 8002356:	f000 80bd 	beq.w	80024d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	2b02      	cmp	r3, #2
 8002360:	f040 809e 	bne.w	80024a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	4b42      	ldr	r3, [pc, #264]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a41      	ldr	r2, [pc, #260]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 800236a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800236e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe fff2 	bl	8001358 <HAL_GetTick>
 8002374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe ffee 	bl	8001358 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e0e3      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800238a:	4b39      	ldr	r3, [pc, #228]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002396:	4b36      	ldr	r3, [pc, #216]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800239a:	4b37      	ldr	r3, [pc, #220]	; (8002478 <HAL_RCC_OscConfig+0x774>)
 800239c:	4013      	ands	r3, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	430a      	orrs	r2, r1
 80023aa:	4931      	ldr	r1, [pc, #196]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	628b      	str	r3, [r1, #40]	; 0x28
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	3b01      	subs	r3, #1
 80023b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023be:	3b01      	subs	r3, #1
 80023c0:	025b      	lsls	r3, r3, #9
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	3b01      	subs	r3, #1
 80023cc:	041b      	lsls	r3, r3, #16
 80023ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	3b01      	subs	r3, #1
 80023da:	061b      	lsls	r3, r3, #24
 80023dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80023e0:	4923      	ldr	r1, [pc, #140]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80023e6:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	4a21      	ldr	r2, [pc, #132]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023f2:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 80023f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f6:	4b21      	ldr	r3, [pc, #132]	; (800247c <HAL_RCC_OscConfig+0x778>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023fe:	00d2      	lsls	r2, r2, #3
 8002400:	491b      	ldr	r1, [pc, #108]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002402:	4313      	orrs	r3, r2
 8002404:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002406:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	f023 020c 	bic.w	r2, r3, #12
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4917      	ldr	r1, [pc, #92]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002414:	4313      	orrs	r3, r2
 8002416:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002418:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	f023 0202 	bic.w	r2, r3, #2
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	4912      	ldr	r1, [pc, #72]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002426:	4313      	orrs	r3, r2
 8002428:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	4a10      	ldr	r2, [pc, #64]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 800243c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002440:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	4a07      	ldr	r2, [pc, #28]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7fe ff77 	bl	8001358 <HAL_GetTick>
 800246a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800246c:	e011      	b.n	8002492 <HAL_RCC_OscConfig+0x78e>
 800246e:	bf00      	nop
 8002470:	58024400 	.word	0x58024400
 8002474:	58024800 	.word	0x58024800
 8002478:	fffffc0c 	.word	0xfffffc0c
 800247c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe ff6a 	bl	8001358 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e05f      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002492:	4b32      	ldr	r3, [pc, #200]	; (800255c <HAL_RCC_OscConfig+0x858>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x77c>
 800249e:	e057      	b.n	8002550 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a0:	4b2e      	ldr	r3, [pc, #184]	; (800255c <HAL_RCC_OscConfig+0x858>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2d      	ldr	r2, [pc, #180]	; (800255c <HAL_RCC_OscConfig+0x858>)
 80024a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe ff54 	bl	8001358 <HAL_GetTick>
 80024b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe ff50 	bl	8001358 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e045      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024c6:	4b25      	ldr	r3, [pc, #148]	; (800255c <HAL_RCC_OscConfig+0x858>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x7b0>
 80024d2:	e03d      	b.n	8002550 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024d4:	4b21      	ldr	r3, [pc, #132]	; (800255c <HAL_RCC_OscConfig+0x858>)
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_RCC_OscConfig+0x858>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d031      	beq.n	800254c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f003 0203 	and.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d12a      	bne.n	800254c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d122      	bne.n	800254c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d11a      	bne.n	800254c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	0a5b      	lsrs	r3, r3, #9
 800251a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002522:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d111      	bne.n	800254c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	0c1b      	lsrs	r3, r3, #16
 800252c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002534:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d108      	bne.n	800254c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	0e1b      	lsrs	r3, r3, #24
 800253e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3730      	adds	r7, #48	; 0x30
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	58024400 	.word	0x58024400

08002560 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e19c      	b.n	80028ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b8a      	ldr	r3, [pc, #552]	; (80027a0 <HAL_RCC_ClockConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d910      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b87      	ldr	r3, [pc, #540]	; (80027a0 <HAL_RCC_ClockConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 020f 	bic.w	r2, r3, #15
 800258a:	4985      	ldr	r1, [pc, #532]	; (80027a0 <HAL_RCC_ClockConfig+0x240>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b83      	ldr	r3, [pc, #524]	; (80027a0 <HAL_RCC_ClockConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e184      	b.n	80028ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d010      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	4b7b      	ldr	r3, [pc, #492]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025bc:	429a      	cmp	r2, r3
 80025be:	d908      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025c0:	4b78      	ldr	r3, [pc, #480]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	4975      	ldr	r1, [pc, #468]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d010      	beq.n	8002600 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	4b70      	ldr	r3, [pc, #448]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d908      	bls.n	8002600 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025ee:	4b6d      	ldr	r3, [pc, #436]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	496a      	ldr	r1, [pc, #424]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	d010      	beq.n	800262e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699a      	ldr	r2, [r3, #24]
 8002610:	4b64      	ldr	r3, [pc, #400]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002618:	429a      	cmp	r2, r3
 800261a:	d908      	bls.n	800262e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800261c:	4b61      	ldr	r3, [pc, #388]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	495e      	ldr	r1, [pc, #376]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 800262a:	4313      	orrs	r3, r2
 800262c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b00      	cmp	r3, #0
 8002638:	d010      	beq.n	800265c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	4b59      	ldr	r3, [pc, #356]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002646:	429a      	cmp	r2, r3
 8002648:	d908      	bls.n	800265c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800264a:	4b56      	ldr	r3, [pc, #344]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	4953      	ldr	r1, [pc, #332]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 8002658:	4313      	orrs	r3, r2
 800265a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d010      	beq.n	800268a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	4b4d      	ldr	r3, [pc, #308]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	429a      	cmp	r2, r3
 8002676:	d908      	bls.n	800268a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002678:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f023 020f 	bic.w	r2, r3, #15
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4947      	ldr	r1, [pc, #284]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 8002686:	4313      	orrs	r3, r2
 8002688:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d055      	beq.n	8002742 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002696:	4b43      	ldr	r3, [pc, #268]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4940      	ldr	r1, [pc, #256]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026b0:	4b3c      	ldr	r3, [pc, #240]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d121      	bne.n	8002700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0f6      	b.n	80028ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026c8:	4b36      	ldr	r3, [pc, #216]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d115      	bne.n	8002700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0ea      	b.n	80028ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026e0:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0de      	b.n	80028ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f0:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0d6      	b.n	80028ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f023 0207 	bic.w	r2, r3, #7
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4925      	ldr	r1, [pc, #148]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 800270e:	4313      	orrs	r3, r2
 8002710:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fe fe21 	bl	8001358 <HAL_GetTick>
 8002716:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002718:	e00a      	b.n	8002730 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271a:	f7fe fe1d 	bl	8001358 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f241 3288 	movw	r2, #5000	; 0x1388
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0be      	b.n	80028ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002730:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	429a      	cmp	r2, r3
 8002740:	d1eb      	bne.n	800271a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d010      	beq.n	8002770 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	429a      	cmp	r2, r3
 800275c:	d208      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f023 020f 	bic.w	r2, r3, #15
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	490e      	ldr	r1, [pc, #56]	; (80027a4 <HAL_RCC_ClockConfig+0x244>)
 800276c:	4313      	orrs	r3, r2
 800276e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCC_ClockConfig+0x240>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d214      	bcs.n	80027a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <HAL_RCC_ClockConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 020f 	bic.w	r2, r3, #15
 8002786:	4906      	ldr	r1, [pc, #24]	; (80027a0 <HAL_RCC_ClockConfig+0x240>)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <HAL_RCC_ClockConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e086      	b.n	80028ae <HAL_RCC_ClockConfig+0x34e>
 80027a0:	52002000 	.word	0x52002000
 80027a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d010      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <HAL_RCC_ClockConfig+0x358>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d208      	bcs.n	80027d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027c4:	4b3c      	ldr	r3, [pc, #240]	; (80028b8 <HAL_RCC_ClockConfig+0x358>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	4939      	ldr	r1, [pc, #228]	; (80028b8 <HAL_RCC_ClockConfig+0x358>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d010      	beq.n	8002804 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <HAL_RCC_ClockConfig+0x358>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d208      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_RCC_ClockConfig+0x358>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	492e      	ldr	r1, [pc, #184]	; (80028b8 <HAL_RCC_ClockConfig+0x358>)
 8002800:	4313      	orrs	r3, r2
 8002802:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	d010      	beq.n	8002832 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_RCC_ClockConfig+0x358>)
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800281c:	429a      	cmp	r2, r3
 800281e:	d208      	bcs.n	8002832 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002820:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <HAL_RCC_ClockConfig+0x358>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	4922      	ldr	r1, [pc, #136]	; (80028b8 <HAL_RCC_ClockConfig+0x358>)
 800282e:	4313      	orrs	r3, r2
 8002830:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	d010      	beq.n	8002860 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_RCC_ClockConfig+0x358>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800284a:	429a      	cmp	r2, r3
 800284c:	d208      	bcs.n	8002860 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <HAL_RCC_ClockConfig+0x358>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4917      	ldr	r1, [pc, #92]	; (80028b8 <HAL_RCC_ClockConfig+0x358>)
 800285c:	4313      	orrs	r3, r2
 800285e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002860:	f000 f834 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <HAL_RCC_ClockConfig+0x358>)
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	0a1b      	lsrs	r3, r3, #8
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	4912      	ldr	r1, [pc, #72]	; (80028bc <HAL_RCC_ClockConfig+0x35c>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
 800287c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <HAL_RCC_ClockConfig+0x358>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	4a0d      	ldr	r2, [pc, #52]	; (80028bc <HAL_RCC_ClockConfig+0x35c>)
 8002888:	5cd3      	ldrb	r3, [r2, r3]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
 8002894:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <HAL_RCC_ClockConfig+0x360>)
 8002896:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002898:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <HAL_RCC_ClockConfig+0x364>)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_RCC_ClockConfig+0x368>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fd0e 	bl	80012c4 <HAL_InitTick>
 80028a8:	4603      	mov	r3, r0
 80028aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	58024400 	.word	0x58024400
 80028bc:	08002c30 	.word	0x08002c30
 80028c0:	240000a8 	.word	0x240000a8
 80028c4:	240000a4 	.word	0x240000a4
 80028c8:	240000ac 	.word	0x240000ac

080028cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	; 0x24
 80028d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d2:	4bb3      	ldr	r3, [pc, #716]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028da:	2b18      	cmp	r3, #24
 80028dc:	f200 8155 	bhi.w	8002b8a <HAL_RCC_GetSysClockFreq+0x2be>
 80028e0:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80028e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e6:	bf00      	nop
 80028e8:	0800294d 	.word	0x0800294d
 80028ec:	08002b8b 	.word	0x08002b8b
 80028f0:	08002b8b 	.word	0x08002b8b
 80028f4:	08002b8b 	.word	0x08002b8b
 80028f8:	08002b8b 	.word	0x08002b8b
 80028fc:	08002b8b 	.word	0x08002b8b
 8002900:	08002b8b 	.word	0x08002b8b
 8002904:	08002b8b 	.word	0x08002b8b
 8002908:	08002973 	.word	0x08002973
 800290c:	08002b8b 	.word	0x08002b8b
 8002910:	08002b8b 	.word	0x08002b8b
 8002914:	08002b8b 	.word	0x08002b8b
 8002918:	08002b8b 	.word	0x08002b8b
 800291c:	08002b8b 	.word	0x08002b8b
 8002920:	08002b8b 	.word	0x08002b8b
 8002924:	08002b8b 	.word	0x08002b8b
 8002928:	08002979 	.word	0x08002979
 800292c:	08002b8b 	.word	0x08002b8b
 8002930:	08002b8b 	.word	0x08002b8b
 8002934:	08002b8b 	.word	0x08002b8b
 8002938:	08002b8b 	.word	0x08002b8b
 800293c:	08002b8b 	.word	0x08002b8b
 8002940:	08002b8b 	.word	0x08002b8b
 8002944:	08002b8b 	.word	0x08002b8b
 8002948:	0800297f 	.word	0x0800297f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800294c:	4b94      	ldr	r3, [pc, #592]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d009      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002958:	4b91      	ldr	r3, [pc, #580]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	4a90      	ldr	r2, [pc, #576]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
 8002968:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800296a:	e111      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800296c:	4b8d      	ldr	r3, [pc, #564]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800296e:	61bb      	str	r3, [r7, #24]
    break;
 8002970:	e10e      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002972:	4b8d      	ldr	r3, [pc, #564]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002974:	61bb      	str	r3, [r7, #24]
    break;
 8002976:	e10b      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002978:	4b8c      	ldr	r3, [pc, #560]	; (8002bac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800297a:	61bb      	str	r3, [r7, #24]
    break;
 800297c:	e108      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800297e:	4b88      	ldr	r3, [pc, #544]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002988:	4b85      	ldr	r3, [pc, #532]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002992:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002994:	4b82      	ldr	r3, [pc, #520]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800299e:	4b80      	ldr	r3, [pc, #512]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a2:	08db      	lsrs	r3, r3, #3
 80029a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80e1 	beq.w	8002b84 <HAL_RCC_GetSysClockFreq+0x2b8>
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	f000 8083 	beq.w	8002ad0 <HAL_RCC_GetSysClockFreq+0x204>
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	f200 80a1 	bhi.w	8002b14 <HAL_RCC_GetSysClockFreq+0x248>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x114>
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d056      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0x1c0>
 80029de:	e099      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029e0:	4b6f      	ldr	r3, [pc, #444]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d02d      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80029ec:	4b6c      	ldr	r3, [pc, #432]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	08db      	lsrs	r3, r3, #3
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	4a6b      	ldr	r2, [pc, #428]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
 80029fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	ee07 3a90 	vmov	s15, r3
 8002a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	ee07 3a90 	vmov	s15, r3
 8002a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a16:	4b62      	ldr	r3, [pc, #392]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a26:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a2a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002a46:	e087      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	ee07 3a90 	vmov	s15, r3
 8002a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a52:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002bb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a5a:	4b51      	ldr	r3, [pc, #324]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a6e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a8a:	e065      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	ee07 3a90 	vmov	s15, r3
 8002a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a96:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002bb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a9e:	4b40      	ldr	r3, [pc, #256]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ab2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ace:	e043      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ada:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002bbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ae2:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002af6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b12:	e021      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002bb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b26:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b56:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	0a5b      	lsrs	r3, r3, #9
 8002b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b62:	3301      	adds	r3, #1
 8002b64:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b7c:	ee17 3a90 	vmov	r3, s15
 8002b80:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002b82:	e005      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61bb      	str	r3, [r7, #24]
    break;
 8002b88:	e002      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002b8a:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b8c:	61bb      	str	r3, [r7, #24]
    break;
 8002b8e:	bf00      	nop
  }

  return sysclockfreq;
 8002b90:	69bb      	ldr	r3, [r7, #24]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3724      	adds	r7, #36	; 0x24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	58024400 	.word	0x58024400
 8002ba4:	03d09000 	.word	0x03d09000
 8002ba8:	003d0900 	.word	0x003d0900
 8002bac:	017d7840 	.word	0x017d7840
 8002bb0:	46000000 	.word	0x46000000
 8002bb4:	4c742400 	.word	0x4c742400
 8002bb8:	4a742400 	.word	0x4a742400
 8002bbc:	4bbebc20 	.word	0x4bbebc20

08002bc0 <__libc_init_array>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	4d0d      	ldr	r5, [pc, #52]	; (8002bf8 <__libc_init_array+0x38>)
 8002bc4:	4c0d      	ldr	r4, [pc, #52]	; (8002bfc <__libc_init_array+0x3c>)
 8002bc6:	1b64      	subs	r4, r4, r5
 8002bc8:	10a4      	asrs	r4, r4, #2
 8002bca:	2600      	movs	r6, #0
 8002bcc:	42a6      	cmp	r6, r4
 8002bce:	d109      	bne.n	8002be4 <__libc_init_array+0x24>
 8002bd0:	4d0b      	ldr	r5, [pc, #44]	; (8002c00 <__libc_init_array+0x40>)
 8002bd2:	4c0c      	ldr	r4, [pc, #48]	; (8002c04 <__libc_init_array+0x44>)
 8002bd4:	f000 f820 	bl	8002c18 <_init>
 8002bd8:	1b64      	subs	r4, r4, r5
 8002bda:	10a4      	asrs	r4, r4, #2
 8002bdc:	2600      	movs	r6, #0
 8002bde:	42a6      	cmp	r6, r4
 8002be0:	d105      	bne.n	8002bee <__libc_init_array+0x2e>
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
 8002be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be8:	4798      	blx	r3
 8002bea:	3601      	adds	r6, #1
 8002bec:	e7ee      	b.n	8002bcc <__libc_init_array+0xc>
 8002bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf2:	4798      	blx	r3
 8002bf4:	3601      	adds	r6, #1
 8002bf6:	e7f2      	b.n	8002bde <__libc_init_array+0x1e>
 8002bf8:	08002c40 	.word	0x08002c40
 8002bfc:	08002c40 	.word	0x08002c40
 8002c00:	08002c40 	.word	0x08002c40
 8002c04:	08002c44 	.word	0x08002c44

08002c08 <memset>:
 8002c08:	4402      	add	r2, r0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d100      	bne.n	8002c12 <memset+0xa>
 8002c10:	4770      	bx	lr
 8002c12:	f803 1b01 	strb.w	r1, [r3], #1
 8002c16:	e7f9      	b.n	8002c0c <memset+0x4>

08002c18 <_init>:
 8002c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1a:	bf00      	nop
 8002c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1e:	bc08      	pop	{r3}
 8002c20:	469e      	mov	lr, r3
 8002c22:	4770      	bx	lr

08002c24 <_fini>:
 8002c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c26:	bf00      	nop
 8002c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2a:	bc08      	pop	{r3}
 8002c2c:	469e      	mov	lr, r3
 8002c2e:	4770      	bx	lr
