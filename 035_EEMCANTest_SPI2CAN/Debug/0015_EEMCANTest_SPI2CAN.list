
0015_EEMCANTest_SPI2CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b4c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf0  08003cf0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cf8  08003cf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000268  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb2  00000000  00000000  000297f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  0002b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006a0  00000000  00000000  0002bb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d7d  00000000  00000000  0002c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000985f  00000000  00000000  0004cf3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3b38  00000000  00000000  0005679c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011a2d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cb8  00000000  00000000  0011a324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003cbc 	.word	0x08003cbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003cbc 	.word	0x08003cbc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f001 fe5e 	bl	8002190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f83e 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8da 	bl	8000690 <MX_GPIO_Init>
  MX_SPI3_Init();
 80004dc:	f000 f8a2 	bl	8000624 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  protocol.ops = ops;
 80004e0:	4b15      	ldr	r3, [pc, #84]	; (8000538 <main+0x6c>)
 80004e2:	4a16      	ldr	r2, [pc, #88]	; (800053c <main+0x70>)
 80004e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80004e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80004ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  protocol.ops.EEM_INIT(&protocol.obj);
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <main+0x6c>)
 80004f0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80004f4:	4810      	ldr	r0, [pc, #64]	; (8000538 <main+0x6c>)
 80004f6:	4798      	blx	r3
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  EEM_PERIODIC(&protocol.obj.canPacket);
 80004f8:	4811      	ldr	r0, [pc, #68]	; (8000540 <main+0x74>)
 80004fa:	f000 fda7 	bl	800104c <EEM_PERIODIC>

	  static uint32_t loopVal = 0;

	  MS1_MSG.Message20.SPN.MS1_Speed = loopVal;
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <main+0x78>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a11      	ldr	r2, [pc, #68]	; (8000548 <main+0x7c>)
 8000504:	6053      	str	r3, [r2, #4]
	  loopVal++;
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <main+0x78>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	3301      	adds	r3, #1
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <main+0x78>)
 800050e:	6013      	str	r3, [r2, #0]

	  memcpy(&protocol.obj.canPacket.DATA[0] , &MS1_MSG.Message20.payload[0] , 8);
 8000510:	2208      	movs	r2, #8
 8000512:	490e      	ldr	r1, [pc, #56]	; (800054c <main+0x80>)
 8000514:	480e      	ldr	r0, [pc, #56]	; (8000550 <main+0x84>)
 8000516:	f003 fbbb 	bl	8003c90 <memcpy>
	  protocol.obj.canPacket.EXTENDED_ID.identifier = MS1_MSG.Message20_ID;
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <main+0x7c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a06      	ldr	r2, [pc, #24]	; (8000538 <main+0x6c>)
 8000520:	61d3      	str	r3, [r2, #28]

	  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <main+0x6c>)
 8000524:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000528:	2100      	movs	r1, #0
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <main+0x74>)
 800052c:	4798      	blx	r3
	  HAL_Delay(100);
 800052e:	2064      	movs	r0, #100	; 0x64
 8000530:	f001 fea0 	bl	8002274 <HAL_Delay>
  {
 8000534:	e7e0      	b.n	80004f8 <main+0x2c>
 8000536:	bf00      	nop
 8000538:	20000080 	.word	0x20000080
 800053c:	08003ce4 	.word	0x08003ce4
 8000540:	2000009c 	.word	0x2000009c
 8000544:	200001b4 	.word	0x200001b4
 8000548:	20000238 	.word	0x20000238
 800054c:	2000023c 	.word	0x2000023c
 8000550:	200000a0 	.word	0x200000a0

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f003 fba2 	bl	8003cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b27      	ldr	r3, [pc, #156]	; (800061c <SystemClock_Config+0xc8>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a26      	ldr	r2, [pc, #152]	; (800061c <SystemClock_Config+0xc8>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b24      	ldr	r3, [pc, #144]	; (800061c <SystemClock_Config+0xc8>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b21      	ldr	r3, [pc, #132]	; (8000620 <SystemClock_Config+0xcc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a20      	ldr	r2, [pc, #128]	; (8000620 <SystemClock_Config+0xcc>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <SystemClock_Config+0xcc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2310      	movs	r3, #16
 80005ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c4:	2308      	movs	r3, #8
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005c8:	2354      	movs	r3, #84	; 0x54
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 f95b 	bl	8002894 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e4:	f000 f8e0 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2102      	movs	r1, #2
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fbbd 	bl	8002d84 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000610:	f000 f8ca 	bl	80007a8 <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	3750      	adds	r7, #80	; 0x50
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_SPI3_Init+0x64>)
 800062a:	4a18      	ldr	r2, [pc, #96]	; (800068c <MX_SPI3_Init+0x68>)
 800062c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_SPI3_Init+0x64>)
 8000630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000634:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_SPI3_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_SPI3_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_SPI3_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_SPI3_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_SPI3_Init+0x64>)
 8000650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000654:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_SPI3_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_SPI3_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_SPI3_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_SPI3_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_SPI3_Init+0x64>)
 8000670:	220a      	movs	r2, #10
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_SPI3_Init+0x64>)
 8000676:	f002 fd31 	bl	80030dc <HAL_SPI_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000680:	f000 f892 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000028 	.word	0x20000028
 800068c:	40003c00 	.word	0x40003c00

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b3b      	ldr	r3, [pc, #236]	; (8000798 <MX_GPIO_Init+0x108>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a3a      	ldr	r2, [pc, #232]	; (8000798 <MX_GPIO_Init+0x108>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b38      	ldr	r3, [pc, #224]	; (8000798 <MX_GPIO_Init+0x108>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b34      	ldr	r3, [pc, #208]	; (8000798 <MX_GPIO_Init+0x108>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a33      	ldr	r2, [pc, #204]	; (8000798 <MX_GPIO_Init+0x108>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <MX_GPIO_Init+0x108>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <MX_GPIO_Init+0x108>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a2c      	ldr	r2, [pc, #176]	; (8000798 <MX_GPIO_Init+0x108>)
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <MX_GPIO_Init+0x108>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_GPIO_Init+0x108>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a25      	ldr	r2, [pc, #148]	; (8000798 <MX_GPIO_Init+0x108>)
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_GPIO_Init+0x108>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0310 	and.w	r3, r3, #16
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	2101      	movs	r1, #1
 800071a:	4820      	ldr	r0, [pc, #128]	; (800079c <MX_GPIO_Init+0x10c>)
 800071c:	f002 f87c 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000726:	481e      	ldr	r0, [pc, #120]	; (80007a0 <MX_GPIO_Init+0x110>)
 8000728:	f002 f876 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800072c:	2301      	movs	r3, #1
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4816      	ldr	r0, [pc, #88]	; (800079c <MX_GPIO_Init+0x10c>)
 8000744:	f001 fecc 	bl	80024e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	480f      	ldr	r0, [pc, #60]	; (80007a0 <MX_GPIO_Init+0x110>)
 8000762:	f001 febd 	bl	80024e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000766:	2301      	movs	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	480a      	ldr	r0, [pc, #40]	; (80007a4 <MX_GPIO_Init+0x114>)
 800077c:	f001 feb0 	bl	80024e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	2006      	movs	r0, #6
 8000786:	f001 fe74 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800078a:	2006      	movs	r0, #6
 800078c:	f001 fe8d 	bl	80024aa <HAL_NVIC_EnableIRQ>

}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020c00 	.word	0x40020c00
 80007a4:	40021000 	.word	0x40021000

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_MspInit+0x4c>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x4c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <HAL_SPI_MspInit+0x84>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d12c      	bne.n	8000880 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <HAL_SPI_MspInit+0x88>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_SPI_MspInit+0x88>)
 8000830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_SPI_MspInit+0x88>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <HAL_SPI_MspInit+0x88>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a10      	ldr	r2, [pc, #64]	; (800088c <HAL_SPI_MspInit+0x88>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <HAL_SPI_MspInit+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800085e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000870:	2306      	movs	r3, #6
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <HAL_SPI_MspInit+0x8c>)
 800087c:	f001 fe30 	bl	80024e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40003c00 	.word	0x40003c00
 800088c:	40023800 	.word	0x40023800
 8000890:	40020800 	.word	0x40020800

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e0:	f001 fca8 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f001 ffad 	bl	800284c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <SystemInit+0x20>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <SystemInit+0x20>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000922:	490e      	ldr	r1, [pc, #56]	; (800095c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000938:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000946:	f7ff ffd7 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f003 f97d 	bl	8003c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094e:	f7ff fdbd 	bl	80004cc <main>
  bx  lr    
 8000952:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000960:	08003d00 	.word	0x08003d00
  ldr r2, =_sbss
 8000964:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000968:	20000274 	.word	0x20000274

0800096c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>

0800096e <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b088      	sub	sp, #32
 8000972:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8000974:	2300      	movs	r3, #0
 8000976:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000978:	2300      	movs	r3, #0
 800097a:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 800097c:	2300      	movs	r3, #0
 800097e:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000980:	2300      	movs	r3, #0
 8000982:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8000984:	2300      	movs	r3, #0
 8000986:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000988:	2300      	movs	r3, #0
 800098a:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 800098c:	2300      	movs	r3, #0
 800098e:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000990:	2300      	movs	r3, #0
 8000992:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 8000994:	2300      	movs	r3, #0
 8000996:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000998:	2300      	movs	r3, #0
 800099a:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 800099c:	2300      	movs	r3, #0
 800099e:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80009a0:	2300      	movs	r3, #0
 80009a2:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 80009a4:	2300      	movs	r3, #0
 80009a6:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 80009a8:	2308      	movs	r3, #8
 80009aa:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 80009ac:	2300      	movs	r3, #0
 80009ae:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 80009b0:	2300      	movs	r3, #0
 80009b2:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 80009b4:	2300      	movs	r3, #0
 80009b6:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 80009b8:	2300      	movs	r3, #0
 80009ba:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 80009bc:	2300      	movs	r3, #0
 80009be:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 80009c0:	2300      	movs	r3, #0
 80009c2:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 80009c4:	2300      	movs	r3, #0
 80009c6:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 80009c8:	2300      	movs	r3, #0
 80009ca:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 80009cc:	2300      	movs	r3, #0
 80009ce:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 80009d0:	2300      	movs	r3, #0
 80009d2:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 80009d4:	2300      	movs	r3, #0
 80009d6:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 80009d8:	2300      	movs	r3, #0
 80009da:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 80009dc:	2300      	movs	r3, #0
 80009de:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 80009e4:	2300      	movs	r3, #0
 80009e6:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 80009e8:	2308      	movs	r3, #8
 80009ea:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 80009ec:	2300      	movs	r3, #0
 80009ee:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 80009f0:	2300      	movs	r3, #0
 80009f2:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 80009f4:	f001 fa16 	bl	8001e24 <MCP2515_Initialize>
 80009f8:	4603      	mov	r3, r0
 80009fa:	f083 0301 	eor.w	r3, r3, #1
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <CANSPI_Initialize+0x9c>
    return -1;
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295
 8000a08:	e060      	b.n	8000acc <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8000a0a:	f001 fa2d 	bl	8001e68 <MCP2515_SetConfigMode>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f083 0301 	eor.w	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d002      	beq.n	8000a20 <CANSPI_Initialize+0xb2>
    return -2;
 8000a1a:	f06f 0301 	mvn.w	r3, #1
 8000a1e:	e055      	b.n	8000acc <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	461a      	mov	r2, r3
 8000a24:	2123      	movs	r1, #35	; 0x23
 8000a26:	2020      	movs	r0, #32
 8000a28:	f001 fac2 	bl	8001fb0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	461a      	mov	r2, r3
 8000a30:	2127      	movs	r1, #39	; 0x27
 8000a32:	2024      	movs	r0, #36	; 0x24
 8000a34:	f001 fabc 	bl	8001fb0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	2103      	movs	r1, #3
 8000a40:	2000      	movs	r0, #0
 8000a42:	f001 fab5 	bl	8001fb0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000a46:	f107 0318 	add.w	r3, r7, #24
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	2107      	movs	r1, #7
 8000a4e:	2004      	movs	r0, #4
 8000a50:	f001 faae 	bl	8001fb0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	461a      	mov	r2, r3
 8000a5a:	210b      	movs	r1, #11
 8000a5c:	2008      	movs	r0, #8
 8000a5e:	f001 faa7 	bl	8001fb0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	461a      	mov	r2, r3
 8000a68:	2113      	movs	r1, #19
 8000a6a:	2010      	movs	r0, #16
 8000a6c:	f001 faa0 	bl	8001fb0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	461a      	mov	r2, r3
 8000a76:	2117      	movs	r1, #23
 8000a78:	2014      	movs	r0, #20
 8000a7a:	f001 fa99 	bl	8001fb0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	461a      	mov	r2, r3
 8000a84:	211b      	movs	r1, #27
 8000a86:	2018      	movs	r0, #24
 8000a88:	f001 fa92 	bl	8001fb0 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000a8c:	2104      	movs	r1, #4
 8000a8e:	2060      	movs	r0, #96	; 0x60
 8000a90:	f001 fa6a 	bl	8001f68 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000a94:	2101      	movs	r1, #1
 8000a96:	2070      	movs	r0, #112	; 0x70
 8000a98:	f001 fa66 	bl	8001f68 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	202a      	movs	r0, #42	; 0x2a
 8000aa0:	f001 fa62 	bl	8001f68 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000aa4:	21e5      	movs	r1, #229	; 0xe5
 8000aa6:	2029      	movs	r0, #41	; 0x29
 8000aa8:	f001 fa5e 	bl	8001f68 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000aac:	2183      	movs	r1, #131	; 0x83
 8000aae:	2028      	movs	r0, #40	; 0x28
 8000ab0:	f001 fa5a 	bl	8001f68 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000ab4:	f001 f9f6 	bl	8001ea4 <MCP2515_SetNormalMode>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f083 0301 	eor.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d002      	beq.n	8000aca <CANSPI_Initialize+0x15c>
    return -3;
 8000ac4:	f06f 0302 	mvn.w	r3, #2
 8000ac8:	e000      	b.n	8000acc <CANSPI_Initialize+0x15e>

  return 1;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3720      	adds	r7, #32
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000ae0:	4b37      	ldr	r3, [pc, #220]	; (8000bc0 <CANSPI_Transmit+0xec>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000ae6:	4b36      	ldr	r3, [pc, #216]	; (8000bc0 <CANSPI_Transmit+0xec>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000aec:	4b34      	ldr	r3, [pc, #208]	; (8000bc0 <CANSPI_Transmit+0xec>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000af2:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <CANSPI_Transmit+0xec>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000af8:	f001 fac8 	bl	800208c <MCP2515_ReadStatus>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <CANSPI_Transmit+0xf0>)
 8000b02:	701a      	strb	r2, [r3, #0]

  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8000b04:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <CANSPI_Transmit+0xf0>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d116      	bne.n	8000b40 <CANSPI_Transmit+0x6c>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <CANSPI_Transmit+0xec>)
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f000 f92b 	bl	8000d7a <convertCANid2Reg>

    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	795a      	ldrb	r2, [r3, #5]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3306      	adds	r3, #6
 8000b2c:	4924      	ldr	r1, [pc, #144]	; (8000bc0 <CANSPI_Transmit+0xec>)
 8000b2e:	2040      	movs	r0, #64	; 0x40
 8000b30:	f001 fa68 	bl	8002004 <MCP2515_LoadTxSequence>

    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000b34:	2081      	movs	r0, #129	; 0x81
 8000b36:	f001 fa8f 	bl	8002058 <MCP2515_RequestToSend>

    returnValue = 1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	73fb      	strb	r3, [r7, #15]
 8000b3e:	e03a      	b.n	8000bb6 <CANSPI_Transmit+0xe2>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000b40:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <CANSPI_Transmit+0xf0>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	f003 0310 	and.w	r3, r3, #16
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d116      	bne.n	8000b7c <CANSPI_Transmit+0xa8>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <CANSPI_Transmit+0xec>)
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f000 f90d 	bl	8000d7a <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	795a      	ldrb	r2, [r3, #5]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3306      	adds	r3, #6
 8000b68:	4915      	ldr	r1, [pc, #84]	; (8000bc0 <CANSPI_Transmit+0xec>)
 8000b6a:	2042      	movs	r0, #66	; 0x42
 8000b6c:	f001 fa4a 	bl	8002004 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000b70:	2082      	movs	r0, #130	; 0x82
 8000b72:	f001 fa71 	bl	8002058 <MCP2515_RequestToSend>

    returnValue = 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	e01c      	b.n	8000bb6 <CANSPI_Transmit+0xe2>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <CANSPI_Transmit+0xf0>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d115      	bne.n	8000bb6 <CANSPI_Transmit+0xe2>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <CANSPI_Transmit+0xec>)
 8000b96:	4619      	mov	r1, r3
 8000b98:	f000 f8ef 	bl	8000d7a <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	795a      	ldrb	r2, [r3, #5]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3306      	adds	r3, #6
 8000ba4:	4906      	ldr	r1, [pc, #24]	; (8000bc0 <CANSPI_Transmit+0xec>)
 8000ba6:	2044      	movs	r0, #68	; 0x44
 8000ba8:	f001 fa2c 	bl	8002004 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000bac:	2084      	movs	r0, #132	; 0x84
 8000bae:	f001 fa53 	bl	8002058 <MCP2515_RequestToSend>

    returnValue = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200001bc 	.word	0x200001bc
 8000bc4:	200001b8 	.word	0x200001b8

08000bc8 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000bd4:	f001 fa76 	bl	80020c4 <MCP2515_GetRxStatus>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	733b      	strb	r3, [r7, #12]

  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 8000bdc:	7b3b      	ldrb	r3, [r7, #12]
 8000bde:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d068      	beq.n	8000cba <CANSPI_Receive+0xf2>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000be8:	7b3b      	ldrb	r3, [r7, #12]
 8000bea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b40      	cmp	r3, #64	; 0x40
 8000bf2:	bf0c      	ite	eq
 8000bf4:	2301      	moveq	r3, #1
 8000bf6:	2300      	movne	r3, #0
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	7b3b      	ldrb	r3, [r7, #12]
 8000bfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2bc0      	cmp	r3, #192	; 0xc0
 8000c04:	bf0c      	ite	eq
 8000c06:	2301      	moveq	r3, #1
 8000c08:	2300      	movne	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	220d      	movs	r2, #13
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	2090      	movs	r0, #144	; 0x90
 8000c1e:	f001 f981 	bl	8001f24 <MCP2515_ReadRxSequence>
 8000c22:	e00c      	b.n	8000c3e <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000c24:	7b3b      	ldrb	r3, [r7, #12]
 8000c26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b80      	cmp	r3, #128	; 0x80
 8000c2e:	d106      	bne.n	8000c3e <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	220d      	movs	r2, #13
 8000c36:	4619      	mov	r1, r3
 8000c38:	2094      	movs	r0, #148	; 0x94
 8000c3a:	f001 f973 	bl	8001f24 <MCP2515_ReadRxSequence>
    }

    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000c3e:	7b3b      	ldrb	r3, [r7, #12]
 8000c40:	f003 0318 	and.w	r3, r3, #24
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b10      	cmp	r3, #16
 8000c48:	d10d      	bne.n	8000c66 <CANSPI_Receive+0x9e>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000c50:	7cb8      	ldrb	r0, [r7, #18]
 8000c52:	7cf9      	ldrb	r1, [r7, #19]
 8000c54:	7c3a      	ldrb	r2, [r7, #16]
 8000c56:	7c7b      	ldrb	r3, [r7, #17]
 8000c58:	f000 f834 	bl	8000cc4 <convertReg2ExtendedCANid>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f8c3 2001 	str.w	r2, [r3, #1]
 8000c64:	e00c      	b.n	8000c80 <CANSPI_Receive+0xb8>
    }
    else
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000c6c:	7c3b      	ldrb	r3, [r7, #16]
 8000c6e:	7c7a      	ldrb	r2, [r7, #17]
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f864 	bl	8000d40 <convertReg2StandardCANid>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f8c3 2001 	str.w	r2, [r3, #1]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000c80:	7d3a      	ldrb	r2, [r7, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	715a      	strb	r2, [r3, #5]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000c86:	7d7a      	ldrb	r2, [r7, #21]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	719a      	strb	r2, [r3, #6]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000c8c:	7dba      	ldrb	r2, [r7, #22]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	71da      	strb	r2, [r3, #7]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8000c92:	7dfa      	ldrb	r2, [r7, #23]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000c98:	7e3a      	ldrb	r2, [r7, #24]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8000c9e:	7e7a      	ldrb	r2, [r7, #25]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000ca4:	7eba      	ldrb	r2, [r7, #26]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000caa:	7efa      	ldrb	r2, [r7, #27]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000cb0:	7f3a      	ldrb	r2, [r7, #28]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	735a      	strb	r2, [r3, #13]

    returnValue = 1;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 8000cba:	7ffb      	ldrb	r3, [r7, #31]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000cc4:	b490      	push	{r4, r7}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4604      	mov	r4, r0
 8000ccc:	4608      	mov	r0, r1
 8000cce:	4611      	mov	r1, r2
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	71fb      	strb	r3, [r7, #7]
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71bb      	strb	r3, [r7, #6]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	717b      	strb	r3, [r7, #5]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8000cea:	793b      	ldrb	r3, [r7, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8000cf2:	793b      	ldrb	r3, [r7, #4]
 8000cf4:	095b      	lsrs	r3, r3, #5
 8000cf6:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000cf8:	797b      	ldrb	r3, [r7, #5]
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000cfe:	7bbb      	ldrb	r3, [r7, #14]
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4413      	add	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4413      	add	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4413      	add	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000d34:	697b      	ldr	r3, [r7, #20]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc90      	pop	{r4, r7}
 8000d3e:	4770      	bx	lr

08000d40 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	460a      	mov	r2, r1
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	095b      	lsrs	r3, r3, #5
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	4413      	add	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b087      	sub	sp, #28
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	460b      	mov	r3, r1
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000d8c:	7afb      	ldrb	r3, [r7, #11]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d12e      	bne.n	8000df0 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	0a1b      	lsrs	r3, r3, #8
 8000dac:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	f023 031f 	bic.w	r3, r3, #31
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	7dfb      	ldrb	r3, [r7, #23]
 8000dca:	4413      	add	r3, r2
 8000dcc:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
 8000dd0:	3308      	adds	r3, #8
 8000dd2:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
 8000dd6:	f023 0314 	bic.w	r3, r3, #20
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	0a1b      	lsrs	r3, r3, #8
 8000de4:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8000dee:	e013      	b.n	8000e18 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	015b      	lsls	r3, r3, #5
 8000e00:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	701a      	strb	r2, [r3, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <EEM_INIT>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T EEM_INIT( EEM_Protocol_obj_st*  param )
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	
	EEM_ERR_T result = EEM_EOK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]

/* Ring Buffer Init Sequance */

	param->ringBuffer.head = 0;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	param->ringBuffer.tail = 0;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
	param->ringBuffer.full = EEM_FALSE;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126

#if defined(SPI2CAN_Protocol)

	EEM_U8 ret;

	ret = CANSPI_Initialize();
 8000e48:	f7ff fd91 	bl	800096e <CANSPI_Initialize>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	73bb      	strb	r3, [r7, #14]
#elif	defined( SCB_MODULE )
/* Simple computer protocol has written pyhton language */
#elif	defined( BMS_MODULE )
	if( EEM_FILTER_BMS( param ) != EEM_EOK ) return EEM_ERROR;
#elif	defined( MS1_MODULE )
	if( EEM_FILTER_MS1( param ) != EEM_EOK ) return EEM_ERROR;
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 ffa7 	bl	8001da4 <EEM_FILTER_MS1>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <EEM_INIT+0x3c>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <EEM_INIT+0x3e>

#endif

#endif

	return result;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <EEM_PUSH>:
	 @return  : 
	 @date	  : 
	 @INFO	  :
********************************************************************************/
void   EEM_PUSH( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 8000e6c:	b490      	push	{r4, r7}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 8000e76:	2300      	movs	r3, #0
 8000e78:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e011      	b.n	8000ea4 <EEM_PUSH+0x38>
	{
		ringBuf->data[ ringBuf->tail ][ loopVal ] = param->DATA[ loopVal ];
 8000e80:	7bfa      	ldrb	r2, [r7, #15]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8000e88:	461c      	mov	r4, r3
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	6839      	ldr	r1, [r7, #0]
 8000e8e:	440a      	add	r2, r1
 8000e90:	7910      	ldrb	r0, [r2, #4]
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	00e2      	lsls	r2, r4, #3
 8000e96:	440a      	add	r2, r1
 8000e98:	4413      	add	r3, r2
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	701a      	strb	r2, [r3, #0]
	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	2b07      	cmp	r3, #7
 8000ea8:	d9ea      	bls.n	8000e80 <EEM_PUSH+0x14>
	}
	ringBuf->id[ ringBuf->tail ].identifier = param->EXTENDED_ID.identifier;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	6819      	ldr	r1, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3228      	adds	r2, #40	; 0x28
 8000eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ringBuf->byte_count++;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	ringBuf->tail = ( ringBuf->tail + 1 ) % EEM_BUFFER_SIZE ;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <EEM_PUSH+0xa8>)
 8000ed6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eda:	10d9      	asrs	r1, r3, #3
 8000edc:	17d3      	asrs	r3, r2, #31
 8000ede:	1ac9      	subs	r1, r1, r3
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	1ad1      	subs	r1, r2, r3
 8000eea:	b2ca      	uxtb	r2, r1
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
	
	if( ringBuf->tail == ringBuf->head )
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d103      	bne.n	8000f0a <EEM_PUSH+0x9e>
	{
		ringBuf->full = EEM_TRUE ;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2201      	movs	r2, #1
 8000f06:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
	}
	
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc90      	pop	{r4, r7}
 8000f12:	4770      	bx	lr
 8000f14:	66666667 	.word	0x66666667

08000f18 <EEM_POP>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void	EEM_POP( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal <= 8 ; loopVal++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e011      	b.n	8000f50 <EEM_POP+0x38>
	{
		param->DATA[ loopVal ] = ringBuf->data[ ringBuf->head ][ loopVal ];
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8000f32:	4619      	mov	r1, r3
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	00c9      	lsls	r1, r1, #3
 8000f3c:	4401      	add	r1, r0
 8000f3e:	440a      	add	r2, r1
 8000f40:	7811      	ldrb	r1, [r2, #0]
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	460a      	mov	r2, r1
 8000f48:	711a      	strb	r2, [r3, #4]
	for(loopVal = 0 ; loopVal <= 8 ; loopVal++)
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	d9ea      	bls.n	8000f2c <EEM_POP+0x14>
	}
	param->EXTENDED_ID.identifier = ringBuf->id[ ringBuf->head ].identifier;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3228      	adds	r2, #40	; 0x28
 8000f62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	601a      	str	r2, [r3, #0]
	ringBuf->byte_count++;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	
	ringBuf->head = (ringBuf->head + 1) % EEM_BUFFER_SIZE ;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <EEM_POP+0x9c>)
 8000f82:	fb83 1302 	smull	r1, r3, r3, r2
 8000f86:	10d9      	asrs	r1, r3, #3
 8000f88:	17d3      	asrs	r3, r2, #31
 8000f8a:	1ac9      	subs	r1, r1, r3
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	1ad1      	subs	r1, r2, r3
 8000f96:	b2ca      	uxtb	r2, r1
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	ringBuf->full = EEM_FALSE;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6


}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	66666667 	.word	0x66666667

08000fb8 <EEM_TX>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 		EEM_TX( EEM_CAN_Packet_st* param, EEM_U32 period )
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	EEM_ERR_T result = EEM_EOK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	75fb      	strb	r3, [r7, #23]
#else

#if defined(SPI2CAN_Protocol)

	uCAN_MSG txPacked;
	txPacked.frame.idType = dEXTENDED_CAN_MSG_ID_2_0B ;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	723b      	strb	r3, [r7, #8]
	txPacked.frame.dlc	  = EEM_MAX_SIZE;
 8000fca:	2308      	movs	r3, #8
 8000fcc:	737b      	strb	r3, [r7, #13]
	txPacked.frame.id	  = param->EXTENDED_ID.identifier;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f8c7 3009 	str.w	r3, [r7, #9]

	memcpy(&txPacked.frame.data0 , &param->DATA[0] , EEM_MAX_SIZE );
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	1d19      	adds	r1, r3, #4
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	3306      	adds	r3, #6
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fe54 	bl	8003c90 <memcpy>

	CANSPI_Transmit(&txPacked);
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fd71 	bl	8000ad4 <CANSPI_Transmit>
	
	



	return result;
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <EEM_RX>:
#if defined(SPI2CAN_Protocol)
						uCAN_MSG*			rxPacked      ,
#endif
#endif
						EEM_U8*				rxData	  	   )
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	EEM_ERR_T result = EEM_EOK;
 8001008:	2300      	movs	r3, #0
 800100a:	75fb      	strb	r3, [r7, #23]
#else

#if defined(SPI2CAN_Protocol)

	//@That library used polling method
	if( CANSPI_Receive(rxPacked) )
 800100c:	68b8      	ldr	r0, [r7, #8]
 800100e:	f7ff fddb 	bl	8000bc8 <CANSPI_Receive>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d012      	beq.n	800103e <EEM_RX+0x42>
	{
		memcpy(&param->DATA[0] , &rxPacked->frame.data0 , EEM_MAX_SIZE  );
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	1d18      	adds	r0, r3, #4
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	3306      	adds	r3, #6
 8001020:	2208      	movs	r2, #8
 8001022:	4619      	mov	r1, r3
 8001024:	f002 fe34 	bl	8003c90 <memcpy>
		param->EXTENDED_ID.identifier = rxPacked->frame.id ;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	601a      	str	r2, [r3, #0]
#endif

#endif

	/* Received Data Handled Push Ring Buffer */
	EEM_PUSH( &protocol.obj.ringBuffer , param);
 8001032:	68f9      	ldr	r1, [r7, #12]
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <EEM_RX+0x4c>)
 8001036:	f7ff ff19 	bl	8000e6c <EEM_PUSH>

	return result;
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	e000      	b.n	8001040 <EEM_RX+0x44>
		return EEM_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000b0 	.word	0x200000b0

0800104c <EEM_PERIODIC>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 	EEM_PERIODIC( EEM_CAN_Packet_st*  param )
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	EEM_ERR_T 	   result 	= EEM_EOK;
 8001054:	2300      	movs	r3, #0
 8001056:	75fb      	strb	r3, [r7, #23]

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol)) || (defined(STM32H750xx) && defined(FDCAN_Protocol))
	//bxCAN ve FDCAN IRQ Handler'da recv yapmaktadir.
#else

	uCAN_MSG rxHandle = {0};
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	819a      	strh	r2, [r3, #12]

	result = EEM_RX(param, &rxHandle, NULL);
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffc4 	bl	8000ffc <EEM_RX>
 8001074:	4603      	mov	r3, r0
 8001076:	75fb      	strb	r3, [r7, #23]
	if( result != EEM_EOK ) return result;
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d006      	beq.n	800108c <EEM_PERIODIC+0x40>
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	f000 be6b 	b.w	8001d5a <EEM_PERIODIC+0xd0e>

#endif

	while( !EEM_IS_EMPTY(&protocol.obj.ringBuffer) )
	{
	   EEM_POP(&protocol.obj.ringBuffer, param);
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	48a4      	ldr	r0, [pc, #656]	; (8001318 <EEM_PERIODIC+0x2cc>)
 8001088:	f7ff ff46 	bl	8000f18 <EEM_POP>
	while( !EEM_IS_EMPTY(&protocol.obj.ringBuffer) )
 800108c:	48a2      	ldr	r0, [pc, #648]	; (8001318 <EEM_PERIODIC+0x2cc>)
 800108e:	f000 fe6d 	bl	8001d6c <EEM_IS_EMPTY>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f5      	beq.n	8001084 <EEM_PERIODIC+0x38>
		                                              param->DATA[0] );
#endif
	}

	
	switch( param->EXTENDED_ID.Pages.messageID )
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	789b      	ldrb	r3, [r3, #2]
 800109c:	3b01      	subs	r3, #1
 800109e:	2b24      	cmp	r3, #36	; 0x24
 80010a0:	f200 865a 	bhi.w	8001d58 <EEM_PERIODIC+0xd0c>
 80010a4:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <EEM_PERIODIC+0x60>)
 80010a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010aa:	bf00      	nop
 80010ac:	08001141 	.word	0x08001141
 80010b0:	08001321 	.word	0x08001321
 80010b4:	08001d59 	.word	0x08001d59
 80010b8:	08001d59 	.word	0x08001d59
 80010bc:	08001d59 	.word	0x08001d59
 80010c0:	08001d59 	.word	0x08001d59
 80010c4:	0800148f 	.word	0x0800148f
 80010c8:	080014e1 	.word	0x080014e1
 80010cc:	08001529 	.word	0x08001529
 80010d0:	08001d59 	.word	0x08001d59
 80010d4:	08001d59 	.word	0x08001d59
 80010d8:	08001d59 	.word	0x08001d59
 80010dc:	08001d59 	.word	0x08001d59
 80010e0:	08001d59 	.word	0x08001d59
 80010e4:	08001d59 	.word	0x08001d59
 80010e8:	0800157b 	.word	0x0800157b
 80010ec:	08001d59 	.word	0x08001d59
 80010f0:	08001d59 	.word	0x08001d59
 80010f4:	08001d59 	.word	0x08001d59
 80010f8:	08001d59 	.word	0x08001d59
 80010fc:	08001d59 	.word	0x08001d59
 8001100:	08001d59 	.word	0x08001d59
 8001104:	08001d59 	.word	0x08001d59
 8001108:	080015c5 	.word	0x080015c5
 800110c:	0800186d 	.word	0x0800186d
 8001110:	08001d59 	.word	0x08001d59
 8001114:	08001d59 	.word	0x08001d59
 8001118:	08001d59 	.word	0x08001d59
 800111c:	08001d59 	.word	0x08001d59
 8001120:	08001d59 	.word	0x08001d59
 8001124:	08001d59 	.word	0x08001d59
 8001128:	08001b15 	.word	0x08001b15
 800112c:	08001bf1 	.word	0x08001bf1
 8001130:	08001c37 	.word	0x08001c37
 8001134:	08001d13 	.word	0x08001d13
 8001138:	08001d59 	.word	0x08001d59
 800113c:	08001d59 	.word	0x08001d59
	{
//#if defined(BCM_MODULE)

	case MESSAGE01 :

		BCM_MSG.Message01.SPN.HVAC_led01_u1 = ( param->DATA[0] & 0x01 );
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	791b      	ldrb	r3, [r3, #4]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	b2d9      	uxtb	r1, r3
 800114a:	4a74      	ldr	r2, [pc, #464]	; (800131c <EEM_PERIODIC+0x2d0>)
 800114c:	7913      	ldrb	r3, [r2, #4]
 800114e:	f361 0300 	bfi	r3, r1, #0, #1
 8001152:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led02_u1 = (( param->DATA[0] & 0x02 ) >> 1 );
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	791b      	ldrb	r3, [r3, #4]
 8001158:	105b      	asrs	r3, r3, #1
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	b2d9      	uxtb	r1, r3
 8001160:	4a6e      	ldr	r2, [pc, #440]	; (800131c <EEM_PERIODIC+0x2d0>)
 8001162:	7913      	ldrb	r3, [r2, #4]
 8001164:	f361 0341 	bfi	r3, r1, #1, #1
 8001168:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led03_u1 = (( param->DATA[0] & 0x04 ) >> 2 );
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	791b      	ldrb	r3, [r3, #4]
 800116e:	109b      	asrs	r3, r3, #2
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	b2d9      	uxtb	r1, r3
 8001176:	4a69      	ldr	r2, [pc, #420]	; (800131c <EEM_PERIODIC+0x2d0>)
 8001178:	7913      	ldrb	r3, [r2, #4]
 800117a:	f361 0382 	bfi	r3, r1, #2, #1
 800117e:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led04_u1 = (( param->DATA[0] & 0x08 ) >> 3 );
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	791b      	ldrb	r3, [r3, #4]
 8001184:	10db      	asrs	r3, r3, #3
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	b2d9      	uxtb	r1, r3
 800118c:	4a63      	ldr	r2, [pc, #396]	; (800131c <EEM_PERIODIC+0x2d0>)
 800118e:	7913      	ldrb	r3, [r2, #4]
 8001190:	f361 03c3 	bfi	r3, r1, #3, #1
 8001194:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led05_u1 = (( param->DATA[0] & 0x10 ) >> 4 );
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	111b      	asrs	r3, r3, #4
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	b2d9      	uxtb	r1, r3
 80011a2:	4a5e      	ldr	r2, [pc, #376]	; (800131c <EEM_PERIODIC+0x2d0>)
 80011a4:	7913      	ldrb	r3, [r2, #4]
 80011a6:	f361 1304 	bfi	r3, r1, #4, #1
 80011aa:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led06_u1 = (( param->DATA[0] & 0x20 ) >> 5 );
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	791b      	ldrb	r3, [r3, #4]
 80011b0:	115b      	asrs	r3, r3, #5
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	b2d9      	uxtb	r1, r3
 80011b8:	4a58      	ldr	r2, [pc, #352]	; (800131c <EEM_PERIODIC+0x2d0>)
 80011ba:	7913      	ldrb	r3, [r2, #4]
 80011bc:	f361 1345 	bfi	r3, r1, #5, #1
 80011c0:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led07_u1 = (( param->DATA[0] & 0x40 ) >> 6 );
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	791b      	ldrb	r3, [r3, #4]
 80011c6:	119b      	asrs	r3, r3, #6
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	b2d9      	uxtb	r1, r3
 80011ce:	4a53      	ldr	r2, [pc, #332]	; (800131c <EEM_PERIODIC+0x2d0>)
 80011d0:	7913      	ldrb	r3, [r2, #4]
 80011d2:	f361 1386 	bfi	r3, r1, #6, #1
 80011d6:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led08_u1 = (( param->DATA[0] & 0x80 ) >> 7 );
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	791b      	ldrb	r3, [r3, #4]
 80011dc:	09db      	lsrs	r3, r3, #7
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	b2d9      	uxtb	r1, r3
 80011e6:	4a4d      	ldr	r2, [pc, #308]	; (800131c <EEM_PERIODIC+0x2d0>)
 80011e8:	7913      	ldrb	r3, [r2, #4]
 80011ea:	f361 13c7 	bfi	r3, r1, #7, #1
 80011ee:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led09_u1 = ( param->DATA[1] & 0x01 );
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	795b      	ldrb	r3, [r3, #5]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	b2d9      	uxtb	r1, r3
 80011fa:	4a48      	ldr	r2, [pc, #288]	; (800131c <EEM_PERIODIC+0x2d0>)
 80011fc:	7953      	ldrb	r3, [r2, #5]
 80011fe:	f361 0300 	bfi	r3, r1, #0, #1
 8001202:	7153      	strb	r3, [r2, #5]
		BCM_MSG.Message01.SPN.HVAC_led10_u1 = (( param->DATA[1] & 0x02 ) >> 1 );
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	795b      	ldrb	r3, [r3, #5]
 8001208:	105b      	asrs	r3, r3, #1
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	b2d9      	uxtb	r1, r3
 8001210:	4a42      	ldr	r2, [pc, #264]	; (800131c <EEM_PERIODIC+0x2d0>)
 8001212:	7953      	ldrb	r3, [r2, #5]
 8001214:	f361 0341 	bfi	r3, r1, #1, #1
 8001218:	7153      	strb	r3, [r2, #5]
		BCM_MSG.Message01.SPN.HVAC_led11_u1 = (( param->DATA[1] & 0x04 ) >> 2 );
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	795b      	ldrb	r3, [r3, #5]
 800121e:	109b      	asrs	r3, r3, #2
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	b2d9      	uxtb	r1, r3
 8001226:	4a3d      	ldr	r2, [pc, #244]	; (800131c <EEM_PERIODIC+0x2d0>)
 8001228:	7953      	ldrb	r3, [r2, #5]
 800122a:	f361 0382 	bfi	r3, r1, #2, #1
 800122e:	7153      	strb	r3, [r2, #5]
		BCM_MSG.Message01.SPN.HVAC_led12_u1 = (( param->DATA[1] & 0x08 ) >> 3 );
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	795b      	ldrb	r3, [r3, #5]
 8001234:	10db      	asrs	r3, r3, #3
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	b2d9      	uxtb	r1, r3
 800123c:	4a37      	ldr	r2, [pc, #220]	; (800131c <EEM_PERIODIC+0x2d0>)
 800123e:	7953      	ldrb	r3, [r2, #5]
 8001240:	f361 03c3 	bfi	r3, r1, #3, #1
 8001244:	7153      	strb	r3, [r2, #5]

		BCM_MSG.Message01.SPN.HVAC_pressureVal_u8 	= (EEM_U8)( (EEM_U8)( (param->DATA[1] & 0xF0) >> 4 )  |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	795b      	ldrb	r3, [r3, #5]
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	b2da      	uxtb	r2, r3
												   	    		(EEM_U8)( (param->DATA[2] & 0x0F) << 4 )  );
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	799b      	ldrb	r3, [r3, #6]
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	b2db      	uxtb	r3, r3
		BCM_MSG.Message01.SPN.HVAC_pressureVal_u8 	= (EEM_U8)( (EEM_U8)( (param->DATA[1] & 0xF0) >> 4 )  |
 8001256:	4313      	orrs	r3, r2
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b30      	ldr	r3, [pc, #192]	; (800131c <EEM_PERIODIC+0x2d0>)
 800125c:	719a      	strb	r2, [r3, #6]

		BCM_MSG.Message01.SPN.HVAC_indoorTempVal_u8 = (EEM_U8)( (EEM_U8)( (param->DATA[2] & 0xF0) >> 4 ) |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	799b      	ldrb	r3, [r3, #6]
 8001262:	091b      	lsrs	r3, r3, #4
 8001264:	b2da      	uxtb	r2, r3
													 			(EEM_U8)( (param->DATA[3] & 0x0F) << 4 ) );
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	79db      	ldrb	r3, [r3, #7]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	b2db      	uxtb	r3, r3
		BCM_MSG.Message01.SPN.HVAC_indoorTempVal_u8 = (EEM_U8)( (EEM_U8)( (param->DATA[2] & 0xF0) >> 4 ) |
 800126e:	4313      	orrs	r3, r2
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <EEM_PERIODIC+0x2d0>)
 8001274:	71da      	strb	r2, [r3, #7]

		BCM_MSG.Message01.SPN.HVAC_indoorHumidVal_u8 = (EEM_U8)( (EEM_U8)( (param->DATA[3] & 0xF0) >> 4 ) |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	79db      	ldrb	r3, [r3, #7]
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	b2da      	uxtb	r2, r3
				 	 	 	 	 	 	 	 	 	 	  		(EEM_U8)( (param->DATA[4] & 0x0F) << 4 ) );
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7a1b      	ldrb	r3, [r3, #8]
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	b2db      	uxtb	r3, r3
		BCM_MSG.Message01.SPN.HVAC_indoorHumidVal_u8 = (EEM_U8)( (EEM_U8)( (param->DATA[3] & 0xF0) >> 4 ) |
 8001286:	4313      	orrs	r3, r2
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b24      	ldr	r3, [pc, #144]	; (800131c <EEM_PERIODIC+0x2d0>)
 800128c:	721a      	strb	r2, [r3, #8]

		BCM_MSG.Message01.SPN.HVAC_rtcCalib_u1 			= (EEM_U8)( ( param->DATA[4] & 0x10) >> 4 );
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7a1b      	ldrb	r3, [r3, #8]
 8001292:	111b      	asrs	r3, r3, #4
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	b2d9      	uxtb	r1, r3
 800129a:	4a20      	ldr	r2, [pc, #128]	; (800131c <EEM_PERIODIC+0x2d0>)
 800129c:	7a53      	ldrb	r3, [r2, #9]
 800129e:	f361 0300 	bfi	r3, r1, #0, #1
 80012a2:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewSecond_u8 		= (EEM_U8)( ( param->DATA[4] & 0x20) >> 5 );
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7a1b      	ldrb	r3, [r3, #8]
 80012a8:	115b      	asrs	r3, r3, #5
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	b2d9      	uxtb	r1, r3
 80012b0:	4a1a      	ldr	r2, [pc, #104]	; (800131c <EEM_PERIODIC+0x2d0>)
 80012b2:	7a53      	ldrb	r3, [r2, #9]
 80012b4:	f361 0341 	bfi	r3, r1, #1, #1
 80012b8:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewMinutes_u8 	= (EEM_U8)( ( param->DATA[4] & 0x40) >> 6 );
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7a1b      	ldrb	r3, [r3, #8]
 80012be:	119b      	asrs	r3, r3, #6
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	b2d9      	uxtb	r1, r3
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <EEM_PERIODIC+0x2d0>)
 80012c8:	7a53      	ldrb	r3, [r2, #9]
 80012ca:	f361 0382 	bfi	r3, r1, #2, #1
 80012ce:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewHour_u8 		= (EEM_U8)( ( param->DATA[4] & 0x80) >> 7 );
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7a1b      	ldrb	r3, [r3, #8]
 80012d4:	09db      	lsrs	r3, r3, #7
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	b2d9      	uxtb	r1, r3
 80012de:	4a0f      	ldr	r2, [pc, #60]	; (800131c <EEM_PERIODIC+0x2d0>)
 80012e0:	7a53      	ldrb	r3, [r2, #9]
 80012e2:	f361 03c3 	bfi	r3, r1, #3, #1
 80012e6:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewDay_u8 		= (EEM_U8)(   param->DATA[5] & 0x01 );
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7a5b      	ldrb	r3, [r3, #9]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	b2d9      	uxtb	r1, r3
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <EEM_PERIODIC+0x2d0>)
 80012f4:	7a53      	ldrb	r3, [r2, #9]
 80012f6:	f361 1304 	bfi	r3, r1, #4, #1
 80012fa:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewMonth_u8 		= (EEM_U8)( ( param->DATA[5] & 0x02 ) >> 1 );
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7a5b      	ldrb	r3, [r3, #9]
 8001300:	105b      	asrs	r3, r3, #1
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	b2d9      	uxtb	r1, r3
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <EEM_PERIODIC+0x2d0>)
 800130a:	7a53      	ldrb	r3, [r2, #9]
 800130c:	f361 1345 	bfi	r3, r1, #5, #1
 8001310:	7253      	strb	r3, [r2, #9]


	break;
 8001312:	f000 bd21 	b.w	8001d58 <EEM_PERIODIC+0xd0c>
 8001316:	bf00      	nop
 8001318:	200000b0 	.word	0x200000b0
 800131c:	200001c0 	.word	0x200001c0

	case MESSAGE02 :


		BCM_MSG.Message02.SPN.HVAC_fireVal				= (EEM_U8)( param->DATA[0] & 0x0F );
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	791b      	ldrb	r3, [r3, #4]
 8001324:	f003 030f 	and.w	r3, r3, #15
 8001328:	b2d9      	uxtb	r1, r3
 800132a:	4aa5      	ldr	r2, [pc, #660]	; (80015c0 <EEM_PERIODIC+0x574>)
 800132c:	7d13      	ldrb	r3, [r2, #20]
 800132e:	f361 0303 	bfi	r3, r1, #0, #4
 8001332:	7513      	strb	r3, [r2, #20]
		BCM_MSG.Message02.SPN.HVAC_smokeVal 			= (EEM_U8)(( param->DATA[0] & 0xF0 ) >> 4 );
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	791b      	ldrb	r3, [r3, #4]
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	b2d9      	uxtb	r1, r3
 8001342:	4a9f      	ldr	r2, [pc, #636]	; (80015c0 <EEM_PERIODIC+0x574>)
 8001344:	7d13      	ldrb	r3, [r2, #20]
 8001346:	f361 1307 	bfi	r3, r1, #4, #4
 800134a:	7513      	strb	r3, [r2, #20]

		BCM_MSG.Message02.SPN.HVAC_windPressure1 		= ( param->DATA[0] );
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	791a      	ldrb	r2, [r3, #4]
 8001350:	4b9b      	ldr	r3, [pc, #620]	; (80015c0 <EEM_PERIODIC+0x574>)
 8001352:	755a      	strb	r2, [r3, #21]
		BCM_MSG.Message02.SPN.HVAC_windPressure2 		= ( param->DATA[1] );
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	795a      	ldrb	r2, [r3, #5]
 8001358:	4b99      	ldr	r3, [pc, #612]	; (80015c0 <EEM_PERIODIC+0x574>)
 800135a:	759a      	strb	r2, [r3, #22]
		BCM_MSG.Message02.SPN.HVAC_leftFrontWheel_xy 	= ( param->DATA[2] );
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	799a      	ldrb	r2, [r3, #6]
 8001360:	4b97      	ldr	r3, [pc, #604]	; (80015c0 <EEM_PERIODIC+0x574>)
 8001362:	75da      	strb	r2, [r3, #23]
		BCM_MSG.Message02.SPN.HVAC_rightFrontWheel_xy 	= ( param->DATA[3] );
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	79da      	ldrb	r2, [r3, #7]
 8001368:	4b95      	ldr	r3, [pc, #596]	; (80015c0 <EEM_PERIODIC+0x574>)
 800136a:	761a      	strb	r2, [r3, #24]
		BCM_MSG.Message02.SPN.HVAC_status00_u1 	        = ( param->DATA[4] & 0x01 );
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7a1b      	ldrb	r3, [r3, #8]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	b2d9      	uxtb	r1, r3
 8001376:	4a92      	ldr	r2, [pc, #584]	; (80015c0 <EEM_PERIODIC+0x574>)
 8001378:	7e53      	ldrb	r3, [r2, #25]
 800137a:	f361 0300 	bfi	r3, r1, #0, #1
 800137e:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status01_u1 	        = (( param->DATA[4] & 0x02 ) >> 1 );
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7a1b      	ldrb	r3, [r3, #8]
 8001384:	105b      	asrs	r3, r3, #1
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	b2d9      	uxtb	r1, r3
 800138c:	4a8c      	ldr	r2, [pc, #560]	; (80015c0 <EEM_PERIODIC+0x574>)
 800138e:	7e53      	ldrb	r3, [r2, #25]
 8001390:	f361 0341 	bfi	r3, r1, #1, #1
 8001394:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status02_u1 	        = (( param->DATA[4] & 0x04 ) >> 2 );
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7a1b      	ldrb	r3, [r3, #8]
 800139a:	109b      	asrs	r3, r3, #2
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	b2d9      	uxtb	r1, r3
 80013a2:	4a87      	ldr	r2, [pc, #540]	; (80015c0 <EEM_PERIODIC+0x574>)
 80013a4:	7e53      	ldrb	r3, [r2, #25]
 80013a6:	f361 0382 	bfi	r3, r1, #2, #1
 80013aa:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status03_u1 	        = (( param->DATA[4] & 0x08 ) >> 3 );
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7a1b      	ldrb	r3, [r3, #8]
 80013b0:	10db      	asrs	r3, r3, #3
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	b2d9      	uxtb	r1, r3
 80013b8:	4a81      	ldr	r2, [pc, #516]	; (80015c0 <EEM_PERIODIC+0x574>)
 80013ba:	7e53      	ldrb	r3, [r2, #25]
 80013bc:	f361 03c3 	bfi	r3, r1, #3, #1
 80013c0:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status04_u1 	        = (( param->DATA[4] & 0x10 ) >> 4 );
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7a1b      	ldrb	r3, [r3, #8]
 80013c6:	111b      	asrs	r3, r3, #4
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	b2d9      	uxtb	r1, r3
 80013ce:	4a7c      	ldr	r2, [pc, #496]	; (80015c0 <EEM_PERIODIC+0x574>)
 80013d0:	7e53      	ldrb	r3, [r2, #25]
 80013d2:	f361 1304 	bfi	r3, r1, #4, #1
 80013d6:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status05_u1 	        = (( param->DATA[4] & 0x20 ) >> 5 );
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7a1b      	ldrb	r3, [r3, #8]
 80013dc:	115b      	asrs	r3, r3, #5
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	b2d9      	uxtb	r1, r3
 80013e4:	4a76      	ldr	r2, [pc, #472]	; (80015c0 <EEM_PERIODIC+0x574>)
 80013e6:	7e53      	ldrb	r3, [r2, #25]
 80013e8:	f361 1345 	bfi	r3, r1, #5, #1
 80013ec:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status06_u1 	        = (( param->DATA[4] & 0x40 ) >> 6 );
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7a1b      	ldrb	r3, [r3, #8]
 80013f2:	119b      	asrs	r3, r3, #6
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	b2d9      	uxtb	r1, r3
 80013fa:	4a71      	ldr	r2, [pc, #452]	; (80015c0 <EEM_PERIODIC+0x574>)
 80013fc:	7e53      	ldrb	r3, [r2, #25]
 80013fe:	f361 1386 	bfi	r3, r1, #6, #1
 8001402:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status07_u1 	        = (( param->DATA[4] & 0x80 ) >> 7 );
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7a1b      	ldrb	r3, [r3, #8]
 8001408:	09db      	lsrs	r3, r3, #7
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	b2d9      	uxtb	r1, r3
 8001412:	4a6b      	ldr	r2, [pc, #428]	; (80015c0 <EEM_PERIODIC+0x574>)
 8001414:	7e53      	ldrb	r3, [r2, #25]
 8001416:	f361 13c7 	bfi	r3, r1, #7, #1
 800141a:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_Hgear_cmd 		    = (  param->DATA[5] & 0x07 );
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7a5b      	ldrb	r3, [r3, #9]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	b2d9      	uxtb	r1, r3
 8001426:	4a66      	ldr	r2, [pc, #408]	; (80015c0 <EEM_PERIODIC+0x574>)
 8001428:	7e93      	ldrb	r3, [r2, #26]
 800142a:	f361 0302 	bfi	r3, r1, #0, #3
 800142e:	7693      	strb	r3, [r2, #26]
		BCM_MSG.Message02.SPN.HVAC_Gear_cmd 		    = (( param->DATA[5] & 0x18 ) >> 3 );
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7a5b      	ldrb	r3, [r3, #9]
 8001434:	10db      	asrs	r3, r3, #3
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	b2d9      	uxtb	r1, r3
 800143c:	4a60      	ldr	r2, [pc, #384]	; (80015c0 <EEM_PERIODIC+0x574>)
 800143e:	7e93      	ldrb	r3, [r2, #26]
 8001440:	f361 03c4 	bfi	r3, r1, #3, #2
 8001444:	7693      	strb	r3, [r2, #26]
		BCM_MSG.Message02.SPN.HVAC_cmdbit05_u1 	        = (( param->DATA[5] & 0x20 ) >> 5 );
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7a5b      	ldrb	r3, [r3, #9]
 800144a:	115b      	asrs	r3, r3, #5
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	b2d9      	uxtb	r1, r3
 8001452:	4a5b      	ldr	r2, [pc, #364]	; (80015c0 <EEM_PERIODIC+0x574>)
 8001454:	7e93      	ldrb	r3, [r2, #26]
 8001456:	f361 1345 	bfi	r3, r1, #5, #1
 800145a:	7693      	strb	r3, [r2, #26]
		BCM_MSG.Message02.SPN.HVAC_cmdbit06_u1 	        = (( param->DATA[5] & 0x40 ) >> 6 );
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7a5b      	ldrb	r3, [r3, #9]
 8001460:	119b      	asrs	r3, r3, #6
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	b2d9      	uxtb	r1, r3
 8001468:	4a55      	ldr	r2, [pc, #340]	; (80015c0 <EEM_PERIODIC+0x574>)
 800146a:	7e93      	ldrb	r3, [r2, #26]
 800146c:	f361 1386 	bfi	r3, r1, #6, #1
 8001470:	7693      	strb	r3, [r2, #26]
		BCM_MSG.Message02.SPN.HVAC_cmdbit07_u1 	        = (( param->DATA[5] & 0x80 ) >> 7 );
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7a5b      	ldrb	r3, [r3, #9]
 8001476:	09db      	lsrs	r3, r3, #7
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	b2d9      	uxtb	r1, r3
 8001480:	4a4f      	ldr	r2, [pc, #316]	; (80015c0 <EEM_PERIODIC+0x574>)
 8001482:	7e93      	ldrb	r3, [r2, #26]
 8001484:	f361 13c7 	bfi	r3, r1, #7, #1
 8001488:	7693      	strb	r3, [r2, #26]



	break;
 800148a:	f000 bc65 	b.w	8001d58 <EEM_PERIODIC+0xd0c>

	case MESSAGE07 :

		BCM_MSG.Message07.SPN.MS1_rpm 		= param->DATA[0] ;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	791a      	ldrb	r2, [r3, #4]
 8001492:	4b4b      	ldr	r3, [pc, #300]	; (80015c0 <EEM_PERIODIC+0x574>)
 8001494:	f883 2020 	strb.w	r2, [r3, #32]

		BCM_MSG.Message07.SPN.MS1_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	795b      	ldrb	r3, [r3, #5]
 800149c:	461a      	mov	r2, r3
														(EEM_U32)( param->DATA[2] << 8  )   |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	799b      	ldrb	r3, [r3, #6]
 80014a2:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message07.SPN.MS1_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 80014a4:	4313      	orrs	r3, r2
														(EEM_U32)( param->DATA[3] << 16 )   |
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	79d2      	ldrb	r2, [r2, #7]
 80014aa:	0412      	lsls	r2, r2, #16
														(EEM_U32)( param->DATA[2] << 8  )   |
 80014ac:	4313      	orrs	r3, r2
														(EEM_U32)( param->DATA[4] << 24 )   );
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	7a12      	ldrb	r2, [r2, #8]
 80014b2:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message07.SPN.MS1_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 80014b4:	4313      	orrs	r3, r2
 80014b6:	4a42      	ldr	r2, [pc, #264]	; (80015c0 <EEM_PERIODIC+0x574>)
 80014b8:	6253      	str	r3, [r2, #36]	; 0x24


		BCM_MSG.Message07.SPN.MS1_current 	= (EEM_U16)((EEM_U16)( param->DATA[5]	    )	|
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7a5b      	ldrb	r3, [r3, #9]
 80014be:	b29a      	uxth	r2, r3
														(EEM_U16)( param->DATA[6] << 8  )   );
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7a9b      	ldrb	r3, [r3, #10]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	b29b      	uxth	r3, r3
		BCM_MSG.Message07.SPN.MS1_current 	= (EEM_U16)((EEM_U16)( param->DATA[5]	    )	|
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	4b3c      	ldr	r3, [pc, #240]	; (80015c0 <EEM_PERIODIC+0x574>)
 80014d0:	851a      	strh	r2, [r3, #40]	; 0x28

		BCM_MSG.Message07.SPN.MS1_temp 		= param->DATA[7] ;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	7ada      	ldrb	r2, [r3, #11]
 80014d6:	4b3a      	ldr	r3, [pc, #232]	; (80015c0 <EEM_PERIODIC+0x574>)
 80014d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	break;
 80014dc:	f000 bc3c 	b.w	8001d58 <EEM_PERIODIC+0xd0c>

	case MESSAGE08 :

		BCM_MSG.Message08.SPN.MS1_Speed  = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	 |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	791b      	ldrb	r3, [r3, #4]
 80014e4:	461a      	mov	r2, r3
													 (EEM_U32)( param->DATA[1] << 8  )   |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	795b      	ldrb	r3, [r3, #5]
 80014ea:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message08.SPN.MS1_Speed  = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	 |
 80014ec:	4313      	orrs	r3, r2
			                                         (EEM_U32)( param->DATA[2] << 16 )   |
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	7992      	ldrb	r2, [r2, #6]
 80014f2:	0412      	lsls	r2, r2, #16
													 (EEM_U32)( param->DATA[1] << 8  )   |
 80014f4:	4313      	orrs	r3, r2
			                                         (EEM_U32)( param->DATA[3] << 24 )   );
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	79d2      	ldrb	r2, [r2, #7]
 80014fa:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message08.SPN.MS1_Speed  = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	 |
 80014fc:	4313      	orrs	r3, r2
 80014fe:	4a30      	ldr	r2, [pc, #192]	; (80015c0 <EEM_PERIODIC+0x574>)
 8001500:	6313      	str	r3, [r2, #48]	; 0x30

		BCM_MSG.Message08.SPN.MS1_Direction = (EEM_U32)( (EEM_U32)( param->DATA[4]	     )	 |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7a1b      	ldrb	r3, [r3, #8]
 8001506:	461a      	mov	r2, r3
													 	 (EEM_U32)( param->DATA[5] << 8  )   |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7a5b      	ldrb	r3, [r3, #9]
 800150c:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message08.SPN.MS1_Direction = (EEM_U32)( (EEM_U32)( param->DATA[4]	     )	 |
 800150e:	4313      	orrs	r3, r2
														 (EEM_U32)( param->DATA[6] << 16 )   |
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	7a92      	ldrb	r2, [r2, #10]
 8001514:	0412      	lsls	r2, r2, #16
													 	 (EEM_U32)( param->DATA[5] << 8  )   |
 8001516:	4313      	orrs	r3, r2
														 (EEM_U32)( param->DATA[7] << 24 )   );
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	7ad2      	ldrb	r2, [r2, #11]
 800151c:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message08.SPN.MS1_Direction = (EEM_U32)( (EEM_U32)( param->DATA[4]	     )	 |
 800151e:	4313      	orrs	r3, r2
 8001520:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <EEM_PERIODIC+0x574>)
 8001522:	6353      	str	r3, [r2, #52]	; 0x34

	break;
 8001524:	f000 bc18 	b.w	8001d58 <EEM_PERIODIC+0xd0c>

	case MESSAGE09 :

		BCM_MSG.Message09.SPN.MS2_rpm 		= param->DATA[0] ;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	791a      	ldrb	r2, [r3, #4]
 800152c:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <EEM_PERIODIC+0x574>)
 800152e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		BCM_MSG.Message09.SPN.MS2_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	795b      	ldrb	r3, [r3, #5]
 8001536:	461a      	mov	r2, r3
														(EEM_U32)( param->DATA[2] << 8  )   |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	799b      	ldrb	r3, [r3, #6]
 800153c:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message09.SPN.MS2_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 800153e:	4313      	orrs	r3, r2
														(EEM_U32)( param->DATA[3] << 16 )   |
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	79d2      	ldrb	r2, [r2, #7]
 8001544:	0412      	lsls	r2, r2, #16
														(EEM_U32)( param->DATA[2] << 8  )   |
 8001546:	4313      	orrs	r3, r2
														(EEM_U32)( param->DATA[4] << 24 )   );
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	7a12      	ldrb	r2, [r2, #8]
 800154c:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message09.SPN.MS2_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 800154e:	4313      	orrs	r3, r2
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <EEM_PERIODIC+0x574>)
 8001552:	6413      	str	r3, [r2, #64]	; 0x40


		BCM_MSG.Message09.SPN.MS2_current 	= (EEM_U16)((EEM_U16)( param->DATA[5]	    )	|
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7a5b      	ldrb	r3, [r3, #9]
 8001558:	b29a      	uxth	r2, r3
														(EEM_U16)( param->DATA[6] << 8  )   );
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7a9b      	ldrb	r3, [r3, #10]
 800155e:	b29b      	uxth	r3, r3
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b29b      	uxth	r3, r3
		BCM_MSG.Message09.SPN.MS2_current 	= (EEM_U16)((EEM_U16)( param->DATA[5]	    )	|
 8001564:	4313      	orrs	r3, r2
 8001566:	b29a      	uxth	r2, r3
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <EEM_PERIODIC+0x574>)
 800156a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

		BCM_MSG.Message09.SPN.MS2_temp 		= param->DATA[7] ;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7ada      	ldrb	r2, [r3, #11]
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <EEM_PERIODIC+0x574>)
 8001574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	break;
 8001578:	e3ee      	b.n	8001d58 <EEM_PERIODIC+0xd0c>

	case MESSAGE10 :

		BCM_MSG.Message10.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	  |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	791b      	ldrb	r3, [r3, #4]
 800157e:	461a      	mov	r2, r3
													  (EEM_U32)( param->DATA[1] << 8  )   |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	795b      	ldrb	r3, [r3, #5]
 8001584:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message10.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	  |
 8001586:	4313      	orrs	r3, r2
			                                          (EEM_U32)( param->DATA[2] << 16 )   |
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	7992      	ldrb	r2, [r2, #6]
 800158c:	0412      	lsls	r2, r2, #16
													  (EEM_U32)( param->DATA[1] << 8  )   |
 800158e:	4313      	orrs	r3, r2
			                                          (EEM_U32)( param->DATA[3] << 24 )   );
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	79d2      	ldrb	r2, [r2, #7]
 8001594:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message10.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	  |
 8001596:	4313      	orrs	r3, r2
 8001598:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <EEM_PERIODIC+0x574>)
 800159a:	64d3      	str	r3, [r2, #76]	; 0x4c

		BCM_MSG.Message10.SPN.MS2_Direction  = (EEM_U32)( (EEM_U32)( param->DATA[4]	      )	  |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7a1b      	ldrb	r3, [r3, #8]
 80015a0:	461a      	mov	r2, r3
													 	  (EEM_U32)( param->DATA[5] << 8  )   |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7a5b      	ldrb	r3, [r3, #9]
 80015a6:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message10.SPN.MS2_Direction  = (EEM_U32)( (EEM_U32)( param->DATA[4]	      )	  |
 80015a8:	4313      	orrs	r3, r2
														  (EEM_U32)( param->DATA[6] << 16 )   |
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	7a92      	ldrb	r2, [r2, #10]
 80015ae:	0412      	lsls	r2, r2, #16
													 	  (EEM_U32)( param->DATA[5] << 8  )   |
 80015b0:	4313      	orrs	r3, r2
														  (EEM_U32)( param->DATA[7] << 24 )   );
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	7ad2      	ldrb	r2, [r2, #11]
 80015b6:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message10.SPN.MS2_Direction  = (EEM_U32)( (EEM_U32)( param->DATA[4]	      )	  |
 80015b8:	4313      	orrs	r3, r2
 80015ba:	4a01      	ldr	r2, [pc, #4]	; (80015c0 <EEM_PERIODIC+0x574>)
 80015bc:	6513      	str	r3, [r2, #80]	; 0x50

	break;
 80015be:	e3cb      	b.n	8001d58 <EEM_PERIODIC+0xd0c>
 80015c0:	200001c0 	.word	0x200001c0

	case MESSAGE18 :

		BCM_MSG.Message18.SPN.MS1_warningFlag01 =  ( param->DATA[0] & 0x01 );
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	791b      	ldrb	r3, [r3, #4]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	b2d9      	uxtb	r1, r3
 80015ce:	4aa6      	ldr	r2, [pc, #664]	; (8001868 <EEM_PERIODIC+0x81c>)
 80015d0:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80015d4:	f361 0300 	bfi	r3, r1, #0, #1
 80015d8:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag02 = (( param->DATA[0] & 0x02 ) >> 1 );
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	791b      	ldrb	r3, [r3, #4]
 80015e0:	105b      	asrs	r3, r3, #1
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	b2d9      	uxtb	r1, r3
 80015e8:	4a9f      	ldr	r2, [pc, #636]	; (8001868 <EEM_PERIODIC+0x81c>)
 80015ea:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80015ee:	f361 0341 	bfi	r3, r1, #1, #1
 80015f2:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag03 = (( param->DATA[0] & 0x04 ) >> 2 );
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	791b      	ldrb	r3, [r3, #4]
 80015fa:	109b      	asrs	r3, r3, #2
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	b2d9      	uxtb	r1, r3
 8001602:	4a99      	ldr	r2, [pc, #612]	; (8001868 <EEM_PERIODIC+0x81c>)
 8001604:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8001608:	f361 0382 	bfi	r3, r1, #2, #1
 800160c:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag04 = (( param->DATA[0] & 0x08 ) >> 3 );
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	791b      	ldrb	r3, [r3, #4]
 8001614:	10db      	asrs	r3, r3, #3
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	b2d9      	uxtb	r1, r3
 800161c:	4a92      	ldr	r2, [pc, #584]	; (8001868 <EEM_PERIODIC+0x81c>)
 800161e:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8001622:	f361 03c3 	bfi	r3, r1, #3, #1
 8001626:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag05 = (( param->DATA[0] & 0x10 ) >> 4 );
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	791b      	ldrb	r3, [r3, #4]
 800162e:	111b      	asrs	r3, r3, #4
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	b2d9      	uxtb	r1, r3
 8001636:	4a8c      	ldr	r2, [pc, #560]	; (8001868 <EEM_PERIODIC+0x81c>)
 8001638:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 800163c:	f361 1304 	bfi	r3, r1, #4, #1
 8001640:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag06 = (( param->DATA[0] & 0x20 ) >> 5 );
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	791b      	ldrb	r3, [r3, #4]
 8001648:	115b      	asrs	r3, r3, #5
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	b2d9      	uxtb	r1, r3
 8001650:	4a85      	ldr	r2, [pc, #532]	; (8001868 <EEM_PERIODIC+0x81c>)
 8001652:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8001656:	f361 1345 	bfi	r3, r1, #5, #1
 800165a:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag07 = (( param->DATA[0] & 0x40 ) >> 6 );
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	791b      	ldrb	r3, [r3, #4]
 8001662:	119b      	asrs	r3, r3, #6
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	b2d9      	uxtb	r1, r3
 800166a:	4a7f      	ldr	r2, [pc, #508]	; (8001868 <EEM_PERIODIC+0x81c>)
 800166c:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8001670:	f361 1386 	bfi	r3, r1, #6, #1
 8001674:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag08 = (( param->DATA[0] & 0x80 ) >> 7 );
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	791b      	ldrb	r3, [r3, #4]
 800167c:	09db      	lsrs	r3, r3, #7
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	b2d9      	uxtb	r1, r3
 8001686:	4a78      	ldr	r2, [pc, #480]	; (8001868 <EEM_PERIODIC+0x81c>)
 8001688:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 800168c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001690:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

		BCM_MSG.Message18.SPN.MS1_errorFlag01 =  ( param->DATA[1] & 0x01 );
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	795b      	ldrb	r3, [r3, #5]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	b2d9      	uxtb	r1, r3
 800169e:	4a72      	ldr	r2, [pc, #456]	; (8001868 <EEM_PERIODIC+0x81c>)
 80016a0:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 80016a4:	f361 0300 	bfi	r3, r1, #0, #1
 80016a8:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag02 = (( param->DATA[1] & 0x02 ) >> 1 );
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	795b      	ldrb	r3, [r3, #5]
 80016b0:	105b      	asrs	r3, r3, #1
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	b2d9      	uxtb	r1, r3
 80016b8:	4a6b      	ldr	r2, [pc, #428]	; (8001868 <EEM_PERIODIC+0x81c>)
 80016ba:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 80016be:	f361 0341 	bfi	r3, r1, #1, #1
 80016c2:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag03 = (( param->DATA[1] & 0x04 ) >> 2 );
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	795b      	ldrb	r3, [r3, #5]
 80016ca:	109b      	asrs	r3, r3, #2
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	b2d9      	uxtb	r1, r3
 80016d2:	4a65      	ldr	r2, [pc, #404]	; (8001868 <EEM_PERIODIC+0x81c>)
 80016d4:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 80016d8:	f361 0382 	bfi	r3, r1, #2, #1
 80016dc:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag04 = (( param->DATA[1] & 0x08 ) >> 3 );
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	795b      	ldrb	r3, [r3, #5]
 80016e4:	10db      	asrs	r3, r3, #3
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	b2d9      	uxtb	r1, r3
 80016ec:	4a5e      	ldr	r2, [pc, #376]	; (8001868 <EEM_PERIODIC+0x81c>)
 80016ee:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 80016f2:	f361 03c3 	bfi	r3, r1, #3, #1
 80016f6:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag05 = (( param->DATA[1] & 0x10 ) >> 4 );
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	795b      	ldrb	r3, [r3, #5]
 80016fe:	111b      	asrs	r3, r3, #4
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	b2d9      	uxtb	r1, r3
 8001706:	4a58      	ldr	r2, [pc, #352]	; (8001868 <EEM_PERIODIC+0x81c>)
 8001708:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 800170c:	f361 1304 	bfi	r3, r1, #4, #1
 8001710:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag06 = (( param->DATA[1] & 0x20 ) >> 5 );
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	795b      	ldrb	r3, [r3, #5]
 8001718:	115b      	asrs	r3, r3, #5
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	b2d9      	uxtb	r1, r3
 8001720:	4a51      	ldr	r2, [pc, #324]	; (8001868 <EEM_PERIODIC+0x81c>)
 8001722:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 8001726:	f361 1345 	bfi	r3, r1, #5, #1
 800172a:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag07 = (( param->DATA[1] & 0x40 ) >> 6 );
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	795b      	ldrb	r3, [r3, #5]
 8001732:	119b      	asrs	r3, r3, #6
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	b2d9      	uxtb	r1, r3
 800173a:	4a4b      	ldr	r2, [pc, #300]	; (8001868 <EEM_PERIODIC+0x81c>)
 800173c:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 8001740:	f361 1386 	bfi	r3, r1, #6, #1
 8001744:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag08 = (( param->DATA[1] & 0x80 ) >> 7 );
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	795b      	ldrb	r3, [r3, #5]
 800174c:	09db      	lsrs	r3, r3, #7
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	b2d9      	uxtb	r1, r3
 8001756:	4a44      	ldr	r2, [pc, #272]	; (8001868 <EEM_PERIODIC+0x81c>)
 8001758:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 800175c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001760:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59

		BCM_MSG.Message18.SPN.MS1_statusBit01 =  ( param->DATA[2] & 0x01 );
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	799b      	ldrb	r3, [r3, #6]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	b2d9      	uxtb	r1, r3
 800176e:	4a3e      	ldr	r2, [pc, #248]	; (8001868 <EEM_PERIODIC+0x81c>)
 8001770:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 8001774:	f361 0300 	bfi	r3, r1, #0, #1
 8001778:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit02 = (( param->DATA[2] & 0x02 ) >> 1 );
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	799b      	ldrb	r3, [r3, #6]
 8001780:	105b      	asrs	r3, r3, #1
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	b2d9      	uxtb	r1, r3
 8001788:	4a37      	ldr	r2, [pc, #220]	; (8001868 <EEM_PERIODIC+0x81c>)
 800178a:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 800178e:	f361 0341 	bfi	r3, r1, #1, #1
 8001792:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit03 = (( param->DATA[2] & 0x04 ) >> 2 );
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	799b      	ldrb	r3, [r3, #6]
 800179a:	109b      	asrs	r3, r3, #2
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	4a31      	ldr	r2, [pc, #196]	; (8001868 <EEM_PERIODIC+0x81c>)
 80017a4:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 80017a8:	f361 0382 	bfi	r3, r1, #2, #1
 80017ac:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit04 = (( param->DATA[2] & 0x08 ) >> 3 );
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	799b      	ldrb	r3, [r3, #6]
 80017b4:	10db      	asrs	r3, r3, #3
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	b2d9      	uxtb	r1, r3
 80017bc:	4a2a      	ldr	r2, [pc, #168]	; (8001868 <EEM_PERIODIC+0x81c>)
 80017be:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 80017c2:	f361 03c3 	bfi	r3, r1, #3, #1
 80017c6:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit05 = (( param->DATA[2] & 0x10 ) >> 4 );
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	799b      	ldrb	r3, [r3, #6]
 80017ce:	111b      	asrs	r3, r3, #4
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	b2d9      	uxtb	r1, r3
 80017d6:	4a24      	ldr	r2, [pc, #144]	; (8001868 <EEM_PERIODIC+0x81c>)
 80017d8:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 80017dc:	f361 1304 	bfi	r3, r1, #4, #1
 80017e0:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit06 = (( param->DATA[2] & 0x20 ) >> 5 );
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	799b      	ldrb	r3, [r3, #6]
 80017e8:	115b      	asrs	r3, r3, #5
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	b2d9      	uxtb	r1, r3
 80017f0:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <EEM_PERIODIC+0x81c>)
 80017f2:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 80017f6:	f361 1345 	bfi	r3, r1, #5, #1
 80017fa:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit07 = (( param->DATA[2] & 0x40 ) >> 6 );
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	799b      	ldrb	r3, [r3, #6]
 8001802:	119b      	asrs	r3, r3, #6
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	b2d9      	uxtb	r1, r3
 800180a:	4a17      	ldr	r2, [pc, #92]	; (8001868 <EEM_PERIODIC+0x81c>)
 800180c:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 8001810:	f361 1386 	bfi	r3, r1, #6, #1
 8001814:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit08 = (( param->DATA[2] & 0x80 ) >> 7 );
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	799b      	ldrb	r3, [r3, #6]
 800181c:	09db      	lsrs	r3, r3, #7
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	b2d9      	uxtb	r1, r3
 8001826:	4a10      	ldr	r2, [pc, #64]	; (8001868 <EEM_PERIODIC+0x81c>)
 8001828:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 800182c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001830:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a

		BCM_MSG.Message18.SPN.MS1_dummyByte01 = param->DATA[3];
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	79da      	ldrb	r2, [r3, #7]
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <EEM_PERIODIC+0x81c>)
 800183a:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
		BCM_MSG.Message18.SPN.MS1_dummyByte02 = param->DATA[4];
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7a1a      	ldrb	r2, [r3, #8]
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <EEM_PERIODIC+0x81c>)
 8001844:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		BCM_MSG.Message18.SPN.MS1_dummyByte03 = param->DATA[5];
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7a5a      	ldrb	r2, [r3, #9]
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <EEM_PERIODIC+0x81c>)
 800184e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		BCM_MSG.Message18.SPN.MS1_dummyByte04 = param->DATA[6];
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7a9a      	ldrb	r2, [r3, #10]
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <EEM_PERIODIC+0x81c>)
 8001858:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		BCM_MSG.Message18.SPN.MS1_dummyByte04 = param->DATA[7];
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7ada      	ldrb	r2, [r3, #11]
 8001860:	4b01      	ldr	r3, [pc, #4]	; (8001868 <EEM_PERIODIC+0x81c>)
 8001862:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

	break;
 8001866:	e277      	b.n	8001d58 <EEM_PERIODIC+0xd0c>
 8001868:	200001c0 	.word	0x200001c0


	case MESSAGE19 :

		BCM_MSG.Message19.SPN.MS2_warningFlag01 =  ( param->DATA[0] & 0x01 );
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	791b      	ldrb	r3, [r3, #4]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	b2d9      	uxtb	r1, r3
 8001876:	4aa6      	ldr	r2, [pc, #664]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001878:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 800187c:	f361 0300 	bfi	r3, r1, #0, #1
 8001880:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag02 = (( param->DATA[0] & 0x02 ) >> 1 );
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	791b      	ldrb	r3, [r3, #4]
 8001888:	105b      	asrs	r3, r3, #1
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	b2d9      	uxtb	r1, r3
 8001890:	4a9f      	ldr	r2, [pc, #636]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001892:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 8001896:	f361 0341 	bfi	r3, r1, #1, #1
 800189a:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag03 = (( param->DATA[0] & 0x04 ) >> 2 );
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	791b      	ldrb	r3, [r3, #4]
 80018a2:	109b      	asrs	r3, r3, #2
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	b2d9      	uxtb	r1, r3
 80018aa:	4a99      	ldr	r2, [pc, #612]	; (8001b10 <EEM_PERIODIC+0xac4>)
 80018ac:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 80018b0:	f361 0382 	bfi	r3, r1, #2, #1
 80018b4:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag04 = (( param->DATA[0] & 0x08 ) >> 3 );
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	791b      	ldrb	r3, [r3, #4]
 80018bc:	10db      	asrs	r3, r3, #3
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	b2d9      	uxtb	r1, r3
 80018c4:	4a92      	ldr	r2, [pc, #584]	; (8001b10 <EEM_PERIODIC+0xac4>)
 80018c6:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 80018ca:	f361 03c3 	bfi	r3, r1, #3, #1
 80018ce:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag05 = (( param->DATA[0] & 0x10 ) >> 4 );
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	791b      	ldrb	r3, [r3, #4]
 80018d6:	111b      	asrs	r3, r3, #4
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	b2d9      	uxtb	r1, r3
 80018de:	4a8c      	ldr	r2, [pc, #560]	; (8001b10 <EEM_PERIODIC+0xac4>)
 80018e0:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 80018e4:	f361 1304 	bfi	r3, r1, #4, #1
 80018e8:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag06 = (( param->DATA[0] & 0x20 ) >> 5 );
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	791b      	ldrb	r3, [r3, #4]
 80018f0:	115b      	asrs	r3, r3, #5
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	b2d9      	uxtb	r1, r3
 80018f8:	4a85      	ldr	r2, [pc, #532]	; (8001b10 <EEM_PERIODIC+0xac4>)
 80018fa:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 80018fe:	f361 1345 	bfi	r3, r1, #5, #1
 8001902:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag07 = (( param->DATA[0] & 0x40 ) >> 6 );
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	791b      	ldrb	r3, [r3, #4]
 800190a:	119b      	asrs	r3, r3, #6
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	b2d9      	uxtb	r1, r3
 8001912:	4a7f      	ldr	r2, [pc, #508]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001914:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 8001918:	f361 1386 	bfi	r3, r1, #6, #1
 800191c:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag08 = (( param->DATA[0] & 0x80 ) >> 7 );
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	791b      	ldrb	r3, [r3, #4]
 8001924:	09db      	lsrs	r3, r3, #7
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	b2d9      	uxtb	r1, r3
 800192e:	4a78      	ldr	r2, [pc, #480]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001930:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 8001934:	f361 13c7 	bfi	r3, r1, #7, #1
 8001938:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64

		BCM_MSG.Message19.SPN.MS2_errorFlag01 =  ( param->DATA[1] & 0x01 );
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	795b      	ldrb	r3, [r3, #5]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	b2d9      	uxtb	r1, r3
 8001946:	4a72      	ldr	r2, [pc, #456]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001948:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 800194c:	f361 0300 	bfi	r3, r1, #0, #1
 8001950:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag02 = (( param->DATA[1] & 0x02 ) >> 1 );
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	795b      	ldrb	r3, [r3, #5]
 8001958:	105b      	asrs	r3, r3, #1
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	b2d9      	uxtb	r1, r3
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001962:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001966:	f361 0341 	bfi	r3, r1, #1, #1
 800196a:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag03 = (( param->DATA[1] & 0x04 ) >> 2 );
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	795b      	ldrb	r3, [r3, #5]
 8001972:	109b      	asrs	r3, r3, #2
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	b2d9      	uxtb	r1, r3
 800197a:	4a65      	ldr	r2, [pc, #404]	; (8001b10 <EEM_PERIODIC+0xac4>)
 800197c:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001980:	f361 0382 	bfi	r3, r1, #2, #1
 8001984:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag04 = (( param->DATA[1] & 0x08 ) >> 3 );
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	795b      	ldrb	r3, [r3, #5]
 800198c:	10db      	asrs	r3, r3, #3
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	b2d9      	uxtb	r1, r3
 8001994:	4a5e      	ldr	r2, [pc, #376]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001996:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 800199a:	f361 03c3 	bfi	r3, r1, #3, #1
 800199e:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag05 = (( param->DATA[1] & 0x10 ) >> 4 );
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	795b      	ldrb	r3, [r3, #5]
 80019a6:	111b      	asrs	r3, r3, #4
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	b2d9      	uxtb	r1, r3
 80019ae:	4a58      	ldr	r2, [pc, #352]	; (8001b10 <EEM_PERIODIC+0xac4>)
 80019b0:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 80019b4:	f361 1304 	bfi	r3, r1, #4, #1
 80019b8:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag06 = (( param->DATA[1] & 0x20 ) >> 5 );
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	795b      	ldrb	r3, [r3, #5]
 80019c0:	115b      	asrs	r3, r3, #5
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	b2d9      	uxtb	r1, r3
 80019c8:	4a51      	ldr	r2, [pc, #324]	; (8001b10 <EEM_PERIODIC+0xac4>)
 80019ca:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 80019ce:	f361 1345 	bfi	r3, r1, #5, #1
 80019d2:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag07 = (( param->DATA[1] & 0x40 ) >> 6 );
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	795b      	ldrb	r3, [r3, #5]
 80019da:	119b      	asrs	r3, r3, #6
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	b2d9      	uxtb	r1, r3
 80019e2:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <EEM_PERIODIC+0xac4>)
 80019e4:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 80019e8:	f361 1386 	bfi	r3, r1, #6, #1
 80019ec:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag08 = (( param->DATA[1] & 0x80 ) >> 7 );
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	795b      	ldrb	r3, [r3, #5]
 80019f4:	09db      	lsrs	r3, r3, #7
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	b2d9      	uxtb	r1, r3
 80019fe:	4a44      	ldr	r2, [pc, #272]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001a00:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001a04:	f361 13c7 	bfi	r3, r1, #7, #1
 8001a08:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65

		BCM_MSG.Message19.SPN.MS2_statusBit01 =  ( param->DATA[2] & 0x01 );
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	799b      	ldrb	r3, [r3, #6]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	b2d9      	uxtb	r1, r3
 8001a16:	4a3e      	ldr	r2, [pc, #248]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001a18:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001a1c:	f361 0300 	bfi	r3, r1, #0, #1
 8001a20:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit02 = (( param->DATA[2] & 0x02 ) >> 1 );
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	799b      	ldrb	r3, [r3, #6]
 8001a28:	105b      	asrs	r3, r3, #1
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	b2d9      	uxtb	r1, r3
 8001a30:	4a37      	ldr	r2, [pc, #220]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001a32:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001a36:	f361 0341 	bfi	r3, r1, #1, #1
 8001a3a:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit03 = (( param->DATA[2] & 0x04 ) >> 2 );
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	799b      	ldrb	r3, [r3, #6]
 8001a42:	109b      	asrs	r3, r3, #2
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	b2d9      	uxtb	r1, r3
 8001a4a:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001a4c:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001a50:	f361 0382 	bfi	r3, r1, #2, #1
 8001a54:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit04 = (( param->DATA[2] & 0x08 ) >> 3 );
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	799b      	ldrb	r3, [r3, #6]
 8001a5c:	10db      	asrs	r3, r3, #3
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	b2d9      	uxtb	r1, r3
 8001a64:	4a2a      	ldr	r2, [pc, #168]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001a66:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001a6a:	f361 03c3 	bfi	r3, r1, #3, #1
 8001a6e:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit05 = (( param->DATA[2] & 0x10 ) >> 4 );
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	799b      	ldrb	r3, [r3, #6]
 8001a76:	111b      	asrs	r3, r3, #4
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	b2d9      	uxtb	r1, r3
 8001a7e:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001a80:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001a84:	f361 1304 	bfi	r3, r1, #4, #1
 8001a88:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit06 = (( param->DATA[2] & 0x20 ) >> 5 );
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	799b      	ldrb	r3, [r3, #6]
 8001a90:	115b      	asrs	r3, r3, #5
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	b2d9      	uxtb	r1, r3
 8001a98:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001a9a:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001a9e:	f361 1345 	bfi	r3, r1, #5, #1
 8001aa2:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit07 = (( param->DATA[2] & 0x40 ) >> 6 );
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	799b      	ldrb	r3, [r3, #6]
 8001aaa:	119b      	asrs	r3, r3, #6
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	b2d9      	uxtb	r1, r3
 8001ab2:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001ab4:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001ab8:	f361 1386 	bfi	r3, r1, #6, #1
 8001abc:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit08 = (( param->DATA[2] & 0x80 ) >> 7 );
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	799b      	ldrb	r3, [r3, #6]
 8001ac4:	09db      	lsrs	r3, r3, #7
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	b2d9      	uxtb	r1, r3
 8001ace:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001ad0:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001ad4:	f361 13c7 	bfi	r3, r1, #7, #1
 8001ad8:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

		BCM_MSG.Message19.SPN.MS2_dummyByte01 = param->DATA[3];
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	79da      	ldrb	r2, [r3, #7]
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001ae2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		BCM_MSG.Message19.SPN.MS2_dummyByte02 = param->DATA[4];
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	7a1a      	ldrb	r2, [r3, #8]
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001aec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		BCM_MSG.Message19.SPN.MS2_dummyByte03 = param->DATA[5];
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7a5a      	ldrb	r2, [r3, #9]
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001af6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		BCM_MSG.Message19.SPN.MS2_dummyByte04 = param->DATA[6];
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7a9a      	ldrb	r2, [r3, #10]
 8001afe:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001b00:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		BCM_MSG.Message19.SPN.MS2_dummyByte04 = param->DATA[7];
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7ada      	ldrb	r2, [r3, #11]
 8001b08:	4b01      	ldr	r3, [pc, #4]	; (8001b10 <EEM_PERIODIC+0xac4>)
 8001b0a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a


	break;
 8001b0e:	e123      	b.n	8001d58 <EEM_PERIODIC+0xd0c>
 8001b10:	200001c0 	.word	0x200001c0

//#elif defined(MS1_MODULE)

	case MESSAGE20 :

		MS1_MSG.Message20.SPN.MS1_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	791b      	ldrb	r3, [r3, #4]
 8001b18:	461a      	mov	r2, r3
				 	 	 	 	 	 	 	 	 	  (EEM_U32)( param->DATA[1] << 8  )   |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	795b      	ldrb	r3, [r3, #5]
 8001b1e:	021b      	lsls	r3, r3, #8
		MS1_MSG.Message20.SPN.MS1_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 8001b20:	4313      	orrs	r3, r2
													  (EEM_U32)( param->DATA[2] << 16 )   |
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	7992      	ldrb	r2, [r2, #6]
 8001b26:	0412      	lsls	r2, r2, #16
				 	 	 	 	 	 	 	 	 	  (EEM_U32)( param->DATA[1] << 8  )   |
 8001b28:	4313      	orrs	r3, r2
													  (EEM_U32)( param->DATA[3] << 24 )   );
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	79d2      	ldrb	r2, [r2, #7]
 8001b2e:	0612      	lsls	r2, r2, #24
		MS1_MSG.Message20.SPN.MS1_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 8001b30:	4313      	orrs	r3, r2
 8001b32:	4a8c      	ldr	r2, [pc, #560]	; (8001d64 <EEM_PERIODIC+0xd18>)
 8001b34:	6053      	str	r3, [r2, #4]
		MS1_MSG.Message20.SPN.MS1_Mode	  = param->DATA[4];
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7a1a      	ldrb	r2, [r3, #8]
 8001b3a:	4b8a      	ldr	r3, [pc, #552]	; (8001d64 <EEM_PERIODIC+0xd18>)
 8001b3c:	721a      	strb	r2, [r3, #8]
		MS1_MSG.Message20.SPN.MS1_SuddenBrake = (param->DATA[5] & 0x01 );
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7a5b      	ldrb	r3, [r3, #9]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	b2d9      	uxtb	r1, r3
 8001b48:	4a86      	ldr	r2, [pc, #536]	; (8001d64 <EEM_PERIODIC+0xd18>)
 8001b4a:	7a53      	ldrb	r3, [r2, #9]
 8001b4c:	f361 0300 	bfi	r3, r1, #0, #1
 8001b50:	7253      	strb	r3, [r2, #9]
		//@INFO: RFU Bits
		MS1_MSG.Message20.SPN.MS1_otherflag02 = ( (param->DATA[5] & 0x02 ) >> 1 );
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7a5b      	ldrb	r3, [r3, #9]
 8001b56:	105b      	asrs	r3, r3, #1
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	b2d9      	uxtb	r1, r3
 8001b5e:	4a81      	ldr	r2, [pc, #516]	; (8001d64 <EEM_PERIODIC+0xd18>)
 8001b60:	7a53      	ldrb	r3, [r2, #9]
 8001b62:	f361 0341 	bfi	r3, r1, #1, #1
 8001b66:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag03 = ( (param->DATA[5] & 0x04 ) >> 2 );
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7a5b      	ldrb	r3, [r3, #9]
 8001b6c:	109b      	asrs	r3, r3, #2
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	b2d9      	uxtb	r1, r3
 8001b74:	4a7b      	ldr	r2, [pc, #492]	; (8001d64 <EEM_PERIODIC+0xd18>)
 8001b76:	7a53      	ldrb	r3, [r2, #9]
 8001b78:	f361 0382 	bfi	r3, r1, #2, #1
 8001b7c:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag04 = ( (param->DATA[5] & 0x08 ) >> 3 );
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7a5b      	ldrb	r3, [r3, #9]
 8001b82:	10db      	asrs	r3, r3, #3
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	b2d9      	uxtb	r1, r3
 8001b8a:	4a76      	ldr	r2, [pc, #472]	; (8001d64 <EEM_PERIODIC+0xd18>)
 8001b8c:	7a53      	ldrb	r3, [r2, #9]
 8001b8e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001b92:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag05 = ( (param->DATA[5] & 0x10 ) >> 4 );
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7a5b      	ldrb	r3, [r3, #9]
 8001b98:	111b      	asrs	r3, r3, #4
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	b2d9      	uxtb	r1, r3
 8001ba0:	4a70      	ldr	r2, [pc, #448]	; (8001d64 <EEM_PERIODIC+0xd18>)
 8001ba2:	7a53      	ldrb	r3, [r2, #9]
 8001ba4:	f361 1304 	bfi	r3, r1, #4, #1
 8001ba8:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag06 = ( (param->DATA[5] & 0x20 ) >> 5 );
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7a5b      	ldrb	r3, [r3, #9]
 8001bae:	115b      	asrs	r3, r3, #5
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	b2d9      	uxtb	r1, r3
 8001bb6:	4a6b      	ldr	r2, [pc, #428]	; (8001d64 <EEM_PERIODIC+0xd18>)
 8001bb8:	7a53      	ldrb	r3, [r2, #9]
 8001bba:	f361 1345 	bfi	r3, r1, #5, #1
 8001bbe:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag07 = ( (param->DATA[5] & 0x40 ) >> 6 );
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	7a5b      	ldrb	r3, [r3, #9]
 8001bc4:	119b      	asrs	r3, r3, #6
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	b2d9      	uxtb	r1, r3
 8001bcc:	4a65      	ldr	r2, [pc, #404]	; (8001d64 <EEM_PERIODIC+0xd18>)
 8001bce:	7a53      	ldrb	r3, [r2, #9]
 8001bd0:	f361 1386 	bfi	r3, r1, #6, #1
 8001bd4:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag08 = ( (param->DATA[5] & 0x80 ) >> 7 );
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7a5b      	ldrb	r3, [r3, #9]
 8001bda:	09db      	lsrs	r3, r3, #7
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	b2d9      	uxtb	r1, r3
 8001be4:	4a5f      	ldr	r2, [pc, #380]	; (8001d64 <EEM_PERIODIC+0xd18>)
 8001be6:	7a53      	ldrb	r3, [r2, #9]
 8001be8:	f361 13c7 	bfi	r3, r1, #7, #1
 8001bec:	7253      	strb	r3, [r2, #9]

	break;
 8001bee:	e0b3      	b.n	8001d58 <EEM_PERIODIC+0xd0c>

	case MESSAGE21 :

		MS1_MSG.Message21.SPN.MS1_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	791b      	ldrb	r3, [r3, #4]
 8001bf4:	461a      	mov	r2, r3
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	795b      	ldrb	r3, [r3, #5]
 8001bfa:	021b      	lsls	r3, r3, #8
		MS1_MSG.Message21.SPN.MS1_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001bfc:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[2] << 16 )   |
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	7992      	ldrb	r2, [r2, #6]
 8001c02:	0412      	lsls	r2, r2, #16
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001c04:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[3] << 24 )   );
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	79d2      	ldrb	r2, [r2, #7]
 8001c0a:	0612      	lsls	r2, r2, #24
		MS1_MSG.Message21.SPN.MS1_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	4a55      	ldr	r2, [pc, #340]	; (8001d64 <EEM_PERIODIC+0xd18>)
 8001c10:	6113      	str	r3, [r2, #16]

		MS1_MSG.Message21.SPN.MS1_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	791b      	ldrb	r3, [r3, #4]
 8001c16:	461a      	mov	r2, r3
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	795b      	ldrb	r3, [r3, #5]
 8001c1c:	021b      	lsls	r3, r3, #8
		MS1_MSG.Message21.SPN.MS1_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001c1e:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[2] << 16 )   |
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	7992      	ldrb	r2, [r2, #6]
 8001c24:	0412      	lsls	r2, r2, #16
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001c26:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[3] << 24 )   );
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	79d2      	ldrb	r2, [r2, #7]
 8001c2c:	0612      	lsls	r2, r2, #24
		MS1_MSG.Message21.SPN.MS1_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	4a4c      	ldr	r2, [pc, #304]	; (8001d64 <EEM_PERIODIC+0xd18>)
 8001c32:	6153      	str	r3, [r2, #20]

	break;
 8001c34:	e090      	b.n	8001d58 <EEM_PERIODIC+0xd0c>

//#elif defined(MS2_MODULE)
	case MESSAGE22 :

		MS2_MSG.Message22.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	791b      	ldrb	r3, [r3, #4]
 8001c3a:	461a      	mov	r2, r3
				 	 	 	 	 	 	 	 	 	  (EEM_U32)( param->DATA[1] << 8  )   |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	795b      	ldrb	r3, [r3, #5]
 8001c40:	021b      	lsls	r3, r3, #8
		MS2_MSG.Message22.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 8001c42:	4313      	orrs	r3, r2
													  (EEM_U32)( param->DATA[2] << 16 )   |
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	7992      	ldrb	r2, [r2, #6]
 8001c48:	0412      	lsls	r2, r2, #16
				 	 	 	 	 	 	 	 	 	  (EEM_U32)( param->DATA[1] << 8  )   |
 8001c4a:	4313      	orrs	r3, r2
													  (EEM_U32)( param->DATA[3] << 24 )   );
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	79d2      	ldrb	r2, [r2, #7]
 8001c50:	0612      	lsls	r2, r2, #24
		MS2_MSG.Message22.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 8001c52:	4313      	orrs	r3, r2
 8001c54:	4a44      	ldr	r2, [pc, #272]	; (8001d68 <EEM_PERIODIC+0xd1c>)
 8001c56:	6053      	str	r3, [r2, #4]
		MS2_MSG.Message22.SPN.MS2_Mode	  = param->DATA[4];
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7a1a      	ldrb	r2, [r3, #8]
 8001c5c:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <EEM_PERIODIC+0xd1c>)
 8001c5e:	721a      	strb	r2, [r3, #8]
		MS2_MSG.Message22.SPN.MS2_SuddenBrake = (param->DATA[5] & 0x01 );
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7a5b      	ldrb	r3, [r3, #9]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	b2d9      	uxtb	r1, r3
 8001c6a:	4a3f      	ldr	r2, [pc, #252]	; (8001d68 <EEM_PERIODIC+0xd1c>)
 8001c6c:	7a53      	ldrb	r3, [r2, #9]
 8001c6e:	f361 0300 	bfi	r3, r1, #0, #1
 8001c72:	7253      	strb	r3, [r2, #9]
		//@INFO: RFU Bits
		MS2_MSG.Message22.SPN.MS2_otherflag02 = ( (param->DATA[5] & 0x02 ) >> 1 );
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7a5b      	ldrb	r3, [r3, #9]
 8001c78:	105b      	asrs	r3, r3, #1
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	b2d9      	uxtb	r1, r3
 8001c80:	4a39      	ldr	r2, [pc, #228]	; (8001d68 <EEM_PERIODIC+0xd1c>)
 8001c82:	7a53      	ldrb	r3, [r2, #9]
 8001c84:	f361 0341 	bfi	r3, r1, #1, #1
 8001c88:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag03 = ( (param->DATA[5] & 0x04 ) >> 2 );
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7a5b      	ldrb	r3, [r3, #9]
 8001c8e:	109b      	asrs	r3, r3, #2
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	b2d9      	uxtb	r1, r3
 8001c96:	4a34      	ldr	r2, [pc, #208]	; (8001d68 <EEM_PERIODIC+0xd1c>)
 8001c98:	7a53      	ldrb	r3, [r2, #9]
 8001c9a:	f361 0382 	bfi	r3, r1, #2, #1
 8001c9e:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag04 = ( (param->DATA[5] & 0x08 ) >> 3 );
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7a5b      	ldrb	r3, [r3, #9]
 8001ca4:	10db      	asrs	r3, r3, #3
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	b2d9      	uxtb	r1, r3
 8001cac:	4a2e      	ldr	r2, [pc, #184]	; (8001d68 <EEM_PERIODIC+0xd1c>)
 8001cae:	7a53      	ldrb	r3, [r2, #9]
 8001cb0:	f361 03c3 	bfi	r3, r1, #3, #1
 8001cb4:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag05 = ( (param->DATA[5] & 0x10 ) >> 4 );
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7a5b      	ldrb	r3, [r3, #9]
 8001cba:	111b      	asrs	r3, r3, #4
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	b2d9      	uxtb	r1, r3
 8001cc2:	4a29      	ldr	r2, [pc, #164]	; (8001d68 <EEM_PERIODIC+0xd1c>)
 8001cc4:	7a53      	ldrb	r3, [r2, #9]
 8001cc6:	f361 1304 	bfi	r3, r1, #4, #1
 8001cca:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag06 = ( (param->DATA[5] & 0x20 ) >> 5 );
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7a5b      	ldrb	r3, [r3, #9]
 8001cd0:	115b      	asrs	r3, r3, #5
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	b2d9      	uxtb	r1, r3
 8001cd8:	4a23      	ldr	r2, [pc, #140]	; (8001d68 <EEM_PERIODIC+0xd1c>)
 8001cda:	7a53      	ldrb	r3, [r2, #9]
 8001cdc:	f361 1345 	bfi	r3, r1, #5, #1
 8001ce0:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag07 = ( (param->DATA[5] & 0x40 ) >> 6 );
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7a5b      	ldrb	r3, [r3, #9]
 8001ce6:	119b      	asrs	r3, r3, #6
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	b2d9      	uxtb	r1, r3
 8001cee:	4a1e      	ldr	r2, [pc, #120]	; (8001d68 <EEM_PERIODIC+0xd1c>)
 8001cf0:	7a53      	ldrb	r3, [r2, #9]
 8001cf2:	f361 1386 	bfi	r3, r1, #6, #1
 8001cf6:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag08 = ( (param->DATA[5] & 0x80 ) >> 7 );
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7a5b      	ldrb	r3, [r3, #9]
 8001cfc:	09db      	lsrs	r3, r3, #7
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	b2d9      	uxtb	r1, r3
 8001d06:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <EEM_PERIODIC+0xd1c>)
 8001d08:	7a53      	ldrb	r3, [r2, #9]
 8001d0a:	f361 13c7 	bfi	r3, r1, #7, #1
 8001d0e:	7253      	strb	r3, [r2, #9]

	break;
 8001d10:	e022      	b.n	8001d58 <EEM_PERIODIC+0xd0c>

	case MESSAGE23 :

		MS2_MSG.Message23.SPN.MS2_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	791b      	ldrb	r3, [r3, #4]
 8001d16:	461a      	mov	r2, r3
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	795b      	ldrb	r3, [r3, #5]
 8001d1c:	021b      	lsls	r3, r3, #8
		MS2_MSG.Message23.SPN.MS2_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001d1e:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[2] << 16 )   |
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	7992      	ldrb	r2, [r2, #6]
 8001d24:	0412      	lsls	r2, r2, #16
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001d26:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[3] << 24 )   );
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	79d2      	ldrb	r2, [r2, #7]
 8001d2c:	0612      	lsls	r2, r2, #24
		MS2_MSG.Message23.SPN.MS2_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <EEM_PERIODIC+0xd1c>)
 8001d32:	6113      	str	r3, [r2, #16]

		MS2_MSG.Message23.SPN.MS2_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	791b      	ldrb	r3, [r3, #4]
 8001d38:	461a      	mov	r2, r3
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	795b      	ldrb	r3, [r3, #5]
 8001d3e:	021b      	lsls	r3, r3, #8
		MS2_MSG.Message23.SPN.MS2_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001d40:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[2] << 16 )   |
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	7992      	ldrb	r2, [r2, #6]
 8001d46:	0412      	lsls	r2, r2, #16
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001d48:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[3] << 24 )   );
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	79d2      	ldrb	r2, [r2, #7]
 8001d4e:	0612      	lsls	r2, r2, #24
		MS2_MSG.Message23.SPN.MS2_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001d50:	4313      	orrs	r3, r2
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <EEM_PERIODIC+0xd1c>)
 8001d54:	6153      	str	r3, [r2, #20]

	break;
 8001d56:	bf00      	nop

//#endif
	}

	
	return result;
 8001d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000238 	.word	0x20000238
 8001d68:	20000258 	.word	0x20000258

08001d6c <EEM_IS_EMPTY>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
EEM_BOOL_T	EEM_IS_EMPTY( const EEM_RING_Buffer_st* buffer )
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	 return (buffer->head == buffer->tail && !buffer->full);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d106      	bne.n	8001d92 <EEM_IS_EMPTY+0x26>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <EEM_IS_EMPTY+0x26>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <EEM_IS_EMPTY+0x28>
 8001d92:	2300      	movs	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <EEM_FILTER_MS1>:
	return result;
}

#elif defined( MS1_MODULE )
EEM_ERR_T EEM_FILTER_MS1( EEM_Protocol_obj_st* param )
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	EEM_ERR_T result = EEM_EOK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	75fb      	strb	r3, [r7, #23]

	EEM_CAN_ID_st MessageID_20    = {0}			 ;	/* 29 Bit Extended ID Frame */
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
	MessageID_20.Pages.priority   = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 8001db4:	7cfb      	ldrb	r3, [r7, #19]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f362 0384 	bfi	r3, r2, #2, #3
 8001dbc:	74fb      	strb	r3, [r7, #19]
	MessageID_20.Pages.reserved   = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 8001dbe:	7cfb      	ldrb	r3, [r7, #19]
 8001dc0:	f36f 0341 	bfc	r3, #1, #1
 8001dc4:	74fb      	strb	r3, [r7, #19]
	MessageID_20.Pages.dataPoint  = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 8001dc6:	7cfb      	ldrb	r3, [r7, #19]
 8001dc8:	f36f 0300 	bfc	r3, #0, #1
 8001dcc:	74fb      	strb	r3, [r7, #19]
	MessageID_20.Pages.messageID  = MESSAGE20 	 ;  /* 8 Bit Message Soft ID 	*/
 8001dce:	2320      	movs	r3, #32
 8001dd0:	74bb      	strb	r3, [r7, #18]
	MessageID_20.Pages.DA		  = MS1_NODE	 ;	/* 8 Bit Destination Addr	*/
 8001dd2:	2355      	movs	r3, #85	; 0x55
 8001dd4:	747b      	strb	r3, [r7, #17]
	MessageID_20.Pages.SA		  = BCM_NODE	 ;	/* 8 Bit Source Addr		*/
 8001dd6:	2311      	movs	r3, #17
 8001dd8:	743b      	strb	r3, [r7, #16]
	MS1_MSG.Message20_ID = MessageID_20.identifier;
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <EEM_FILTER_MS1+0x7c>)
 8001dde:	6013      	str	r3, [r2, #0]

	EEM_CAN_ID_st MessageID_21    = {0}			 ;	/* 29 Bit Extended ID Frame */
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
	MessageID_21.Pages.priority   = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f362 0384 	bfi	r3, r2, #2, #3
 8001dec:	73fb      	strb	r3, [r7, #15]
	MessageID_21.Pages.reserved   = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	f36f 0341 	bfc	r3, #1, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
	MessageID_21.Pages.dataPoint  = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	f36f 0300 	bfc	r3, #0, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
	MessageID_21.Pages.messageID  = MESSAGE21 	 ;  /* 8 Bit Message Soft ID 	*/
 8001dfe:	2321      	movs	r3, #33	; 0x21
 8001e00:	73bb      	strb	r3, [r7, #14]
	MessageID_21.Pages.DA		  = MS1_NODE	 ;	/* 8 Bit Destination Addr	*/
 8001e02:	2355      	movs	r3, #85	; 0x55
 8001e04:	737b      	strb	r3, [r7, #13]
	MessageID_21.Pages.SA		  = BCM_NODE	 ;	/* 8 Bit Source Addr		*/
 8001e06:	2311      	movs	r3, #17
 8001e08:	733b      	strb	r3, [r7, #12]
	MS1_MSG.Message21_ID = MessageID_21.identifier;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <EEM_FILTER_MS1+0x7c>)
 8001e0e:	60d3      	str	r3, [r2, #12]
#else
//ERROR
#endif

#endif
	return result;
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000238 	.word	0x20000238

08001e24 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	480c      	ldr	r0, [pc, #48]	; (8001e60 <MCP2515_Initialize+0x3c>)
 8001e30:	f000 fcf2 	bl	8002818 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8001e34:	230a      	movs	r3, #10
 8001e36:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001e38:	480a      	ldr	r0, [pc, #40]	; (8001e64 <MCP2515_Initialize+0x40>)
 8001e3a:	f001 fdc7 	bl	80039cc <HAL_SPI_GetState>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <MCP2515_Initialize+0x24>
      return true;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e006      	b.n	8001e56 <MCP2515_Initialize+0x32>

    loop--;
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f1      	bne.n	8001e38 <MCP2515_Initialize+0x14>

  return false;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40020800 	.word	0x40020800
 8001e64:	20000028 	.word	0x20000028

08001e68 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	200f      	movs	r0, #15
 8001e72:	f000 f879 	bl	8001f68 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8001e76:	230a      	movs	r3, #10
 8001e78:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8001e7a:	200e      	movs	r0, #14
 8001e7c:	f000 f830 	bl	8001ee0 <MCP2515_ReadByte>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001e86:	2b80      	cmp	r3, #128	; 0x80
 8001e88:	d101      	bne.n	8001e8e <MCP2515_SetConfigMode+0x26>
      return true;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e006      	b.n	8001e9c <MCP2515_SetConfigMode+0x34>

    loop--;
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1ef      	bne.n	8001e7a <MCP2515_SetConfigMode+0x12>

  return false;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	200f      	movs	r0, #15
 8001eae:	f000 f85b 	bl	8001f68 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8001eb2:	230a      	movs	r3, #10
 8001eb4:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001eb6:	200e      	movs	r0, #14
 8001eb8:	f000 f812 	bl	8001ee0 <MCP2515_ReadByte>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <MCP2515_SetNormalMode+0x26>
      return true;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e006      	b.n	8001ed8 <MCP2515_SetNormalMode+0x34>

    loop--;
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1ef      	bne.n	8001eb6 <MCP2515_SetNormalMode+0x12>

  return false;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8001eea:	2200      	movs	r2, #0
 8001eec:	2101      	movs	r1, #1
 8001eee:	480c      	ldr	r0, [pc, #48]	; (8001f20 <MCP2515_ReadByte+0x40>)
 8001ef0:	f000 fc92 	bl	8002818 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f000 f901 	bl	80020fc <SPI_Tx>
  SPI_Tx(address);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 f8fd 	bl	80020fc <SPI_Tx>
  retVal = SPI_Rx();
 8001f02:	f000 f921 	bl	8002148 <SPI_Rx>
 8001f06:	4603      	mov	r3, r0
 8001f08:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	4804      	ldr	r0, [pc, #16]	; (8001f20 <MCP2515_ReadByte+0x40>)
 8001f10:	f000 fc82 	bl	8002818 <HAL_GPIO_WritePin>

  return retVal;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40020800 	.word	0x40020800

08001f24 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
 8001f30:	4613      	mov	r3, r2
 8001f32:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001f34:	2200      	movs	r2, #0
 8001f36:	2101      	movs	r1, #1
 8001f38:	480a      	ldr	r0, [pc, #40]	; (8001f64 <MCP2515_ReadRxSequence+0x40>)
 8001f3a:	f000 fc6d 	bl	8002818 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 f8db 	bl	80020fc <SPI_Tx>
  SPI_RxBuffer(data, length);
 8001f46:	79bb      	ldrb	r3, [r7, #6]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	6838      	ldr	r0, [r7, #0]
 8001f4c:	f000 f90c 	bl	8002168 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8001f50:	2201      	movs	r2, #1
 8001f52:	2101      	movs	r1, #1
 8001f54:	4803      	ldr	r0, [pc, #12]	; (8001f64 <MCP2515_ReadRxSequence+0x40>)
 8001f56:	f000 fc5f 	bl	8002818 <HAL_GPIO_WritePin>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40020800 	.word	0x40020800

08001f68 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	460a      	mov	r2, r1
 8001f72:	71fb      	strb	r3, [r7, #7]
 8001f74:	4613      	mov	r3, r2
 8001f76:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <MCP2515_WriteByte+0x44>)
 8001f7e:	f000 fc4b 	bl	8002818 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8001f82:	2002      	movs	r0, #2
 8001f84:	f000 f8ba 	bl	80020fc <SPI_Tx>
  SPI_Tx(address);
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f8b6 	bl	80020fc <SPI_Tx>
  SPI_Tx(data);
 8001f90:	79bb      	ldrb	r3, [r7, #6]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f8b2 	bl	80020fc <SPI_Tx>

  MCP2515_CS_HIGH();
 8001f98:	2201      	movs	r2, #1
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <MCP2515_WriteByte+0x44>)
 8001f9e:	f000 fc3b 	bl	8002818 <HAL_GPIO_WritePin>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020800 	.word	0x40020800

08001fb0 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	603a      	str	r2, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	480e      	ldr	r0, [pc, #56]	; (8002000 <MCP2515_WriteByteSequence+0x50>)
 8001fc6:	f000 fc27 	bl	8002818 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f000 f896 	bl	80020fc <SPI_Tx>
  SPI_Tx(startAddress);
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f892 	bl	80020fc <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001fd8:	79ba      	ldrb	r2, [r7, #6]
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	6838      	ldr	r0, [r7, #0]
 8001fe8:	f000 f89a 	bl	8002120 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8001fec:	2201      	movs	r2, #1
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <MCP2515_WriteByteSequence+0x50>)
 8001ff2:	f000 fc11 	bl	8002818 <HAL_GPIO_WritePin>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40020800 	.word	0x40020800

08002004 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	4603      	mov	r3, r0
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	4613      	mov	r3, r2
 8002014:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8002016:	2200      	movs	r2, #0
 8002018:	2101      	movs	r1, #1
 800201a:	480e      	ldr	r0, [pc, #56]	; (8002054 <MCP2515_LoadTxSequence+0x50>)
 800201c:	f000 fbfc 	bl	8002818 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f86a 	bl	80020fc <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8002028:	2104      	movs	r1, #4
 800202a:	68b8      	ldr	r0, [r7, #8]
 800202c:	f000 f878 	bl	8002120 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8002030:	7bbb      	ldrb	r3, [r7, #14]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f862 	bl	80020fc <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8002038:	7bbb      	ldrb	r3, [r7, #14]
 800203a:	4619      	mov	r1, r3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f86f 	bl	8002120 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8002042:	2201      	movs	r2, #1
 8002044:	2101      	movs	r1, #1
 8002046:	4803      	ldr	r0, [pc, #12]	; (8002054 <MCP2515_LoadTxSequence+0x50>)
 8002048:	f000 fbe6 	bl	8002818 <HAL_GPIO_WritePin>
}
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40020800 	.word	0x40020800

08002058 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8002062:	2200      	movs	r2, #0
 8002064:	2101      	movs	r1, #1
 8002066:	4808      	ldr	r0, [pc, #32]	; (8002088 <MCP2515_RequestToSend+0x30>)
 8002068:	f000 fbd6 	bl	8002818 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f844 	bl	80020fc <SPI_Tx>

  MCP2515_CS_HIGH();
 8002074:	2201      	movs	r2, #1
 8002076:	2101      	movs	r1, #1
 8002078:	4803      	ldr	r0, [pc, #12]	; (8002088 <MCP2515_RequestToSend+0x30>)
 800207a:	f000 fbcd 	bl	8002818 <HAL_GPIO_WritePin>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40020800 	.word	0x40020800

0800208c <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8002092:	2200      	movs	r2, #0
 8002094:	2101      	movs	r1, #1
 8002096:	480a      	ldr	r0, [pc, #40]	; (80020c0 <MCP2515_ReadStatus+0x34>)
 8002098:	f000 fbbe 	bl	8002818 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 800209c:	20a0      	movs	r0, #160	; 0xa0
 800209e:	f000 f82d 	bl	80020fc <SPI_Tx>
  retVal = SPI_Rx();
 80020a2:	f000 f851 	bl	8002148 <SPI_Rx>
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80020aa:	2201      	movs	r2, #1
 80020ac:	2101      	movs	r1, #1
 80020ae:	4804      	ldr	r0, [pc, #16]	; (80020c0 <MCP2515_ReadStatus+0x34>)
 80020b0:	f000 fbb2 	bl	8002818 <HAL_GPIO_WritePin>

  return retVal;
 80020b4:	79fb      	ldrb	r3, [r7, #7]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40020800 	.word	0x40020800

080020c4 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 80020ca:	2200      	movs	r2, #0
 80020cc:	2101      	movs	r1, #1
 80020ce:	480a      	ldr	r0, [pc, #40]	; (80020f8 <MCP2515_GetRxStatus+0x34>)
 80020d0:	f000 fba2 	bl	8002818 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 80020d4:	20b0      	movs	r0, #176	; 0xb0
 80020d6:	f000 f811 	bl	80020fc <SPI_Tx>
  retVal = SPI_Rx();
 80020da:	f000 f835 	bl	8002148 <SPI_Rx>
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80020e2:	2201      	movs	r2, #1
 80020e4:	2101      	movs	r1, #1
 80020e6:	4804      	ldr	r0, [pc, #16]	; (80020f8 <MCP2515_GetRxStatus+0x34>)
 80020e8:	f000 fb96 	bl	8002818 <HAL_GPIO_WritePin>

  return retVal;
 80020ec:	79fb      	ldrb	r3, [r7, #7]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40020800 	.word	0x40020800

080020fc <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8002106:	1df9      	adds	r1, r7, #7
 8002108:	230a      	movs	r3, #10
 800210a:	2201      	movs	r2, #1
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <SPI_Tx+0x20>)
 800210e:	f001 f86e 	bl	80031ee <HAL_SPI_Transmit>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000028 	.word	0x20000028

08002120 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	b29a      	uxth	r2, r3
 8002130:	230a      	movs	r3, #10
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4803      	ldr	r0, [pc, #12]	; (8002144 <SPI_TxBuffer+0x24>)
 8002136:	f001 f85a 	bl	80031ee <HAL_SPI_Transmit>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000028 	.word	0x20000028

08002148 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800214e:	1df9      	adds	r1, r7, #7
 8002150:	230a      	movs	r3, #10
 8002152:	2201      	movs	r2, #1
 8002154:	4803      	ldr	r0, [pc, #12]	; (8002164 <SPI_Rx+0x1c>)
 8002156:	f001 f986 	bl	8003466 <HAL_SPI_Receive>
  return retVal;
 800215a:	79fb      	ldrb	r3, [r7, #7]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000028 	.word	0x20000028

08002168 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	b29a      	uxth	r2, r3
 8002178:	230a      	movs	r3, #10
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4803      	ldr	r0, [pc, #12]	; (800218c <SPI_RxBuffer+0x24>)
 800217e:	f001 f972 	bl	8003466 <HAL_SPI_Receive>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000028 	.word	0x20000028

08002190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <HAL_Init+0x40>)
 800219a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_Init+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <HAL_Init+0x40>)
 80021a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_Init+0x40>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <HAL_Init+0x40>)
 80021b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f000 f94f 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021be:	200f      	movs	r0, #15
 80021c0:	f000 f808 	bl	80021d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c4:	f7fe faf6 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023c00 	.word	0x40023c00

080021d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x54>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_InitTick+0x58>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f967 	bl	80024c6 <HAL_SYSTICK_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00e      	b.n	8002220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b0f      	cmp	r3, #15
 8002206:	d80a      	bhi.n	800221e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002208:	2200      	movs	r2, #0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f000 f92f 	bl	8002472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002214:	4a06      	ldr	r2, [pc, #24]	; (8002230 <HAL_InitTick+0x5c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000000 	.word	0x20000000
 800222c:	20000008 	.word	0x20000008
 8002230:	20000004 	.word	0x20000004

08002234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_IncTick+0x20>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_IncTick+0x24>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_IncTick+0x24>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000008 	.word	0x20000008
 8002258:	20000270 	.word	0x20000270

0800225c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return uwTick;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_GetTick+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000270 	.word	0x20000270

08002274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff ffee 	bl	800225c <HAL_GetTick>
 8002280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d005      	beq.n	800229a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_Delay+0x44>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800229a:	bf00      	nop
 800229c:	f7ff ffde 	bl	800225c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d8f7      	bhi.n	800229c <HAL_Delay+0x28>
  {
  }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000008 	.word	0x20000008

080022bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ee:	4a04      	ldr	r2, [pc, #16]	; (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	60d3      	str	r3, [r2, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <__NVIC_GetPriorityGrouping+0x18>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0307 	and.w	r3, r3, #7
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db0b      	blt.n	800234a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4907      	ldr	r1, [pc, #28]	; (8002358 <__NVIC_EnableIRQ+0x38>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2001      	movs	r0, #1
 8002342:	fa00 f202 	lsl.w	r2, r0, r2
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	; (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	; (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f7ff ff8e 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff29 	bl	80022bc <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff3e 	bl	8002304 <__NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff8e 	bl	80023b0 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff5d 	bl	800235c <__NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff31 	bl	8002320 <__NVIC_EnableIRQ>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ffa2 	bl	8002418 <SysTick_Config>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	e16b      	b.n	80027d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024fc:	2201      	movs	r2, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	429a      	cmp	r2, r3
 8002516:	f040 815a 	bne.w	80027ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d005      	beq.n	8002532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252e:	2b02      	cmp	r3, #2
 8002530:	d130      	bne.n	8002594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2203      	movs	r2, #3
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002568:	2201      	movs	r2, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 0201 	and.w	r2, r3, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b03      	cmp	r3, #3
 800259e:	d017      	beq.n	80025d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d123      	bne.n	8002624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	08da      	lsrs	r2, r3, #3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3208      	adds	r2, #8
 80025e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	220f      	movs	r2, #15
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	08da      	lsrs	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3208      	adds	r2, #8
 800261e:	69b9      	ldr	r1, [r7, #24]
 8002620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0203 	and.w	r2, r3, #3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80b4 	beq.w	80027ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	4b60      	ldr	r3, [pc, #384]	; (80027ec <HAL_GPIO_Init+0x30c>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	4a5f      	ldr	r2, [pc, #380]	; (80027ec <HAL_GPIO_Init+0x30c>)
 8002670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002674:	6453      	str	r3, [r2, #68]	; 0x44
 8002676:	4b5d      	ldr	r3, [pc, #372]	; (80027ec <HAL_GPIO_Init+0x30c>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002682:	4a5b      	ldr	r2, [pc, #364]	; (80027f0 <HAL_GPIO_Init+0x310>)
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	3302      	adds	r3, #2
 800268a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	220f      	movs	r2, #15
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a52      	ldr	r2, [pc, #328]	; (80027f4 <HAL_GPIO_Init+0x314>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d02b      	beq.n	8002706 <HAL_GPIO_Init+0x226>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a51      	ldr	r2, [pc, #324]	; (80027f8 <HAL_GPIO_Init+0x318>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d025      	beq.n	8002702 <HAL_GPIO_Init+0x222>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a50      	ldr	r2, [pc, #320]	; (80027fc <HAL_GPIO_Init+0x31c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d01f      	beq.n	80026fe <HAL_GPIO_Init+0x21e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4f      	ldr	r2, [pc, #316]	; (8002800 <HAL_GPIO_Init+0x320>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d019      	beq.n	80026fa <HAL_GPIO_Init+0x21a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4e      	ldr	r2, [pc, #312]	; (8002804 <HAL_GPIO_Init+0x324>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d013      	beq.n	80026f6 <HAL_GPIO_Init+0x216>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4d      	ldr	r2, [pc, #308]	; (8002808 <HAL_GPIO_Init+0x328>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00d      	beq.n	80026f2 <HAL_GPIO_Init+0x212>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4c      	ldr	r2, [pc, #304]	; (800280c <HAL_GPIO_Init+0x32c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d007      	beq.n	80026ee <HAL_GPIO_Init+0x20e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4b      	ldr	r2, [pc, #300]	; (8002810 <HAL_GPIO_Init+0x330>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d101      	bne.n	80026ea <HAL_GPIO_Init+0x20a>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e00e      	b.n	8002708 <HAL_GPIO_Init+0x228>
 80026ea:	2308      	movs	r3, #8
 80026ec:	e00c      	b.n	8002708 <HAL_GPIO_Init+0x228>
 80026ee:	2306      	movs	r3, #6
 80026f0:	e00a      	b.n	8002708 <HAL_GPIO_Init+0x228>
 80026f2:	2305      	movs	r3, #5
 80026f4:	e008      	b.n	8002708 <HAL_GPIO_Init+0x228>
 80026f6:	2304      	movs	r3, #4
 80026f8:	e006      	b.n	8002708 <HAL_GPIO_Init+0x228>
 80026fa:	2303      	movs	r3, #3
 80026fc:	e004      	b.n	8002708 <HAL_GPIO_Init+0x228>
 80026fe:	2302      	movs	r3, #2
 8002700:	e002      	b.n	8002708 <HAL_GPIO_Init+0x228>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_GPIO_Init+0x228>
 8002706:	2300      	movs	r3, #0
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	f002 0203 	and.w	r2, r2, #3
 800270e:	0092      	lsls	r2, r2, #2
 8002710:	4093      	lsls	r3, r2
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002718:	4935      	ldr	r1, [pc, #212]	; (80027f0 <HAL_GPIO_Init+0x310>)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	3302      	adds	r3, #2
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002726:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <HAL_GPIO_Init+0x334>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274a:	4a32      	ldr	r2, [pc, #200]	; (8002814 <HAL_GPIO_Init+0x334>)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002750:	4b30      	ldr	r3, [pc, #192]	; (8002814 <HAL_GPIO_Init+0x334>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002774:	4a27      	ldr	r2, [pc, #156]	; (8002814 <HAL_GPIO_Init+0x334>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800277a:	4b26      	ldr	r3, [pc, #152]	; (8002814 <HAL_GPIO_Init+0x334>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279e:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <HAL_GPIO_Init+0x334>)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <HAL_GPIO_Init+0x334>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c8:	4a12      	ldr	r2, [pc, #72]	; (8002814 <HAL_GPIO_Init+0x334>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3301      	adds	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	2b0f      	cmp	r3, #15
 80027d8:	f67f ae90 	bls.w	80024fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	3724      	adds	r7, #36	; 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40013800 	.word	0x40013800
 80027f4:	40020000 	.word	0x40020000
 80027f8:	40020400 	.word	0x40020400
 80027fc:	40020800 	.word	0x40020800
 8002800:	40020c00 	.word	0x40020c00
 8002804:	40021000 	.word	0x40021000
 8002808:	40021400 	.word	0x40021400
 800280c:	40021800 	.word	0x40021800
 8002810:	40021c00 	.word	0x40021c00
 8002814:	40013c00 	.word	0x40013c00

08002818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
 8002824:	4613      	mov	r3, r2
 8002826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002828:	787b      	ldrb	r3, [r7, #1]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002834:	e003      	b.n	800283e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002836:	887b      	ldrh	r3, [r7, #2]
 8002838:	041a      	lsls	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	619a      	str	r2, [r3, #24]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	4013      	ands	r3, r2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002862:	4a05      	ldr	r2, [pc, #20]	; (8002878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f806 	bl	800287c <HAL_GPIO_EXTI_Callback>
  }
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40013c00 	.word	0x40013c00

0800287c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e267      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d075      	beq.n	800299e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028b2:	4b88      	ldr	r3, [pc, #544]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d00c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028be:	4b85      	ldr	r3, [pc, #532]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d112      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ca:	4b82      	ldr	r3, [pc, #520]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d6:	d10b      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	4b7e      	ldr	r3, [pc, #504]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d05b      	beq.n	800299c <HAL_RCC_OscConfig+0x108>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d157      	bne.n	800299c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e242      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d106      	bne.n	8002908 <HAL_RCC_OscConfig+0x74>
 80028fa:	4b76      	ldr	r3, [pc, #472]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a75      	ldr	r2, [pc, #468]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e01d      	b.n	8002944 <HAL_RCC_OscConfig+0xb0>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x98>
 8002912:	4b70      	ldr	r3, [pc, #448]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a6f      	ldr	r2, [pc, #444]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b6d      	ldr	r3, [pc, #436]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a6c      	ldr	r2, [pc, #432]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0xb0>
 800292c:	4b69      	ldr	r3, [pc, #420]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a68      	ldr	r2, [pc, #416]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b66      	ldr	r3, [pc, #408]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a65      	ldr	r2, [pc, #404]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 800293e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d013      	beq.n	8002974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7ff fc86 	bl	800225c <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002954:	f7ff fc82 	bl	800225c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e207      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b5b      	ldr	r3, [pc, #364]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0xc0>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7ff fc72 	bl	800225c <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297c:	f7ff fc6e 	bl	800225c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e1f3      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	4b51      	ldr	r3, [pc, #324]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0xe8>
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d063      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029aa:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d11c      	bne.n	80029fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c2:	4b44      	ldr	r3, [pc, #272]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d116      	bne.n	80029fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_RCC_OscConfig+0x152>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e1c7      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e6:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4937      	ldr	r1, [pc, #220]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fa:	e03a      	b.n	8002a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a04:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7ff fc27 	bl	800225c <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a12:	f7ff fc23 	bl	800225c <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e1a8      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4925      	ldr	r1, [pc, #148]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]
 8002a44:	e015      	b.n	8002a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a46:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7ff fc06 	bl	800225c <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a54:	f7ff fc02 	bl	800225c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e187      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d036      	beq.n	8002aec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d016      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_RCC_OscConfig+0x248>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7ff fbe6 	bl	800225c <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a94:	f7ff fbe2 	bl	800225c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e167      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x200>
 8002ab2:	e01b      	b.n	8002aec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_RCC_OscConfig+0x248>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aba:	f7ff fbcf 	bl	800225c <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	e00e      	b.n	8002ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7ff fbcb 	bl	800225c <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d907      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e150      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	42470000 	.word	0x42470000
 8002adc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae0:	4b88      	ldr	r3, [pc, #544]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ea      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8097 	beq.w	8002c28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afe:	4b81      	ldr	r3, [pc, #516]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10f      	bne.n	8002b2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	4b7d      	ldr	r3, [pc, #500]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	4a7c      	ldr	r2, [pc, #496]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b18:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1a:	4b7a      	ldr	r3, [pc, #488]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b26:	2301      	movs	r3, #1
 8002b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2a:	4b77      	ldr	r3, [pc, #476]	; (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d118      	bne.n	8002b68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b36:	4b74      	ldr	r3, [pc, #464]	; (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a73      	ldr	r2, [pc, #460]	; (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b42:	f7ff fb8b 	bl	800225c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4a:	f7ff fb87 	bl	800225c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e10c      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x2ea>
 8002b70:	4b64      	ldr	r3, [pc, #400]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	4a63      	ldr	r2, [pc, #396]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7c:	e01c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x324>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x30c>
 8002b86:	4b5f      	ldr	r3, [pc, #380]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a5e      	ldr	r2, [pc, #376]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	4b5c      	ldr	r3, [pc, #368]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a5b      	ldr	r2, [pc, #364]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9e:	e00b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x324>
 8002ba0:	4b58      	ldr	r3, [pc, #352]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a57      	ldr	r2, [pc, #348]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bac:	4b55      	ldr	r3, [pc, #340]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	4a54      	ldr	r2, [pc, #336]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	f023 0304 	bic.w	r3, r3, #4
 8002bb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d015      	beq.n	8002bec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7ff fb4c 	bl	800225c <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7ff fb48 	bl	800225c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0cb      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bde:	4b49      	ldr	r3, [pc, #292]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0ee      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x334>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bec:	f7ff fb36 	bl	800225c <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf4:	f7ff fb32 	bl	800225c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0b5      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0a:	4b3e      	ldr	r3, [pc, #248]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1ee      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1c:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	4a38      	ldr	r2, [pc, #224]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80a1 	beq.w	8002d74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c32:	4b34      	ldr	r3, [pc, #208]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d05c      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d141      	bne.n	8002cca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c46:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_RCC_OscConfig+0x478>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7ff fb06 	bl	800225c <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c54:	f7ff fb02 	bl	800225c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e087      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69da      	ldr	r2, [r3, #28]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	019b      	lsls	r3, r3, #6
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	061b      	lsls	r3, r3, #24
 8002c96:	491b      	ldr	r1, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_RCC_OscConfig+0x478>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7ff fadb 	bl	800225c <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002caa:	f7ff fad7 	bl	800225c <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e05c      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x416>
 8002cc8:	e054      	b.n	8002d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <HAL_RCC_OscConfig+0x478>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7ff fac4 	bl	800225c <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7ff fac0 	bl	800225c <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e045      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x444>
 8002cf6:	e03d      	b.n	8002d74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e038      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x4ec>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d028      	beq.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d121      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d11a      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d111      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800

08002d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0cc      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b68      	ldr	r3, [pc, #416]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d90c      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b65      	ldr	r3, [pc, #404]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b63      	ldr	r3, [pc, #396]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0b8      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd8:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a58      	ldr	r2, [pc, #352]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df0:	4b53      	ldr	r3, [pc, #332]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a52      	ldr	r2, [pc, #328]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfc:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	494d      	ldr	r1, [pc, #308]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d044      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	4b47      	ldr	r3, [pc, #284]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d119      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e07f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d003      	beq.n	8002e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e06f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e52:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e067      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e62:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f023 0203 	bic.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4934      	ldr	r1, [pc, #208]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e74:	f7ff f9f2 	bl	800225c <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7c:	f7ff f9ee 	bl	800225c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e04f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 020c 	and.w	r2, r3, #12
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1eb      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d20c      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e032      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4916      	ldr	r1, [pc, #88]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	490e      	ldr	r1, [pc, #56]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f0a:	f000 f821 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	490a      	ldr	r1, [pc, #40]	; (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1c:	5ccb      	ldrb	r3, [r1, r3]
 8002f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f22:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff f952 	bl	80021d4 <HAL_InitTick>

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023c00 	.word	0x40023c00
 8002f40:	40023800 	.word	0x40023800
 8002f44:	08003cd4 	.word	0x08003cd4
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	20000004 	.word	0x20000004

08002f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f54:	b090      	sub	sp, #64	; 0x40
 8002f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f60:	2300      	movs	r3, #0
 8002f62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f68:	4b59      	ldr	r3, [pc, #356]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d00d      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x40>
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	f200 80a1 	bhi.w	80030bc <HAL_RCC_GetSysClockFreq+0x16c>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x34>
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d003      	beq.n	8002f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f82:	e09b      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f84:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f88:	e09b      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f8a:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f8e:	e098      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f90:	4b4f      	ldr	r3, [pc, #316]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f9a:	4b4d      	ldr	r3, [pc, #308]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d028      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa6:	4b4a      	ldr	r3, [pc, #296]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	099b      	lsrs	r3, r3, #6
 8002fac:	2200      	movs	r2, #0
 8002fae:	623b      	str	r3, [r7, #32]
 8002fb0:	627a      	str	r2, [r7, #36]	; 0x24
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fbc:	fb03 f201 	mul.w	r2, r3, r1
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	fb00 f303 	mul.w	r3, r0, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	4a43      	ldr	r2, [pc, #268]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fca:	fba0 1202 	umull	r1, r2, r0, r2
 8002fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fd0:	460a      	mov	r2, r1
 8002fd2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd6:	4413      	add	r3, r2
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fdc:	2200      	movs	r2, #0
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	61fa      	str	r2, [r7, #28]
 8002fe2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fea:	f7fd f8ed 	bl	80001c8 <__aeabi_uldivmod>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff6:	e053      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff8:	4b35      	ldr	r3, [pc, #212]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	2200      	movs	r2, #0
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	617a      	str	r2, [r7, #20]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800300a:	f04f 0b00 	mov.w	fp, #0
 800300e:	4652      	mov	r2, sl
 8003010:	465b      	mov	r3, fp
 8003012:	f04f 0000 	mov.w	r0, #0
 8003016:	f04f 0100 	mov.w	r1, #0
 800301a:	0159      	lsls	r1, r3, #5
 800301c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003020:	0150      	lsls	r0, r2, #5
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	ebb2 080a 	subs.w	r8, r2, sl
 800302a:	eb63 090b 	sbc.w	r9, r3, fp
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800303a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800303e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003042:	ebb2 0408 	subs.w	r4, r2, r8
 8003046:	eb63 0509 	sbc.w	r5, r3, r9
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	00eb      	lsls	r3, r5, #3
 8003054:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003058:	00e2      	lsls	r2, r4, #3
 800305a:	4614      	mov	r4, r2
 800305c:	461d      	mov	r5, r3
 800305e:	eb14 030a 	adds.w	r3, r4, sl
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	eb45 030b 	adc.w	r3, r5, fp
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003076:	4629      	mov	r1, r5
 8003078:	028b      	lsls	r3, r1, #10
 800307a:	4621      	mov	r1, r4
 800307c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003080:	4621      	mov	r1, r4
 8003082:	028a      	lsls	r2, r1, #10
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308a:	2200      	movs	r2, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	60fa      	str	r2, [r7, #12]
 8003090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003094:	f7fd f898 	bl	80001c8 <__aeabi_uldivmod>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4613      	mov	r3, r2
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	3301      	adds	r3, #1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80030b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030ba:	e002      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80030be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3740      	adds	r7, #64	; 0x40
 80030c8:	46bd      	mov	sp, r7
 80030ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
 80030d4:	00f42400 	.word	0x00f42400
 80030d8:	017d7840 	.word	0x017d7840

080030dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e07b      	b.n	80031e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d108      	bne.n	8003108 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030fe:	d009      	beq.n	8003114 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	61da      	str	r2, [r3, #28]
 8003106:	e005      	b.n	8003114 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd fb68 	bl	8000804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800314a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003198:	ea42 0103 	orr.w	r1, r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	f003 0104 	and.w	r1, r3, #4
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	f003 0210 	and.w	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b088      	sub	sp, #32
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	4613      	mov	r3, r2
 80031fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_SPI_Transmit+0x22>
 800320c:	2302      	movs	r3, #2
 800320e:	e126      	b.n	800345e <HAL_SPI_Transmit+0x270>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003218:	f7ff f820 	bl	800225c <HAL_GetTick>
 800321c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d002      	beq.n	8003234 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003232:	e10b      	b.n	800344c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_SPI_Transmit+0x52>
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003244:	e102      	b.n	800344c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2203      	movs	r2, #3
 800324a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	88fa      	ldrh	r2, [r7, #6]
 800325e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	88fa      	ldrh	r2, [r7, #6]
 8003264:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800328c:	d10f      	bne.n	80032ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800329c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b8:	2b40      	cmp	r3, #64	; 0x40
 80032ba:	d007      	beq.n	80032cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d4:	d14b      	bne.n	800336e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <HAL_SPI_Transmit+0xf6>
 80032de:	8afb      	ldrh	r3, [r7, #22]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d13e      	bne.n	8003362 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	881a      	ldrh	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	1c9a      	adds	r2, r3, #2
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003308:	e02b      	b.n	8003362 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b02      	cmp	r3, #2
 8003316:	d112      	bne.n	800333e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	881a      	ldrh	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	1c9a      	adds	r2, r3, #2
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	86da      	strh	r2, [r3, #54]	; 0x36
 800333c:	e011      	b.n	8003362 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800333e:	f7fe ff8d 	bl	800225c <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d803      	bhi.n	8003356 <HAL_SPI_Transmit+0x168>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d102      	bne.n	800335c <HAL_SPI_Transmit+0x16e>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003360:	e074      	b.n	800344c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1ce      	bne.n	800330a <HAL_SPI_Transmit+0x11c>
 800336c:	e04c      	b.n	8003408 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_SPI_Transmit+0x18e>
 8003376:	8afb      	ldrh	r3, [r7, #22]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d140      	bne.n	80033fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	7812      	ldrb	r2, [r2, #0]
 8003388:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033a2:	e02c      	b.n	80033fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d113      	bne.n	80033da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	7812      	ldrb	r2, [r2, #0]
 80033be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80033d8:	e011      	b.n	80033fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033da:	f7fe ff3f 	bl	800225c <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d803      	bhi.n	80033f2 <HAL_SPI_Transmit+0x204>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d102      	bne.n	80033f8 <HAL_SPI_Transmit+0x20a>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033fc:	e026      	b.n	800344c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1cd      	bne.n	80033a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	6839      	ldr	r1, [r7, #0]
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fbd9 	bl	8003bc4 <SPI_EndRxTxTransaction>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e000      	b.n	800344c <HAL_SPI_Transmit+0x25e>
  }

error:
 800344a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800345c:	7ffb      	ldrb	r3, [r7, #31]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b088      	sub	sp, #32
 800346a:	af02      	add	r7, sp, #8
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	4613      	mov	r3, r2
 8003474:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003482:	d112      	bne.n	80034aa <HAL_SPI_Receive+0x44>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10e      	bne.n	80034aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2204      	movs	r2, #4
 8003490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003494:	88fa      	ldrh	r2, [r7, #6]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	4613      	mov	r3, r2
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f8f1 	bl	8003688 <HAL_SPI_TransmitReceive>
 80034a6:	4603      	mov	r3, r0
 80034a8:	e0ea      	b.n	8003680 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_SPI_Receive+0x52>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e0e3      	b.n	8003680 <HAL_SPI_Receive+0x21a>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034c0:	f7fe fecc 	bl	800225c <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d002      	beq.n	80034d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
 80034d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034d6:	e0ca      	b.n	800366e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_SPI_Receive+0x7e>
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034e8:	e0c1      	b.n	800366e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2204      	movs	r2, #4
 80034ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	88fa      	ldrh	r2, [r7, #6]
 8003502:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	88fa      	ldrh	r2, [r7, #6]
 8003508:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003530:	d10f      	bne.n	8003552 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003540:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003550:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d007      	beq.n	8003570 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800356e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d162      	bne.n	800363e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003578:	e02e      	b.n	80035d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b01      	cmp	r3, #1
 8003586:	d115      	bne.n	80035b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f103 020c 	add.w	r2, r3, #12
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	7812      	ldrb	r2, [r2, #0]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035b2:	e011      	b.n	80035d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035b4:	f7fe fe52 	bl	800225c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d803      	bhi.n	80035cc <HAL_SPI_Receive+0x166>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ca:	d102      	bne.n	80035d2 <HAL_SPI_Receive+0x16c>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035d6:	e04a      	b.n	800366e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1cb      	bne.n	800357a <HAL_SPI_Receive+0x114>
 80035e2:	e031      	b.n	8003648 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d113      	bne.n	800361a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	b292      	uxth	r2, r2
 80035fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	1c9a      	adds	r2, r3, #2
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003618:	e011      	b.n	800363e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800361a:	f7fe fe1f 	bl	800225c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d803      	bhi.n	8003632 <HAL_SPI_Receive+0x1cc>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d102      	bne.n	8003638 <HAL_SPI_Receive+0x1d2>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d102      	bne.n	800363e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800363c:	e017      	b.n	800366e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1cd      	bne.n	80035e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	6839      	ldr	r1, [r7, #0]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 fa53 	bl	8003af8 <SPI_EndRxTransaction>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
 800366a:	e000      	b.n	800366e <HAL_SPI_Receive+0x208>
  }

error :
 800366c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800367e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	; 0x30
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003696:	2301      	movs	r3, #1
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_SPI_TransmitReceive+0x26>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e18a      	b.n	80039c4 <HAL_SPI_TransmitReceive+0x33c>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036b6:	f7fe fdd1 	bl	800225c <HAL_GetTick>
 80036ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036cc:	887b      	ldrh	r3, [r7, #2]
 80036ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d00f      	beq.n	80036f8 <HAL_SPI_TransmitReceive+0x70>
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036de:	d107      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d103      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x68>
 80036e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d003      	beq.n	80036f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036f0:	2302      	movs	r3, #2
 80036f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036f6:	e15b      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_SPI_TransmitReceive+0x82>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_SPI_TransmitReceive+0x82>
 8003704:	887b      	ldrh	r3, [r7, #2]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d103      	bne.n	8003712 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003710:	e14e      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b04      	cmp	r3, #4
 800371c:	d003      	beq.n	8003726 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2205      	movs	r2, #5
 8003722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	887a      	ldrh	r2, [r7, #2]
 8003736:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	887a      	ldrh	r2, [r7, #2]
 800374e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d007      	beq.n	800377a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003778:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003782:	d178      	bne.n	8003876 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_SPI_TransmitReceive+0x10a>
 800378c:	8b7b      	ldrh	r3, [r7, #26]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d166      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	881a      	ldrh	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	1c9a      	adds	r2, r3, #2
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b6:	e053      	b.n	8003860 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d11b      	bne.n	80037fe <HAL_SPI_TransmitReceive+0x176>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d016      	beq.n	80037fe <HAL_SPI_TransmitReceive+0x176>
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d113      	bne.n	80037fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	881a      	ldrh	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	1c9a      	adds	r2, r3, #2
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d119      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x1b8>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d014      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	b292      	uxth	r2, r2
 8003822:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	1c9a      	adds	r2, r3, #2
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800383c:	2301      	movs	r3, #1
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003840:	f7fe fd0c 	bl	800225c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800384c:	429a      	cmp	r2, r3
 800384e:	d807      	bhi.n	8003860 <HAL_SPI_TransmitReceive+0x1d8>
 8003850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d003      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800385e:	e0a7      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1a6      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x130>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1a1      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x130>
 8003874:	e07c      	b.n	8003970 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_SPI_TransmitReceive+0x1fc>
 800387e:	8b7b      	ldrh	r3, [r7, #26]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d16b      	bne.n	800395c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	7812      	ldrb	r2, [r2, #0]
 8003890:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038aa:	e057      	b.n	800395c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d11c      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x26c>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d017      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0x26c>
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d114      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	7812      	ldrb	r2, [r2, #0]
 80038d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d119      	bne.n	8003936 <HAL_SPI_TransmitReceive+0x2ae>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d014      	beq.n	8003936 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003932:	2301      	movs	r3, #1
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003936:	f7fe fc91 	bl	800225c <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003942:	429a      	cmp	r2, r3
 8003944:	d803      	bhi.n	800394e <HAL_SPI_TransmitReceive+0x2c6>
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d102      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x2cc>
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800395a:	e029      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1a2      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x224>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d19d      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003972:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f925 	bl	8003bc4 <SPI_EndRxTxTransaction>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d006      	beq.n	800398e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800398c:	e010      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	e000      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80039ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3730      	adds	r7, #48	; 0x30
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039da:	b2db      	uxtb	r3, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039f8:	f7fe fc30 	bl	800225c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	4413      	add	r3, r2
 8003a06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a08:	f7fe fc28 	bl	800225c <HAL_GetTick>
 8003a0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a0e:	4b39      	ldr	r3, [pc, #228]	; (8003af4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	015b      	lsls	r3, r3, #5
 8003a14:	0d1b      	lsrs	r3, r3, #20
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	fb02 f303 	mul.w	r3, r2, r3
 8003a1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a1e:	e054      	b.n	8003aca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d050      	beq.n	8003aca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a28:	f7fe fc18 	bl	800225c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d902      	bls.n	8003a3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d13d      	bne.n	8003aba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a56:	d111      	bne.n	8003a7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a60:	d004      	beq.n	8003a6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6a:	d107      	bne.n	8003a7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a84:	d10f      	bne.n	8003aa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e017      	b.n	8003aea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	bf0c      	ite	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	2300      	movne	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d19b      	bne.n	8003a20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000000 	.word	0x20000000

08003af8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b0c:	d111      	bne.n	8003b32 <SPI_EndRxTransaction+0x3a>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b16:	d004      	beq.n	8003b22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b20:	d107      	bne.n	8003b32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b30:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3a:	d12a      	bne.n	8003b92 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b44:	d012      	beq.n	8003b6c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f7ff ff49 	bl	80039e8 <SPI_WaitFlagStateUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d02d      	beq.n	8003bb8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b60:	f043 0220 	orr.w	r2, r3, #32
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e026      	b.n	8003bba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2200      	movs	r2, #0
 8003b74:	2101      	movs	r1, #1
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff ff36 	bl	80039e8 <SPI_WaitFlagStateUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01a      	beq.n	8003bb8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	f043 0220 	orr.w	r2, r3, #32
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e013      	b.n	8003bba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff ff23 	bl	80039e8 <SPI_WaitFlagStateUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e000      	b.n	8003bba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bd0:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <SPI_EndRxTxTransaction+0x7c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1b      	ldr	r2, [pc, #108]	; (8003c44 <SPI_EndRxTxTransaction+0x80>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	0d5b      	lsrs	r3, r3, #21
 8003bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bee:	d112      	bne.n	8003c16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f7ff fef4 	bl	80039e8 <SPI_WaitFlagStateUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d016      	beq.n	8003c34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	f043 0220 	orr.w	r2, r3, #32
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e00f      	b.n	8003c36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2c:	2b80      	cmp	r3, #128	; 0x80
 8003c2e:	d0f2      	beq.n	8003c16 <SPI_EndRxTxTransaction+0x52>
 8003c30:	e000      	b.n	8003c34 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c32:	bf00      	nop
  }

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000000 	.word	0x20000000
 8003c44:	165e9f81 	.word	0x165e9f81

08003c48 <__libc_init_array>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	4d0d      	ldr	r5, [pc, #52]	; (8003c80 <__libc_init_array+0x38>)
 8003c4c:	4c0d      	ldr	r4, [pc, #52]	; (8003c84 <__libc_init_array+0x3c>)
 8003c4e:	1b64      	subs	r4, r4, r5
 8003c50:	10a4      	asrs	r4, r4, #2
 8003c52:	2600      	movs	r6, #0
 8003c54:	42a6      	cmp	r6, r4
 8003c56:	d109      	bne.n	8003c6c <__libc_init_array+0x24>
 8003c58:	4d0b      	ldr	r5, [pc, #44]	; (8003c88 <__libc_init_array+0x40>)
 8003c5a:	4c0c      	ldr	r4, [pc, #48]	; (8003c8c <__libc_init_array+0x44>)
 8003c5c:	f000 f82e 	bl	8003cbc <_init>
 8003c60:	1b64      	subs	r4, r4, r5
 8003c62:	10a4      	asrs	r4, r4, #2
 8003c64:	2600      	movs	r6, #0
 8003c66:	42a6      	cmp	r6, r4
 8003c68:	d105      	bne.n	8003c76 <__libc_init_array+0x2e>
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c70:	4798      	blx	r3
 8003c72:	3601      	adds	r6, #1
 8003c74:	e7ee      	b.n	8003c54 <__libc_init_array+0xc>
 8003c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7a:	4798      	blx	r3
 8003c7c:	3601      	adds	r6, #1
 8003c7e:	e7f2      	b.n	8003c66 <__libc_init_array+0x1e>
 8003c80:	08003cf8 	.word	0x08003cf8
 8003c84:	08003cf8 	.word	0x08003cf8
 8003c88:	08003cf8 	.word	0x08003cf8
 8003c8c:	08003cfc 	.word	0x08003cfc

08003c90 <memcpy>:
 8003c90:	440a      	add	r2, r1
 8003c92:	4291      	cmp	r1, r2
 8003c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c98:	d100      	bne.n	8003c9c <memcpy+0xc>
 8003c9a:	4770      	bx	lr
 8003c9c:	b510      	push	{r4, lr}
 8003c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ca6:	4291      	cmp	r1, r2
 8003ca8:	d1f9      	bne.n	8003c9e <memcpy+0xe>
 8003caa:	bd10      	pop	{r4, pc}

08003cac <memset>:
 8003cac:	4402      	add	r2, r0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <memset+0xa>
 8003cb4:	4770      	bx	lr
 8003cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cba:	e7f9      	b.n	8003cb0 <memset+0x4>

08003cbc <_init>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	bf00      	nop
 8003cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc2:	bc08      	pop	{r3}
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	4770      	bx	lr

08003cc8 <_fini>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	bf00      	nop
 8003ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cce:	bc08      	pop	{r3}
 8003cd0:	469e      	mov	lr, r3
 8003cd2:	4770      	bx	lr
