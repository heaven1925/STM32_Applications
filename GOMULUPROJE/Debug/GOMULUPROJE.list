
GOMULUPROJE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008be0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e7c  08008e7c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08008e7c  08008e7c  00018e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e84  08008e84  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e84  08008e84  00018e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e88  08008e88  00018e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08008e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000948  200000d0  08008f5c  000200d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a18  08008f5c  00020a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001706c  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003279  00000000  00000000  0003716c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f0  00000000  00000000  0003a3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001268  00000000  00000000  0003b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003df9  00000000  00000000  0003ca40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010921  00000000  00000000  00040839  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9e2b  00000000  00000000  0005115a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012af85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005814  00000000  00000000  0012b000  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d58 	.word	0x08008d58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	08008d58 	.word	0x08008d58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b972 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	4688      	mov	r8, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14b      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4615      	mov	r5, r2
 8000c1a:	d967      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0720 	rsb	r7, r2, #32
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c2e:	4095      	lsls	r5, r2
 8000c30:	ea47 0803 	orr.w	r8, r7, r3
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c40:	fa1f fc85 	uxth.w	ip, r5
 8000c44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5a:	f080 811b 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8118 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c64:	3f02      	subs	r7, #2
 8000c66:	442b      	add	r3, r5
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8107 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	f240 8104 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c90:	3802      	subs	r0, #2
 8000c92:	442c      	add	r4, r5
 8000c94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c98:	eba4 040c 	sub.w	r4, r4, ip
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	b11e      	cbz	r6, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca8:	4639      	mov	r1, r7
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0xbe>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80eb 	beq.w	8000e8e <__udivmoddi4+0x286>
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e9c6 0100 	strd	r0, r1, [r6]
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	4639      	mov	r1, r7
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	fab3 f783 	clz	r7, r3
 8000cca:	2f00      	cmp	r7, #0
 8000ccc:	d147      	bne.n	8000d5e <__udivmoddi4+0x156>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0xd0>
 8000cd2:	4282      	cmp	r2, r0
 8000cd4:	f200 80fa 	bhi.w	8000ecc <__udivmoddi4+0x2c4>
 8000cd8:	1a84      	subs	r4, r0, r2
 8000cda:	eb61 0303 	sbc.w	r3, r1, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d0e0      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000ce6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cea:	e7dd      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000cec:	b902      	cbnz	r2, 8000cf0 <__udivmoddi4+0xe8>
 8000cee:	deff      	udf	#255	; 0xff
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f040 808f 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cfa:	1b49      	subs	r1, r1, r5
 8000cfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d00:	fa1f f885 	uxth.w	r8, r5
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d14:	fb08 f10c 	mul.w	r1, r8, ip
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1c:	18eb      	adds	r3, r5, r3
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4299      	cmp	r1, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x14c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x14a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80b6 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e79f      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d62:	40bb      	lsls	r3, r7
 8000d64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d7c:	4325      	orrs	r5, r4
 8000d7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d82:	0c2c      	lsrs	r4, r5, #16
 8000d84:	fb08 3319 	mls	r3, r8, r9, r3
 8000d88:	fa1f fa8e 	uxth.w	sl, lr
 8000d8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d90:	fb09 f40a 	mul.w	r4, r9, sl
 8000d94:	429c      	cmp	r4, r3
 8000d96:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1e 0303 	adds.w	r3, lr, r3
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da8:	f080 8087 	bcs.w	8000eba <__udivmoddi4+0x2b2>
 8000dac:	429c      	cmp	r4, r3
 8000dae:	f240 8084 	bls.w	8000eba <__udivmoddi4+0x2b2>
 8000db2:	f1a9 0902 	sub.w	r9, r9, #2
 8000db6:	4473      	add	r3, lr
 8000db8:	1b1b      	subs	r3, r3, r4
 8000dba:	b2ad      	uxth	r5, r5
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dc8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dcc:	45a2      	cmp	sl, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	d26b      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dda:	45a2      	cmp	sl, r4
 8000ddc:	d969      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4474      	add	r4, lr
 8000de2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	eba4 040a 	sub.w	r4, r4, sl
 8000dee:	454c      	cmp	r4, r9
 8000df0:	46c2      	mov	sl, r8
 8000df2:	464b      	mov	r3, r9
 8000df4:	d354      	bcc.n	8000ea0 <__udivmoddi4+0x298>
 8000df6:	d051      	beq.n	8000e9c <__udivmoddi4+0x294>
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d069      	beq.n	8000ed0 <__udivmoddi4+0x2c8>
 8000dfc:	ebb1 050a 	subs.w	r5, r1, sl
 8000e00:	eb64 0403 	sbc.w	r4, r4, r3
 8000e04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e08:	40fd      	lsrs	r5, r7
 8000e0a:	40fc      	lsrs	r4, r7
 8000e0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e10:	e9c6 5400 	strd	r5, r4, [r6]
 8000e14:	2700      	movs	r7, #0
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e20:	4095      	lsls	r5, r2
 8000e22:	fa01 f002 	lsl.w	r0, r1, r2
 8000e26:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e2e:	4338      	orrs	r0, r7
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e36:	fa1f f885 	uxth.w	r8, r5
 8000e3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb07 f308 	mul.w	r3, r7, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x256>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e54:	d22f      	bcs.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d92d      	bls.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e5a:	3f02      	subs	r7, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1acb      	subs	r3, r1, r3
 8000e60:	b281      	uxth	r1, r0
 8000e62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6e:	fb00 f308 	mul.w	r3, r0, r8
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x27e>
 8000e76:	1869      	adds	r1, r5, r1
 8000e78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e7c:	d217      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d915      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4429      	add	r1, r5
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e8c:	e73b      	b.n	8000d06 <__udivmoddi4+0xfe>
 8000e8e:	4637      	mov	r7, r6
 8000e90:	4630      	mov	r0, r6
 8000e92:	e709      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e94:	4607      	mov	r7, r0
 8000e96:	e6e7      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6fb      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e9c:	4541      	cmp	r1, r8
 8000e9e:	d2ab      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	4613      	mov	r3, r2
 8000eac:	e7a4      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	e7e9      	b.n	8000e86 <__udivmoddi4+0x27e>
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e795      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb6:	4667      	mov	r7, ip
 8000eb8:	e7d1      	b.n	8000e5e <__udivmoddi4+0x256>
 8000eba:	4681      	mov	r9, r0
 8000ebc:	e77c      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	442c      	add	r4, r5
 8000ec2:	e747      	b.n	8000d54 <__udivmoddi4+0x14c>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	442b      	add	r3, r5
 8000eca:	e72f      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ecc:	4638      	mov	r0, r7
 8000ece:	e708      	b.n	8000ce2 <__udivmoddi4+0xda>
 8000ed0:	4637      	mov	r7, r6
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0xa0>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
static void LCD1602_EnablePulse(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <LCD1602_EnablePulse+0x38>)
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <LCD1602_EnablePulse+0x3c>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f004 fa20 	bl	800532c <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8000eec:	230a      	movs	r3, #10
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f97a 	bl	80011e8 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <LCD1602_EnablePulse+0x38>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <LCD1602_EnablePulse+0x3c>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	2200      	movs	r2, #0
 8000efe:	4619      	mov	r1, r3
 8000f00:	f004 fa14 	bl	800532c <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 8000f04:	203c      	movs	r0, #60	; 0x3c
 8000f06:	f000 f96f 	bl	80011e8 <LCD1602_TIM_MicorSecDelay>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000ec 	.word	0x200000ec
 8000f14:	200000f2 	.word	0x200000f2

08000f18 <LCD1602_RS>:
//2) RS control
static void LCD1602_RS(bool state)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d008      	beq.n	8000f3a <LCD1602_RS+0x22>
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <LCD1602_RS+0x3c>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <LCD1602_RS+0x40>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	2201      	movs	r2, #1
 8000f32:	4619      	mov	r1, r3
 8000f34:	f004 f9fa 	bl	800532c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8000f38:	e007      	b.n	8000f4a <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <LCD1602_RS+0x3c>)
 8000f3c:	6818      	ldr	r0, [r3, #0]
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <LCD1602_RS+0x40>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	2200      	movs	r2, #0
 8000f44:	4619      	mov	r1, r3
 8000f46:	f004 f9f1 	bl	800532c <HAL_GPIO_WritePin>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200000ec 	.word	0x200000ec
 8000f58:	200000f0 	.word	0x200000f0

08000f5c <LCD1602_write>:

//3) Write Parallel interface
static void LCD1602_write(uint8_t byte)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8000f74:	4b61      	ldr	r3, [pc, #388]	; (80010fc <LCD1602_write+0x1a0>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d15a      	bne.n	8001032 <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000f7c:	4b60      	ldr	r3, [pc, #384]	; (8001100 <LCD1602_write+0x1a4>)
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	4b60      	ldr	r3, [pc, #384]	; (8001104 <LCD1602_write+0x1a8>)
 8000f82:	8819      	ldrh	r1, [r3, #0]
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f004 f9cd 	bl	800532c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000f92:	4b5b      	ldr	r3, [pc, #364]	; (8001100 <LCD1602_write+0x1a4>)
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	4b5c      	ldr	r3, [pc, #368]	; (8001108 <LCD1602_write+0x1ac>)
 8000f98:	8819      	ldrh	r1, [r3, #0]
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f004 f9c2 	bl	800532c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000fa8:	4b55      	ldr	r3, [pc, #340]	; (8001100 <LCD1602_write+0x1a4>)
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	4b57      	ldr	r3, [pc, #348]	; (800110c <LCD1602_write+0x1b0>)
 8000fae:	8819      	ldrh	r1, [r3, #0]
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f004 f9b7 	bl	800532c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000fbe:	4b50      	ldr	r3, [pc, #320]	; (8001100 <LCD1602_write+0x1a4>)
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	4b53      	ldr	r3, [pc, #332]	; (8001110 <LCD1602_write+0x1b4>)
 8000fc4:	8819      	ldrh	r1, [r3, #0]
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f004 f9ac 	bl	800532c <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000fd4:	4b4f      	ldr	r3, [pc, #316]	; (8001114 <LCD1602_write+0x1b8>)
 8000fd6:	6818      	ldr	r0, [r3, #0]
 8000fd8:	4b4f      	ldr	r3, [pc, #316]	; (8001118 <LCD1602_write+0x1bc>)
 8000fda:	8819      	ldrh	r1, [r3, #0]
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	f004 f9a1 	bl	800532c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000fea:	4b4a      	ldr	r3, [pc, #296]	; (8001114 <LCD1602_write+0x1b8>)
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	4b4b      	ldr	r3, [pc, #300]	; (800111c <LCD1602_write+0x1c0>)
 8000ff0:	8819      	ldrh	r1, [r3, #0]
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f004 f996 	bl	800532c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001000:	4b44      	ldr	r3, [pc, #272]	; (8001114 <LCD1602_write+0x1b8>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	4b46      	ldr	r3, [pc, #280]	; (8001120 <LCD1602_write+0x1c4>)
 8001006:	8819      	ldrh	r1, [r3, #0]
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	b2db      	uxtb	r3, r3
 8001010:	461a      	mov	r2, r3
 8001012:	f004 f98b 	bl	800532c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001016:	4b3f      	ldr	r3, [pc, #252]	; (8001114 <LCD1602_write+0x1b8>)
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	4b42      	ldr	r3, [pc, #264]	; (8001124 <LCD1602_write+0x1c8>)
 800101c:	8819      	ldrh	r1, [r3, #0]
 800101e:	7bbb      	ldrb	r3, [r7, #14]
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	b2db      	uxtb	r3, r3
 8001026:	461a      	mov	r2, r3
 8001028:	f004 f980 	bl	800532c <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 800102c:	f7ff ff54 	bl	8000ed8 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 8001030:	e05f      	b.n	80010f2 <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8001032:	4b32      	ldr	r3, [pc, #200]	; (80010fc <LCD1602_write+0x1a0>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d15b      	bne.n	80010f2 <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800103a:	4b36      	ldr	r3, [pc, #216]	; (8001114 <LCD1602_write+0x1b8>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	4b36      	ldr	r3, [pc, #216]	; (8001118 <LCD1602_write+0x1bc>)
 8001040:	8819      	ldrh	r1, [r3, #0]
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	f004 f96e 	bl	800532c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <LCD1602_write+0x1b8>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <LCD1602_write+0x1c0>)
 8001056:	8819      	ldrh	r1, [r3, #0]
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	f004 f963 	bl	800532c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001066:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <LCD1602_write+0x1b8>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <LCD1602_write+0x1c4>)
 800106c:	8819      	ldrh	r1, [r3, #0]
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	b2db      	uxtb	r3, r3
 8001076:	461a      	mov	r2, r3
 8001078:	f004 f958 	bl	800532c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <LCD1602_write+0x1b8>)
 800107e:	6818      	ldr	r0, [r3, #0]
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <LCD1602_write+0x1c8>)
 8001082:	8819      	ldrh	r1, [r3, #0]
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	b2db      	uxtb	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	f004 f94d 	bl	800532c <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8001092:	f7ff ff21 	bl	8000ed8 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <LCD1602_write+0x1b8>)
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <LCD1602_write+0x1bc>)
 800109c:	8819      	ldrh	r1, [r3, #0]
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	f004 f940 	bl	800532c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <LCD1602_write+0x1b8>)
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <LCD1602_write+0x1c0>)
 80010b2:	8819      	ldrh	r1, [r3, #0]
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	f004 f935 	bl	800532c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <LCD1602_write+0x1b8>)
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <LCD1602_write+0x1c4>)
 80010c8:	8819      	ldrh	r1, [r3, #0]
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	f004 f92a 	bl	800532c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <LCD1602_write+0x1b8>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <LCD1602_write+0x1c8>)
 80010de:	8819      	ldrh	r1, [r3, #0]
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	f004 f91f 	bl	800532c <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 80010ee:	f7ff fef3 	bl	8000ed8 <LCD1602_EnablePulse>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000000 	.word	0x20000000
 8001100:	200000f4 	.word	0x200000f4
 8001104:	200000f8 	.word	0x200000f8
 8001108:	200000fa 	.word	0x200000fa
 800110c:	200000fc 	.word	0x200000fc
 8001110:	200000fe 	.word	0x200000fe
 8001114:	20000100 	.word	0x20000100
 8001118:	20000104 	.word	0x20000104
 800111c:	20000106 	.word	0x20000106
 8001120:	20000108 	.word	0x20000108
 8001124:	2000010a 	.word	0x2000010a

08001128 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
static void LCD1602_TIM_Config(void)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 800112e:	1d3a      	adds	r2, r7, #4
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4611      	mov	r1, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f004 fd72 	bl	8005c20 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d103      	bne.n	800114a <LCD1602_TIM_Config+0x22>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 8001142:	f004 fd45 	bl	8005bd0 <HAL_RCC_GetPCLK1Freq>
 8001146:	61f8      	str	r0, [r7, #28]
 8001148:	e004      	b.n	8001154 <LCD1602_TIM_Config+0x2c>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 800114a:	f004 fd41 	bl	8005bd0 <HAL_RCC_GetPCLK1Freq>
 800114e:	4603      	mov	r3, r0
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
	}
	clockSpeed *= 0.000001;
 8001154:	69f8      	ldr	r0, [r7, #28]
 8001156:	f7ff f9cd 	bl	80004f4 <__aeabi_ui2d>
 800115a:	a321      	add	r3, pc, #132	; (adr r3, 80011e0 <LCD1602_TIM_Config+0xb8>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fa42 	bl	80005e8 <__aeabi_dmul>
 8001164:	4603      	mov	r3, r0
 8001166:	460c      	mov	r4, r1
 8001168:	4618      	mov	r0, r3
 800116a:	4621      	mov	r1, r4
 800116c:	f7ff fd14 	bl	8000b98 <__aeabi_d2uiz>
 8001170:	4603      	mov	r3, r0
 8001172:	61fb      	str	r3, [r7, #28]
	
	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <LCD1602_TIM_Config+0xb0>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <LCD1602_TIM_Config+0xb0>)
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	6413      	str	r3, [r2, #64]	; 0x40
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <LCD1602_TIM_Config+0xb4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a15      	ldr	r2, [pc, #84]	; (80011dc <LCD1602_TIM_Config+0xb4>)
 8001186:	f023 0310 	bic.w	r3, r3, #16
 800118a:	6013      	str	r3, [r2, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <LCD1602_TIM_Config+0xb4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a12      	ldr	r2, [pc, #72]	; (80011dc <LCD1602_TIM_Config+0xb4>)
 8001192:	f023 0301 	bic.w	r3, r3, #1
 8001196:	6013      	str	r3, [r2, #0]
	//Update request source 
	TIM3->CR1 &= ~(1UL << 2);
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <LCD1602_TIM_Config+0xb4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <LCD1602_TIM_Config+0xb4>)
 800119e:	f023 0304 	bic.w	r3, r3, #4
 80011a2:	6013      	str	r3, [r2, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);				  
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <LCD1602_TIM_Config+0xb4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <LCD1602_TIM_Config+0xb4>)
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	6013      	str	r3, [r2, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 80011b0:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <LCD1602_TIM_Config+0xb4>)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	6293      	str	r3, [r2, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <LCD1602_TIM_Config+0xb4>)
 80011ba:	2209      	movs	r2, #9
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <LCD1602_TIM_Config+0xb4>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <LCD1602_TIM_Config+0xb4>)
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <LCD1602_TIM_Config+0xb4>)
 80011ca:	f023 0301 	bic.w	r3, r3, #1
 80011ce:	6113      	str	r3, [r2, #16]
}
 80011d0:	bf00      	nop
 80011d2:	3724      	adds	r7, #36	; 0x24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd90      	pop	{r4, r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40000400 	.word	0x40000400
 80011e0:	a0b5ed8d 	.word	0xa0b5ed8d
 80011e4:	3eb0c6f7 	.word	0x3eb0c6f7

080011e8 <LCD1602_TIM_MicorSecDelay>:
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 80011f0:	4a0e      	ldr	r2, [pc, #56]	; (800122c <LCD1602_TIM_MicorSecDelay+0x44>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <LCD1602_TIM_MicorSecDelay+0x44>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	4a0b      	ldr	r2, [pc, #44]	; (800122c <LCD1602_TIM_MicorSecDelay+0x44>)
 80011fe:	f023 0301 	bic.w	r3, r3, #1
 8001202:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1UL;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <LCD1602_TIM_MicorSecDelay+0x44>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a08      	ldr	r2, [pc, #32]	; (800122c <LCD1602_TIM_MicorSecDelay+0x44>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 8001210:	bf00      	nop
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <LCD1602_TIM_MicorSecDelay+0x44>)
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b01      	cmp	r3, #1
 800121c:	d1f9      	bne.n	8001212 <LCD1602_TIM_MicorSecDelay+0x2a>
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40000400 	.word	0x40000400

08001230 <LCD1602_writeCommand>:
//5) Write command
static void LCD1602_writeCommand(uint8_t command)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	//Set RS to 0
	LCD1602_RS(false);
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff fe6c 	bl	8000f18 <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe8a 	bl	8000f5c <LCD1602_write>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <LCD1602_writeData>:
//6) Write 8 bits data
void LCD1602_writeData(uint8_t data)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	//Set RS to 1
	LCD1602_RS(true);
 800125a:	2001      	movs	r0, #1
 800125c:	f7ff fe5c 	bl	8000f18 <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(data);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fe7a 	bl	8000f5c <LCD1602_write>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <LCD1602_Begin8BIT>:
}

//Public functions
//1) LCD begin 8 bits function
void LCD1602_Begin8BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_LSBs0to3, uint16_t D0, uint16_t D1, uint16_t D2, uint16_t D3, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	460b      	mov	r3, r1
 800127c:	817b      	strh	r3, [r7, #10]
 800127e:	4613      	mov	r3, r2
 8001280:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 8001282:	4a90      	ldr	r2, [pc, #576]	; (80014c4 <LCD1602_Begin8BIT+0x254>)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 8001288:	4a8f      	ldr	r2, [pc, #572]	; (80014c8 <LCD1602_Begin8BIT+0x258>)
 800128a:	897b      	ldrh	r3, [r7, #10]
 800128c:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 800128e:	4a8f      	ldr	r2, [pc, #572]	; (80014cc <LCD1602_Begin8BIT+0x25c>)
 8001290:	893b      	ldrh	r3, [r7, #8]
 8001292:	8013      	strh	r3, [r2, #0]
	PORT_LSB = PORT_LSBs0to3;
 8001294:	4a8e      	ldr	r2, [pc, #568]	; (80014d0 <LCD1602_Begin8BIT+0x260>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
	D0_PIN = D0;
 800129a:	4a8e      	ldr	r2, [pc, #568]	; (80014d4 <LCD1602_Begin8BIT+0x264>)
 800129c:	8b3b      	ldrh	r3, [r7, #24]
 800129e:	8013      	strh	r3, [r2, #0]
	D1_PIN = D1;
 80012a0:	4a8d      	ldr	r2, [pc, #564]	; (80014d8 <LCD1602_Begin8BIT+0x268>)
 80012a2:	8bbb      	ldrh	r3, [r7, #28]
 80012a4:	8013      	strh	r3, [r2, #0]
	D2_PIN = D2;
 80012a6:	4a8d      	ldr	r2, [pc, #564]	; (80014dc <LCD1602_Begin8BIT+0x26c>)
 80012a8:	8c3b      	ldrh	r3, [r7, #32]
 80012aa:	8013      	strh	r3, [r2, #0]
	D3_PIN = D3;
 80012ac:	4a8c      	ldr	r2, [pc, #560]	; (80014e0 <LCD1602_Begin8BIT+0x270>)
 80012ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012b0:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 80012b2:	4a8c      	ldr	r2, [pc, #560]	; (80014e4 <LCD1602_Begin8BIT+0x274>)
 80012b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b6:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 80012b8:	4a8b      	ldr	r2, [pc, #556]	; (80014e8 <LCD1602_Begin8BIT+0x278>)
 80012ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012bc:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 80012be:	4a8b      	ldr	r2, [pc, #556]	; (80014ec <LCD1602_Begin8BIT+0x27c>)
 80012c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80012c2:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 80012c4:	4a8a      	ldr	r2, [pc, #552]	; (80014f0 <LCD1602_Begin8BIT+0x280>)
 80012c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012c8:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 80012ca:	4a8a      	ldr	r2, [pc, #552]	; (80014f4 <LCD1602_Begin8BIT+0x284>)
 80012cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80012ce:	8013      	strh	r3, [r2, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 80012d0:	f7ff ff2a 	bl	8001128 <LCD1602_TIM_Config>
	//Set the mode to 8 bits
	mode_8_4_I2C = 1;
 80012d4:	4b88      	ldr	r3, [pc, #544]	; (80014f8 <LCD1602_Begin8BIT+0x288>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
	//Function set variable to 8 bits mode
	FunctionSet = 0x38;
 80012da:	4b88      	ldr	r3, [pc, #544]	; (80014fc <LCD1602_Begin8BIT+0x28c>)
 80012dc:	2238      	movs	r2, #56	; 0x38
 80012de:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 80012e0:	2014      	movs	r0, #20
 80012e2:	f002 feb1 	bl	8004048 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_writeCommand(0x30);
 80012e6:	2030      	movs	r0, #48	; 0x30
 80012e8:	f7ff ffa2 	bl	8001230 <LCD1602_writeCommand>
	HAL_Delay(5);
 80012ec:	2005      	movs	r0, #5
 80012ee:	f002 feab 	bl	8004048 <HAL_Delay>
	LCD1602_writeCommand(0x30);
 80012f2:	2030      	movs	r0, #48	; 0x30
 80012f4:	f7ff ff9c 	bl	8001230 <LCD1602_writeCommand>
	HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f002 fea5 	bl	8004048 <HAL_Delay>
	LCD1602_writeCommand(0x30);
 80012fe:	2030      	movs	r0, #48	; 0x30
 8001300:	f7ff ff96 	bl	8001230 <LCD1602_writeCommand>
	HAL_Delay(1);
 8001304:	2001      	movs	r0, #1
 8001306:	f002 fe9f 	bl	8004048 <HAL_Delay>
	//3. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N | LCD_FUNCTION_DL);
 800130a:	2038      	movs	r0, #56	; 0x38
 800130c:	f7ff ff90 	bl	8001230 <LCD1602_writeCommand>
	//4. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8001310:	200f      	movs	r0, #15
 8001312:	f7ff ff8d 	bl	8001230 <LCD1602_writeCommand>
	//5. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff ff8a 	bl	8001230 <LCD1602_writeCommand>
	HAL_Delay(2);
 800131c:	2002      	movs	r0, #2
 800131e:	f002 fe93 	bl	8004048 <HAL_Delay>

	/////////////////////////////////////
	// CUSTOM CHAR
	//////////////////////////////////////

	LCD1602_writeCommand(LCD_SETCGRAMADDR + 0);
 8001322:	2040      	movs	r0, #64	; 0x40
 8001324:	f7ff ff84 	bl	8001230 <LCD1602_writeCommand>
	j=0;
 8001328:	4b75      	ldr	r3, [pc, #468]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
	while(j!=8)
 800132e:	e00b      	b.n	8001348 <LCD1602_Begin8BIT+0xd8>
	{
		LCD1602_writeData(termometer2[j]);
 8001330:	4b73      	ldr	r3, [pc, #460]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a73      	ldr	r2, [pc, #460]	; (8001504 <LCD1602_Begin8BIT+0x294>)
 8001336:	5cd3      	ldrb	r3, [r2, r3]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff89 	bl	8001250 <LCD1602_writeData>
		j++;
 800133e:	4b70      	ldr	r3, [pc, #448]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	4a6e      	ldr	r2, [pc, #440]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001346:	6013      	str	r3, [r2, #0]
	while(j!=8)
 8001348:	4b6d      	ldr	r3, [pc, #436]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b08      	cmp	r3, #8
 800134e:	d1ef      	bne.n	8001330 <LCD1602_Begin8BIT+0xc0>
	}
	HAL_Delay(2);
 8001350:	2002      	movs	r0, #2
 8001352:	f002 fe79 	bl	8004048 <HAL_Delay>

	LCD1602_writeCommand(LCD_SETCGRAMADDR + 8);
 8001356:	2048      	movs	r0, #72	; 0x48
 8001358:	f7ff ff6a 	bl	8001230 <LCD1602_writeCommand>
	j=0;
 800135c:	4b68      	ldr	r3, [pc, #416]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
	while(j!=8)
 8001362:	e00b      	b.n	800137c <LCD1602_Begin8BIT+0x10c>
	{
		LCD1602_writeData(battery3[j]);
 8001364:	4b66      	ldr	r3, [pc, #408]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a67      	ldr	r2, [pc, #412]	; (8001508 <LCD1602_Begin8BIT+0x298>)
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff6f 	bl	8001250 <LCD1602_writeData>
		j++;
 8001372:	4b63      	ldr	r3, [pc, #396]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a61      	ldr	r2, [pc, #388]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 800137a:	6013      	str	r3, [r2, #0]
	while(j!=8)
 800137c:	4b60      	ldr	r3, [pc, #384]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b08      	cmp	r3, #8
 8001382:	d1ef      	bne.n	8001364 <LCD1602_Begin8BIT+0xf4>
	}
	HAL_Delay(2);
 8001384:	2002      	movs	r0, #2
 8001386:	f002 fe5f 	bl	8004048 <HAL_Delay>


	LCD1602_writeCommand(LCD_SETCGRAMADDR + 16);
 800138a:	2050      	movs	r0, #80	; 0x50
 800138c:	f7ff ff50 	bl	8001230 <LCD1602_writeCommand>
	j=0;
 8001390:	4b5b      	ldr	r3, [pc, #364]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
	while(j!=8)
 8001396:	e00b      	b.n	80013b0 <LCD1602_Begin8BIT+0x140>
	{
		LCD1602_writeData(celcius[j]);
 8001398:	4b59      	ldr	r3, [pc, #356]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a5b      	ldr	r2, [pc, #364]	; (800150c <LCD1602_Begin8BIT+0x29c>)
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff55 	bl	8001250 <LCD1602_writeData>
		j++;
 80013a6:	4b56      	ldr	r3, [pc, #344]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a54      	ldr	r2, [pc, #336]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 80013ae:	6013      	str	r3, [r2, #0]
	while(j!=8)
 80013b0:	4b53      	ldr	r3, [pc, #332]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d1ef      	bne.n	8001398 <LCD1602_Begin8BIT+0x128>
	}
	HAL_Delay(2);
 80013b8:	2002      	movs	r0, #2
 80013ba:	f002 fe45 	bl	8004048 <HAL_Delay>

	LCD1602_writeCommand(LCD_SETCGRAMADDR + 24);
 80013be:	2058      	movs	r0, #88	; 0x58
 80013c0:	f7ff ff36 	bl	8001230 <LCD1602_writeCommand>
	j=0;
 80013c4:	4b4e      	ldr	r3, [pc, #312]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
	while(j!=8)
 80013ca:	e00b      	b.n	80013e4 <LCD1602_Begin8BIT+0x174>
	{
		LCD1602_writeData(angle[j]);
 80013cc:	4b4c      	ldr	r3, [pc, #304]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a4f      	ldr	r2, [pc, #316]	; (8001510 <LCD1602_Begin8BIT+0x2a0>)
 80013d2:	5cd3      	ldrb	r3, [r2, r3]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff3b 	bl	8001250 <LCD1602_writeData>
		j++;
 80013da:	4b49      	ldr	r3, [pc, #292]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a47      	ldr	r2, [pc, #284]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 80013e2:	6013      	str	r3, [r2, #0]
	while(j!=8)
 80013e4:	4b46      	ldr	r3, [pc, #280]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d1ef      	bne.n	80013cc <LCD1602_Begin8BIT+0x15c>
	}
	HAL_Delay(2);
 80013ec:	2002      	movs	r0, #2
 80013ee:	f002 fe2b 	bl	8004048 <HAL_Delay>
	LCD1602_writeCommand(LCD_SETCGRAMADDR + 32);
 80013f2:	2060      	movs	r0, #96	; 0x60
 80013f4:	f7ff ff1c 	bl	8001230 <LCD1602_writeCommand>
		j=0;
 80013f8:	4b41      	ldr	r3, [pc, #260]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
		while(j!=8)
 80013fe:	e00b      	b.n	8001418 <LCD1602_Begin8BIT+0x1a8>
		{
			LCD1602_writeData(wifi[j]);
 8001400:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a43      	ldr	r2, [pc, #268]	; (8001514 <LCD1602_Begin8BIT+0x2a4>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff21 	bl	8001250 <LCD1602_writeData>
			j++;
 800140e:	4b3c      	ldr	r3, [pc, #240]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a3a      	ldr	r2, [pc, #232]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001416:	6013      	str	r3, [r2, #0]
		while(j!=8)
 8001418:	4b39      	ldr	r3, [pc, #228]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b08      	cmp	r3, #8
 800141e:	d1ef      	bne.n	8001400 <LCD1602_Begin8BIT+0x190>
		}
		HAL_Delay(2);
 8001420:	2002      	movs	r0, #2
 8001422:	f002 fe11 	bl	8004048 <HAL_Delay>


		LCD1602_writeCommand(LCD_SETCGRAMADDR + 40);
 8001426:	2068      	movs	r0, #104	; 0x68
 8001428:	f7ff ff02 	bl	8001230 <LCD1602_writeCommand>
		j=0;
 800142c:	4b34      	ldr	r3, [pc, #208]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
		while(j!=8)
 8001432:	e00b      	b.n	800144c <LCD1602_Begin8BIT+0x1dc>
		{
			LCD1602_writeData(sdcard[j]);
 8001434:	4b32      	ldr	r3, [pc, #200]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a37      	ldr	r2, [pc, #220]	; (8001518 <LCD1602_Begin8BIT+0x2a8>)
 800143a:	5cd3      	ldrb	r3, [r2, r3]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff07 	bl	8001250 <LCD1602_writeData>
			j++;
 8001442:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a2d      	ldr	r2, [pc, #180]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 800144a:	6013      	str	r3, [r2, #0]
		while(j!=8)
 800144c:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b08      	cmp	r3, #8
 8001452:	d1ef      	bne.n	8001434 <LCD1602_Begin8BIT+0x1c4>
		}
		HAL_Delay(2);
 8001454:	2002      	movs	r0, #2
 8001456:	f002 fdf7 	bl	8004048 <HAL_Delay>

		LCD1602_writeCommand(LCD_SETCGRAMADDR + 48);
 800145a:	2070      	movs	r0, #112	; 0x70
 800145c:	f7ff fee8 	bl	8001230 <LCD1602_writeCommand>
		j=0;
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
		while(j!=8)
 8001466:	e00b      	b.n	8001480 <LCD1602_Begin8BIT+0x210>
		{
			LCD1602_writeData(fan[j]);
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a2b      	ldr	r2, [pc, #172]	; (800151c <LCD1602_Begin8BIT+0x2ac>)
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff feed 	bl	8001250 <LCD1602_writeData>
			j++;
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	4a20      	ldr	r2, [pc, #128]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 800147e:	6013      	str	r3, [r2, #0]
		while(j!=8)
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b08      	cmp	r3, #8
 8001486:	d1ef      	bne.n	8001468 <LCD1602_Begin8BIT+0x1f8>
		}
		HAL_Delay(2);
 8001488:	2002      	movs	r0, #2
 800148a:	f002 fddd 	bl	8004048 <HAL_Delay>

		LCD1602_writeCommand(LCD_SETCGRAMADDR + 56);
 800148e:	2078      	movs	r0, #120	; 0x78
 8001490:	f7ff fece 	bl	8001230 <LCD1602_writeCommand>
		j=0;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
		while(j!=8)
 800149a:	e00b      	b.n	80014b4 <LCD1602_Begin8BIT+0x244>
		{
			LCD1602_writeData(ring[j]);
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1f      	ldr	r2, [pc, #124]	; (8001520 <LCD1602_Begin8BIT+0x2b0>)
 80014a2:	5cd3      	ldrb	r3, [r2, r3]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fed3 	bl	8001250 <LCD1602_writeData>
			j++;
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a13      	ldr	r2, [pc, #76]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 80014b2:	6013      	str	r3, [r2, #0]
		while(j!=8)
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <LCD1602_Begin8BIT+0x290>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d1ef      	bne.n	800149c <LCD1602_Begin8BIT+0x22c>
		}




}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200000ec 	.word	0x200000ec
 80014c8:	200000f0 	.word	0x200000f0
 80014cc:	200000f2 	.word	0x200000f2
 80014d0:	200000f4 	.word	0x200000f4
 80014d4:	200000f8 	.word	0x200000f8
 80014d8:	200000fa 	.word	0x200000fa
 80014dc:	200000fc 	.word	0x200000fc
 80014e0:	200000fe 	.word	0x200000fe
 80014e4:	20000100 	.word	0x20000100
 80014e8:	20000104 	.word	0x20000104
 80014ec:	20000106 	.word	0x20000106
 80014f0:	20000108 	.word	0x20000108
 80014f4:	2000010a 	.word	0x2000010a
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000002 	.word	0x20000002
 8001500:	2000016c 	.word	0x2000016c
 8001504:	20000004 	.word	0x20000004
 8001508:	2000000c 	.word	0x2000000c
 800150c:	20000014 	.word	0x20000014
 8001510:	2000003c 	.word	0x2000003c
 8001514:	2000001c 	.word	0x2000001c
 8001518:	20000024 	.word	0x20000024
 800151c:	2000002c 	.word	0x2000002c
 8001520:	20000034 	.word	0x20000034

08001524 <LCD1602_print>:
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
	HAL_Delay(3);
}
//3) LCD print string
void LCD1602_print(char string[])
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e009      	b.n	8001546 <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fe88 	bl	8001250 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	3301      	adds	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d805      	bhi.n	8001558 <LCD1602_print+0x34>
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1ec      	bne.n	8001532 <LCD1602_print+0xe>
	}
}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <LCD1602_setCursor>:
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	460a      	mov	r2, r1
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 8001570:	79bb      	ldrb	r3, [r7, #6]
 8001572:	3b01      	subs	r3, #1
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d108      	bne.n	8001594 <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001588:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fe4f 	bl	8001230 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}	
 8001592:	e007      	b.n	80015a4 <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800159a:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fe46 	bl	8001230 <LCD1602_writeCommand>
}	
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <LCD1602_noCursor>:
	FunctionSet &= ~(0x08);
	LCD1602_writeCommand(FunctionSet);
}
//6) Cursor ON/OFF
void LCD1602_noCursor(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x02);
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <LCD1602_noCursor+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	f023 0302 	bic.w	r3, r3, #2
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <LCD1602_noCursor+0x20>)
 80015bc:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 80015be:	4b03      	ldr	r3, [pc, #12]	; (80015cc <LCD1602_noCursor+0x20>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fe34 	bl	8001230 <LCD1602_writeCommand>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000001 	.word	0x20000001

080015d0 <LCD1602_clear>:
	DisplayControl |= (0x02);
	LCD1602_writeCommand(DisplayControl);
}
//7) Clear display
void LCD1602_clear(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff fe2b 	bl	8001230 <LCD1602_writeCommand>
	HAL_Delay(3);
 80015da:	2003      	movs	r0, #3
 80015dc:	f002 fd34 	bl	8004048 <HAL_Delay>
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <LCD1602_noBlink>:
//8) Blinking cursor
void LCD1602_noBlink(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x01);
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <LCD1602_noBlink+0x20>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <LCD1602_noBlink+0x20>)
 80015f4:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 80015f6:	4b03      	ldr	r3, [pc, #12]	; (8001604 <LCD1602_noBlink+0x20>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fe18 	bl	8001230 <LCD1602_writeCommand>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000001 	.word	0x20000001

08001608 <LCD1602_PrintInt>:

//********** Print numbers to LCD **********//
//1. Integer

void LCD1602_PrintInt(int number)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	char numStr[16];
	sprintf(numStr,"%d", number);
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	4906      	ldr	r1, [pc, #24]	; (8001630 <LCD1602_PrintInt+0x28>)
 8001618:	4618      	mov	r0, r3
 800161a:	f006 fd63 	bl	80080e4 <siprintf>
	LCD1602_print(numStr);
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff7e 	bl	8001524 <LCD1602_print>
}
 8001628:	bf00      	nop
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	08008d70 	.word	0x08008d70

08001634 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	2140      	movs	r1, #64	; 0x40
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <SELECT+0x14>)
 800163e:	f003 fe75 	bl	800532c <HAL_GPIO_WritePin>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40020400 	.word	0x40020400

0800164c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001650:	2201      	movs	r2, #1
 8001652:	2140      	movs	r1, #64	; 0x40
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <DESELECT+0x14>)
 8001656:	f003 fe69 	bl	800532c <HAL_GPIO_WritePin>
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40020400 	.word	0x40020400

08001664 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 800166e:	bf00      	nop
 8001670:	4808      	ldr	r0, [pc, #32]	; (8001694 <SPI_TxByte+0x30>)
 8001672:	f004 fe41 	bl	80062f8 <HAL_SPI_GetState>
 8001676:	4603      	mov	r3, r0
 8001678:	2b01      	cmp	r3, #1
 800167a:	d1f9      	bne.n	8001670 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 800167c:	1df9      	adds	r1, r7, #7
 800167e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001682:	2201      	movs	r2, #1
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <SPI_TxByte+0x30>)
 8001686:	f004 fb61 	bl	8005d4c <HAL_SPI_Transmit>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000310 	.word	0x20000310

08001698 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800169e:	23ff      	movs	r3, #255	; 0xff
 80016a0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 80016a6:	bf00      	nop
 80016a8:	4809      	ldr	r0, [pc, #36]	; (80016d0 <SPI_RxByte+0x38>)
 80016aa:	f004 fe25 	bl	80062f8 <HAL_SPI_GetState>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d1f9      	bne.n	80016a8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 80016b4:	1dba      	adds	r2, r7, #6
 80016b6:	1df9      	adds	r1, r7, #7
 80016b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2301      	movs	r3, #1
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <SPI_RxByte+0x38>)
 80016c2:	f004 fc77 	bl	8005fb4 <HAL_SPI_TransmitReceive>
  
  return data;
 80016c6:	79bb      	ldrb	r3, [r7, #6]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000310 	.word	0x20000310

080016d4 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80016dc:	f7ff ffdc 	bl	8001698 <SPI_RxByte>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	701a      	strb	r2, [r3, #0]
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <SD_ReadyWait+0x34>)
 80016f8:	2232      	movs	r2, #50	; 0x32
 80016fa:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 80016fc:	f7ff ffcc 	bl	8001698 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8001700:	f7ff ffca 	bl	8001698 <SPI_RxByte>
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2bff      	cmp	r3, #255	; 0xff
 800170c:	d004      	beq.n	8001718 <SD_ReadyWait+0x28>
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SD_ReadyWait+0x34>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f3      	bne.n	8001700 <SD_ReadyWait+0x10>
  
  return res;
 8001718:	79fb      	ldrb	r3, [r7, #7]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200005a0 	.word	0x200005a0

08001728 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800172e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001732:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8001734:	f7ff ff8a 	bl	800164c <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	e005      	b.n	800174a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800173e:	20ff      	movs	r0, #255	; 0xff
 8001740:	f7ff ff90 	bl	8001664 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	3301      	adds	r3, #1
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	2b09      	cmp	r3, #9
 800174e:	ddf6      	ble.n	800173e <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8001750:	f7ff ff70 	bl	8001634 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8001754:	2340      	movs	r3, #64	; 0x40
 8001756:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001768:	2395      	movs	r3, #149	; 0x95
 800176a:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e009      	b.n	8001786 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001772:	1d3a      	adds	r2, r7, #4
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff72 	bl	8001664 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b05      	cmp	r3, #5
 800178a:	ddf2      	ble.n	8001772 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 800178c:	e002      	b.n	8001794 <SD_PowerOn+0x6c>
  {
    Count--;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3b01      	subs	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001794:	f7ff ff80 	bl	8001698 <SPI_RxByte>
 8001798:	4603      	mov	r3, r0
 800179a:	2b01      	cmp	r3, #1
 800179c:	d002      	beq.n	80017a4 <SD_PowerOn+0x7c>
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f4      	bne.n	800178e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80017a4:	f7ff ff52 	bl	800164c <DESELECT>
  SPI_TxByte(0XFF);
 80017a8:	20ff      	movs	r0, #255	; 0xff
 80017aa:	f7ff ff5b 	bl	8001664 <SPI_TxByte>
  
  PowerFlag = 1;
 80017ae:	4b03      	ldr	r3, [pc, #12]	; (80017bc <SD_PowerOn+0x94>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2000010d 	.word	0x2000010d

080017c0 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <SD_PowerOff+0x14>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	2000010d 	.word	0x2000010d

080017d8 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <SD_CheckPower+0x14>)
 80017de:	781b      	ldrb	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	2000010d 	.word	0x2000010d

080017f0 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <SD_RxDataBlock+0x68>)
 80017fc:	220a      	movs	r2, #10
 80017fe:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001800:	f7ff ff4a 	bl	8001698 <SPI_RxByte>
 8001804:	4603      	mov	r3, r0
 8001806:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2bff      	cmp	r3, #255	; 0xff
 800180c:	d104      	bne.n	8001818 <SD_RxDataBlock+0x28>
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <SD_RxDataBlock+0x68>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	2bfe      	cmp	r3, #254	; 0xfe
 800181c:	d001      	beq.n	8001822 <SD_RxDataBlock+0x32>
    return FALSE;
 800181e:	2300      	movs	r3, #0
 8001820:	e016      	b.n	8001850 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff53 	bl	80016d4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff4d 	bl	80016d4 <SPI_RxBytePtr>
  } while(btr -= 2);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	3b02      	subs	r3, #2
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1ed      	bne.n	8001822 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8001846:	f7ff ff27 	bl	8001698 <SPI_RxByte>
  SPI_RxByte();
 800184a:	f7ff ff25 	bl	8001698 <SPI_RxByte>
  
  return TRUE;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200005a1 	.word	0x200005a1

0800185c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800186c:	f7ff ff40 	bl	80016f0 <SD_ReadyWait>
 8001870:	4603      	mov	r3, r0
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d001      	beq.n	800187a <SD_TxDataBlock+0x1e>
    return FALSE;
 8001876:	2300      	movs	r3, #0
 8001878:	e040      	b.n	80018fc <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fef1 	bl	8001664 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	2bfd      	cmp	r3, #253	; 0xfd
 8001886:	d031      	beq.n	80018ec <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fee5 	bl	8001664 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fede 	bl	8001664 <SPI_TxByte>
    } while (--wc);
 80018a8:	7bbb      	ldrb	r3, [r7, #14]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	73bb      	strb	r3, [r7, #14]
 80018ae:	7bbb      	ldrb	r3, [r7, #14]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1eb      	bne.n	800188c <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80018b4:	f7ff fef0 	bl	8001698 <SPI_RxByte>
    SPI_RxByte();
 80018b8:	f7ff feee 	bl	8001698 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80018bc:	e00b      	b.n	80018d6 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80018be:	f7ff feeb 	bl	8001698 <SPI_RxByte>
 80018c2:	4603      	mov	r3, r0
 80018c4:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d006      	beq.n	80018de <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80018d0:	7b7b      	ldrb	r3, [r7, #13]
 80018d2:	3301      	adds	r3, #1
 80018d4:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80018d6:	7b7b      	ldrb	r3, [r7, #13]
 80018d8:	2b40      	cmp	r3, #64	; 0x40
 80018da:	d9f0      	bls.n	80018be <SD_TxDataBlock+0x62>
 80018dc:	e000      	b.n	80018e0 <SD_TxDataBlock+0x84>
        break;
 80018de:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80018e0:	bf00      	nop
 80018e2:	f7ff fed9 	bl	8001698 <SPI_RxByte>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0fa      	beq.n	80018e2 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	f003 031f 	and.w	r3, r3, #31
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d101      	bne.n	80018fa <SD_TxDataBlock+0x9e>
    return TRUE;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001910:	f7ff feee 	bl	80016f0 <SD_ReadyWait>
 8001914:	4603      	mov	r3, r0
 8001916:	2bff      	cmp	r3, #255	; 0xff
 8001918:	d001      	beq.n	800191e <SD_SendCmd+0x1a>
    return 0xFF;
 800191a:	23ff      	movs	r3, #255	; 0xff
 800191c:	e040      	b.n	80019a0 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fe9f 	bl	8001664 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	0e1b      	lsrs	r3, r3, #24
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fe99 	bl	8001664 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	b2db      	uxtb	r3, r3
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fe93 	bl	8001664 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fe8d 	bl	8001664 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fe88 	bl	8001664 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	2b40      	cmp	r3, #64	; 0x40
 800195c:	d101      	bne.n	8001962 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800195e:	2395      	movs	r3, #149	; 0x95
 8001960:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	2b48      	cmp	r3, #72	; 0x48
 8001966:	d101      	bne.n	800196c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001968:	2387      	movs	r3, #135	; 0x87
 800196a:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fe78 	bl	8001664 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	2b4c      	cmp	r3, #76	; 0x4c
 8001978:	d101      	bne.n	800197e <SD_SendCmd+0x7a>
    SPI_RxByte();
 800197a:	f7ff fe8d 	bl	8001698 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800197e:	230a      	movs	r3, #10
 8001980:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001982:	f7ff fe89 	bl	8001698 <SPI_RxByte>
 8001986:	4603      	mov	r3, r0
 8001988:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800198a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800198e:	2b00      	cmp	r3, #0
 8001990:	da05      	bge.n	800199e <SD_SendCmd+0x9a>
 8001992:	7bbb      	ldrb	r3, [r7, #14]
 8001994:	3b01      	subs	r3, #1
 8001996:	73bb      	strb	r3, [r7, #14]
 8001998:	7bbb      	ldrb	r3, [r7, #14]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f1      	bne.n	8001982 <SD_SendCmd+0x7e>
  
  return res;
 800199e:	7b7b      	ldrb	r3, [r7, #13]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0d5      	b.n	8001b68 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80019bc:	4b6c      	ldr	r3, [pc, #432]	; (8001b70 <SD_disk_initialize+0x1c8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <SD_disk_initialize+0x2a>
    return Stat;        
 80019ca:	4b69      	ldr	r3, [pc, #420]	; (8001b70 <SD_disk_initialize+0x1c8>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	e0ca      	b.n	8001b68 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 80019d2:	f7ff fea9 	bl	8001728 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 80019d6:	f7ff fe2d 	bl	8001634 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 80019de:	2100      	movs	r1, #0
 80019e0:	2040      	movs	r0, #64	; 0x40
 80019e2:	f7ff ff8f 	bl	8001904 <SD_SendCmd>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	f040 80a5 	bne.w	8001b38 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80019ee:	4b61      	ldr	r3, [pc, #388]	; (8001b74 <SD_disk_initialize+0x1cc>)
 80019f0:	2264      	movs	r2, #100	; 0x64
 80019f2:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80019f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80019f8:	2048      	movs	r0, #72	; 0x48
 80019fa:	f7ff ff83 	bl	8001904 <SD_SendCmd>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d158      	bne.n	8001ab6 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
 8001a08:	e00c      	b.n	8001a24 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001a0a:	7bfc      	ldrb	r4, [r7, #15]
 8001a0c:	f7ff fe44 	bl	8001698 <SPI_RxByte>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4423      	add	r3, r4
 8001a1a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	3301      	adds	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d9ef      	bls.n	8001a0a <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001a2a:	7abb      	ldrb	r3, [r7, #10]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	f040 8083 	bne.w	8001b38 <SD_disk_initialize+0x190>
 8001a32:	7afb      	ldrb	r3, [r7, #11]
 8001a34:	2baa      	cmp	r3, #170	; 0xaa
 8001a36:	d17f      	bne.n	8001b38 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2077      	movs	r0, #119	; 0x77
 8001a3c:	f7ff ff62 	bl	8001904 <SD_SendCmd>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d807      	bhi.n	8001a56 <SD_disk_initialize+0xae>
 8001a46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a4a:	2069      	movs	r0, #105	; 0x69
 8001a4c:	f7ff ff5a 	bl	8001904 <SD_SendCmd>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <SD_disk_initialize+0x1cc>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1eb      	bne.n	8001a38 <SD_disk_initialize+0x90>
 8001a60:	e000      	b.n	8001a64 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001a62:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001a64:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <SD_disk_initialize+0x1cc>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d064      	beq.n	8001b38 <SD_disk_initialize+0x190>
 8001a6e:	2100      	movs	r1, #0
 8001a70:	207a      	movs	r0, #122	; 0x7a
 8001a72:	f7ff ff47 	bl	8001904 <SD_SendCmd>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d15d      	bne.n	8001b38 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e00c      	b.n	8001a9c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001a82:	7bfc      	ldrb	r4, [r7, #15]
 8001a84:	f7ff fe08 	bl	8001698 <SPI_RxByte>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4423      	add	r3, r4
 8001a92:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d9ef      	bls.n	8001a82 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001aa2:	7a3b      	ldrb	r3, [r7, #8]
 8001aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SD_disk_initialize+0x108>
 8001aac:	2306      	movs	r3, #6
 8001aae:	e000      	b.n	8001ab2 <SD_disk_initialize+0x10a>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	73bb      	strb	r3, [r7, #14]
 8001ab4:	e040      	b.n	8001b38 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2077      	movs	r0, #119	; 0x77
 8001aba:	f7ff ff23 	bl	8001904 <SD_SendCmd>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d808      	bhi.n	8001ad6 <SD_disk_initialize+0x12e>
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2069      	movs	r0, #105	; 0x69
 8001ac8:	f7ff ff1c 	bl	8001904 <SD_SendCmd>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d801      	bhi.n	8001ad6 <SD_disk_initialize+0x12e>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e000      	b.n	8001ad8 <SD_disk_initialize+0x130>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001ada:	7bbb      	ldrb	r3, [r7, #14]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d10e      	bne.n	8001afe <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2077      	movs	r0, #119	; 0x77
 8001ae4:	f7ff ff0e 	bl	8001904 <SD_SendCmd>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d80e      	bhi.n	8001b0c <SD_disk_initialize+0x164>
 8001aee:	2100      	movs	r1, #0
 8001af0:	2069      	movs	r0, #105	; 0x69
 8001af2:	f7ff ff07 	bl	8001904 <SD_SendCmd>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d107      	bne.n	8001b0c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001afc:	e00d      	b.n	8001b1a <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001afe:	2100      	movs	r1, #0
 8001b00:	2041      	movs	r0, #65	; 0x41
 8001b02:	f7ff feff 	bl	8001904 <SD_SendCmd>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <SD_disk_initialize+0x1cc>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1e1      	bne.n	8001ada <SD_disk_initialize+0x132>
 8001b16:	e000      	b.n	8001b1a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001b18:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <SD_disk_initialize+0x1cc>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d007      	beq.n	8001b34 <SD_disk_initialize+0x18c>
 8001b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b28:	2050      	movs	r0, #80	; 0x50
 8001b2a:	f7ff feeb 	bl	8001904 <SD_SendCmd>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001b38:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <SD_disk_initialize+0x1d0>)
 8001b3a:	7bbb      	ldrb	r3, [r7, #14]
 8001b3c:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001b3e:	f7ff fd85 	bl	800164c <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001b42:	f7ff fda9 	bl	8001698 <SPI_RxByte>
  
  if (type) 
 8001b46:	7bbb      	ldrb	r3, [r7, #14]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <SD_disk_initialize+0x1c8>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f023 0301 	bic.w	r3, r3, #1
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <SD_disk_initialize+0x1c8>)
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	e001      	b.n	8001b62 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001b5e:	f7ff fe2f 	bl	80017c0 <SD_PowerOff>
  }
  
  return Stat;
 8001b62:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <SD_disk_initialize+0x1c8>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b2db      	uxtb	r3, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd90      	pop	{r4, r7, pc}
 8001b70:	20000044 	.word	0x20000044
 8001b74:	200005a1 	.word	0x200005a1
 8001b78:	2000010c 	.word	0x2000010c

08001b7c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e002      	b.n	8001b96 <SD_disk_status+0x1a>
  
  return Stat;
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <SD_disk_status+0x28>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	b2db      	uxtb	r3, r3
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000044 	.word	0x20000044

08001ba8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <SD_disk_read+0x1c>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <SD_disk_read+0x20>
    return RES_PARERR;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	e051      	b.n	8001c6c <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <SD_disk_read+0xcc>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e048      	b.n	8001c6c <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001bda:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <SD_disk_read+0xd0>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	025b      	lsls	r3, r3, #9
 8001bea:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001bec:	f7ff fd22 	bl	8001634 <SELECT>
  
  if (count == 1) 
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d111      	bne.n	8001c1a <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	2051      	movs	r0, #81	; 0x51
 8001bfa:	f7ff fe83 	bl	8001904 <SD_SendCmd>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d129      	bne.n	8001c58 <SD_disk_read+0xb0>
 8001c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c08:	68b8      	ldr	r0, [r7, #8]
 8001c0a:	f7ff fdf1 	bl	80017f0 <SD_RxDataBlock>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d021      	beq.n	8001c58 <SD_disk_read+0xb0>
      count = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	e01e      	b.n	8001c58 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	2052      	movs	r0, #82	; 0x52
 8001c1e:	f7ff fe71 	bl	8001904 <SD_SendCmd>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d117      	bne.n	8001c58 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c2c:	68b8      	ldr	r0, [r7, #8]
 8001c2e:	f7ff fddf 	bl	80017f0 <SD_RxDataBlock>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00a      	beq.n	8001c4e <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c3e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1ed      	bne.n	8001c28 <SD_disk_read+0x80>
 8001c4c:	e000      	b.n	8001c50 <SD_disk_read+0xa8>
          break;
 8001c4e:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001c50:	2100      	movs	r1, #0
 8001c52:	204c      	movs	r0, #76	; 0x4c
 8001c54:	f7ff fe56 	bl	8001904 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001c58:	f7ff fcf8 	bl	800164c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001c5c:	f7ff fd1c 	bl	8001698 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000044 	.word	0x20000044
 8001c78:	2000010c 	.word	0x2000010c

08001c7c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <SD_disk_write+0x1c>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <SD_disk_write+0x20>
    return RES_PARERR;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	e06b      	b.n	8001d74 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001c9c:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <SD_disk_write+0x100>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e062      	b.n	8001d74 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001cae:	4b33      	ldr	r3, [pc, #204]	; (8001d7c <SD_disk_write+0x100>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e059      	b.n	8001d74 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <SD_disk_write+0x104>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	025b      	lsls	r3, r3, #9
 8001cd0:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001cd2:	f7ff fcaf 	bl	8001634 <SELECT>
  
  if (count == 1) 
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d110      	bne.n	8001cfe <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	2058      	movs	r0, #88	; 0x58
 8001ce0:	f7ff fe10 	bl	8001904 <SD_SendCmd>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d13a      	bne.n	8001d60 <SD_disk_write+0xe4>
 8001cea:	21fe      	movs	r1, #254	; 0xfe
 8001cec:	68b8      	ldr	r0, [r7, #8]
 8001cee:	f7ff fdb5 	bl	800185c <SD_TxDataBlock>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d033      	beq.n	8001d60 <SD_disk_write+0xe4>
      count = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	e030      	b.n	8001d60 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <SD_disk_write+0x104>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2077      	movs	r0, #119	; 0x77
 8001d0e:	f7ff fdf9 	bl	8001904 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001d12:	6839      	ldr	r1, [r7, #0]
 8001d14:	2057      	movs	r0, #87	; 0x57
 8001d16:	f7ff fdf5 	bl	8001904 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	2059      	movs	r0, #89	; 0x59
 8001d1e:	f7ff fdf1 	bl	8001904 <SD_SendCmd>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d11b      	bne.n	8001d60 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001d28:	21fc      	movs	r1, #252	; 0xfc
 8001d2a:	68b8      	ldr	r0, [r7, #8]
 8001d2c:	f7ff fd96 	bl	800185c <SD_TxDataBlock>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00a      	beq.n	8001d4c <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d3c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1ee      	bne.n	8001d28 <SD_disk_write+0xac>
 8001d4a:	e000      	b.n	8001d4e <SD_disk_write+0xd2>
          break;
 8001d4c:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001d4e:	21fd      	movs	r1, #253	; 0xfd
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fd83 	bl	800185c <SD_TxDataBlock>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <SD_disk_write+0xe4>
      {        
        count = 1;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001d60:	f7ff fc74 	bl	800164c <DESELECT>
  SPI_RxByte();
 8001d64:	f7ff fc98 	bl	8001698 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf14      	ite	ne
 8001d6e:	2301      	movne	r3, #1
 8001d70:	2300      	moveq	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000044 	.word	0x20000044
 8001d80:	2000010c 	.word	0x2000010c

08001d84 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b08b      	sub	sp, #44	; 0x2c
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	603a      	str	r2, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	460b      	mov	r3, r1
 8001d92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	e117      	b.n	8001fd2 <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001da8:	79bb      	ldrb	r3, [r7, #6]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d126      	bne.n	8001dfc <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d00e      	beq.n	8001dd4 <SD_disk_ioctl+0x50>
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d012      	beq.n	8001de0 <SD_disk_ioctl+0x5c>
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d11a      	bne.n	8001df4 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8001dbe:	f7ff fd0b 	bl	80017d8 <SD_CheckPower>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8001dc8:	f7ff fcfa 	bl	80017c0 <SD_PowerOff>
      res = RES_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001dd2:	e0fc      	b.n	8001fce <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8001dd4:	f7ff fca8 	bl	8001728 <SD_PowerOn>
      res = RES_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001dde:	e0f6      	b.n	8001fce <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	1c5c      	adds	r4, r3, #1
 8001de4:	f7ff fcf8 	bl	80017d8 <SD_CheckPower>
 8001de8:	4603      	mov	r3, r0
 8001dea:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001dec:	2300      	movs	r3, #0
 8001dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001df2:	e0ec      	b.n	8001fce <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8001df4:	2304      	movs	r3, #4
 8001df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001dfa:	e0e8      	b.n	8001fce <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001dfc:	4b77      	ldr	r3, [pc, #476]	; (8001fdc <SD_disk_ioctl+0x258>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e0e1      	b.n	8001fd2 <SD_disk_ioctl+0x24e>
    
    SELECT();
 8001e0e:	f7ff fc11 	bl	8001634 <SELECT>
    
    switch (ctrl) 
 8001e12:	79bb      	ldrb	r3, [r7, #6]
 8001e14:	2b0d      	cmp	r3, #13
 8001e16:	f200 80cb 	bhi.w	8001fb0 <SD_disk_ioctl+0x22c>
 8001e1a:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <SD_disk_ioctl+0x9c>)
 8001e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e20:	08001f1b 	.word	0x08001f1b
 8001e24:	08001e59 	.word	0x08001e59
 8001e28:	08001f0b 	.word	0x08001f0b
 8001e2c:	08001fb1 	.word	0x08001fb1
 8001e30:	08001fb1 	.word	0x08001fb1
 8001e34:	08001fb1 	.word	0x08001fb1
 8001e38:	08001fb1 	.word	0x08001fb1
 8001e3c:	08001fb1 	.word	0x08001fb1
 8001e40:	08001fb1 	.word	0x08001fb1
 8001e44:	08001fb1 	.word	0x08001fb1
 8001e48:	08001fb1 	.word	0x08001fb1
 8001e4c:	08001f2d 	.word	0x08001f2d
 8001e50:	08001f51 	.word	0x08001f51
 8001e54:	08001f75 	.word	0x08001f75
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2049      	movs	r0, #73	; 0x49
 8001e5c:	f7ff fd52 	bl	8001904 <SD_SendCmd>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 80a8 	bne.w	8001fb8 <SD_disk_ioctl+0x234>
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fcbe 	bl	80017f0 <SD_RxDataBlock>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 809e 	beq.w	8001fb8 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8001e7c:	7b3b      	ldrb	r3, [r7, #12]
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10e      	bne.n	8001ea4 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001e86:	7d7b      	ldrb	r3, [r7, #21]
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	7d3b      	ldrb	r3, [r7, #20]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001e9a:	8bfb      	ldrh	r3, [r7, #30]
 8001e9c:	029a      	lsls	r2, r3, #10
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e02e      	b.n	8001f02 <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001ea4:	7c7b      	ldrb	r3, [r7, #17]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	7dbb      	ldrb	r3, [r7, #22]
 8001eae:	09db      	lsrs	r3, r3, #7
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	7d7b      	ldrb	r3, [r7, #21]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f003 0306 	and.w	r3, r3, #6
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001ecc:	7d3b      	ldrb	r3, [r7, #20]
 8001ece:	099b      	lsrs	r3, r3, #6
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	7cbb      	ldrb	r3, [r7, #18]
 8001ee2:	029b      	lsls	r3, r3, #10
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001ef4:	8bfa      	ldrh	r2, [r7, #30]
 8001ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001efa:	3b09      	subs	r3, #9
 8001efc:	409a      	lsls	r2, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001f08:	e056      	b.n	8001fb8 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f10:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f18:	e055      	b.n	8001fc6 <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001f1a:	f7ff fbe9 	bl	80016f0 <SD_ReadyWait>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2bff      	cmp	r3, #255	; 0xff
 8001f22:	d14b      	bne.n	8001fbc <SD_disk_ioctl+0x238>
        res = RES_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f2a:	e047      	b.n	8001fbc <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2049      	movs	r0, #73	; 0x49
 8001f30:	f7ff fce8 	bl	8001904 <SD_SendCmd>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d142      	bne.n	8001fc0 <SD_disk_ioctl+0x23c>
 8001f3a:	2110      	movs	r1, #16
 8001f3c:	6a38      	ldr	r0, [r7, #32]
 8001f3e:	f7ff fc57 	bl	80017f0 <SD_RxDataBlock>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d03b      	beq.n	8001fc0 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f4e:	e037      	b.n	8001fc0 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001f50:	2100      	movs	r1, #0
 8001f52:	204a      	movs	r0, #74	; 0x4a
 8001f54:	f7ff fcd6 	bl	8001904 <SD_SendCmd>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d132      	bne.n	8001fc4 <SD_disk_ioctl+0x240>
 8001f5e:	2110      	movs	r1, #16
 8001f60:	6a38      	ldr	r0, [r7, #32]
 8001f62:	f7ff fc45 	bl	80017f0 <SD_RxDataBlock>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d02b      	beq.n	8001fc4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f72:	e027      	b.n	8001fc4 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001f74:	2100      	movs	r1, #0
 8001f76:	207a      	movs	r0, #122	; 0x7a
 8001f78:	f7ff fcc4 	bl	8001904 <SD_SendCmd>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d116      	bne.n	8001fb0 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f88:	e00b      	b.n	8001fa2 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8001f8a:	6a3c      	ldr	r4, [r7, #32]
 8001f8c:	1c63      	adds	r3, r4, #1
 8001f8e:	623b      	str	r3, [r7, #32]
 8001f90:	f7ff fb82 	bl	8001698 <SPI_RxByte>
 8001f94:	4603      	mov	r3, r0
 8001f96:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001f98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d9ef      	bls.n	8001f8a <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fb6:	e006      	b.n	8001fc6 <SD_disk_ioctl+0x242>
      break;
 8001fb8:	bf00      	nop
 8001fba:	e004      	b.n	8001fc6 <SD_disk_ioctl+0x242>
      break;
 8001fbc:	bf00      	nop
 8001fbe:	e002      	b.n	8001fc6 <SD_disk_ioctl+0x242>
      break;
 8001fc0:	bf00      	nop
 8001fc2:	e000      	b.n	8001fc6 <SD_disk_ioctl+0x242>
      break;
 8001fc4:	bf00      	nop
    }
    
    DESELECT();
 8001fc6:	f7ff fb41 	bl	800164c <DESELECT>
    SPI_RxByte();
 8001fca:	f7ff fb65 	bl	8001698 <SPI_RxByte>
  }
  
  return res;
 8001fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	372c      	adds	r7, #44	; 0x2c
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000044 	.word	0x20000044

08001fe0 <Servo_Angle>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Servo_Angle(int servoAngle)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	if(servoAngle<=0)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	dc01      	bgt.n	8001ff2 <Servo_Angle+0x12>
	{
		servoAngle=0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
	}
	if(servoAngle>=180)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2bb3      	cmp	r3, #179	; 0xb3
 8001ff6:	dd01      	ble.n	8001ffc <Servo_Angle+0x1c>
	{
		servoAngle=180;
 8001ff8:	23b4      	movs	r3, #180	; 0xb4
 8001ffa:	607b      	str	r3, [r7, #4]
	}

	servoAngle=servoAngle+45;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	332d      	adds	r3, #45	; 0x2d
 8002000:	607b      	str	r3, [r7, #4]
	servoTask=servoAngle;
 8002002:	4a06      	ldr	r2, [pc, #24]	; (800201c <Servo_Angle+0x3c>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1,servoAngle);
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <Servo_Angle+0x40>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	20000184 	.word	0x20000184
 8002020:	200002d0 	.word	0x200002d0

08002024 <set_rgb>:
  		     Unmount_SD("/");

  	  }

void set_rgb (uint8_t red,uint8_t blue,uint8_t green)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
 800202e:	460b      	mov	r3, r1
 8002030:	71bb      	strb	r3, [r7, #6]
 8002032:	4613      	mov	r3, r2
 8002034:	717b      	strb	r3, [r7, #5]
	htim4.Instance->CCR1=red;
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <set_rgb+0x38>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	79fa      	ldrb	r2, [r7, #7]
 800203c:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2=blue;
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <set_rgb+0x38>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	79ba      	ldrb	r2, [r7, #6]
 8002044:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3=green;
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <set_rgb+0x38>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	797a      	ldrb	r2, [r7, #5]
 800204c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000288 	.word	0x20000288

08002060 <rgbCommand>:

void rgbCommand(void)
{
 8002060:	b598      	push	{r3, r4, r7, lr}
 8002062:	af00      	add	r7, sp, #0
	if( tempAvg>=500 || tempValue[0]>=500
 8002064:	4b44      	ldr	r3, [pc, #272]	; (8002178 <rgbCommand+0x118>)
 8002066:	e9d3 0100 	ldrd	r0, r1, [r3]
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	4b43      	ldr	r3, [pc, #268]	; (800217c <rgbCommand+0x11c>)
 8002070:	f7fe fd40 	bl	8000af4 <__aeabi_dcmpge>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d122      	bne.n	80020c0 <rgbCommand+0x60>
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <rgbCommand+0x120>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002082:	da1d      	bge.n	80020c0 <rgbCommand+0x60>
				|| tempValue[1]>=500 || tempValue[2]>=500 || tempValue[3]>=500
 8002084:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <rgbCommand+0x120>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800208c:	da18      	bge.n	80020c0 <rgbCommand+0x60>
 800208e:	4b3c      	ldr	r3, [pc, #240]	; (8002180 <rgbCommand+0x120>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002096:	da13      	bge.n	80020c0 <rgbCommand+0x60>
 8002098:	4b39      	ldr	r3, [pc, #228]	; (8002180 <rgbCommand+0x120>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020a0:	da0e      	bge.n	80020c0 <rgbCommand+0x60>
				|| tempValue[4]>=500 || tempValue[5]>=500 || tempValue[6]>=500 )
 80020a2:	4b37      	ldr	r3, [pc, #220]	; (8002180 <rgbCommand+0x120>)
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020aa:	da09      	bge.n	80020c0 <rgbCommand+0x60>
 80020ac:	4b34      	ldr	r3, [pc, #208]	; (8002180 <rgbCommand+0x120>)
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020b4:	da04      	bge.n	80020c0 <rgbCommand+0x60>
 80020b6:	4b32      	ldr	r3, [pc, #200]	; (8002180 <rgbCommand+0x120>)
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020be:	db0b      	blt.n	80020d8 <rgbCommand+0x78>
		{
			tempAvgRgb=255;
 80020c0:	4b30      	ldr	r3, [pc, #192]	; (8002184 <rgbCommand+0x124>)
 80020c2:	22ff      	movs	r2, #255	; 0xff
 80020c4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80020c6:	2201      	movs	r2, #1
 80020c8:	2104      	movs	r1, #4
 80020ca:	482f      	ldr	r0, [pc, #188]	; (8002188 <rgbCommand+0x128>)
 80020cc:	f003 f92e 	bl	800532c <HAL_GPIO_WritePin>
			fanInt=1;
 80020d0:	4b2e      	ldr	r3, [pc, #184]	; (800218c <rgbCommand+0x12c>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e031      	b.n	800213c <rgbCommand+0xdc>
		}

	else
	{
		tempAvgRgb=(tempAvg-200)*255/300;
 80020d8:	4b27      	ldr	r3, [pc, #156]	; (8002178 <rgbCommand+0x118>)
 80020da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <rgbCommand+0x130>)
 80020e4:	f7fe f8c8 	bl	8000278 <__aeabi_dsub>
 80020e8:	4603      	mov	r3, r0
 80020ea:	460c      	mov	r4, r1
 80020ec:	4618      	mov	r0, r3
 80020ee:	4621      	mov	r1, r4
 80020f0:	a31d      	add	r3, pc, #116	; (adr r3, 8002168 <rgbCommand+0x108>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	f7fe fa77 	bl	80005e8 <__aeabi_dmul>
 80020fa:	4603      	mov	r3, r0
 80020fc:	460c      	mov	r4, r1
 80020fe:	4618      	mov	r0, r3
 8002100:	4621      	mov	r1, r4
 8002102:	a31b      	add	r3, pc, #108	; (adr r3, 8002170 <rgbCommand+0x110>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe fb98 	bl	800083c <__aeabi_ddiv>
 800210c:	4603      	mov	r3, r0
 800210e:	460c      	mov	r4, r1
 8002110:	4618      	mov	r0, r3
 8002112:	4621      	mov	r1, r4
 8002114:	f7fe fd18 	bl	8000b48 <__aeabi_d2iz>
 8002118:	4602      	mov	r2, r0
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <rgbCommand+0x124>)
 800211c:	601a      	str	r2, [r3, #0]
		if(tempAvgRgb<0)
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <rgbCommand+0x124>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	da02      	bge.n	800212c <rgbCommand+0xcc>
		{
			tempAvgRgb=0;
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <rgbCommand+0x124>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
		}
		fanInt=0;
 800212c:	4b17      	ldr	r3, [pc, #92]	; (800218c <rgbCommand+0x12c>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002132:	2200      	movs	r2, #0
 8002134:	2104      	movs	r1, #4
 8002136:	4814      	ldr	r0, [pc, #80]	; (8002188 <rgbCommand+0x128>)
 8002138:	f003 f8f8 	bl	800532c <HAL_GPIO_WritePin>
	}

	rgbDataRed=tempAvgRgb;  // 50 derecede 255
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <rgbCommand+0x124>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <rgbCommand+0x134>)
 8002142:	6013      	str	r3, [r2, #0]
	rgbDataBlue=255-tempAvgRgb;	// 50 derecede 1
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <rgbCommand+0x124>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800214c:	4a12      	ldr	r2, [pc, #72]	; (8002198 <rgbCommand+0x138>)
 800214e:	6013      	str	r3, [r2, #0]

	set_rgb(rgbDataRed,rgbDataBlue,0);
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <rgbCommand+0x134>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	b2d8      	uxtb	r0, r3
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <rgbCommand+0x138>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2200      	movs	r2, #0
 800215e:	4619      	mov	r1, r3
 8002160:	f7ff ff60 	bl	8002024 <set_rgb>



}
 8002164:	bf00      	nop
 8002166:	bd98      	pop	{r3, r4, r7, pc}
 8002168:	00000000 	.word	0x00000000
 800216c:	406fe000 	.word	0x406fe000
 8002170:	00000000 	.word	0x00000000
 8002174:	4072c000 	.word	0x4072c000
 8002178:	20000178 	.word	0x20000178
 800217c:	407f4000 	.word	0x407f4000
 8002180:	20000418 	.word	0x20000418
 8002184:	20000170 	.word	0x20000170
 8002188:	40020c00 	.word	0x40020c00
 800218c:	200001a4 	.word	0x200001a4
 8002190:	40690000 	.word	0x40690000
 8002194:	20000110 	.word	0x20000110
 8002198:	20000114 	.word	0x20000114

0800219c <rgbAnimation>:

void rgbAnimation(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	for(i=0;i<=255;i++)
 80021a0:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <rgbAnimation+0x144>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	e01f      	b.n	80021e8 <rgbAnimation+0x4c>
	{
		set_rgb(i,255-i,0);
 80021a8:	4b4d      	ldr	r3, [pc, #308]	; (80022e0 <rgbAnimation+0x144>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	b2d8      	uxtb	r0, r3
 80021ae:	4b4c      	ldr	r3, [pc, #304]	; (80022e0 <rgbAnimation+0x144>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2200      	movs	r2, #0
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7ff ff32 	bl	8002024 <set_rgb>
		for(j=0;j<=5000;j++);
 80021c0:	4b48      	ldr	r3, [pc, #288]	; (80022e4 <rgbAnimation+0x148>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	e004      	b.n	80021d2 <rgbAnimation+0x36>
 80021c8:	4b46      	ldr	r3, [pc, #280]	; (80022e4 <rgbAnimation+0x148>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3301      	adds	r3, #1
 80021ce:	4a45      	ldr	r2, [pc, #276]	; (80022e4 <rgbAnimation+0x148>)
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <rgbAnimation+0x148>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	ddf4      	ble.n	80021c8 <rgbAnimation+0x2c>
	for(i=0;i<=255;i++)
 80021de:	4b40      	ldr	r3, [pc, #256]	; (80022e0 <rgbAnimation+0x144>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	4a3e      	ldr	r2, [pc, #248]	; (80022e0 <rgbAnimation+0x144>)
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b3d      	ldr	r3, [pc, #244]	; (80022e0 <rgbAnimation+0x144>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2bff      	cmp	r3, #255	; 0xff
 80021ee:	dddb      	ble.n	80021a8 <rgbAnimation+0xc>
	}
	for(i=0;i<=255;i++)
 80021f0:	4b3b      	ldr	r3, [pc, #236]	; (80022e0 <rgbAnimation+0x144>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e01f      	b.n	8002238 <rgbAnimation+0x9c>
	{
		set_rgb(255-i,i,0);
 80021f8:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <rgbAnimation+0x144>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	b2d8      	uxtb	r0, r3
 8002202:	4b37      	ldr	r3, [pc, #220]	; (80022e0 <rgbAnimation+0x144>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2200      	movs	r2, #0
 800220a:	4619      	mov	r1, r3
 800220c:	f7ff ff0a 	bl	8002024 <set_rgb>
		for(j=0;j<=5000;j++);
 8002210:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <rgbAnimation+0x148>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	e004      	b.n	8002222 <rgbAnimation+0x86>
 8002218:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <rgbAnimation+0x148>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3301      	adds	r3, #1
 800221e:	4a31      	ldr	r2, [pc, #196]	; (80022e4 <rgbAnimation+0x148>)
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <rgbAnimation+0x148>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f241 3288 	movw	r2, #5000	; 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	ddf4      	ble.n	8002218 <rgbAnimation+0x7c>
	for(i=0;i<=255;i++)
 800222e:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <rgbAnimation+0x144>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3301      	adds	r3, #1
 8002234:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <rgbAnimation+0x144>)
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <rgbAnimation+0x144>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2bff      	cmp	r3, #255	; 0xff
 800223e:	dddb      	ble.n	80021f8 <rgbAnimation+0x5c>
	}
	for(i=0;i<=255;i++)
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <rgbAnimation+0x144>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e01f      	b.n	8002288 <rgbAnimation+0xec>
		{
			set_rgb(0,255-i,i);
 8002248:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <rgbAnimation+0x144>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	b2d9      	uxtb	r1, r3
 8002252:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <rgbAnimation+0x144>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	2000      	movs	r0, #0
 800225c:	f7ff fee2 	bl	8002024 <set_rgb>
			for(j=0;j<=5000;j++);
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <rgbAnimation+0x148>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e004      	b.n	8002272 <rgbAnimation+0xd6>
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <rgbAnimation+0x148>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <rgbAnimation+0x148>)
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <rgbAnimation+0x148>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	ddf4      	ble.n	8002268 <rgbAnimation+0xcc>
	for(i=0;i<=255;i++)
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <rgbAnimation+0x144>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <rgbAnimation+0x144>)
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <rgbAnimation+0x144>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2bff      	cmp	r3, #255	; 0xff
 800228e:	dddb      	ble.n	8002248 <rgbAnimation+0xac>
		}
	for(i=0;i<=255;i++)
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <rgbAnimation+0x144>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e01d      	b.n	80022d4 <rgbAnimation+0x138>
			{
				set_rgb(0,0,255-i);
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <rgbAnimation+0x144>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	2100      	movs	r1, #0
 80022a6:	2000      	movs	r0, #0
 80022a8:	f7ff febc 	bl	8002024 <set_rgb>
				for(j=0;j<=5000;j++);
 80022ac:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <rgbAnimation+0x148>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e004      	b.n	80022be <rgbAnimation+0x122>
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <rgbAnimation+0x148>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <rgbAnimation+0x148>)
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <rgbAnimation+0x148>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	ddf4      	ble.n	80022b4 <rgbAnimation+0x118>
	for(i=0;i<=255;i++)
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <rgbAnimation+0x144>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3301      	adds	r3, #1
 80022d0:	4a03      	ldr	r2, [pc, #12]	; (80022e0 <rgbAnimation+0x144>)
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b02      	ldr	r3, [pc, #8]	; (80022e0 <rgbAnimation+0x144>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2bff      	cmp	r3, #255	; 0xff
 80022da:	dddd      	ble.n	8002298 <rgbAnimation+0xfc>
			}

}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000194 	.word	0x20000194
 80022e4:	2000016c 	.word	0x2000016c

080022e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b08b      	sub	sp, #44	; 0x2c
 80022ec:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022ee:	f001 fe69 	bl	8003fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022f2:	f000 fd99 	bl	8002e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022f6:	f001 f905 	bl	8003504 <MX_GPIO_Init>
  MX_DMA_Init();
 80022fa:	f001 f8e3 	bl	80034c4 <MX_DMA_Init>
  MX_ADC1_Init();
 80022fe:	f000 fdfd 	bl	8002efc <MX_ADC1_Init>
  MX_TIM4_Init();
 8002302:	f000 ff99 	bl	8003238 <MX_TIM4_Init>
  MX_SPI3_Init();
 8002306:	f000 ff0f 	bl	8003128 <MX_SPI3_Init>
  MX_TIM1_Init();
 800230a:	f000 ff43 	bl	8003194 <MX_TIM1_Init>
  MX_TIM7_Init();
 800230e:	f001 f879 	bl	8003404 <MX_TIM7_Init>
  MX_FATFS_Init();
 8002312:	f005 fbf7 	bl	8007b04 <MX_FATFS_Init>
  MX_TIM5_Init();
 8002316:	f001 f81b 	bl	8003350 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800231a:	f001 f8a9 	bl	8003470 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


      HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 800231e:	2100      	movs	r1, #0
 8002320:	48b0      	ldr	r0, [pc, #704]	; (80025e4 <main+0x2fc>)
 8002322:	f004 f941 	bl	80065a8 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8002326:	2104      	movs	r1, #4
 8002328:	48ae      	ldr	r0, [pc, #696]	; (80025e4 <main+0x2fc>)
 800232a:	f004 f93d 	bl	80065a8 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 800232e:	2108      	movs	r1, #8
 8002330:	48ac      	ldr	r0, [pc, #688]	; (80025e4 <main+0x2fc>)
 8002332:	f004 f939 	bl	80065a8 <HAL_TIM_PWM_Start>

      HAL_TIM_Base_Start(&htim7);  // us delay timer
 8002336:	48ac      	ldr	r0, [pc, #688]	; (80025e8 <main+0x300>)
 8002338:	f004 f8c3 	bl	80064c2 <HAL_TIM_Base_Start>
      HAL_TIM_Base_Start_IT(&htim1); // periodic delay timer
 800233c:	48ab      	ldr	r0, [pc, #684]	; (80025ec <main+0x304>)
 800233e:	f004 f8e4 	bl	800650a <HAL_TIM_Base_Start_IT>


      // HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);

      LCD1602_Begin8BIT(RS_GPIO_Port, E_Pin, RS_Pin, D0_GPIO_Port, D0_Pin, D1_Pin, D2_Pin, D3_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 8002342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002346:	9308      	str	r3, [sp, #32]
 8002348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800234c:	9307      	str	r3, [sp, #28]
 800234e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002352:	9306      	str	r3, [sp, #24]
 8002354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002358:	9305      	str	r3, [sp, #20]
 800235a:	4ba5      	ldr	r3, [pc, #660]	; (80025f0 <main+0x308>)
 800235c:	9304      	str	r3, [sp, #16]
 800235e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002362:	9303      	str	r3, [sp, #12]
 8002364:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002368:	9302      	str	r3, [sp, #8]
 800236a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	4b9f      	ldr	r3, [pc, #636]	; (80025f4 <main+0x30c>)
 8002378:	2202      	movs	r2, #2
 800237a:	2101      	movs	r1, #1
 800237c:	489e      	ldr	r0, [pc, #632]	; (80025f8 <main+0x310>)
 800237e:	f7fe ff77 	bl	8001270 <LCD1602_Begin8BIT>

      		LCD1602_setCursor(1,1);
 8002382:	2101      	movs	r1, #1
 8002384:	2001      	movs	r0, #1
 8002386:	f7ff f8eb 	bl	8001560 <LCD1602_setCursor>
      		  LCD1602_print("BATTERY");
 800238a:	489c      	ldr	r0, [pc, #624]	; (80025fc <main+0x314>)
 800238c:	f7ff f8ca 	bl	8001524 <LCD1602_print>
      		  LCD1602_setCursor(2,1);
 8002390:	2101      	movs	r1, #1
 8002392:	2002      	movs	r0, #2
 8002394:	f7ff f8e4 	bl	8001560 <LCD1602_setCursor>
      		  LCD1602_print("MANAGEMENT SYS");
 8002398:	4899      	ldr	r0, [pc, #612]	; (8002600 <main+0x318>)
 800239a:	f7ff f8c3 	bl	8001524 <LCD1602_print>

    /* USER CODE BEGIN 3 */



	  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 800239e:	2100      	movs	r1, #0
 80023a0:	4898      	ldr	r0, [pc, #608]	; (8002604 <main+0x31c>)
 80023a2:	f004 f93f 	bl	8006624 <HAL_TIM_PWM_Stop>

	  if(startInt==1)
 80023a6:	4b98      	ldr	r3, [pc, #608]	; (8002608 <main+0x320>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	f040 84ff 	bne.w	8002dae <main+0xac6>
	  {

		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80023b0:	2201      	movs	r2, #1
 80023b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023b6:	4890      	ldr	r0, [pc, #576]	; (80025f8 <main+0x310>)
 80023b8:	f002 ffb8 	bl	800532c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80023bc:	2200      	movs	r2, #0
 80023be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023c2:	488d      	ldr	r0, [pc, #564]	; (80025f8 <main+0x310>)
 80023c4:	f002 ffb2 	bl	800532c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80023c8:	2200      	movs	r2, #0
 80023ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ce:	488a      	ldr	r0, [pc, #552]	; (80025f8 <main+0x310>)
 80023d0:	f002 ffac 	bl	800532c <HAL_GPIO_WritePin>
		  if(sdInt==1)
 80023d4:	4b8d      	ldr	r3, [pc, #564]	; (800260c <main+0x324>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d114      	bne.n	8002406 <main+0x11e>
		  {
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 80023dc:	2201      	movs	r2, #1
 80023de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023e2:	4885      	ldr	r0, [pc, #532]	; (80025f8 <main+0x310>)
 80023e4:	f002 ffa2 	bl	800532c <HAL_GPIO_WritePin>
			  // SD KART KESMESİ

			  	  	  	  LCD1602_setCursor(2,8);
 80023e8:	2108      	movs	r1, #8
 80023ea:	2002      	movs	r0, #2
 80023ec:	f7ff f8b8 	bl	8001560 <LCD1602_setCursor>
			  			  LCD1602_writeData(5);
 80023f0:	2005      	movs	r0, #5
 80023f2:	f7fe ff2d 	bl	8001250 <LCD1602_writeData>

			  			  LCD1602_setCursor(2,9);
 80023f6:	2109      	movs	r1, #9
 80023f8:	2002      	movs	r0, #2
 80023fa:	f7ff f8b1 	bl	8001560 <LCD1602_setCursor>
			  			  LCD1602_print("SD ON");
 80023fe:	4884      	ldr	r0, [pc, #528]	; (8002610 <main+0x328>)
 8002400:	f7ff f890 	bl	8001524 <LCD1602_print>
 8002404:	e00e      	b.n	8002424 <main+0x13c>

		  }
		  else if(sdInt!=1 && wifiInt!=1)
 8002406:	4b81      	ldr	r3, [pc, #516]	; (800260c <main+0x324>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d00a      	beq.n	8002424 <main+0x13c>
 800240e:	4b81      	ldr	r3, [pc, #516]	; (8002614 <main+0x32c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d006      	beq.n	8002424 <main+0x13c>
		  		  {
		  			  LCD1602_setCursor(2,8);
 8002416:	2108      	movs	r1, #8
 8002418:	2002      	movs	r0, #2
 800241a:	f7ff f8a1 	bl	8001560 <LCD1602_setCursor>
		  			  LCD1602_print("        ");
 800241e:	487e      	ldr	r0, [pc, #504]	; (8002618 <main+0x330>)
 8002420:	f7ff f880 	bl	8001524 <LCD1602_print>
		  		  }


		  if(wifiInt==1)
 8002424:	4b7b      	ldr	r3, [pc, #492]	; (8002614 <main+0x32c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d113      	bne.n	8002454 <main+0x16c>
		  {
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800242c:	2201      	movs	r2, #1
 800242e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002432:	4871      	ldr	r0, [pc, #452]	; (80025f8 <main+0x310>)
 8002434:	f002 ff7a 	bl	800532c <HAL_GPIO_WritePin>
			  // WIFI KESMESI

			  LCD1602_setCursor(2,8);
 8002438:	2108      	movs	r1, #8
 800243a:	2002      	movs	r0, #2
 800243c:	f7ff f890 	bl	8001560 <LCD1602_setCursor>
			  LCD1602_writeData(4);
 8002440:	2004      	movs	r0, #4
 8002442:	f7fe ff05 	bl	8001250 <LCD1602_writeData>

			  LCD1602_setCursor(2,9);
 8002446:	2109      	movs	r1, #9
 8002448:	2002      	movs	r0, #2
 800244a:	f7ff f889 	bl	8001560 <LCD1602_setCursor>
			  LCD1602_print("WIFI ON");
 800244e:	4873      	ldr	r0, [pc, #460]	; (800261c <main+0x334>)
 8002450:	f7ff f868 	bl	8001524 <LCD1602_print>

		  }


		  if(fanInt==1)
 8002454:	4b72      	ldr	r3, [pc, #456]	; (8002620 <main+0x338>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d134      	bne.n	80024c6 <main+0x1de>
		  {
			  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800245c:	2100      	movs	r1, #0
 800245e:	4869      	ldr	r0, [pc, #420]	; (8002604 <main+0x31c>)
 8002460:	f004 f8a2 	bl	80065a8 <HAL_TIM_PWM_Start>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET); // TRANSISTOR B'SINE GIDIYOR.
 8002464:	2201      	movs	r2, #1
 8002466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800246a:	4863      	ldr	r0, [pc, #396]	; (80025f8 <main+0x310>)
 800246c:	f002 ff5e 	bl	800532c <HAL_GPIO_WritePin>
			  for(i=0;i<=180;i+=10)
 8002470:	4b6c      	ldr	r3, [pc, #432]	; (8002624 <main+0x33c>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	e00c      	b.n	8002492 <main+0x1aa>
			  {
				  Servo_Angle(i);
 8002478:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <main+0x33c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fdaf 	bl	8001fe0 <Servo_Angle>
				  HAL_Delay(50);
 8002482:	2032      	movs	r0, #50	; 0x32
 8002484:	f001 fde0 	bl	8004048 <HAL_Delay>
			  for(i=0;i<=180;i+=10)
 8002488:	4b66      	ldr	r3, [pc, #408]	; (8002624 <main+0x33c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	330a      	adds	r3, #10
 800248e:	4a65      	ldr	r2, [pc, #404]	; (8002624 <main+0x33c>)
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b64      	ldr	r3, [pc, #400]	; (8002624 <main+0x33c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2bb4      	cmp	r3, #180	; 0xb4
 8002498:	ddee      	ble.n	8002478 <main+0x190>
			  }

			  for(i=180;i>=0;i-=10)
 800249a:	4b62      	ldr	r3, [pc, #392]	; (8002624 <main+0x33c>)
 800249c:	22b4      	movs	r2, #180	; 0xb4
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e00c      	b.n	80024bc <main+0x1d4>
			  {
				  Servo_Angle(i);
 80024a2:	4b60      	ldr	r3, [pc, #384]	; (8002624 <main+0x33c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fd9a 	bl	8001fe0 <Servo_Angle>
				  				  HAL_Delay(50);
 80024ac:	2032      	movs	r0, #50	; 0x32
 80024ae:	f001 fdcb 	bl	8004048 <HAL_Delay>
			  for(i=180;i>=0;i-=10)
 80024b2:	4b5c      	ldr	r3, [pc, #368]	; (8002624 <main+0x33c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3b0a      	subs	r3, #10
 80024b8:	4a5a      	ldr	r2, [pc, #360]	; (8002624 <main+0x33c>)
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b59      	ldr	r3, [pc, #356]	; (8002624 <main+0x33c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	daee      	bge.n	80024a2 <main+0x1ba>
 80024c4:	e005      	b.n	80024d2 <main+0x1ea>
			  }

		  }
		  else
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80024c6:	2200      	movs	r2, #0
 80024c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024cc:	484a      	ldr	r0, [pc, #296]	; (80025f8 <main+0x310>)
 80024ce:	f002 ff2d 	bl	800532c <HAL_GPIO_WritePin>

		  	   if(ClearStatus==1)
 80024d2:	4b55      	ldr	r3, [pc, #340]	; (8002628 <main+0x340>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <main+0x1f6>
		  	   {
		  		 LCD1602_clear();
 80024da:	f7ff f879 	bl	80015d0 <LCD1602_clear>
		  	   }
		  	 ClearStatus=0;
 80024de:	4b52      	ldr	r3, [pc, #328]	; (8002628 <main+0x340>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

		  	    LCD1602_setCursor(1,1);
 80024e4:	2101      	movs	r1, #1
 80024e6:	2001      	movs	r0, #1
 80024e8:	f7ff f83a 	bl	8001560 <LCD1602_setCursor>
		      	LCD1602_writeData(1);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f7fe feaf 	bl	8001250 <LCD1602_writeData>
		      	LCD1602_setCursor(1,6);
 80024f2:	2106      	movs	r1, #6
 80024f4:	2001      	movs	r0, #1
 80024f6:	f7ff f833 	bl	8001560 <LCD1602_setCursor>
		      	LCD1602_print("V");
 80024fa:	484c      	ldr	r0, [pc, #304]	; (800262c <main+0x344>)
 80024fc:	f7ff f812 	bl	8001524 <LCD1602_print>
		      	LCD1602_setCursor(2,1);
 8002500:	2101      	movs	r1, #1
 8002502:	2002      	movs	r0, #2
 8002504:	f7ff f82c 	bl	8001560 <LCD1602_setCursor>
		      	LCD1602_writeData(0);
 8002508:	2000      	movs	r0, #0
 800250a:	f7fe fea1 	bl	8001250 <LCD1602_writeData>
		      	LCD1602_setCursor(2,6);
 800250e:	2106      	movs	r1, #6
 8002510:	2002      	movs	r0, #2
 8002512:	f7ff f825 	bl	8001560 <LCD1602_setCursor>
		      	LCD1602_writeData(2);
 8002516:	2002      	movs	r0, #2
 8002518:	f7fe fe9a 	bl	8001250 <LCD1602_writeData>

		      	LCD1602_setCursor(1,8);
 800251c:	2108      	movs	r1, #8
 800251e:	2001      	movs	r0, #1
 8002520:	f7ff f81e 	bl	8001560 <LCD1602_setCursor>
		      	LCD1602_print("CELL NO:");
 8002524:	4842      	ldr	r0, [pc, #264]	; (8002630 <main+0x348>)
 8002526:	f7fe fffd 	bl	8001524 <LCD1602_print>
		      	LCD1602_noBlink();
 800252a:	f7ff f85b 	bl	80015e4 <LCD1602_noBlink>

		      	// VOLTAGE SENSOR READ


		      	HAL_ADC_Start(&hadc1);
 800252e:	4841      	ldr	r0, [pc, #260]	; (8002634 <main+0x34c>)
 8002530:	f001 fdf0 	bl	8004114 <HAL_ADC_Start>
		      	for(i=0; i<=14 ; i++)
 8002534:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <main+0x33c>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e012      	b.n	8002562 <main+0x27a>
		      	{
		      		HAL_ADC_PollForConversion(&hadc1, 50);
 800253c:	2132      	movs	r1, #50	; 0x32
 800253e:	483d      	ldr	r0, [pc, #244]	; (8002634 <main+0x34c>)
 8002540:	f001 fee1 	bl	8004306 <HAL_ADC_PollForConversion>
		      		adcValues[i]=HAL_ADC_GetValue(&hadc1);
 8002544:	483b      	ldr	r0, [pc, #236]	; (8002634 <main+0x34c>)
 8002546:	f001 ff62 	bl	800440e <HAL_ADC_GetValue>
 800254a:	4602      	mov	r2, r0
 800254c:	4b35      	ldr	r3, [pc, #212]	; (8002624 <main+0x33c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4611      	mov	r1, r2
 8002552:	4a39      	ldr	r2, [pc, #228]	; (8002638 <main+0x350>)
 8002554:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		      	for(i=0; i<=14 ; i++)
 8002558:	4b32      	ldr	r3, [pc, #200]	; (8002624 <main+0x33c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3301      	adds	r3, #1
 800255e:	4a31      	ldr	r2, [pc, #196]	; (8002624 <main+0x33c>)
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b30      	ldr	r3, [pc, #192]	; (8002624 <main+0x33c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b0e      	cmp	r3, #14
 8002568:	dde8      	ble.n	800253c <main+0x254>
		      	}
		      	HAL_ADC_Stop(&hadc1);
 800256a:	4832      	ldr	r0, [pc, #200]	; (8002634 <main+0x34c>)
 800256c:	f001 fe98 	bl	80042a0 <HAL_ADC_Stop>


		      	for(i=0; i<=6 ; i++)
 8002570:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <main+0x33c>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e019      	b.n	80025ac <main+0x2c4>
		      	{
		      		voltValue[i]=adcValues[i]*370/4095;
 8002578:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <main+0x33c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a2e      	ldr	r2, [pc, #184]	; (8002638 <main+0x350>)
 800257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002582:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	4a26      	ldr	r2, [pc, #152]	; (8002624 <main+0x33c>)
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	492b      	ldr	r1, [pc, #172]	; (800263c <main+0x354>)
 8002590:	fb81 0103 	smull	r0, r1, r1, r3
 8002594:	4419      	add	r1, r3
 8002596:	12c9      	asrs	r1, r1, #11
 8002598:	17db      	asrs	r3, r3, #31
 800259a:	1acb      	subs	r3, r1, r3
 800259c:	4928      	ldr	r1, [pc, #160]	; (8002640 <main+0x358>)
 800259e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		      	for(i=0; i<=6 ; i++)
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <main+0x33c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	3301      	adds	r3, #1
 80025a8:	4a1e      	ldr	r2, [pc, #120]	; (8002624 <main+0x33c>)
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <main+0x33c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b06      	cmp	r3, #6
 80025b2:	dde1      	ble.n	8002578 <main+0x290>
		      	}

		      	for(i=0; i<=7 ; i++)
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <main+0x33c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e0c5      	b.n	8002748 <main+0x460>
		      	{

		      			tempDummy=adcValues[i+7];
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <main+0x33c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	3307      	adds	r3, #7
 80025c2:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <main+0x350>)
 80025c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c8:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <main+0x35c>)
 80025ca:	6013      	str	r3, [r2, #0]

		      			if(tempDummy<=0)
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <main+0x35c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	dc3b      	bgt.n	800264c <main+0x364>
		      			{
		      				tmp=0;
 80025d4:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <main+0x360>)
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	f04f 0400 	mov.w	r4, #0
 80025de:	e9c2 3400 	strd	r3, r4, [r2]
 80025e2:	e096      	b.n	8002712 <main+0x42a>
 80025e4:	20000288 	.word	0x20000288
 80025e8:	20000520 	.word	0x20000520
 80025ec:	200004bc 	.word	0x200004bc
 80025f0:	40020c00 	.word	0x40020c00
 80025f4:	40020400 	.word	0x40020400
 80025f8:	40021000 	.word	0x40021000
 80025fc:	08008dc8 	.word	0x08008dc8
 8002600:	08008dd0 	.word	0x08008dd0
 8002604:	200002d0 	.word	0x200002d0
 8002608:	200001a8 	.word	0x200001a8
 800260c:	2000019c 	.word	0x2000019c
 8002610:	08008de0 	.word	0x08008de0
 8002614:	200001a0 	.word	0x200001a0
 8002618:	08008de8 	.word	0x08008de8
 800261c:	08008df4 	.word	0x08008df4
 8002620:	200001a4 	.word	0x200001a4
 8002624:	20000194 	.word	0x20000194
 8002628:	20000198 	.word	0x20000198
 800262c:	08008dfc 	.word	0x08008dfc
 8002630:	08008e00 	.word	0x08008e00
 8002634:	20000390 	.word	0x20000390
 8002638:	20000118 	.word	0x20000118
 800263c:	80080081 	.word	0x80080081
 8002640:	20000370 	.word	0x20000370
 8002644:	20000180 	.word	0x20000180
 8002648:	20000188 	.word	0x20000188
		      			}
		      			else
		      			{
		      				tmp = log(((40950000 / tempDummy) - 10000));
 800264c:	4ba4      	ldr	r3, [pc, #656]	; (80028e0 <main+0x5f8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4aa4      	ldr	r2, [pc, #656]	; (80028e4 <main+0x5fc>)
 8002652:	fb92 f3f3 	sdiv	r3, r2, r3
 8002656:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800265a:	3b10      	subs	r3, #16
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd ff59 	bl	8000514 <__aeabi_i2d>
 8002662:	4603      	mov	r3, r0
 8002664:	460c      	mov	r4, r1
 8002666:	ec44 3b10 	vmov	d0, r3, r4
 800266a:	f006 f937 	bl	80088dc <log>
 800266e:	eeb0 7a40 	vmov.f32	s14, s0
 8002672:	eef0 7a60 	vmov.f32	s15, s1
 8002676:	4b9c      	ldr	r3, [pc, #624]	; (80028e8 <main+0x600>)
 8002678:	ed83 7b00 	vstr	d7, [r3]
		      						      			tmp = 1 / (0.001129148 + (0.000234125 + (		0.0000000876741 * tmp * tmp)) * tmp);
 800267c:	4b9a      	ldr	r3, [pc, #616]	; (80028e8 <main+0x600>)
 800267e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002682:	a38f      	add	r3, pc, #572	; (adr r3, 80028c0 <main+0x5d8>)
 8002684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002688:	f7fd ffae 	bl	80005e8 <__aeabi_dmul>
 800268c:	4603      	mov	r3, r0
 800268e:	460c      	mov	r4, r1
 8002690:	4618      	mov	r0, r3
 8002692:	4621      	mov	r1, r4
 8002694:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <main+0x600>)
 8002696:	e9d3 3400 	ldrd	r3, r4, [r3]
 800269a:	461a      	mov	r2, r3
 800269c:	4623      	mov	r3, r4
 800269e:	f7fd ffa3 	bl	80005e8 <__aeabi_dmul>
 80026a2:	4603      	mov	r3, r0
 80026a4:	460c      	mov	r4, r1
 80026a6:	4618      	mov	r0, r3
 80026a8:	4621      	mov	r1, r4
 80026aa:	a387      	add	r3, pc, #540	; (adr r3, 80028c8 <main+0x5e0>)
 80026ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b0:	f7fd fde4 	bl	800027c <__adddf3>
 80026b4:	4603      	mov	r3, r0
 80026b6:	460c      	mov	r4, r1
 80026b8:	4618      	mov	r0, r3
 80026ba:	4621      	mov	r1, r4
 80026bc:	4b8a      	ldr	r3, [pc, #552]	; (80028e8 <main+0x600>)
 80026be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4623      	mov	r3, r4
 80026c6:	f7fd ff8f 	bl	80005e8 <__aeabi_dmul>
 80026ca:	4603      	mov	r3, r0
 80026cc:	460c      	mov	r4, r1
 80026ce:	4618      	mov	r0, r3
 80026d0:	4621      	mov	r1, r4
 80026d2:	a37f      	add	r3, pc, #508	; (adr r3, 80028d0 <main+0x5e8>)
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	f7fd fdd0 	bl	800027c <__adddf3>
 80026dc:	4603      	mov	r3, r0
 80026de:	460c      	mov	r4, r1
 80026e0:	461a      	mov	r2, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	f04f 0000 	mov.w	r0, #0
 80026e8:	4980      	ldr	r1, [pc, #512]	; (80028ec <main+0x604>)
 80026ea:	f7fe f8a7 	bl	800083c <__aeabi_ddiv>
 80026ee:	4603      	mov	r3, r0
 80026f0:	460c      	mov	r4, r1
 80026f2:	4a7d      	ldr	r2, [pc, #500]	; (80028e8 <main+0x600>)
 80026f4:	e9c2 3400 	strd	r3, r4, [r2]
		      						      			tmp = tmp - 278.15;
 80026f8:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <main+0x600>)
 80026fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026fe:	a376      	add	r3, pc, #472	; (adr r3, 80028d8 <main+0x5f0>)
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	f7fd fdb8 	bl	8000278 <__aeabi_dsub>
 8002708:	4603      	mov	r3, r0
 800270a:	460c      	mov	r4, r1
 800270c:	4a76      	ldr	r2, [pc, #472]	; (80028e8 <main+0x600>)
 800270e:	e9c2 3400 	strd	r3, r4, [r2]
		      			}
	   			tempValue[i]=tmp*10;
 8002712:	4b75      	ldr	r3, [pc, #468]	; (80028e8 <main+0x600>)
 8002714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	4b74      	ldr	r3, [pc, #464]	; (80028f0 <main+0x608>)
 800271e:	f7fd ff63 	bl	80005e8 <__aeabi_dmul>
 8002722:	4603      	mov	r3, r0
 8002724:	460c      	mov	r4, r1
 8002726:	4619      	mov	r1, r3
 8002728:	4622      	mov	r2, r4
 800272a:	4b72      	ldr	r3, [pc, #456]	; (80028f4 <main+0x60c>)
 800272c:	681c      	ldr	r4, [r3, #0]
 800272e:	4608      	mov	r0, r1
 8002730:	4611      	mov	r1, r2
 8002732:	f7fe fa09 	bl	8000b48 <__aeabi_d2iz>
 8002736:	4602      	mov	r2, r0
 8002738:	4b6f      	ldr	r3, [pc, #444]	; (80028f8 <main+0x610>)
 800273a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		      	for(i=0; i<=7 ; i++)
 800273e:	4b6d      	ldr	r3, [pc, #436]	; (80028f4 <main+0x60c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3301      	adds	r3, #1
 8002744:	4a6b      	ldr	r2, [pc, #428]	; (80028f4 <main+0x60c>)
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <main+0x60c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b07      	cmp	r3, #7
 800274e:	f77f af35 	ble.w	80025bc <main+0x2d4>

		      		}

		      	blocktemp = tempValue[7]*10;
 8002752:	4b69      	ldr	r3, [pc, #420]	; (80028f8 <main+0x610>)
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	461a      	mov	r2, r3
 8002760:	4b66      	ldr	r3, [pc, #408]	; (80028fc <main+0x614>)
 8002762:	601a      	str	r2, [r3, #0]
		      			      		tempValue[2]-=190;
 8002764:	4b64      	ldr	r3, [pc, #400]	; (80028f8 <main+0x610>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	3bbe      	subs	r3, #190	; 0xbe
 800276a:	4a63      	ldr	r2, [pc, #396]	; (80028f8 <main+0x610>)
 800276c:	6093      	str	r3, [r2, #8]

		      		for(i=0;i<=6;i++)
 800276e:	4b61      	ldr	r3, [pc, #388]	; (80028f4 <main+0x60c>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	e018      	b.n	80027a8 <main+0x4c0>
		      		{
		      			tempAvg += tempValue[i];
 8002776:	4b5f      	ldr	r3, [pc, #380]	; (80028f4 <main+0x60c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a5f      	ldr	r2, [pc, #380]	; (80028f8 <main+0x610>)
 800277c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd fec7 	bl	8000514 <__aeabi_i2d>
 8002786:	4b5e      	ldr	r3, [pc, #376]	; (8002900 <main+0x618>)
 8002788:	e9d3 3400 	ldrd	r3, r4, [r3]
 800278c:	461a      	mov	r2, r3
 800278e:	4623      	mov	r3, r4
 8002790:	f7fd fd74 	bl	800027c <__adddf3>
 8002794:	4603      	mov	r3, r0
 8002796:	460c      	mov	r4, r1
 8002798:	4a59      	ldr	r2, [pc, #356]	; (8002900 <main+0x618>)
 800279a:	e9c2 3400 	strd	r3, r4, [r2]
		      		for(i=0;i<=6;i++)
 800279e:	4b55      	ldr	r3, [pc, #340]	; (80028f4 <main+0x60c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	4a53      	ldr	r2, [pc, #332]	; (80028f4 <main+0x60c>)
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b52      	ldr	r3, [pc, #328]	; (80028f4 <main+0x60c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	dde2      	ble.n	8002776 <main+0x48e>
		      		}
		      		tempAvg=tempAvg/7.0;
 80027b0:	4b53      	ldr	r3, [pc, #332]	; (8002900 <main+0x618>)
 80027b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	4b52      	ldr	r3, [pc, #328]	; (8002904 <main+0x61c>)
 80027bc:	f7fe f83e 	bl	800083c <__aeabi_ddiv>
 80027c0:	4603      	mov	r3, r0
 80027c2:	460c      	mov	r4, r1
 80027c4:	4a4e      	ldr	r2, [pc, #312]	; (8002900 <main+0x618>)
 80027c6:	e9c2 3400 	strd	r3, r4, [r2]



		      		rgbCommand();
 80027ca:	f7ff fc49 	bl	8002060 <rgbCommand>

		  	  // MAIN LOOP



		  	  switch(menu)
 80027ce:	4b4e      	ldr	r3, [pc, #312]	; (8002908 <main+0x620>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	f200 8310 	bhi.w	8002df8 <main+0xb10>
 80027d8:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <main+0x4f8>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	080027fd 	.word	0x080027fd
 80027e4:	08002921 	.word	0x08002921
 80027e8:	080029df 	.word	0x080029df
 80027ec:	08002a9d 	.word	0x08002a9d
 80027f0:	08002b5b 	.word	0x08002b5b
 80027f4:	08002c31 	.word	0x08002c31
 80027f8:	08002cf1 	.word	0x08002cf1
		  	  {
		  	  case 0:
		  		  LCD1602_setCursor(1,2);
 80027fc:	2102      	movs	r1, #2
 80027fe:	2001      	movs	r0, #1
 8002800:	f7fe feae 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(voltValue[0]/100);
 8002804:	4b41      	ldr	r3, [pc, #260]	; (800290c <main+0x624>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a41      	ldr	r2, [pc, #260]	; (8002910 <main+0x628>)
 800280a:	fb82 1203 	smull	r1, r2, r2, r3
 800280e:	1152      	asrs	r2, r2, #5
 8002810:	17db      	asrs	r3, r3, #31
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe fef7 	bl	8001608 <LCD1602_PrintInt>
		  		  LCD1602_setCursor(1,3);
 800281a:	2103      	movs	r1, #3
 800281c:	2001      	movs	r0, #1
 800281e:	f7fe fe9f 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_print(".");
 8002822:	483c      	ldr	r0, [pc, #240]	; (8002914 <main+0x62c>)
 8002824:	f7fe fe7e 	bl	8001524 <LCD1602_print>
		  		  LCD1602_setCursor(1,4);
 8002828:	2104      	movs	r1, #4
 800282a:	2001      	movs	r0, #1
 800282c:	f7fe fe98 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(voltValue[0]%100);
 8002830:	4b36      	ldr	r3, [pc, #216]	; (800290c <main+0x624>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a36      	ldr	r2, [pc, #216]	; (8002910 <main+0x628>)
 8002836:	fb82 1203 	smull	r1, r2, r2, r3
 800283a:	1151      	asrs	r1, r2, #5
 800283c:	17da      	asrs	r2, r3, #31
 800283e:	1a8a      	subs	r2, r1, r2
 8002840:	2164      	movs	r1, #100	; 0x64
 8002842:	fb01 f202 	mul.w	r2, r1, r2
 8002846:	1a9a      	subs	r2, r3, r2
 8002848:	4610      	mov	r0, r2
 800284a:	f7fe fedd 	bl	8001608 <LCD1602_PrintInt>

		  		  LCD1602_setCursor(1,16);
 800284e:	2110      	movs	r1, #16
 8002850:	2001      	movs	r0, #1
 8002852:	f7fe fe85 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(1);
 8002856:	2001      	movs	r0, #1
 8002858:	f7fe fed6 	bl	8001608 <LCD1602_PrintInt>


		  		  LCD1602_setCursor(2,2);
 800285c:	2102      	movs	r1, #2
 800285e:	2002      	movs	r0, #2
 8002860:	f7fe fe7e 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(tempValue[0]/1);
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <main+0x610>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fecd 	bl	8001608 <LCD1602_PrintInt>
		  		  LCD1602_setCursor(2,4);
 800286e:	2104      	movs	r1, #4
 8002870:	2002      	movs	r0, #2
 8002872:	f7fe fe75 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_print(".");
 8002876:	4827      	ldr	r0, [pc, #156]	; (8002914 <main+0x62c>)
 8002878:	f7fe fe54 	bl	8001524 <LCD1602_print>
		  		  LCD1602_setCursor(2,5);
 800287c:	2105      	movs	r1, #5
 800287e:	2002      	movs	r0, #2
 8002880:	f7fe fe6e 	bl	8001560 <LCD1602_setCursor>
		  		  tempIntVal=tempValue[0];
 8002884:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <main+0x610>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a23      	ldr	r2, [pc, #140]	; (8002918 <main+0x630>)
 800288a:	6013      	str	r3, [r2, #0]
		  		  tempIntVal %= 10;
 800288c:	4b22      	ldr	r3, [pc, #136]	; (8002918 <main+0x630>)
 800288e:	6819      	ldr	r1, [r3, #0]
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <main+0x634>)
 8002892:	fb83 2301 	smull	r2, r3, r3, r1
 8002896:	109a      	asrs	r2, r3, #2
 8002898:	17cb      	asrs	r3, r1, #31
 800289a:	1ad2      	subs	r2, r2, r3
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	1aca      	subs	r2, r1, r3
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <main+0x630>)
 80028a8:	601a      	str	r2, [r3, #0]
		  		  LCD1602_PrintInt(tempIntVal);
 80028aa:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <main+0x630>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe feaa 	bl	8001608 <LCD1602_PrintInt>
		  		LCD1602_noBlink();
 80028b4:	f7fe fe96 	bl	80015e4 <LCD1602_noBlink>


		  		  break;
 80028b8:	e29f      	b.n	8002dfa <main+0xb12>
 80028ba:	bf00      	nop
 80028bc:	f3af 8000 	nop.w
 80028c0:	14170d19 	.word	0x14170d19
 80028c4:	3e7788eb 	.word	0x3e7788eb
 80028c8:	6fb4c3c2 	.word	0x6fb4c3c2
 80028cc:	3f2eafee 	.word	0x3f2eafee
 80028d0:	6edeb890 	.word	0x6edeb890
 80028d4:	3f527ffd 	.word	0x3f527ffd
 80028d8:	66666666 	.word	0x66666666
 80028dc:	40716266 	.word	0x40716266
 80028e0:	20000180 	.word	0x20000180
 80028e4:	0270d8f0 	.word	0x0270d8f0
 80028e8:	20000188 	.word	0x20000188
 80028ec:	3ff00000 	.word	0x3ff00000
 80028f0:	40240000 	.word	0x40240000
 80028f4:	20000194 	.word	0x20000194
 80028f8:	20000418 	.word	0x20000418
 80028fc:	20000168 	.word	0x20000168
 8002900:	20000178 	.word	0x20000178
 8002904:	401c0000 	.word	0x401c0000
 8002908:	20000284 	.word	0x20000284
 800290c:	20000370 	.word	0x20000370
 8002910:	51eb851f 	.word	0x51eb851f
 8002914:	08008da4 	.word	0x08008da4
 8002918:	20000190 	.word	0x20000190
 800291c:	66666667 	.word	0x66666667
		  	  case 1:
		  		  LCD1602_setCursor(1,2);
 8002920:	2102      	movs	r1, #2
 8002922:	2001      	movs	r0, #1
 8002924:	f7fe fe1c 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(voltValue[1]/100);
 8002928:	4bbb      	ldr	r3, [pc, #748]	; (8002c18 <main+0x930>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4abb      	ldr	r2, [pc, #748]	; (8002c1c <main+0x934>)
 800292e:	fb82 1203 	smull	r1, r2, r2, r3
 8002932:	1152      	asrs	r2, r2, #5
 8002934:	17db      	asrs	r3, r3, #31
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fe65 	bl	8001608 <LCD1602_PrintInt>
		  		  LCD1602_setCursor(1,3);
 800293e:	2103      	movs	r1, #3
 8002940:	2001      	movs	r0, #1
 8002942:	f7fe fe0d 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_print(".");
 8002946:	48b6      	ldr	r0, [pc, #728]	; (8002c20 <main+0x938>)
 8002948:	f7fe fdec 	bl	8001524 <LCD1602_print>
		  		  LCD1602_setCursor(1,4);
 800294c:	2104      	movs	r1, #4
 800294e:	2001      	movs	r0, #1
 8002950:	f7fe fe06 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(voltValue[1]%100);
 8002954:	4bb0      	ldr	r3, [pc, #704]	; (8002c18 <main+0x930>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4ab0      	ldr	r2, [pc, #704]	; (8002c1c <main+0x934>)
 800295a:	fb82 1203 	smull	r1, r2, r2, r3
 800295e:	1151      	asrs	r1, r2, #5
 8002960:	17da      	asrs	r2, r3, #31
 8002962:	1a8a      	subs	r2, r1, r2
 8002964:	2164      	movs	r1, #100	; 0x64
 8002966:	fb01 f202 	mul.w	r2, r1, r2
 800296a:	1a9a      	subs	r2, r3, r2
 800296c:	4610      	mov	r0, r2
 800296e:	f7fe fe4b 	bl	8001608 <LCD1602_PrintInt>

		  		  LCD1602_setCursor(1,16);
 8002972:	2110      	movs	r1, #16
 8002974:	2001      	movs	r0, #1
 8002976:	f7fe fdf3 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(2);
 800297a:	2002      	movs	r0, #2
 800297c:	f7fe fe44 	bl	8001608 <LCD1602_PrintInt>

		  		LCD1602_setCursor(2,2);
 8002980:	2102      	movs	r1, #2
 8002982:	2002      	movs	r0, #2
 8002984:	f7fe fdec 	bl	8001560 <LCD1602_setCursor>
		  				  		  LCD1602_PrintInt(tempValue[1]/1);
 8002988:	4ba6      	ldr	r3, [pc, #664]	; (8002c24 <main+0x93c>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fe3b 	bl	8001608 <LCD1602_PrintInt>
		  				  		  LCD1602_setCursor(2,4);
 8002992:	2104      	movs	r1, #4
 8002994:	2002      	movs	r0, #2
 8002996:	f7fe fde3 	bl	8001560 <LCD1602_setCursor>
		  				  		  LCD1602_print(".");
 800299a:	48a1      	ldr	r0, [pc, #644]	; (8002c20 <main+0x938>)
 800299c:	f7fe fdc2 	bl	8001524 <LCD1602_print>
		  				  		  LCD1602_setCursor(2,5);
 80029a0:	2105      	movs	r1, #5
 80029a2:	2002      	movs	r0, #2
 80029a4:	f7fe fddc 	bl	8001560 <LCD1602_setCursor>
		  				  		  tempIntVal=tempValue[1];
 80029a8:	4b9e      	ldr	r3, [pc, #632]	; (8002c24 <main+0x93c>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4a9e      	ldr	r2, [pc, #632]	; (8002c28 <main+0x940>)
 80029ae:	6013      	str	r3, [r2, #0]
		  				  		  tempIntVal %= 10;
 80029b0:	4b9d      	ldr	r3, [pc, #628]	; (8002c28 <main+0x940>)
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	4b9d      	ldr	r3, [pc, #628]	; (8002c2c <main+0x944>)
 80029b6:	fb83 2301 	smull	r2, r3, r3, r1
 80029ba:	109a      	asrs	r2, r3, #2
 80029bc:	17cb      	asrs	r3, r1, #31
 80029be:	1ad2      	subs	r2, r2, r3
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	1aca      	subs	r2, r1, r3
 80029ca:	4b97      	ldr	r3, [pc, #604]	; (8002c28 <main+0x940>)
 80029cc:	601a      	str	r2, [r3, #0]
		  				  		  LCD1602_PrintInt(tempIntVal);
 80029ce:	4b96      	ldr	r3, [pc, #600]	; (8002c28 <main+0x940>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe fe18 	bl	8001608 <LCD1602_PrintInt>
		  				  		LCD1602_noBlink();
 80029d8:	f7fe fe04 	bl	80015e4 <LCD1602_noBlink>
		  		  break;
 80029dc:	e20d      	b.n	8002dfa <main+0xb12>
		  	  case 2:

		  		  LCD1602_setCursor(1,2);
 80029de:	2102      	movs	r1, #2
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7fe fdbd 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(voltValue[2]/100);
 80029e6:	4b8c      	ldr	r3, [pc, #560]	; (8002c18 <main+0x930>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	4a8c      	ldr	r2, [pc, #560]	; (8002c1c <main+0x934>)
 80029ec:	fb82 1203 	smull	r1, r2, r2, r3
 80029f0:	1152      	asrs	r2, r2, #5
 80029f2:	17db      	asrs	r3, r3, #31
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe fe06 	bl	8001608 <LCD1602_PrintInt>
		  		  LCD1602_setCursor(1,3);
 80029fc:	2103      	movs	r1, #3
 80029fe:	2001      	movs	r0, #1
 8002a00:	f7fe fdae 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_print(".");
 8002a04:	4886      	ldr	r0, [pc, #536]	; (8002c20 <main+0x938>)
 8002a06:	f7fe fd8d 	bl	8001524 <LCD1602_print>
		  		  LCD1602_setCursor(1,4);
 8002a0a:	2104      	movs	r1, #4
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	f7fe fda7 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(voltValue[2]%100);
 8002a12:	4b81      	ldr	r3, [pc, #516]	; (8002c18 <main+0x930>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	4a81      	ldr	r2, [pc, #516]	; (8002c1c <main+0x934>)
 8002a18:	fb82 1203 	smull	r1, r2, r2, r3
 8002a1c:	1151      	asrs	r1, r2, #5
 8002a1e:	17da      	asrs	r2, r3, #31
 8002a20:	1a8a      	subs	r2, r1, r2
 8002a22:	2164      	movs	r1, #100	; 0x64
 8002a24:	fb01 f202 	mul.w	r2, r1, r2
 8002a28:	1a9a      	subs	r2, r3, r2
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	f7fe fdec 	bl	8001608 <LCD1602_PrintInt>

		  		  LCD1602_setCursor(1,16);
 8002a30:	2110      	movs	r1, #16
 8002a32:	2001      	movs	r0, #1
 8002a34:	f7fe fd94 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(3);
 8002a38:	2003      	movs	r0, #3
 8002a3a:	f7fe fde5 	bl	8001608 <LCD1602_PrintInt>

		  		LCD1602_setCursor(2,2);
 8002a3e:	2102      	movs	r1, #2
 8002a40:	2002      	movs	r0, #2
 8002a42:	f7fe fd8d 	bl	8001560 <LCD1602_setCursor>
		  				  		  LCD1602_PrintInt(tempValue[2]/1);
 8002a46:	4b77      	ldr	r3, [pc, #476]	; (8002c24 <main+0x93c>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fddc 	bl	8001608 <LCD1602_PrintInt>
		  				  		  LCD1602_setCursor(2,4);
 8002a50:	2104      	movs	r1, #4
 8002a52:	2002      	movs	r0, #2
 8002a54:	f7fe fd84 	bl	8001560 <LCD1602_setCursor>
		  				  		  LCD1602_print(".");
 8002a58:	4871      	ldr	r0, [pc, #452]	; (8002c20 <main+0x938>)
 8002a5a:	f7fe fd63 	bl	8001524 <LCD1602_print>
		  				  		  LCD1602_setCursor(2,5);
 8002a5e:	2105      	movs	r1, #5
 8002a60:	2002      	movs	r0, #2
 8002a62:	f7fe fd7d 	bl	8001560 <LCD1602_setCursor>
		  				  		  tempIntVal=tempValue[2];
 8002a66:	4b6f      	ldr	r3, [pc, #444]	; (8002c24 <main+0x93c>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	4a6f      	ldr	r2, [pc, #444]	; (8002c28 <main+0x940>)
 8002a6c:	6013      	str	r3, [r2, #0]
		  				  		  tempIntVal %= 10;
 8002a6e:	4b6e      	ldr	r3, [pc, #440]	; (8002c28 <main+0x940>)
 8002a70:	6819      	ldr	r1, [r3, #0]
 8002a72:	4b6e      	ldr	r3, [pc, #440]	; (8002c2c <main+0x944>)
 8002a74:	fb83 2301 	smull	r2, r3, r3, r1
 8002a78:	109a      	asrs	r2, r3, #2
 8002a7a:	17cb      	asrs	r3, r1, #31
 8002a7c:	1ad2      	subs	r2, r2, r3
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	1aca      	subs	r2, r1, r3
 8002a88:	4b67      	ldr	r3, [pc, #412]	; (8002c28 <main+0x940>)
 8002a8a:	601a      	str	r2, [r3, #0]
		  				  		  LCD1602_PrintInt(tempIntVal);
 8002a8c:	4b66      	ldr	r3, [pc, #408]	; (8002c28 <main+0x940>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fe fdb9 	bl	8001608 <LCD1602_PrintInt>
		  				  		LCD1602_noBlink();
 8002a96:	f7fe fda5 	bl	80015e4 <LCD1602_noBlink>
		  		  break;
 8002a9a:	e1ae      	b.n	8002dfa <main+0xb12>
		  	  case 3:


		  		  LCD1602_setCursor(1,2);
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f7fe fd5e 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(voltValue[3]/100);
 8002aa4:	4b5c      	ldr	r3, [pc, #368]	; (8002c18 <main+0x930>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a5c      	ldr	r2, [pc, #368]	; (8002c1c <main+0x934>)
 8002aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8002aae:	1152      	asrs	r2, r2, #5
 8002ab0:	17db      	asrs	r3, r3, #31
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe fda7 	bl	8001608 <LCD1602_PrintInt>
		  		  LCD1602_setCursor(1,3);
 8002aba:	2103      	movs	r1, #3
 8002abc:	2001      	movs	r0, #1
 8002abe:	f7fe fd4f 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_print(".");
 8002ac2:	4857      	ldr	r0, [pc, #348]	; (8002c20 <main+0x938>)
 8002ac4:	f7fe fd2e 	bl	8001524 <LCD1602_print>
		  		  LCD1602_setCursor(1,4);
 8002ac8:	2104      	movs	r1, #4
 8002aca:	2001      	movs	r0, #1
 8002acc:	f7fe fd48 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(voltValue[3]%100);
 8002ad0:	4b51      	ldr	r3, [pc, #324]	; (8002c18 <main+0x930>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a51      	ldr	r2, [pc, #324]	; (8002c1c <main+0x934>)
 8002ad6:	fb82 1203 	smull	r1, r2, r2, r3
 8002ada:	1151      	asrs	r1, r2, #5
 8002adc:	17da      	asrs	r2, r3, #31
 8002ade:	1a8a      	subs	r2, r1, r2
 8002ae0:	2164      	movs	r1, #100	; 0x64
 8002ae2:	fb01 f202 	mul.w	r2, r1, r2
 8002ae6:	1a9a      	subs	r2, r3, r2
 8002ae8:	4610      	mov	r0, r2
 8002aea:	f7fe fd8d 	bl	8001608 <LCD1602_PrintInt>

		  		  LCD1602_setCursor(1,16);
 8002aee:	2110      	movs	r1, #16
 8002af0:	2001      	movs	r0, #1
 8002af2:	f7fe fd35 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(4);
 8002af6:	2004      	movs	r0, #4
 8002af8:	f7fe fd86 	bl	8001608 <LCD1602_PrintInt>

		  		LCD1602_setCursor(2,2);
 8002afc:	2102      	movs	r1, #2
 8002afe:	2002      	movs	r0, #2
 8002b00:	f7fe fd2e 	bl	8001560 <LCD1602_setCursor>
		  				  		  LCD1602_PrintInt(tempValue[3]/1);
 8002b04:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <main+0x93c>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe fd7d 	bl	8001608 <LCD1602_PrintInt>
		  				  		  LCD1602_setCursor(2,4);
 8002b0e:	2104      	movs	r1, #4
 8002b10:	2002      	movs	r0, #2
 8002b12:	f7fe fd25 	bl	8001560 <LCD1602_setCursor>
		  				  		  LCD1602_print(".");
 8002b16:	4842      	ldr	r0, [pc, #264]	; (8002c20 <main+0x938>)
 8002b18:	f7fe fd04 	bl	8001524 <LCD1602_print>
		  				  		  LCD1602_setCursor(2,5);
 8002b1c:	2105      	movs	r1, #5
 8002b1e:	2002      	movs	r0, #2
 8002b20:	f7fe fd1e 	bl	8001560 <LCD1602_setCursor>
		  				  		  tempIntVal=tempValue[3];
 8002b24:	4b3f      	ldr	r3, [pc, #252]	; (8002c24 <main+0x93c>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4a3f      	ldr	r2, [pc, #252]	; (8002c28 <main+0x940>)
 8002b2a:	6013      	str	r3, [r2, #0]
		  				  		  tempIntVal %= 10;
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <main+0x940>)
 8002b2e:	6819      	ldr	r1, [r3, #0]
 8002b30:	4b3e      	ldr	r3, [pc, #248]	; (8002c2c <main+0x944>)
 8002b32:	fb83 2301 	smull	r2, r3, r3, r1
 8002b36:	109a      	asrs	r2, r3, #2
 8002b38:	17cb      	asrs	r3, r1, #31
 8002b3a:	1ad2      	subs	r2, r2, r3
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	1aca      	subs	r2, r1, r3
 8002b46:	4b38      	ldr	r3, [pc, #224]	; (8002c28 <main+0x940>)
 8002b48:	601a      	str	r2, [r3, #0]
		  				  		  LCD1602_PrintInt(tempIntVal);
 8002b4a:	4b37      	ldr	r3, [pc, #220]	; (8002c28 <main+0x940>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fd5a 	bl	8001608 <LCD1602_PrintInt>
		  				  		LCD1602_noBlink();
 8002b54:	f7fe fd46 	bl	80015e4 <LCD1602_noBlink>
		  		  break;
 8002b58:	e14f      	b.n	8002dfa <main+0xb12>
		  	  case 4:


		  		  LCD1602_setCursor(1,2);
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f7fe fcff 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(voltValue[4]/100);
 8002b62:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <main+0x930>)
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <main+0x934>)
 8002b68:	fb82 1203 	smull	r1, r2, r2, r3
 8002b6c:	1152      	asrs	r2, r2, #5
 8002b6e:	17db      	asrs	r3, r3, #31
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fd48 	bl	8001608 <LCD1602_PrintInt>
		  		  LCD1602_setCursor(1,3);
 8002b78:	2103      	movs	r1, #3
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f7fe fcf0 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_print(".");
 8002b80:	4827      	ldr	r0, [pc, #156]	; (8002c20 <main+0x938>)
 8002b82:	f7fe fccf 	bl	8001524 <LCD1602_print>
		  		  LCD1602_setCursor(1,4);
 8002b86:	2104      	movs	r1, #4
 8002b88:	2001      	movs	r0, #1
 8002b8a:	f7fe fce9 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(voltValue[4]%100);
 8002b8e:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <main+0x930>)
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <main+0x934>)
 8002b94:	fb82 1203 	smull	r1, r2, r2, r3
 8002b98:	1151      	asrs	r1, r2, #5
 8002b9a:	17da      	asrs	r2, r3, #31
 8002b9c:	1a8a      	subs	r2, r1, r2
 8002b9e:	2164      	movs	r1, #100	; 0x64
 8002ba0:	fb01 f202 	mul.w	r2, r1, r2
 8002ba4:	1a9a      	subs	r2, r3, r2
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	f7fe fd2e 	bl	8001608 <LCD1602_PrintInt>

		  		  LCD1602_setCursor(1,16);
 8002bac:	2110      	movs	r1, #16
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f7fe fcd6 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(5);
 8002bb4:	2005      	movs	r0, #5
 8002bb6:	f7fe fd27 	bl	8001608 <LCD1602_PrintInt>

		  		LCD1602_setCursor(2,2);
 8002bba:	2102      	movs	r1, #2
 8002bbc:	2002      	movs	r0, #2
 8002bbe:	f7fe fccf 	bl	8001560 <LCD1602_setCursor>
		  				  		  LCD1602_PrintInt(tempValue[4]/1);
 8002bc2:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <main+0x93c>)
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe fd1e 	bl	8001608 <LCD1602_PrintInt>
		  				  		  LCD1602_setCursor(2,4);
 8002bcc:	2104      	movs	r1, #4
 8002bce:	2002      	movs	r0, #2
 8002bd0:	f7fe fcc6 	bl	8001560 <LCD1602_setCursor>
		  				  		  LCD1602_print(".");
 8002bd4:	4812      	ldr	r0, [pc, #72]	; (8002c20 <main+0x938>)
 8002bd6:	f7fe fca5 	bl	8001524 <LCD1602_print>
		  				  		  LCD1602_setCursor(2,5);
 8002bda:	2105      	movs	r1, #5
 8002bdc:	2002      	movs	r0, #2
 8002bde:	f7fe fcbf 	bl	8001560 <LCD1602_setCursor>
		  				  		  tempIntVal=tempValue[4];
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <main+0x93c>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	4a10      	ldr	r2, [pc, #64]	; (8002c28 <main+0x940>)
 8002be8:	6013      	str	r3, [r2, #0]
		  				  		  tempIntVal %= 10;
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <main+0x940>)
 8002bec:	6819      	ldr	r1, [r3, #0]
 8002bee:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <main+0x944>)
 8002bf0:	fb83 2301 	smull	r2, r3, r3, r1
 8002bf4:	109a      	asrs	r2, r3, #2
 8002bf6:	17cb      	asrs	r3, r1, #31
 8002bf8:	1ad2      	subs	r2, r2, r3
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	1aca      	subs	r2, r1, r3
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <main+0x940>)
 8002c06:	601a      	str	r2, [r3, #0]
		  				  		  LCD1602_PrintInt(tempIntVal);
 8002c08:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <main+0x940>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe fcfb 	bl	8001608 <LCD1602_PrintInt>
		  				  		LCD1602_noBlink();
 8002c12:	f7fe fce7 	bl	80015e4 <LCD1602_noBlink>
		  		  break;
 8002c16:	e0f0      	b.n	8002dfa <main+0xb12>
 8002c18:	20000370 	.word	0x20000370
 8002c1c:	51eb851f 	.word	0x51eb851f
 8002c20:	08008da4 	.word	0x08008da4
 8002c24:	20000418 	.word	0x20000418
 8002c28:	20000190 	.word	0x20000190
 8002c2c:	66666667 	.word	0x66666667
		  	  case 5:

		  		  LCD1602_setCursor(1,2);
 8002c30:	2102      	movs	r1, #2
 8002c32:	2001      	movs	r0, #1
 8002c34:	f7fe fc94 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(voltValue[5]/100);
 8002c38:	4b71      	ldr	r3, [pc, #452]	; (8002e00 <main+0xb18>)
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	4a71      	ldr	r2, [pc, #452]	; (8002e04 <main+0xb1c>)
 8002c3e:	fb82 1203 	smull	r1, r2, r2, r3
 8002c42:	1152      	asrs	r2, r2, #5
 8002c44:	17db      	asrs	r3, r3, #31
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe fcdd 	bl	8001608 <LCD1602_PrintInt>
		  		  LCD1602_setCursor(1,3);
 8002c4e:	2103      	movs	r1, #3
 8002c50:	2001      	movs	r0, #1
 8002c52:	f7fe fc85 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_print(".");
 8002c56:	486c      	ldr	r0, [pc, #432]	; (8002e08 <main+0xb20>)
 8002c58:	f7fe fc64 	bl	8001524 <LCD1602_print>
		  		  LCD1602_setCursor(1,4);
 8002c5c:	2104      	movs	r1, #4
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f7fe fc7e 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(voltValue[5]%100);
 8002c64:	4b66      	ldr	r3, [pc, #408]	; (8002e00 <main+0xb18>)
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	4a66      	ldr	r2, [pc, #408]	; (8002e04 <main+0xb1c>)
 8002c6a:	fb82 1203 	smull	r1, r2, r2, r3
 8002c6e:	1151      	asrs	r1, r2, #5
 8002c70:	17da      	asrs	r2, r3, #31
 8002c72:	1a8a      	subs	r2, r1, r2
 8002c74:	2164      	movs	r1, #100	; 0x64
 8002c76:	fb01 f202 	mul.w	r2, r1, r2
 8002c7a:	1a9a      	subs	r2, r3, r2
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	f7fe fcc3 	bl	8001608 <LCD1602_PrintInt>

		  		  LCD1602_setCursor(1,16);
 8002c82:	2110      	movs	r1, #16
 8002c84:	2001      	movs	r0, #1
 8002c86:	f7fe fc6b 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(6);
 8002c8a:	2006      	movs	r0, #6
 8002c8c:	f7fe fcbc 	bl	8001608 <LCD1602_PrintInt>

		  		LCD1602_setCursor(2,2);
 8002c90:	2102      	movs	r1, #2
 8002c92:	2002      	movs	r0, #2
 8002c94:	f7fe fc64 	bl	8001560 <LCD1602_setCursor>
		  				  		  LCD1602_PrintInt(tempValue[5]/1 - 10);
 8002c98:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <main+0xb24>)
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	3b0a      	subs	r3, #10
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fcb2 	bl	8001608 <LCD1602_PrintInt>
		  				  		  LCD1602_setCursor(2,4);
 8002ca4:	2104      	movs	r1, #4
 8002ca6:	2002      	movs	r0, #2
 8002ca8:	f7fe fc5a 	bl	8001560 <LCD1602_setCursor>
		  				  		  LCD1602_print(".");
 8002cac:	4856      	ldr	r0, [pc, #344]	; (8002e08 <main+0xb20>)
 8002cae:	f7fe fc39 	bl	8001524 <LCD1602_print>
		  				  		  LCD1602_setCursor(2,5);
 8002cb2:	2105      	movs	r1, #5
 8002cb4:	2002      	movs	r0, #2
 8002cb6:	f7fe fc53 	bl	8001560 <LCD1602_setCursor>
		  				  		  tempIntVal=tempValue[5];
 8002cba:	4b54      	ldr	r3, [pc, #336]	; (8002e0c <main+0xb24>)
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	4a54      	ldr	r2, [pc, #336]	; (8002e10 <main+0xb28>)
 8002cc0:	6013      	str	r3, [r2, #0]
		  				  		  tempIntVal %= 10;
 8002cc2:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <main+0xb28>)
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <main+0xb2c>)
 8002cc8:	fb83 2301 	smull	r2, r3, r3, r1
 8002ccc:	109a      	asrs	r2, r3, #2
 8002cce:	17cb      	asrs	r3, r1, #31
 8002cd0:	1ad2      	subs	r2, r2, r3
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	1aca      	subs	r2, r1, r3
 8002cdc:	4b4c      	ldr	r3, [pc, #304]	; (8002e10 <main+0xb28>)
 8002cde:	601a      	str	r2, [r3, #0]
		  				  		  LCD1602_PrintInt(tempIntVal);
 8002ce0:	4b4b      	ldr	r3, [pc, #300]	; (8002e10 <main+0xb28>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe fc8f 	bl	8001608 <LCD1602_PrintInt>
		  				  		LCD1602_noBlink();
 8002cea:	f7fe fc7b 	bl	80015e4 <LCD1602_noBlink>

		  		  break;
 8002cee:	e084      	b.n	8002dfa <main+0xb12>
		  	  case 6:

		  		  LCD1602_setCursor(1,2);
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f7fe fc34 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(voltValue[6]/100);
 8002cf8:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <main+0xb18>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	4a41      	ldr	r2, [pc, #260]	; (8002e04 <main+0xb1c>)
 8002cfe:	fb82 1203 	smull	r1, r2, r2, r3
 8002d02:	1152      	asrs	r2, r2, #5
 8002d04:	17db      	asrs	r3, r3, #31
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe fc7d 	bl	8001608 <LCD1602_PrintInt>
		  		  LCD1602_setCursor(1,3);
 8002d0e:	2103      	movs	r1, #3
 8002d10:	2001      	movs	r0, #1
 8002d12:	f7fe fc25 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_print(".");
 8002d16:	483c      	ldr	r0, [pc, #240]	; (8002e08 <main+0xb20>)
 8002d18:	f7fe fc04 	bl	8001524 <LCD1602_print>
		  		  LCD1602_setCursor(1,4);
 8002d1c:	2104      	movs	r1, #4
 8002d1e:	2001      	movs	r0, #1
 8002d20:	f7fe fc1e 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(voltValue[6]%100);
 8002d24:	4b36      	ldr	r3, [pc, #216]	; (8002e00 <main+0xb18>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	4a36      	ldr	r2, [pc, #216]	; (8002e04 <main+0xb1c>)
 8002d2a:	fb82 1203 	smull	r1, r2, r2, r3
 8002d2e:	1151      	asrs	r1, r2, #5
 8002d30:	17da      	asrs	r2, r3, #31
 8002d32:	1a8a      	subs	r2, r1, r2
 8002d34:	2164      	movs	r1, #100	; 0x64
 8002d36:	fb01 f202 	mul.w	r2, r1, r2
 8002d3a:	1a9a      	subs	r2, r3, r2
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f7fe fc63 	bl	8001608 <LCD1602_PrintInt>

		  		  LCD1602_setCursor(1,16);
 8002d42:	2110      	movs	r1, #16
 8002d44:	2001      	movs	r0, #1
 8002d46:	f7fe fc0b 	bl	8001560 <LCD1602_setCursor>
		  		  LCD1602_PrintInt(7);
 8002d4a:	2007      	movs	r0, #7
 8002d4c:	f7fe fc5c 	bl	8001608 <LCD1602_PrintInt>

		  		LCD1602_setCursor(2,2);
 8002d50:	2102      	movs	r1, #2
 8002d52:	2002      	movs	r0, #2
 8002d54:	f7fe fc04 	bl	8001560 <LCD1602_setCursor>
		  				  		  LCD1602_PrintInt(tempValue[6]/1 );
 8002d58:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <main+0xb24>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe fc53 	bl	8001608 <LCD1602_PrintInt>
		  				  		  LCD1602_setCursor(2,4);
 8002d62:	2104      	movs	r1, #4
 8002d64:	2002      	movs	r0, #2
 8002d66:	f7fe fbfb 	bl	8001560 <LCD1602_setCursor>
		  				  		  LCD1602_print(".");
 8002d6a:	4827      	ldr	r0, [pc, #156]	; (8002e08 <main+0xb20>)
 8002d6c:	f7fe fbda 	bl	8001524 <LCD1602_print>
		  				  		  LCD1602_setCursor(2,5);
 8002d70:	2105      	movs	r1, #5
 8002d72:	2002      	movs	r0, #2
 8002d74:	f7fe fbf4 	bl	8001560 <LCD1602_setCursor>
		  				  		  tempIntVal=tempValue[6];
 8002d78:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <main+0xb24>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	4a24      	ldr	r2, [pc, #144]	; (8002e10 <main+0xb28>)
 8002d7e:	6013      	str	r3, [r2, #0]
		  				  		  tempIntVal %= 10;
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <main+0xb28>)
 8002d82:	6819      	ldr	r1, [r3, #0]
 8002d84:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <main+0xb2c>)
 8002d86:	fb83 2301 	smull	r2, r3, r3, r1
 8002d8a:	109a      	asrs	r2, r3, #2
 8002d8c:	17cb      	asrs	r3, r1, #31
 8002d8e:	1ad2      	subs	r2, r2, r3
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	1aca      	subs	r2, r1, r3
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <main+0xb28>)
 8002d9c:	601a      	str	r2, [r3, #0]
		  				  		  LCD1602_PrintInt(tempIntVal);
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <main+0xb28>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe fc30 	bl	8001608 <LCD1602_PrintInt>
		  				  		LCD1602_noBlink();
 8002da8:	f7fe fc1c 	bl	80015e4 <LCD1602_noBlink>
		  		  break;
 8002dac:	e025      	b.n	8002dfa <main+0xb12>


	  }
		  	  else
		  	  {
		  		      LCD1602_clear();
 8002dae:	f7fe fc0f 	bl	80015d0 <LCD1602_clear>
		  		  	  LCD1602_setCursor(1,1);
 8002db2:	2101      	movs	r1, #1
 8002db4:	2001      	movs	r0, #1
 8002db6:	f7fe fbd3 	bl	8001560 <LCD1602_setCursor>
		  			  LCD1602_print("PLEASE TOUCH");
 8002dba:	4817      	ldr	r0, [pc, #92]	; (8002e18 <main+0xb30>)
 8002dbc:	f7fe fbb2 	bl	8001524 <LCD1602_print>
		  			  LCD1602_setCursor(2,5);
 8002dc0:	2105      	movs	r1, #5
 8002dc2:	2002      	movs	r0, #2
 8002dc4:	f7fe fbcc 	bl	8001560 <LCD1602_setCursor>
		  			  LCD1602_print("BUTTON");
 8002dc8:	4814      	ldr	r0, [pc, #80]	; (8002e1c <main+0xb34>)
 8002dca:	f7fe fbab 	bl	8001524 <LCD1602_print>
		  			  LCD1602_noCursor();
 8002dce:	f7fe fbed 	bl	80015ac <LCD1602_noCursor>
		  			  ClearStatus=1;
 8002dd2:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <main+0xb38>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
		  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dde:	4811      	ldr	r0, [pc, #68]	; (8002e24 <main+0xb3c>)
 8002de0:	f002 faa4 	bl	800532c <HAL_GPIO_WritePin>
		  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8002de4:	2201      	movs	r2, #1
 8002de6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dea:	480e      	ldr	r0, [pc, #56]	; (8002e24 <main+0xb3c>)
 8002dec:	f002 fa9e 	bl	800532c <HAL_GPIO_WritePin>


		  			rgbAnimation();
 8002df0:	f7ff f9d4 	bl	800219c <rgbAnimation>
 8002df4:	f7ff bad3 	b.w	800239e <main+0xb6>
		  		  break;
 8002df8:	bf00      	nop
	  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8002dfa:	f7ff bad0 	b.w	800239e <main+0xb6>
 8002dfe:	bf00      	nop
 8002e00:	20000370 	.word	0x20000370
 8002e04:	51eb851f 	.word	0x51eb851f
 8002e08:	08008da4 	.word	0x08008da4
 8002e0c:	20000418 	.word	0x20000418
 8002e10:	20000190 	.word	0x20000190
 8002e14:	66666667 	.word	0x66666667
 8002e18:	08008e0c 	.word	0x08008e0c
 8002e1c:	08008e1c 	.word	0x08008e1c
 8002e20:	20000198 	.word	0x20000198
 8002e24:	40021000 	.word	0x40021000

08002e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b094      	sub	sp, #80	; 0x50
 8002e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e2e:	f107 0320 	add.w	r3, r7, #32
 8002e32:	2230      	movs	r2, #48	; 0x30
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f005 f94b 	bl	80080d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e3c:	f107 030c 	add.w	r3, r7, #12
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <SystemClock_Config+0xcc>)
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	4a27      	ldr	r2, [pc, #156]	; (8002ef4 <SystemClock_Config+0xcc>)
 8002e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <SystemClock_Config+0xcc>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e68:	2300      	movs	r3, #0
 8002e6a:	607b      	str	r3, [r7, #4]
 8002e6c:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <SystemClock_Config+0xd0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a21      	ldr	r2, [pc, #132]	; (8002ef8 <SystemClock_Config+0xd0>)
 8002e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	4b1f      	ldr	r3, [pc, #124]	; (8002ef8 <SystemClock_Config+0xd0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e84:	2302      	movs	r3, #2
 8002e86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e90:	2302      	movs	r3, #2
 8002e92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e94:	2300      	movs	r3, #0
 8002e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e98:	2308      	movs	r3, #8
 8002e9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 8002e9c:	233c      	movs	r3, #60	; 0x3c
 8002e9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ea8:	f107 0320 	add.w	r3, r7, #32
 8002eac:	4618      	mov	r0, r3
 8002eae:	f002 fa7b 	bl	80053a8 <HAL_RCC_OscConfig>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002eb8:	f000 fc52 	bl	8003760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ebc:	230f      	movs	r3, #15
 8002ebe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ecc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	2101      	movs	r1, #1
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 fcd4 	bl	8005888 <HAL_RCC_ClockConfig>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002ee6:	f000 fc3b 	bl	8003760 <Error_Handler>
  }
}
 8002eea:	bf00      	nop
 8002eec:	3750      	adds	r7, #80	; 0x50
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40007000 	.word	0x40007000

08002efc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f02:	463b      	mov	r3, r7
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002f0e:	4b83      	ldr	r3, [pc, #524]	; (800311c <MX_ADC1_Init+0x220>)
 8002f10:	4a83      	ldr	r2, [pc, #524]	; (8003120 <MX_ADC1_Init+0x224>)
 8002f12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002f14:	4b81      	ldr	r3, [pc, #516]	; (800311c <MX_ADC1_Init+0x220>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f1a:	4b80      	ldr	r3, [pc, #512]	; (800311c <MX_ADC1_Init+0x220>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002f20:	4b7e      	ldr	r3, [pc, #504]	; (800311c <MX_ADC1_Init+0x220>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f26:	4b7d      	ldr	r3, [pc, #500]	; (800311c <MX_ADC1_Init+0x220>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f2c:	4b7b      	ldr	r3, [pc, #492]	; (800311c <MX_ADC1_Init+0x220>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f34:	4b79      	ldr	r3, [pc, #484]	; (800311c <MX_ADC1_Init+0x220>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f3a:	4b78      	ldr	r3, [pc, #480]	; (800311c <MX_ADC1_Init+0x220>)
 8002f3c:	4a79      	ldr	r2, [pc, #484]	; (8003124 <MX_ADC1_Init+0x228>)
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f40:	4b76      	ldr	r3, [pc, #472]	; (800311c <MX_ADC1_Init+0x220>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 15;
 8002f46:	4b75      	ldr	r3, [pc, #468]	; (800311c <MX_ADC1_Init+0x220>)
 8002f48:	220f      	movs	r2, #15
 8002f4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f4c:	4b73      	ldr	r3, [pc, #460]	; (800311c <MX_ADC1_Init+0x220>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f54:	4b71      	ldr	r3, [pc, #452]	; (800311c <MX_ADC1_Init+0x220>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f5a:	4870      	ldr	r0, [pc, #448]	; (800311c <MX_ADC1_Init+0x220>)
 8002f5c:	f001 f896 	bl	800408c <HAL_ADC_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002f66:	f000 fbfb 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002f72:	2307      	movs	r3, #7
 8002f74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f76:	463b      	mov	r3, r7
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4868      	ldr	r0, [pc, #416]	; (800311c <MX_ADC1_Init+0x220>)
 8002f7c:	f001 fa54 	bl	8004428 <HAL_ADC_ConfigChannel>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002f86:	f000 fbeb 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f92:	463b      	mov	r3, r7
 8002f94:	4619      	mov	r1, r3
 8002f96:	4861      	ldr	r0, [pc, #388]	; (800311c <MX_ADC1_Init+0x220>)
 8002f98:	f001 fa46 	bl	8004428 <HAL_ADC_ConfigChannel>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002fa2:	f000 fbdd 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002faa:	2303      	movs	r3, #3
 8002fac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fae:	463b      	mov	r3, r7
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	485a      	ldr	r0, [pc, #360]	; (800311c <MX_ADC1_Init+0x220>)
 8002fb4:	f001 fa38 	bl	8004428 <HAL_ADC_ConfigChannel>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002fbe:	f000 fbcf 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fca:	463b      	mov	r3, r7
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4853      	ldr	r0, [pc, #332]	; (800311c <MX_ADC1_Init+0x220>)
 8002fd0:	f001 fa2a 	bl	8004428 <HAL_ADC_ConfigChannel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8002fda:	f000 fbc1 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002fde:	2305      	movs	r3, #5
 8002fe0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002fe2:	2305      	movs	r3, #5
 8002fe4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fe6:	463b      	mov	r3, r7
 8002fe8:	4619      	mov	r1, r3
 8002fea:	484c      	ldr	r0, [pc, #304]	; (800311c <MX_ADC1_Init+0x220>)
 8002fec:	f001 fa1c 	bl	8004428 <HAL_ADC_ConfigChannel>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8002ff6:	f000 fbb3 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002ffa:	2306      	movs	r3, #6
 8002ffc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002ffe:	2306      	movs	r3, #6
 8003000:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003002:	463b      	mov	r3, r7
 8003004:	4619      	mov	r1, r3
 8003006:	4845      	ldr	r0, [pc, #276]	; (800311c <MX_ADC1_Init+0x220>)
 8003008:	f001 fa0e 	bl	8004428 <HAL_ADC_ConfigChannel>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8003012:	f000 fba5 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003016:	2307      	movs	r3, #7
 8003018:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800301a:	2307      	movs	r3, #7
 800301c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800301e:	463b      	mov	r3, r7
 8003020:	4619      	mov	r1, r3
 8003022:	483e      	ldr	r0, [pc, #248]	; (800311c <MX_ADC1_Init+0x220>)
 8003024:	f001 fa00 	bl	8004428 <HAL_ADC_ConfigChannel>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 800302e:	f000 fb97 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003032:	2308      	movs	r3, #8
 8003034:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003036:	2308      	movs	r3, #8
 8003038:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800303a:	463b      	mov	r3, r7
 800303c:	4619      	mov	r1, r3
 800303e:	4837      	ldr	r0, [pc, #220]	; (800311c <MX_ADC1_Init+0x220>)
 8003040:	f001 f9f2 	bl	8004428 <HAL_ADC_ConfigChannel>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800304a:	f000 fb89 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800304e:	2309      	movs	r3, #9
 8003050:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003052:	2309      	movs	r3, #9
 8003054:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003056:	463b      	mov	r3, r7
 8003058:	4619      	mov	r1, r3
 800305a:	4830      	ldr	r0, [pc, #192]	; (800311c <MX_ADC1_Init+0x220>)
 800305c:	f001 f9e4 	bl	8004428 <HAL_ADC_ConfigChannel>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8003066:	f000 fb7b 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800306a:	230a      	movs	r3, #10
 800306c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800306e:	230a      	movs	r3, #10
 8003070:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003072:	463b      	mov	r3, r7
 8003074:	4619      	mov	r1, r3
 8003076:	4829      	ldr	r0, [pc, #164]	; (800311c <MX_ADC1_Init+0x220>)
 8003078:	f001 f9d6 	bl	8004428 <HAL_ADC_ConfigChannel>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8003082:	f000 fb6d 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003086:	230b      	movs	r3, #11
 8003088:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800308a:	230b      	movs	r3, #11
 800308c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800308e:	463b      	mov	r3, r7
 8003090:	4619      	mov	r1, r3
 8003092:	4822      	ldr	r0, [pc, #136]	; (800311c <MX_ADC1_Init+0x220>)
 8003094:	f001 f9c8 	bl	8004428 <HAL_ADC_ConfigChannel>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 800309e:	f000 fb5f 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80030a2:	230c      	movs	r3, #12
 80030a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80030a6:	230c      	movs	r3, #12
 80030a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030aa:	463b      	mov	r3, r7
 80030ac:	4619      	mov	r1, r3
 80030ae:	481b      	ldr	r0, [pc, #108]	; (800311c <MX_ADC1_Init+0x220>)
 80030b0:	f001 f9ba 	bl	8004428 <HAL_ADC_ConfigChannel>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_ADC1_Init+0x1c2>
  {
    Error_Handler();
 80030ba:	f000 fb51 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80030be:	230d      	movs	r3, #13
 80030c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80030c2:	230d      	movs	r3, #13
 80030c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030c6:	463b      	mov	r3, r7
 80030c8:	4619      	mov	r1, r3
 80030ca:	4814      	ldr	r0, [pc, #80]	; (800311c <MX_ADC1_Init+0x220>)
 80030cc:	f001 f9ac 	bl	8004428 <HAL_ADC_ConfigChannel>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_ADC1_Init+0x1de>
  {
    Error_Handler();
 80030d6:	f000 fb43 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80030da:	230e      	movs	r3, #14
 80030dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80030de:	230e      	movs	r3, #14
 80030e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030e2:	463b      	mov	r3, r7
 80030e4:	4619      	mov	r1, r3
 80030e6:	480d      	ldr	r0, [pc, #52]	; (800311c <MX_ADC1_Init+0x220>)
 80030e8:	f001 f99e 	bl	8004428 <HAL_ADC_ConfigChannel>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_ADC1_Init+0x1fa>
  {
    Error_Handler();
 80030f2:	f000 fb35 	bl	8003760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80030f6:	230f      	movs	r3, #15
 80030f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 80030fa:	230f      	movs	r3, #15
 80030fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030fe:	463b      	mov	r3, r7
 8003100:	4619      	mov	r1, r3
 8003102:	4806      	ldr	r0, [pc, #24]	; (800311c <MX_ADC1_Init+0x220>)
 8003104:	f001 f990 	bl	8004428 <HAL_ADC_ConfigChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_ADC1_Init+0x216>
  {
    Error_Handler();
 800310e:	f000 fb27 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000390 	.word	0x20000390
 8003120:	40012000 	.word	0x40012000
 8003124:	0f000001 	.word	0x0f000001

08003128 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800312c:	4b17      	ldr	r3, [pc, #92]	; (800318c <MX_SPI3_Init+0x64>)
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <MX_SPI3_Init+0x68>)
 8003130:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003132:	4b16      	ldr	r3, [pc, #88]	; (800318c <MX_SPI3_Init+0x64>)
 8003134:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003138:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <MX_SPI3_Init+0x64>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <MX_SPI3_Init+0x64>)
 8003142:	2200      	movs	r2, #0
 8003144:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003146:	4b11      	ldr	r3, [pc, #68]	; (800318c <MX_SPI3_Init+0x64>)
 8003148:	2200      	movs	r2, #0
 800314a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <MX_SPI3_Init+0x64>)
 800314e:	2200      	movs	r2, #0
 8003150:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <MX_SPI3_Init+0x64>)
 8003154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003158:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <MX_SPI3_Init+0x64>)
 800315c:	2220      	movs	r2, #32
 800315e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <MX_SPI3_Init+0x64>)
 8003162:	2200      	movs	r2, #0
 8003164:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <MX_SPI3_Init+0x64>)
 8003168:	2200      	movs	r2, #0
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <MX_SPI3_Init+0x64>)
 800316e:	2200      	movs	r2, #0
 8003170:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <MX_SPI3_Init+0x64>)
 8003174:	220a      	movs	r2, #10
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003178:	4804      	ldr	r0, [pc, #16]	; (800318c <MX_SPI3_Init+0x64>)
 800317a:	f002 fd83 	bl	8005c84 <HAL_SPI_Init>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003184:	f000 faec 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003188:	bf00      	nop
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20000310 	.word	0x20000310
 8003190:	40003c00 	.word	0x40003c00

08003194 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800319a:	f107 0308 	add.w	r3, r7, #8
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031a8:	463b      	mov	r3, r7
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031b0:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <MX_TIM1_Init+0x9c>)
 80031b2:	4a20      	ldr	r2, [pc, #128]	; (8003234 <MX_TIM1_Init+0xa0>)
 80031b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000-1;
 80031b6:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <MX_TIM1_Init+0x9c>)
 80031b8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80031bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031be:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <MX_TIM1_Init+0x9c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <MX_TIM1_Init+0x9c>)
 80031c6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80031ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031cc:	4b18      	ldr	r3, [pc, #96]	; (8003230 <MX_TIM1_Init+0x9c>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <MX_TIM1_Init+0x9c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d8:	4b15      	ldr	r3, [pc, #84]	; (8003230 <MX_TIM1_Init+0x9c>)
 80031da:	2200      	movs	r2, #0
 80031dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031de:	4814      	ldr	r0, [pc, #80]	; (8003230 <MX_TIM1_Init+0x9c>)
 80031e0:	f003 f944 	bl	800646c <HAL_TIM_Base_Init>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80031ea:	f000 fab9 	bl	8003760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031f4:	f107 0308 	add.w	r3, r7, #8
 80031f8:	4619      	mov	r1, r3
 80031fa:	480d      	ldr	r0, [pc, #52]	; (8003230 <MX_TIM1_Init+0x9c>)
 80031fc:	f003 fc38 	bl	8006a70 <HAL_TIM_ConfigClockSource>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003206:	f000 faab 	bl	8003760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800320a:	2320      	movs	r3, #32
 800320c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003212:	463b      	mov	r3, r7
 8003214:	4619      	mov	r1, r3
 8003216:	4806      	ldr	r0, [pc, #24]	; (8003230 <MX_TIM1_Init+0x9c>)
 8003218:	f004 f81a 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003222:	f000 fa9d 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003226:	bf00      	nop
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200004bc 	.word	0x200004bc
 8003234:	40010000 	.word	0x40010000

08003238 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08e      	sub	sp, #56	; 0x38
 800323c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800323e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800324c:	f107 0320 	add.w	r3, r7, #32
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003256:	1d3b      	adds	r3, r7, #4
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	611a      	str	r2, [r3, #16]
 8003264:	615a      	str	r2, [r3, #20]
 8003266:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003268:	4b37      	ldr	r3, [pc, #220]	; (8003348 <MX_TIM4_Init+0x110>)
 800326a:	4a38      	ldr	r2, [pc, #224]	; (800334c <MX_TIM4_Init+0x114>)
 800326c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1384-1;
 800326e:	4b36      	ldr	r3, [pc, #216]	; (8003348 <MX_TIM4_Init+0x110>)
 8003270:	f240 5267 	movw	r2, #1383	; 0x567
 8003274:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003276:	4b34      	ldr	r3, [pc, #208]	; (8003348 <MX_TIM4_Init+0x110>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 800327c:	4b32      	ldr	r3, [pc, #200]	; (8003348 <MX_TIM4_Init+0x110>)
 800327e:	22fe      	movs	r2, #254	; 0xfe
 8003280:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003282:	4b31      	ldr	r3, [pc, #196]	; (8003348 <MX_TIM4_Init+0x110>)
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003288:	4b2f      	ldr	r3, [pc, #188]	; (8003348 <MX_TIM4_Init+0x110>)
 800328a:	2200      	movs	r2, #0
 800328c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800328e:	482e      	ldr	r0, [pc, #184]	; (8003348 <MX_TIM4_Init+0x110>)
 8003290:	f003 f8ec 	bl	800646c <HAL_TIM_Base_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800329a:	f000 fa61 	bl	8003760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800329e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80032a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032a8:	4619      	mov	r1, r3
 80032aa:	4827      	ldr	r0, [pc, #156]	; (8003348 <MX_TIM4_Init+0x110>)
 80032ac:	f003 fbe0 	bl	8006a70 <HAL_TIM_ConfigClockSource>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80032b6:	f000 fa53 	bl	8003760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80032ba:	4823      	ldr	r0, [pc, #140]	; (8003348 <MX_TIM4_Init+0x110>)
 80032bc:	f003 f949 	bl	8006552 <HAL_TIM_PWM_Init>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80032c6:	f000 fa4b 	bl	8003760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032d2:	f107 0320 	add.w	r3, r7, #32
 80032d6:	4619      	mov	r1, r3
 80032d8:	481b      	ldr	r0, [pc, #108]	; (8003348 <MX_TIM4_Init+0x110>)
 80032da:	f003 ffb9 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80032e4:	f000 fa3c 	bl	8003760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032e8:	2360      	movs	r3, #96	; 0x60
 80032ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032f8:	1d3b      	adds	r3, r7, #4
 80032fa:	2200      	movs	r2, #0
 80032fc:	4619      	mov	r1, r3
 80032fe:	4812      	ldr	r0, [pc, #72]	; (8003348 <MX_TIM4_Init+0x110>)
 8003300:	f003 faf0 	bl	80068e4 <HAL_TIM_PWM_ConfigChannel>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800330a:	f000 fa29 	bl	8003760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	2204      	movs	r2, #4
 8003312:	4619      	mov	r1, r3
 8003314:	480c      	ldr	r0, [pc, #48]	; (8003348 <MX_TIM4_Init+0x110>)
 8003316:	f003 fae5 	bl	80068e4 <HAL_TIM_PWM_ConfigChannel>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8003320:	f000 fa1e 	bl	8003760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	2208      	movs	r2, #8
 8003328:	4619      	mov	r1, r3
 800332a:	4807      	ldr	r0, [pc, #28]	; (8003348 <MX_TIM4_Init+0x110>)
 800332c:	f003 fada 	bl	80068e4 <HAL_TIM_PWM_ConfigChannel>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8003336:	f000 fa13 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800333a:	4803      	ldr	r0, [pc, #12]	; (8003348 <MX_TIM4_Init+0x110>)
 800333c:	f000 fbb4 	bl	8003aa8 <HAL_TIM_MspPostInit>

}
 8003340:	bf00      	nop
 8003342:	3738      	adds	r7, #56	; 0x38
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000288 	.word	0x20000288
 800334c:	40000800 	.word	0x40000800

08003350 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003356:	f107 0320 	add.w	r3, r7, #32
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	609a      	str	r2, [r3, #8]
 800336a:	60da      	str	r2, [r3, #12]
 800336c:	611a      	str	r2, [r3, #16]
 800336e:	615a      	str	r2, [r3, #20]
 8003370:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003372:	4b22      	ldr	r3, [pc, #136]	; (80033fc <MX_TIM5_Init+0xac>)
 8003374:	4a22      	ldr	r2, [pc, #136]	; (8003400 <MX_TIM5_Init+0xb0>)
 8003376:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 655;
 8003378:	4b20      	ldr	r3, [pc, #128]	; (80033fc <MX_TIM5_Init+0xac>)
 800337a:	f240 228f 	movw	r2, #655	; 0x28f
 800337e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003380:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <MX_TIM5_Init+0xac>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 665;
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <MX_TIM5_Init+0xac>)
 8003388:	f240 2299 	movw	r2, #665	; 0x299
 800338c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800338e:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <MX_TIM5_Init+0xac>)
 8003390:	2200      	movs	r2, #0
 8003392:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <MX_TIM5_Init+0xac>)
 8003396:	2200      	movs	r2, #0
 8003398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800339a:	4818      	ldr	r0, [pc, #96]	; (80033fc <MX_TIM5_Init+0xac>)
 800339c:	f003 f8d9 	bl	8006552 <HAL_TIM_PWM_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80033a6:	f000 f9db 	bl	8003760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80033b2:	f107 0320 	add.w	r3, r7, #32
 80033b6:	4619      	mov	r1, r3
 80033b8:	4810      	ldr	r0, [pc, #64]	; (80033fc <MX_TIM5_Init+0xac>)
 80033ba:	f003 ff49 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80033c4:	f000 f9cc 	bl	8003760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033c8:	2360      	movs	r3, #96	; 0x60
 80033ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033d8:	1d3b      	adds	r3, r7, #4
 80033da:	2200      	movs	r2, #0
 80033dc:	4619      	mov	r1, r3
 80033de:	4807      	ldr	r0, [pc, #28]	; (80033fc <MX_TIM5_Init+0xac>)
 80033e0:	f003 fa80 	bl	80068e4 <HAL_TIM_PWM_ConfigChannel>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80033ea:	f000 f9b9 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80033ee:	4803      	ldr	r0, [pc, #12]	; (80033fc <MX_TIM5_Init+0xac>)
 80033f0:	f000 fb5a 	bl	8003aa8 <HAL_TIM_MspPostInit>

}
 80033f4:	bf00      	nop
 80033f6:	3728      	adds	r7, #40	; 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200002d0 	.word	0x200002d0
 8003400:	40000c00 	.word	0x40000c00

08003404 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800340a:	463b      	mov	r3, r7
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003412:	4b15      	ldr	r3, [pc, #84]	; (8003468 <MX_TIM7_Init+0x64>)
 8003414:	4a15      	ldr	r2, [pc, #84]	; (800346c <MX_TIM7_Init+0x68>)
 8003416:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 60-1;
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <MX_TIM7_Init+0x64>)
 800341a:	223b      	movs	r2, #59	; 0x3b
 800341c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <MX_TIM7_Init+0x64>)
 8003420:	2200      	movs	r2, #0
 8003422:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xffff-1;
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <MX_TIM7_Init+0x64>)
 8003426:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800342a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <MX_TIM7_Init+0x64>)
 800342e:	2200      	movs	r2, #0
 8003430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003432:	480d      	ldr	r0, [pc, #52]	; (8003468 <MX_TIM7_Init+0x64>)
 8003434:	f003 f81a 	bl	800646c <HAL_TIM_Base_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800343e:	f000 f98f 	bl	8003760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003442:	2300      	movs	r3, #0
 8003444:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003446:	2300      	movs	r3, #0
 8003448:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800344a:	463b      	mov	r3, r7
 800344c:	4619      	mov	r1, r3
 800344e:	4806      	ldr	r0, [pc, #24]	; (8003468 <MX_TIM7_Init+0x64>)
 8003450:	f003 fefe 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800345a:	f000 f981 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000520 	.word	0x20000520
 800346c:	40001400 	.word	0x40001400

08003470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <MX_USART1_UART_Init+0x4c>)
 8003476:	4a12      	ldr	r2, [pc, #72]	; (80034c0 <MX_USART1_UART_Init+0x50>)
 8003478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <MX_USART1_UART_Init+0x4c>)
 800347c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003482:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <MX_USART1_UART_Init+0x4c>)
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <MX_USART1_UART_Init+0x4c>)
 800348a:	2200      	movs	r2, #0
 800348c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <MX_USART1_UART_Init+0x4c>)
 8003490:	2200      	movs	r2, #0
 8003492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <MX_USART1_UART_Init+0x4c>)
 8003496:	220c      	movs	r2, #12
 8003498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <MX_USART1_UART_Init+0x4c>)
 800349c:	2200      	movs	r2, #0
 800349e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <MX_USART1_UART_Init+0x4c>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034a6:	4805      	ldr	r0, [pc, #20]	; (80034bc <MX_USART1_UART_Init+0x4c>)
 80034a8:	f003 ff62 	bl	8007370 <HAL_UART_Init>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034b2:	f000 f955 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	200003d8 	.word	0x200003d8
 80034c0:	40011000 	.word	0x40011000

080034c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <MX_DMA_Init+0x3c>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <MX_DMA_Init+0x3c>)
 80034d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <MX_DMA_Init+0x3c>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	2100      	movs	r1, #0
 80034ea:	2038      	movs	r0, #56	; 0x38
 80034ec:	f001 fa72 	bl	80049d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80034f0:	2038      	movs	r0, #56	; 0x38
 80034f2:	f001 fa8b 	bl	8004a0c <HAL_NVIC_EnableIRQ>

}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800

08003504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08c      	sub	sp, #48	; 0x30
 8003508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350a:	f107 031c 	add.w	r3, r7, #28
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	60da      	str	r2, [r3, #12]
 8003518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	4b76      	ldr	r3, [pc, #472]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	4a75      	ldr	r2, [pc, #468]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 8003524:	f043 0310 	orr.w	r3, r3, #16
 8003528:	6313      	str	r3, [r2, #48]	; 0x30
 800352a:	4b73      	ldr	r3, [pc, #460]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	4b6f      	ldr	r3, [pc, #444]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4a6e      	ldr	r2, [pc, #440]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 8003540:	f043 0304 	orr.w	r3, r3, #4
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4b6c      	ldr	r3, [pc, #432]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a67      	ldr	r2, [pc, #412]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 800355c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b65      	ldr	r3, [pc, #404]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4b61      	ldr	r3, [pc, #388]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	4a60      	ldr	r2, [pc, #384]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6313      	str	r3, [r2, #48]	; 0x30
 800357e:	4b5e      	ldr	r3, [pc, #376]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	4b5a      	ldr	r3, [pc, #360]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a59      	ldr	r2, [pc, #356]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 8003594:	f043 0302 	orr.w	r3, r3, #2
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b57      	ldr	r3, [pc, #348]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	4b53      	ldr	r3, [pc, #332]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a52      	ldr	r2, [pc, #328]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 80035b0:	f043 0308 	orr.w	r3, r3, #8
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b50      	ldr	r3, [pc, #320]	; (80036f8 <MX_GPIO_Init+0x1f4>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_OR_WIFI_Pin|LED_OFF_Pin|LED_ON_Pin|FANTRANSISTOR_Pin
 80035c2:	2200      	movs	r2, #0
 80035c4:	f640 7103 	movw	r1, #3843	; 0xf03
 80035c8:	484c      	ldr	r0, [pc, #304]	; (80036fc <MX_GPIO_Init+0x1f8>)
 80035ca:	f001 feaf 	bl	800532c <HAL_GPIO_WritePin>
                          |E_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80035ce:	2200      	movs	r2, #0
 80035d0:	f24f 0140 	movw	r1, #61504	; 0xf040
 80035d4:	484a      	ldr	r0, [pc, #296]	; (8003700 <MX_GPIO_Init+0x1fc>)
 80035d6:	f001 fea9 	bl	800532c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80035da:	2200      	movs	r2, #0
 80035dc:	f640 7104 	movw	r1, #3844	; 0xf04
 80035e0:	4848      	ldr	r0, [pc, #288]	; (8003704 <MX_GPIO_Init+0x200>)
 80035e2:	f001 fea3 	bl	800532c <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80035e6:	2200      	movs	r2, #0
 80035e8:	2180      	movs	r1, #128	; 0x80
 80035ea:	4847      	ldr	r0, [pc, #284]	; (8003708 <MX_GPIO_Init+0x204>)
 80035ec:	f001 fe9e 	bl	800532c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80035f0:	237c      	movs	r3, #124	; 0x7c
 80035f2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035f4:	4b45      	ldr	r3, [pc, #276]	; (800370c <MX_GPIO_Init+0x208>)
 80035f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035fc:	f107 031c 	add.w	r3, r7, #28
 8003600:	4619      	mov	r1, r3
 8003602:	483e      	ldr	r0, [pc, #248]	; (80036fc <MX_GPIO_Init+0x1f8>)
 8003604:	f001 fcf8 	bl	8004ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800360c:	2303      	movs	r3, #3
 800360e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003614:	f107 031c 	add.w	r3, r7, #28
 8003618:	4619      	mov	r1, r3
 800361a:	4838      	ldr	r0, [pc, #224]	; (80036fc <MX_GPIO_Init+0x1f8>)
 800361c:	f001 fcec 	bl	8004ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_OR_WIFI_Pin LED_OFF_Pin LED_ON_Pin FANTRANSISTOR_Pin
                           E_Pin RS_Pin */
  GPIO_InitStruct.Pin = SD_OR_WIFI_Pin|LED_OFF_Pin|LED_ON_Pin|FANTRANSISTOR_Pin
 8003620:	f640 7303 	movw	r3, #3843	; 0xf03
 8003624:	61fb      	str	r3, [r7, #28]
                          |E_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003626:	2301      	movs	r3, #1
 8003628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	2300      	movs	r3, #0
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362e:	2300      	movs	r3, #0
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003632:	f107 031c 	add.w	r3, r7, #28
 8003636:	4619      	mov	r1, r3
 8003638:	4830      	ldr	r0, [pc, #192]	; (80036fc <MX_GPIO_Init+0x1f8>)
 800363a:	f001 fcdd 	bl	8004ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           PB6 */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800363e:	f24f 0340 	movw	r3, #61504	; 0xf040
 8003642:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003644:	2301      	movs	r3, #1
 8003646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	2300      	movs	r3, #0
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364c:	2300      	movs	r3, #0
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003650:	f107 031c 	add.w	r3, r7, #28
 8003654:	4619      	mov	r1, r3
 8003656:	482a      	ldr	r0, [pc, #168]	; (8003700 <MX_GPIO_Init+0x1fc>)
 8003658:	f001 fcce 	bl	8004ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800365c:	f640 7304 	movw	r3, #3844	; 0xf04
 8003660:	61fb      	str	r3, [r7, #28]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003662:	2301      	movs	r3, #1
 8003664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366a:	2300      	movs	r3, #0
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800366e:	f107 031c 	add.w	r3, r7, #28
 8003672:	4619      	mov	r1, r3
 8003674:	4823      	ldr	r0, [pc, #140]	; (8003704 <MX_GPIO_Init+0x200>)
 8003676:	f001 fcbf 	bl	8004ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367e:	2301      	movs	r3, #1
 8003680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003686:	2300      	movs	r3, #0
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800368a:	f107 031c 	add.w	r3, r7, #28
 800368e:	4619      	mov	r1, r3
 8003690:	481d      	ldr	r0, [pc, #116]	; (8003708 <MX_GPIO_Init+0x204>)
 8003692:	f001 fcb1 	bl	8004ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800369a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <MX_GPIO_Init+0x208>)
 800369e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a4:	f107 031c 	add.w	r3, r7, #28
 80036a8:	4619      	mov	r1, r3
 80036aa:	4815      	ldr	r0, [pc, #84]	; (8003700 <MX_GPIO_Init+0x1fc>)
 80036ac:	f001 fca4 	bl	8004ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80036b0:	2200      	movs	r2, #0
 80036b2:	2100      	movs	r1, #0
 80036b4:	2008      	movs	r0, #8
 80036b6:	f001 f98d 	bl	80049d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80036ba:	2008      	movs	r0, #8
 80036bc:	f001 f9a6 	bl	8004a0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80036c0:	2200      	movs	r2, #0
 80036c2:	2100      	movs	r1, #0
 80036c4:	2009      	movs	r0, #9
 80036c6:	f001 f985 	bl	80049d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80036ca:	2009      	movs	r0, #9
 80036cc:	f001 f99e 	bl	8004a0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80036d0:	2200      	movs	r2, #0
 80036d2:	2100      	movs	r1, #0
 80036d4:	200a      	movs	r0, #10
 80036d6:	f001 f97d 	bl	80049d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80036da:	200a      	movs	r0, #10
 80036dc:	f001 f996 	bl	8004a0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80036e0:	2200      	movs	r2, #0
 80036e2:	2100      	movs	r1, #0
 80036e4:	2017      	movs	r0, #23
 80036e6:	f001 f975 	bl	80049d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80036ea:	2017      	movs	r0, #23
 80036ec:	f001 f98e 	bl	8004a0c <HAL_NVIC_EnableIRQ>

}
 80036f0:	bf00      	nop
 80036f2:	3730      	adds	r7, #48	; 0x30
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40021000 	.word	0x40021000
 8003700:	40020400 	.word	0x40020400
 8003704:	40020c00 	.word	0x40020c00
 8003708:	40020800 	.word	0x40020800
 800370c:	10110000 	.word	0x10110000

08003710 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a0d      	ldr	r2, [pc, #52]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d10c      	bne.n	800373c <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		// release the semaphore here
				 /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
				 it will get set to pdTRUE inside the interrupt safe API function if a
				 context switch is required. */
				BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
				 xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
				 then calling portEND_SWITCHING_ISR() will request a context switch. If
				 xHigherPriorityTaskWoken is still pdFALSE then calling
				 portEND_SWITCHING_ISR() will have no effect */

				portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_TIM_PeriodElapsedCallback+0x2c>
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800372e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a06      	ldr	r2, [pc, #24]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_TIM_PeriodElapsedCallback+0x3a>
    HAL_IncTick();
 8003746:	f000 fc5f 	bl	8004008 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40010000 	.word	0x40010000
 8003758:	e000ed04 	.word	0xe000ed04
 800375c:	40001000 	.word	0x40001000

08003760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_MspInit+0x4c>)
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	4a0f      	ldr	r2, [pc, #60]	; (80037bc <HAL_MspInit+0x4c>)
 8003780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003784:	6453      	str	r3, [r2, #68]	; 0x44
 8003786:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <HAL_MspInit+0x4c>)
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800378e:	607b      	str	r3, [r7, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	603b      	str	r3, [r7, #0]
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_MspInit+0x4c>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a08      	ldr	r2, [pc, #32]	; (80037bc <HAL_MspInit+0x4c>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_MspInit+0x4c>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800

080037c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08c      	sub	sp, #48	; 0x30
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c8:	f107 031c 	add.w	r3, r7, #28
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a49      	ldr	r2, [pc, #292]	; (8003904 <HAL_ADC_MspInit+0x144>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	f040 808c 	bne.w	80038fc <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037e4:	2300      	movs	r3, #0
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	4b47      	ldr	r3, [pc, #284]	; (8003908 <HAL_ADC_MspInit+0x148>)
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	4a46      	ldr	r2, [pc, #280]	; (8003908 <HAL_ADC_MspInit+0x148>)
 80037ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f2:	6453      	str	r3, [r2, #68]	; 0x44
 80037f4:	4b44      	ldr	r3, [pc, #272]	; (8003908 <HAL_ADC_MspInit+0x148>)
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	4b40      	ldr	r3, [pc, #256]	; (8003908 <HAL_ADC_MspInit+0x148>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	4a3f      	ldr	r2, [pc, #252]	; (8003908 <HAL_ADC_MspInit+0x148>)
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	6313      	str	r3, [r2, #48]	; 0x30
 8003810:	4b3d      	ldr	r3, [pc, #244]	; (8003908 <HAL_ADC_MspInit+0x148>)
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	4b39      	ldr	r3, [pc, #228]	; (8003908 <HAL_ADC_MspInit+0x148>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	4a38      	ldr	r2, [pc, #224]	; (8003908 <HAL_ADC_MspInit+0x148>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6313      	str	r3, [r2, #48]	; 0x30
 800382c:	4b36      	ldr	r3, [pc, #216]	; (8003908 <HAL_ADC_MspInit+0x148>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	4b32      	ldr	r3, [pc, #200]	; (8003908 <HAL_ADC_MspInit+0x148>)
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	4a31      	ldr	r2, [pc, #196]	; (8003908 <HAL_ADC_MspInit+0x148>)
 8003842:	f043 0302 	orr.w	r3, r3, #2
 8003846:	6313      	str	r3, [r2, #48]	; 0x30
 8003848:	4b2f      	ldr	r3, [pc, #188]	; (8003908 <HAL_ADC_MspInit+0x148>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003854:	233f      	movs	r3, #63	; 0x3f
 8003856:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003858:	2303      	movs	r3, #3
 800385a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	2300      	movs	r3, #0
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003860:	f107 031c 	add.w	r3, r7, #28
 8003864:	4619      	mov	r1, r3
 8003866:	4829      	ldr	r0, [pc, #164]	; (800390c <HAL_ADC_MspInit+0x14c>)
 8003868:	f001 fbc6 	bl	8004ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800386c:	23fe      	movs	r3, #254	; 0xfe
 800386e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003870:	2303      	movs	r3, #3
 8003872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	2300      	movs	r3, #0
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003878:	f107 031c 	add.w	r3, r7, #28
 800387c:	4619      	mov	r1, r3
 800387e:	4824      	ldr	r0, [pc, #144]	; (8003910 <HAL_ADC_MspInit+0x150>)
 8003880:	f001 fbba 	bl	8004ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003884:	2303      	movs	r3, #3
 8003886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003888:	2303      	movs	r3, #3
 800388a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003890:	f107 031c 	add.w	r3, r7, #28
 8003894:	4619      	mov	r1, r3
 8003896:	481f      	ldr	r0, [pc, #124]	; (8003914 <HAL_ADC_MspInit+0x154>)
 8003898:	f001 fbae 	bl	8004ff8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800389c:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <HAL_ADC_MspInit+0x158>)
 800389e:	4a1f      	ldr	r2, [pc, #124]	; (800391c <HAL_ADC_MspInit+0x15c>)
 80038a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_ADC_MspInit+0x158>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038a8:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_ADC_MspInit+0x158>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ae:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <HAL_ADC_MspInit+0x158>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <HAL_ADC_MspInit+0x158>)
 80038b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038bc:	4b16      	ldr	r3, [pc, #88]	; (8003918 <HAL_ADC_MspInit+0x158>)
 80038be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038c4:	4b14      	ldr	r3, [pc, #80]	; (8003918 <HAL_ADC_MspInit+0x158>)
 80038c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038ca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <HAL_ADC_MspInit+0x158>)
 80038ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038d2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80038d4:	4b10      	ldr	r3, [pc, #64]	; (8003918 <HAL_ADC_MspInit+0x158>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_ADC_MspInit+0x158>)
 80038dc:	2200      	movs	r2, #0
 80038de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80038e0:	480d      	ldr	r0, [pc, #52]	; (8003918 <HAL_ADC_MspInit+0x158>)
 80038e2:	f001 f8a1 	bl	8004a28 <HAL_DMA_Init>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80038ec:	f7ff ff38 	bl	8003760 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a09      	ldr	r2, [pc, #36]	; (8003918 <HAL_ADC_MspInit+0x158>)
 80038f4:	639a      	str	r2, [r3, #56]	; 0x38
 80038f6:	4a08      	ldr	r2, [pc, #32]	; (8003918 <HAL_ADC_MspInit+0x158>)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038fc:	bf00      	nop
 80038fe:	3730      	adds	r7, #48	; 0x30
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40012000 	.word	0x40012000
 8003908:	40023800 	.word	0x40023800
 800390c:	40020800 	.word	0x40020800
 8003910:	40020000 	.word	0x40020000
 8003914:	40020400 	.word	0x40020400
 8003918:	20000438 	.word	0x20000438
 800391c:	40026410 	.word	0x40026410

08003920 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	; 0x28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003928:	f107 0314 	add.w	r3, r7, #20
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <HAL_SPI_MspInit+0x84>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d12c      	bne.n	800399c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <HAL_SPI_MspInit+0x88>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <HAL_SPI_MspInit+0x88>)
 800394c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003950:	6413      	str	r3, [r2, #64]	; 0x40
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_SPI_MspInit+0x88>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_SPI_MspInit+0x88>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	4a10      	ldr	r2, [pc, #64]	; (80039a8 <HAL_SPI_MspInit+0x88>)
 8003968:	f043 0304 	orr.w	r3, r3, #4
 800396c:	6313      	str	r3, [r2, #48]	; 0x30
 800396e:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <HAL_SPI_MspInit+0x88>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800397a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800397e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003980:	2302      	movs	r3, #2
 8003982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003988:	2303      	movs	r3, #3
 800398a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800398c:	2306      	movs	r3, #6
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003990:	f107 0314 	add.w	r3, r7, #20
 8003994:	4619      	mov	r1, r3
 8003996:	4805      	ldr	r0, [pc, #20]	; (80039ac <HAL_SPI_MspInit+0x8c>)
 8003998:	f001 fb2e 	bl	8004ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800399c:	bf00      	nop
 800399e:	3728      	adds	r7, #40	; 0x28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40003c00 	.word	0x40003c00
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40020800 	.word	0x40020800

080039b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a22      	ldr	r2, [pc, #136]	; (8003a48 <HAL_TIM_Base_MspInit+0x98>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d116      	bne.n	80039f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	4b21      	ldr	r3, [pc, #132]	; (8003a4c <HAL_TIM_Base_MspInit+0x9c>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	4a20      	ldr	r2, [pc, #128]	; (8003a4c <HAL_TIM_Base_MspInit+0x9c>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6453      	str	r3, [r2, #68]	; 0x44
 80039d2:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <HAL_TIM_Base_MspInit+0x9c>)
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	2100      	movs	r1, #0
 80039e2:	2019      	movs	r0, #25
 80039e4:	f000 fff6 	bl	80049d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80039e8:	2019      	movs	r0, #25
 80039ea:	f001 f80f 	bl	8004a0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80039ee:	e026      	b.n	8003a3e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a16      	ldr	r2, [pc, #88]	; (8003a50 <HAL_TIM_Base_MspInit+0xa0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d10e      	bne.n	8003a18 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	4b13      	ldr	r3, [pc, #76]	; (8003a4c <HAL_TIM_Base_MspInit+0x9c>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <HAL_TIM_Base_MspInit+0x9c>)
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <HAL_TIM_Base_MspInit+0x9c>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	693b      	ldr	r3, [r7, #16]
}
 8003a16:	e012      	b.n	8003a3e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM7)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a0d      	ldr	r2, [pc, #52]	; (8003a54 <HAL_TIM_Base_MspInit+0xa4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d10d      	bne.n	8003a3e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_TIM_Base_MspInit+0x9c>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <HAL_TIM_Base_MspInit+0x9c>)
 8003a2c:	f043 0320 	orr.w	r3, r3, #32
 8003a30:	6413      	str	r3, [r2, #64]	; 0x40
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_TIM_Base_MspInit+0x9c>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
}
 8003a3e:	bf00      	nop
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40000800 	.word	0x40000800
 8003a54:	40001400 	.word	0x40001400

08003a58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <HAL_TIM_PWM_MspInit+0x48>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d115      	bne.n	8003a96 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_TIM_PWM_MspInit+0x4c>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	4a0c      	ldr	r2, [pc, #48]	; (8003aa4 <HAL_TIM_PWM_MspInit+0x4c>)
 8003a74:	f043 0308 	orr.w	r3, r3, #8
 8003a78:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <HAL_TIM_PWM_MspInit+0x4c>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003a86:	2200      	movs	r2, #0
 8003a88:	2100      	movs	r1, #0
 8003a8a:	2032      	movs	r0, #50	; 0x32
 8003a8c:	f000 ffa2 	bl	80049d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003a90:	2032      	movs	r0, #50	; 0x32
 8003a92:	f000 ffbb 	bl	8004a0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40000c00 	.word	0x40000c00
 8003aa4:	40023800 	.word	0x40023800

08003aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	; 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	60da      	str	r2, [r3, #12]
 8003abe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a24      	ldr	r2, [pc, #144]	; (8003b58 <HAL_TIM_MspPostInit+0xb0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d11f      	bne.n	8003b0a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <HAL_TIM_MspPostInit+0xb4>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <HAL_TIM_MspPostInit+0xb4>)
 8003ad4:	f043 0308 	orr.w	r3, r3, #8
 8003ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ada:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <HAL_TIM_MspPostInit+0xb4>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003ae6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	2302      	movs	r3, #2
 8003aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af4:	2300      	movs	r3, #0
 8003af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003af8:	2302      	movs	r3, #2
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003afc:	f107 0314 	add.w	r3, r7, #20
 8003b00:	4619      	mov	r1, r3
 8003b02:	4817      	ldr	r0, [pc, #92]	; (8003b60 <HAL_TIM_MspPostInit+0xb8>)
 8003b04:	f001 fa78 	bl	8004ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003b08:	e022      	b.n	8003b50 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a15      	ldr	r2, [pc, #84]	; (8003b64 <HAL_TIM_MspPostInit+0xbc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d11d      	bne.n	8003b50 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_TIM_MspPostInit+0xb4>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	4a0f      	ldr	r2, [pc, #60]	; (8003b5c <HAL_TIM_MspPostInit+0xb4>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6313      	str	r3, [r2, #48]	; 0x30
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <HAL_TIM_MspPostInit+0xb4>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b30:	2301      	movs	r3, #1
 8003b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b34:	2302      	movs	r3, #2
 8003b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003b40:	2302      	movs	r3, #2
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b44:	f107 0314 	add.w	r3, r7, #20
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4807      	ldr	r0, [pc, #28]	; (8003b68 <HAL_TIM_MspPostInit+0xc0>)
 8003b4c:	f001 fa54 	bl	8004ff8 <HAL_GPIO_Init>
}
 8003b50:	bf00      	nop
 8003b52:	3728      	adds	r7, #40	; 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40000800 	.word	0x40000800
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40020c00 	.word	0x40020c00
 8003b64:	40000c00 	.word	0x40000c00
 8003b68:	40020000 	.word	0x40020000

08003b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <HAL_UART_MspInit+0x84>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d12c      	bne.n	8003be8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	4b18      	ldr	r3, [pc, #96]	; (8003bf4 <HAL_UART_MspInit+0x88>)
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <HAL_UART_MspInit+0x88>)
 8003b98:	f043 0310 	orr.w	r3, r3, #16
 8003b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b9e:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <HAL_UART_MspInit+0x88>)
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <HAL_UART_MspInit+0x88>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	4a10      	ldr	r2, [pc, #64]	; (8003bf4 <HAL_UART_MspInit+0x88>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bba:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <HAL_UART_MspInit+0x88>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003bc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bd8:	2307      	movs	r3, #7
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bdc:	f107 0314 	add.w	r3, r7, #20
 8003be0:	4619      	mov	r1, r3
 8003be2:	4805      	ldr	r0, [pc, #20]	; (8003bf8 <HAL_UART_MspInit+0x8c>)
 8003be4:	f001 fa08 	bl	8004ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003be8:	bf00      	nop
 8003bea:	3728      	adds	r7, #40	; 0x28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40011000 	.word	0x40011000
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40020000 	.word	0x40020000

08003bfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	; 0x30
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	2036      	movs	r0, #54	; 0x36
 8003c12:	f000 fedf 	bl	80049d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c16:	2036      	movs	r0, #54	; 0x36
 8003c18:	f000 fef8 	bl	8004a0c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	4b1f      	ldr	r3, [pc, #124]	; (8003ca0 <HAL_InitTick+0xa4>)
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	4a1e      	ldr	r2, [pc, #120]	; (8003ca0 <HAL_InitTick+0xa4>)
 8003c26:	f043 0310 	orr.w	r3, r3, #16
 8003c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ca0 <HAL_InitTick+0xa4>)
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c38:	f107 0210 	add.w	r2, r7, #16
 8003c3c:	f107 0314 	add.w	r3, r7, #20
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f001 ffec 	bl	8005c20 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003c48:	f001 ffc2 	bl	8005bd0 <HAL_RCC_GetPCLK1Freq>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	4a13      	ldr	r2, [pc, #76]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	0c9b      	lsrs	r3, r3, #18
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <HAL_InitTick+0xac>)
 8003c62:	4a12      	ldr	r2, [pc, #72]	; (8003cac <HAL_InitTick+0xb0>)
 8003c64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003c66:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <HAL_InitTick+0xac>)
 8003c68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c6c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003c6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ca8 <HAL_InitTick+0xac>)
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003c74:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <HAL_InitTick+0xac>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <HAL_InitTick+0xac>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003c80:	4809      	ldr	r0, [pc, #36]	; (8003ca8 <HAL_InitTick+0xac>)
 8003c82:	f002 fbf3 	bl	800646c <HAL_TIM_Base_Init>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d104      	bne.n	8003c96 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003c8c:	4806      	ldr	r0, [pc, #24]	; (8003ca8 <HAL_InitTick+0xac>)
 8003c8e:	f002 fc3c 	bl	800650a <HAL_TIM_Base_Start_IT>
 8003c92:	4603      	mov	r3, r0
 8003c94:	e000      	b.n	8003c98 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3730      	adds	r7, #48	; 0x30
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	431bde83 	.word	0x431bde83
 8003ca8:	20000560 	.word	0x20000560
 8003cac:	40001000 	.word	0x40001000

08003cb0 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <SDTimer_Handler+0x40>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <SDTimer_Handler+0x1c>
    Timer1--;
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <SDTimer_Handler+0x40>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <SDTimer_Handler+0x40>)
 8003cca:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003ccc:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <SDTimer_Handler+0x44>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d006      	beq.n	8003ce4 <SDTimer_Handler+0x34>
    Timer2--;
 8003cd6:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <SDTimer_Handler+0x44>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <SDTimer_Handler+0x44>)
 8003ce2:	701a      	strb	r2, [r3, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	200005a1 	.word	0x200005a1
 8003cf4:	200005a0 	.word	0x200005a0

08003cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d06:	b480      	push	{r7}
 8003d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d0a:	e7fe      	b.n	8003d0a <HardFault_Handler+0x4>

08003d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d10:	e7fe      	b.n	8003d10 <MemManage_Handler+0x4>

08003d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d16:	e7fe      	b.n	8003d16 <BusFault_Handler+0x4>

08003d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d1c:	e7fe      	b.n	8003d1c <UsageFault_Handler+0x4>

08003d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d22:	bf00      	nop
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	if(startInt!=1)
 8003d30:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <EXTI2_IRQHandler+0x24>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d003      	beq.n	8003d40 <EXTI2_IRQHandler+0x14>
	{
		startInt=1;
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <EXTI2_IRQHandler+0x24>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e002      	b.n	8003d46 <EXTI2_IRQHandler+0x1a>

	}
	else
	{
		startInt=0;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <EXTI2_IRQHandler+0x24>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]

	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003d46:	2004      	movs	r0, #4
 8003d48:	f001 fb0a 	bl	8005360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200001a8 	.word	0x200001a8

08003d54 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	if(menu>=0 && menu <=6 && menu!=6)
 8003d58:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <EXTI3_IRQHandler+0x30>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	db0c      	blt.n	8003d7a <EXTI3_IRQHandler+0x26>
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <EXTI3_IRQHandler+0x30>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b06      	cmp	r3, #6
 8003d66:	dc08      	bgt.n	8003d7a <EXTI3_IRQHandler+0x26>
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <EXTI3_IRQHandler+0x30>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b06      	cmp	r3, #6
 8003d6e:	d004      	beq.n	8003d7a <EXTI3_IRQHandler+0x26>
	{
		menu++;
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <EXTI3_IRQHandler+0x30>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3301      	adds	r3, #1
 8003d76:	4a03      	ldr	r2, [pc, #12]	; (8003d84 <EXTI3_IRQHandler+0x30>)
 8003d78:	6013      	str	r3, [r2, #0]

	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003d7a:	2008      	movs	r0, #8
 8003d7c:	f001 faf0 	bl	8005360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003d80:	bf00      	nop
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20000284 	.word	0x20000284

08003d88 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

	if(menu>=0 && menu<=6 && menu!=0)
 8003d8c:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <EXTI4_IRQHandler+0x30>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	db0c      	blt.n	8003dae <EXTI4_IRQHandler+0x26>
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <EXTI4_IRQHandler+0x30>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b06      	cmp	r3, #6
 8003d9a:	dc08      	bgt.n	8003dae <EXTI4_IRQHandler+0x26>
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <EXTI4_IRQHandler+0x30>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d004      	beq.n	8003dae <EXTI4_IRQHandler+0x26>
		{
			menu--;
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <EXTI4_IRQHandler+0x30>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	4a03      	ldr	r2, [pc, #12]	; (8003db8 <EXTI4_IRQHandler+0x30>)
 8003dac:	6013      	str	r3, [r2, #0]

		}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003dae:	2010      	movs	r0, #16
 8003db0:	f001 fad6 	bl	8005360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003db4:	bf00      	nop
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000284 	.word	0x20000284

08003dbc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5))
 8003dc0:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <EXTI9_5_IRQHandler+0x98>)
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00d      	beq.n	8003de8 <EXTI9_5_IRQHandler+0x2c>
		{
		if(sdInt==1)
 8003dcc:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <EXTI9_5_IRQHandler+0x9c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d103      	bne.n	8003ddc <EXTI9_5_IRQHandler+0x20>
			sdInt=0;
 8003dd4:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <EXTI9_5_IRQHandler+0x9c>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e002      	b.n	8003de2 <EXTI9_5_IRQHandler+0x26>
		else
			sdInt=1;
 8003ddc:	4b1e      	ldr	r3, [pc, #120]	; (8003e58 <EXTI9_5_IRQHandler+0x9c>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_5);
 8003de2:	4b1c      	ldr	r3, [pc, #112]	; (8003e54 <EXTI9_5_IRQHandler+0x98>)
 8003de4:	2220      	movs	r2, #32
 8003de6:	615a      	str	r2, [r3, #20]
		}

	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6))
 8003de8:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <EXTI9_5_IRQHandler+0x98>)
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00d      	beq.n	8003e10 <EXTI9_5_IRQHandler+0x54>
			{
		if(wifiInt==1)
 8003df4:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <EXTI9_5_IRQHandler+0xa0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d103      	bne.n	8003e04 <EXTI9_5_IRQHandler+0x48>
						wifiInt=0;
 8003dfc:	4b17      	ldr	r3, [pc, #92]	; (8003e5c <EXTI9_5_IRQHandler+0xa0>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	e002      	b.n	8003e0a <EXTI9_5_IRQHandler+0x4e>
					else
						wifiInt=1;
 8003e04:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <EXTI9_5_IRQHandler+0xa0>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
			__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_6);
 8003e0a:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <EXTI9_5_IRQHandler+0x98>)
 8003e0c:	2240      	movs	r2, #64	; 0x40
 8003e0e:	615a      	str	r2, [r3, #20]
			}

	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))
 8003e10:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <EXTI9_5_IRQHandler+0x98>)
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00e      	beq.n	8003e3a <EXTI9_5_IRQHandler+0x7e>
			{

			if(fanInt==1)
 8003e1c:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <EXTI9_5_IRQHandler+0xa4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d103      	bne.n	8003e2c <EXTI9_5_IRQHandler+0x70>
				fanInt=0;
 8003e24:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <EXTI9_5_IRQHandler+0xa4>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e002      	b.n	8003e32 <EXTI9_5_IRQHandler+0x76>
			else
				fanInt=1;
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <EXTI9_5_IRQHandler+0xa4>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
			__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_8);
 8003e32:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <EXTI9_5_IRQHandler+0x98>)
 8003e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e38:	615a      	str	r2, [r3, #20]
			}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003e3a:	2020      	movs	r0, #32
 8003e3c:	f001 fa90 	bl	8005360 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003e40:	2040      	movs	r0, #64	; 0x40
 8003e42:	f001 fa8d 	bl	8005360 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003e46:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003e4a:	f001 fa89 	bl	8005360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */


  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40013c00 	.word	0x40013c00
 8003e58:	2000019c 	.word	0x2000019c
 8003e5c:	200001a0 	.word	0x200001a0
 8003e60:	200001a4 	.word	0x200001a4

08003e64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e68:	4802      	ldr	r0, [pc, #8]	; (8003e74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003e6a:	f002 fc33 	bl	80066d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	200004bc 	.word	0x200004bc

08003e78 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003e7c:	4802      	ldr	r0, [pc, #8]	; (8003e88 <TIM5_IRQHandler+0x10>)
 8003e7e:	f002 fc29 	bl	80066d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200002d0 	.word	0x200002d0

08003e8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	FatFsCnt++;
 8003e90:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <TIM6_DAC_IRQHandler+0x30>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	3301      	adds	r3, #1
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <TIM6_DAC_IRQHandler+0x30>)
 8003e9c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <TIM6_DAC_IRQHandler+0x30>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b09      	cmp	r3, #9
 8003ea6:	d904      	bls.n	8003eb2 <TIM6_DAC_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <TIM6_DAC_IRQHandler+0x30>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8003eae:	f7ff feff 	bl	8003cb0 <SDTimer_Handler>
	}

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003eb2:	4803      	ldr	r0, [pc, #12]	; (8003ec0 <TIM6_DAC_IRQHandler+0x34>)
 8003eb4:	f002 fc0e 	bl	80066d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003eb8:	bf00      	nop
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	200001ac 	.word	0x200001ac
 8003ec0:	20000560 	.word	0x20000560

08003ec4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <DMA2_Stream0_IRQHandler+0x10>)
 8003eca:	f000 fe5b 	bl	8004b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000438 	.word	0x20000438

08003ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ee0:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <_sbrk+0x5c>)
 8003ee2:	4b15      	ldr	r3, [pc, #84]	; (8003f38 <_sbrk+0x60>)
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003eec:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <_sbrk+0x64>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ef4:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <_sbrk+0x64>)
 8003ef6:	4a12      	ldr	r2, [pc, #72]	; (8003f40 <_sbrk+0x68>)
 8003ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003efa:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <_sbrk+0x64>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d207      	bcs.n	8003f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f08:	f004 f8ae 	bl	8008068 <__errno>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	230c      	movs	r3, #12
 8003f10:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003f12:	f04f 33ff 	mov.w	r3, #4294967295
 8003f16:	e009      	b.n	8003f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f18:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <_sbrk+0x64>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f1e:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <_sbrk+0x64>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	4a05      	ldr	r2, [pc, #20]	; (8003f3c <_sbrk+0x64>)
 8003f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20020000 	.word	0x20020000
 8003f38:	00000400 	.word	0x00000400
 8003f3c:	200001b0 	.word	0x200001b0
 8003f40:	20000a18 	.word	0x20000a18

08003f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f48:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <SystemInit+0x28>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	4a07      	ldr	r2, [pc, #28]	; (8003f6c <SystemInit+0x28>)
 8003f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <SystemInit+0x28>)
 8003f5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f5e:	609a      	str	r2, [r3, #8]
#endif
}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fa8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f76:	e003      	b.n	8003f80 <LoopCopyDataInit>

08003f78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f7e:	3104      	adds	r1, #4

08003f80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f80:	480b      	ldr	r0, [pc, #44]	; (8003fb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f88:	d3f6      	bcc.n	8003f78 <CopyDataInit>
  ldr  r2, =_sbss
 8003f8a:	4a0b      	ldr	r2, [pc, #44]	; (8003fb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f8c:	e002      	b.n	8003f94 <LoopFillZerobss>

08003f8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f90:	f842 3b04 	str.w	r3, [r2], #4

08003f94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f98:	d3f9      	bcc.n	8003f8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f9a:	f7ff ffd3 	bl	8003f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f9e:	f004 f869 	bl	8008074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fa2:	f7fe f9a1 	bl	80022e8 <main>
  bx  lr    
 8003fa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003fa8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003fac:	08008e8c 	.word	0x08008e8c
  ldr  r0, =_sdata
 8003fb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003fb4:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 8003fb8:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 8003fbc:	20000a18 	.word	0x20000a18

08003fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fc0:	e7fe      	b.n	8003fc0 <ADC_IRQHandler>
	...

08003fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fc8:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <HAL_Init+0x40>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a0d      	ldr	r2, [pc, #52]	; (8004004 <HAL_Init+0x40>)
 8003fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_Init+0x40>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <HAL_Init+0x40>)
 8003fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fe0:	4b08      	ldr	r3, [pc, #32]	; (8004004 <HAL_Init+0x40>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a07      	ldr	r2, [pc, #28]	; (8004004 <HAL_Init+0x40>)
 8003fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fec:	2003      	movs	r0, #3
 8003fee:	f000 fce6 	bl	80049be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	f7ff fe02 	bl	8003bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ff8:	f7ff fbba 	bl	8003770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40023c00 	.word	0x40023c00

08004008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_IncTick+0x20>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <HAL_IncTick+0x24>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4413      	add	r3, r2
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <HAL_IncTick+0x24>)
 800401a:	6013      	str	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000050 	.word	0x20000050
 800402c:	200005a4 	.word	0x200005a4

08004030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return uwTick;
 8004034:	4b03      	ldr	r3, [pc, #12]	; (8004044 <HAL_GetTick+0x14>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	200005a4 	.word	0x200005a4

08004048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004050:	f7ff ffee 	bl	8004030 <HAL_GetTick>
 8004054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d005      	beq.n	800406e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004062:	4b09      	ldr	r3, [pc, #36]	; (8004088 <HAL_Delay+0x40>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800406e:	bf00      	nop
 8004070:	f7ff ffde 	bl	8004030 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	429a      	cmp	r2, r3
 800407e:	d8f7      	bhi.n	8004070 <HAL_Delay+0x28>
  {
  }
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000050 	.word	0x20000050

0800408c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e033      	b.n	800410a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fb88 	bl	80037c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d118      	bne.n	80040fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040d2:	f023 0302 	bic.w	r3, r3, #2
 80040d6:	f043 0202 	orr.w	r2, r3, #2
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fac4 	bl	800466c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	f043 0201 	orr.w	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
 80040fa:	e001      	b.n	8004100 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004108:	7bfb      	ldrb	r3, [r7, #15]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_ADC_Start+0x1a>
 800412a:	2302      	movs	r3, #2
 800412c:	e0a5      	b.n	800427a <HAL_ADC_Start+0x166>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d018      	beq.n	8004176 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004154:	4b4c      	ldr	r3, [pc, #304]	; (8004288 <HAL_ADC_Start+0x174>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a4c      	ldr	r2, [pc, #304]	; (800428c <HAL_ADC_Start+0x178>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	0c9a      	lsrs	r2, r3, #18
 8004160:	4613      	mov	r3, r2
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	4413      	add	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004168:	e002      	b.n	8004170 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	3b01      	subs	r3, #1
 800416e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f9      	bne.n	800416a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b01      	cmp	r3, #1
 8004182:	d179      	bne.n	8004278 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c2:	d106      	bne.n	80041d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c8:	f023 0206 	bic.w	r2, r3, #6
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	645a      	str	r2, [r3, #68]	; 0x44
 80041d0:	e002      	b.n	80041d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041e0:	4b2b      	ldr	r3, [pc, #172]	; (8004290 <HAL_ADC_Start+0x17c>)
 80041e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80041ec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f003 031f 	and.w	r3, r3, #31
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d12a      	bne.n	8004250 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a25      	ldr	r2, [pc, #148]	; (8004294 <HAL_ADC_Start+0x180>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d015      	beq.n	8004230 <HAL_ADC_Start+0x11c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a23      	ldr	r2, [pc, #140]	; (8004298 <HAL_ADC_Start+0x184>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d105      	bne.n	800421a <HAL_ADC_Start+0x106>
 800420e:	4b20      	ldr	r3, [pc, #128]	; (8004290 <HAL_ADC_Start+0x17c>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1f      	ldr	r2, [pc, #124]	; (800429c <HAL_ADC_Start+0x188>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d129      	bne.n	8004278 <HAL_ADC_Start+0x164>
 8004224:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <HAL_ADC_Start+0x17c>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	2b0f      	cmp	r3, #15
 800422e:	d823      	bhi.n	8004278 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d11c      	bne.n	8004278 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800424c:	609a      	str	r2, [r3, #8]
 800424e:	e013      	b.n	8004278 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0f      	ldr	r2, [pc, #60]	; (8004294 <HAL_ADC_Start+0x180>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d10e      	bne.n	8004278 <HAL_ADC_Start+0x164>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d107      	bne.n	8004278 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004276:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000048 	.word	0x20000048
 800428c:	431bde83 	.word	0x431bde83
 8004290:	40012300 	.word	0x40012300
 8004294:	40012000 	.word	0x40012000
 8004298:	40012100 	.word	0x40012100
 800429c:	40012200 	.word	0x40012200

080042a0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_ADC_Stop+0x16>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e021      	b.n	80042fa <HAL_ADC_Stop+0x5a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	f043 0201 	orr.w	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004322:	d113      	bne.n	800434c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800432e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004332:	d10b      	bne.n	800434c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e05c      	b.n	8004406 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800434c:	f7ff fe70 	bl	8004030 <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004352:	e01a      	b.n	800438a <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d016      	beq.n	800438a <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_ADC_PollForConversion+0x6c>
 8004362:	f7ff fe65 	bl	8004030 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d20b      	bcs.n	800438a <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f043 0204 	orr.w	r2, r3, #4
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e03d      	b.n	8004406 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b02      	cmp	r3, #2
 8004396:	d1dd      	bne.n	8004354 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0212 	mvn.w	r2, #18
 80043a0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d123      	bne.n	8004404 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11f      	bne.n	8004404 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d006      	beq.n	80043e0 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d111      	bne.n	8004404 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d105      	bne.n	8004404 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	f043 0201 	orr.w	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x1c>
 8004440:	2302      	movs	r3, #2
 8004442:	e105      	b.n	8004650 <HAL_ADC_ConfigChannel+0x228>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b09      	cmp	r3, #9
 8004452:	d925      	bls.n	80044a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68d9      	ldr	r1, [r3, #12]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	4613      	mov	r3, r2
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4413      	add	r3, r2
 8004468:	3b1e      	subs	r3, #30
 800446a:	2207      	movs	r2, #7
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43da      	mvns	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	400a      	ands	r2, r1
 8004478:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68d9      	ldr	r1, [r3, #12]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	b29b      	uxth	r3, r3
 800448a:	4618      	mov	r0, r3
 800448c:	4603      	mov	r3, r0
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	4403      	add	r3, r0
 8004492:	3b1e      	subs	r3, #30
 8004494:	409a      	lsls	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	60da      	str	r2, [r3, #12]
 800449e:	e022      	b.n	80044e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6919      	ldr	r1, [r3, #16]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	4613      	mov	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	4413      	add	r3, r2
 80044b4:	2207      	movs	r2, #7
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43da      	mvns	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	400a      	ands	r2, r1
 80044c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6919      	ldr	r1, [r3, #16]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	4618      	mov	r0, r3
 80044d6:	4603      	mov	r3, r0
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	4403      	add	r3, r0
 80044dc:	409a      	lsls	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d824      	bhi.n	8004538 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	3b05      	subs	r3, #5
 8004500:	221f      	movs	r2, #31
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43da      	mvns	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	400a      	ands	r2, r1
 800450e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	4618      	mov	r0, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	3b05      	subs	r3, #5
 800452a:	fa00 f203 	lsl.w	r2, r0, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	635a      	str	r2, [r3, #52]	; 0x34
 8004536:	e04c      	b.n	80045d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b0c      	cmp	r3, #12
 800453e:	d824      	bhi.n	800458a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	3b23      	subs	r3, #35	; 0x23
 8004552:	221f      	movs	r2, #31
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43da      	mvns	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	400a      	ands	r2, r1
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	4618      	mov	r0, r3
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	3b23      	subs	r3, #35	; 0x23
 800457c:	fa00 f203 	lsl.w	r2, r0, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
 8004588:	e023      	b.n	80045d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	3b41      	subs	r3, #65	; 0x41
 800459c:	221f      	movs	r2, #31
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43da      	mvns	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	400a      	ands	r2, r1
 80045aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	4618      	mov	r0, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	3b41      	subs	r3, #65	; 0x41
 80045c6:	fa00 f203 	lsl.w	r2, r0, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045d2:	4b22      	ldr	r3, [pc, #136]	; (800465c <HAL_ADC_ConfigChannel+0x234>)
 80045d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a21      	ldr	r2, [pc, #132]	; (8004660 <HAL_ADC_ConfigChannel+0x238>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d109      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x1cc>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b12      	cmp	r3, #18
 80045e6:	d105      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a19      	ldr	r2, [pc, #100]	; (8004660 <HAL_ADC_ConfigChannel+0x238>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d123      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x21e>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b10      	cmp	r3, #16
 8004604:	d003      	beq.n	800460e <HAL_ADC_ConfigChannel+0x1e6>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b11      	cmp	r3, #17
 800460c:	d11b      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b10      	cmp	r3, #16
 8004620:	d111      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <HAL_ADC_ConfigChannel+0x23c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a10      	ldr	r2, [pc, #64]	; (8004668 <HAL_ADC_ConfigChannel+0x240>)
 8004628:	fba2 2303 	umull	r2, r3, r2, r3
 800462c:	0c9a      	lsrs	r2, r3, #18
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004638:	e002      	b.n	8004640 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	3b01      	subs	r3, #1
 800463e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f9      	bne.n	800463a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	40012300 	.word	0x40012300
 8004660:	40012000 	.word	0x40012000
 8004664:	20000048 	.word	0x20000048
 8004668:	431bde83 	.word	0x431bde83

0800466c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004674:	4b79      	ldr	r3, [pc, #484]	; (800485c <ADC_Init+0x1f0>)
 8004676:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	431a      	orrs	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6859      	ldr	r1, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	021a      	lsls	r2, r3, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80046c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6859      	ldr	r1, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6899      	ldr	r1, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	4a58      	ldr	r2, [pc, #352]	; (8004860 <ADC_Init+0x1f4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d022      	beq.n	800474a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004712:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6899      	ldr	r1, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6899      	ldr	r1, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	e00f      	b.n	800476a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004768:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0202 	bic.w	r2, r2, #2
 8004778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6899      	ldr	r1, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	7e1b      	ldrb	r3, [r3, #24]
 8004784:	005a      	lsls	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01b      	beq.n	80047d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80047b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6859      	ldr	r1, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	3b01      	subs	r3, #1
 80047c4:	035a      	lsls	r2, r3, #13
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
 80047ce:	e007      	b.n	80047e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80047ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	051a      	lsls	r2, r3, #20
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004814:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6899      	ldr	r1, [r3, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004822:	025a      	lsls	r2, r3, #9
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6899      	ldr	r1, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	029a      	lsls	r2, r3, #10
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	609a      	str	r2, [r3, #8]
}
 8004850:	bf00      	nop
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	40012300 	.word	0x40012300
 8004860:	0f000001 	.word	0x0f000001

08004864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004880:	4013      	ands	r3, r2
 8004882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800488c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004896:	4a04      	ldr	r2, [pc, #16]	; (80048a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	60d3      	str	r3, [r2, #12]
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	e000ed00 	.word	0xe000ed00

080048ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <__NVIC_GetPriorityGrouping+0x18>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	0a1b      	lsrs	r3, r3, #8
 80048b6:	f003 0307 	and.w	r3, r3, #7
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	e000ed00 	.word	0xe000ed00

080048c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	db0b      	blt.n	80048f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	f003 021f 	and.w	r2, r3, #31
 80048e0:	4907      	ldr	r1, [pc, #28]	; (8004900 <__NVIC_EnableIRQ+0x38>)
 80048e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	2001      	movs	r0, #1
 80048ea:	fa00 f202 	lsl.w	r2, r0, r2
 80048ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	e000e100 	.word	0xe000e100

08004904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	6039      	str	r1, [r7, #0]
 800490e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004914:	2b00      	cmp	r3, #0
 8004916:	db0a      	blt.n	800492e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	b2da      	uxtb	r2, r3
 800491c:	490c      	ldr	r1, [pc, #48]	; (8004950 <__NVIC_SetPriority+0x4c>)
 800491e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004922:	0112      	lsls	r2, r2, #4
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	440b      	add	r3, r1
 8004928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800492c:	e00a      	b.n	8004944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	4908      	ldr	r1, [pc, #32]	; (8004954 <__NVIC_SetPriority+0x50>)
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	3b04      	subs	r3, #4
 800493c:	0112      	lsls	r2, r2, #4
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	440b      	add	r3, r1
 8004942:	761a      	strb	r2, [r3, #24]
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	e000e100 	.word	0xe000e100
 8004954:	e000ed00 	.word	0xe000ed00

08004958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004958:	b480      	push	{r7}
 800495a:	b089      	sub	sp, #36	; 0x24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f1c3 0307 	rsb	r3, r3, #7
 8004972:	2b04      	cmp	r3, #4
 8004974:	bf28      	it	cs
 8004976:	2304      	movcs	r3, #4
 8004978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	3304      	adds	r3, #4
 800497e:	2b06      	cmp	r3, #6
 8004980:	d902      	bls.n	8004988 <NVIC_EncodePriority+0x30>
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3b03      	subs	r3, #3
 8004986:	e000      	b.n	800498a <NVIC_EncodePriority+0x32>
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800498c:	f04f 32ff 	mov.w	r2, #4294967295
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43da      	mvns	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	401a      	ands	r2, r3
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049a0:	f04f 31ff 	mov.w	r1, #4294967295
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	fa01 f303 	lsl.w	r3, r1, r3
 80049aa:	43d9      	mvns	r1, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b0:	4313      	orrs	r3, r2
         );
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3724      	adds	r7, #36	; 0x24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff ff4c 	bl	8004864 <__NVIC_SetPriorityGrouping>
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049e6:	f7ff ff61 	bl	80048ac <__NVIC_GetPriorityGrouping>
 80049ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	6978      	ldr	r0, [r7, #20]
 80049f2:	f7ff ffb1 	bl	8004958 <NVIC_EncodePriority>
 80049f6:	4602      	mov	r2, r0
 80049f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049fc:	4611      	mov	r1, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff ff80 	bl	8004904 <__NVIC_SetPriority>
}
 8004a04:	bf00      	nop
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff ff54 	bl	80048c8 <__NVIC_EnableIRQ>
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a34:	f7ff fafc 	bl	8004030 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e099      	b.n	8004b78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a64:	e00f      	b.n	8004a86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a66:	f7ff fae3 	bl	8004030 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b05      	cmp	r3, #5
 8004a72:	d908      	bls.n	8004a86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e078      	b.n	8004b78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e8      	bne.n	8004a66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4b38      	ldr	r3, [pc, #224]	; (8004b80 <HAL_DMA_Init+0x158>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d107      	bne.n	8004af0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 0307 	bic.w	r3, r3, #7
 8004b06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d117      	bne.n	8004b4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00e      	beq.n	8004b4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f9e9 	bl	8004f04 <DMA_CheckFifoParam>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2240      	movs	r2, #64	; 0x40
 8004b3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b46:	2301      	movs	r3, #1
 8004b48:	e016      	b.n	8004b78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f9a0 	bl	8004e98 <DMA_CalcBaseAndBitshift>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b60:	223f      	movs	r2, #63	; 0x3f
 8004b62:	409a      	lsls	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	f010803f 	.word	0xf010803f

08004b84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b90:	4b92      	ldr	r3, [pc, #584]	; (8004ddc <HAL_DMA_IRQHandler+0x258>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a92      	ldr	r2, [pc, #584]	; (8004de0 <HAL_DMA_IRQHandler+0x25c>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	0a9b      	lsrs	r3, r3, #10
 8004b9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bae:	2208      	movs	r2, #8
 8004bb0:	409a      	lsls	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01a      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d013      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0204 	bic.w	r2, r2, #4
 8004bd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bdc:	2208      	movs	r2, #8
 8004bde:	409a      	lsls	r2, r3
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be8:	f043 0201 	orr.w	r2, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d012      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00b      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c12:	2201      	movs	r2, #1
 8004c14:	409a      	lsls	r2, r3
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1e:	f043 0202 	orr.w	r2, r3, #2
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d012      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00b      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c48:	2204      	movs	r2, #4
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	f043 0204 	orr.w	r2, r3, #4
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c60:	2210      	movs	r2, #16
 8004c62:	409a      	lsls	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4013      	ands	r3, r2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d043      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d03c      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7e:	2210      	movs	r2, #16
 8004c80:	409a      	lsls	r2, r3
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d018      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d108      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d024      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	4798      	blx	r3
 8004cb2:	e01f      	b.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01b      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	4798      	blx	r3
 8004cc4:	e016      	b.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d107      	bne.n	8004ce4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0208 	bic.w	r2, r2, #8
 8004ce2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 808e 	beq.w	8004e22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8086 	beq.w	8004e22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	409a      	lsls	r2, r3
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b05      	cmp	r3, #5
 8004d2c:	d136      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0216 	bic.w	r2, r2, #22
 8004d3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <HAL_DMA_IRQHandler+0x1da>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0208 	bic.w	r2, r2, #8
 8004d6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d72:	223f      	movs	r2, #63	; 0x3f
 8004d74:	409a      	lsls	r2, r3
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d07d      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	4798      	blx	r3
        }
        return;
 8004d9a:	e078      	b.n	8004e8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01c      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d108      	bne.n	8004dca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d030      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	4798      	blx	r3
 8004dc8:	e02b      	b.n	8004e22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d027      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	4798      	blx	r3
 8004dda:	e022      	b.n	8004e22 <HAL_DMA_IRQHandler+0x29e>
 8004ddc:	20000048 	.word	0x20000048
 8004de0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10f      	bne.n	8004e12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0210 	bic.w	r2, r2, #16
 8004e00:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d032      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d022      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2205      	movs	r2, #5
 8004e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	3301      	adds	r3, #1
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d307      	bcc.n	8004e6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f2      	bne.n	8004e4e <HAL_DMA_IRQHandler+0x2ca>
 8004e68:	e000      	b.n	8004e6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004e6a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	4798      	blx	r3
 8004e8c:	e000      	b.n	8004e90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004e8e:	bf00      	nop
    }
  }
}
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop

08004e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	3b10      	subs	r3, #16
 8004ea8:	4a14      	ldr	r2, [pc, #80]	; (8004efc <DMA_CalcBaseAndBitshift+0x64>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	091b      	lsrs	r3, r3, #4
 8004eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004eb2:	4a13      	ldr	r2, [pc, #76]	; (8004f00 <DMA_CalcBaseAndBitshift+0x68>)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d909      	bls.n	8004eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ece:	f023 0303 	bic.w	r3, r3, #3
 8004ed2:	1d1a      	adds	r2, r3, #4
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8004ed8:	e007      	b.n	8004eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ee2:	f023 0303 	bic.w	r3, r3, #3
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	aaaaaaab 	.word	0xaaaaaaab
 8004f00:	08008e3c 	.word	0x08008e3c

08004f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d11f      	bne.n	8004f5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d855      	bhi.n	8004fd0 <DMA_CheckFifoParam+0xcc>
 8004f24:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <DMA_CheckFifoParam+0x28>)
 8004f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2a:	bf00      	nop
 8004f2c:	08004f3d 	.word	0x08004f3d
 8004f30:	08004f4f 	.word	0x08004f4f
 8004f34:	08004f3d 	.word	0x08004f3d
 8004f38:	08004fd1 	.word	0x08004fd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d045      	beq.n	8004fd4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f4c:	e042      	b.n	8004fd4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f56:	d13f      	bne.n	8004fd8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f5c:	e03c      	b.n	8004fd8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f66:	d121      	bne.n	8004fac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d836      	bhi.n	8004fdc <DMA_CheckFifoParam+0xd8>
 8004f6e:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <DMA_CheckFifoParam+0x70>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004f85 	.word	0x08004f85
 8004f78:	08004f8b 	.word	0x08004f8b
 8004f7c:	08004f85 	.word	0x08004f85
 8004f80:	08004f9d 	.word	0x08004f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
      break;
 8004f88:	e02f      	b.n	8004fea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d024      	beq.n	8004fe0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f9a:	e021      	b.n	8004fe0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fa4:	d11e      	bne.n	8004fe4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004faa:	e01b      	b.n	8004fe4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d902      	bls.n	8004fb8 <DMA_CheckFifoParam+0xb4>
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d003      	beq.n	8004fbe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fb6:	e018      	b.n	8004fea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      break;
 8004fbc:	e015      	b.n	8004fea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00e      	beq.n	8004fe8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8004fce:	e00b      	b.n	8004fe8 <DMA_CheckFifoParam+0xe4>
      break;
 8004fd0:	bf00      	nop
 8004fd2:	e00a      	b.n	8004fea <DMA_CheckFifoParam+0xe6>
      break;
 8004fd4:	bf00      	nop
 8004fd6:	e008      	b.n	8004fea <DMA_CheckFifoParam+0xe6>
      break;
 8004fd8:	bf00      	nop
 8004fda:	e006      	b.n	8004fea <DMA_CheckFifoParam+0xe6>
      break;
 8004fdc:	bf00      	nop
 8004fde:	e004      	b.n	8004fea <DMA_CheckFifoParam+0xe6>
      break;
 8004fe0:	bf00      	nop
 8004fe2:	e002      	b.n	8004fea <DMA_CheckFifoParam+0xe6>
      break;   
 8004fe4:	bf00      	nop
 8004fe6:	e000      	b.n	8004fea <DMA_CheckFifoParam+0xe6>
      break;
 8004fe8:	bf00      	nop
    }
  } 
  
  return status; 
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b089      	sub	sp, #36	; 0x24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005006:	2300      	movs	r3, #0
 8005008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800500a:	2300      	movs	r3, #0
 800500c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	e16b      	b.n	80052ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005014:	2201      	movs	r2, #1
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4013      	ands	r3, r2
 8005026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	429a      	cmp	r2, r3
 800502e:	f040 815a 	bne.w	80052e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d00b      	beq.n	8005052 <HAL_GPIO_Init+0x5a>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d007      	beq.n	8005052 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005046:	2b11      	cmp	r3, #17
 8005048:	d003      	beq.n	8005052 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b12      	cmp	r3, #18
 8005050:	d130      	bne.n	80050b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	2203      	movs	r2, #3
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	43db      	mvns	r3, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4013      	ands	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	4313      	orrs	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005088:	2201      	movs	r2, #1
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4013      	ands	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	091b      	lsrs	r3, r3, #4
 800509e:	f003 0201 	and.w	r2, r3, #1
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	2203      	movs	r2, #3
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	43db      	mvns	r3, r3
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	4013      	ands	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4313      	orrs	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d003      	beq.n	80050f4 <HAL_GPIO_Init+0xfc>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b12      	cmp	r3, #18
 80050f2:	d123      	bne.n	800513c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	08da      	lsrs	r2, r3, #3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3208      	adds	r2, #8
 80050fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	220f      	movs	r2, #15
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	43db      	mvns	r3, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4013      	ands	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4313      	orrs	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	08da      	lsrs	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3208      	adds	r2, #8
 8005136:	69b9      	ldr	r1, [r7, #24]
 8005138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	2203      	movs	r2, #3
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	43db      	mvns	r3, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	4013      	ands	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 0203 	and.w	r2, r3, #3
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4313      	orrs	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 80b4 	beq.w	80052e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	4b5f      	ldr	r3, [pc, #380]	; (8005300 <HAL_GPIO_Init+0x308>)
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005186:	4a5e      	ldr	r2, [pc, #376]	; (8005300 <HAL_GPIO_Init+0x308>)
 8005188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800518c:	6453      	str	r3, [r2, #68]	; 0x44
 800518e:	4b5c      	ldr	r3, [pc, #368]	; (8005300 <HAL_GPIO_Init+0x308>)
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800519a:	4a5a      	ldr	r2, [pc, #360]	; (8005304 <HAL_GPIO_Init+0x30c>)
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	089b      	lsrs	r3, r3, #2
 80051a0:	3302      	adds	r3, #2
 80051a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	220f      	movs	r2, #15
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	43db      	mvns	r3, r3
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	4013      	ands	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a51      	ldr	r2, [pc, #324]	; (8005308 <HAL_GPIO_Init+0x310>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d02b      	beq.n	800521e <HAL_GPIO_Init+0x226>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a50      	ldr	r2, [pc, #320]	; (800530c <HAL_GPIO_Init+0x314>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d025      	beq.n	800521a <HAL_GPIO_Init+0x222>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a4f      	ldr	r2, [pc, #316]	; (8005310 <HAL_GPIO_Init+0x318>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d01f      	beq.n	8005216 <HAL_GPIO_Init+0x21e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a4e      	ldr	r2, [pc, #312]	; (8005314 <HAL_GPIO_Init+0x31c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d019      	beq.n	8005212 <HAL_GPIO_Init+0x21a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a4d      	ldr	r2, [pc, #308]	; (8005318 <HAL_GPIO_Init+0x320>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <HAL_GPIO_Init+0x216>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a4c      	ldr	r2, [pc, #304]	; (800531c <HAL_GPIO_Init+0x324>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00d      	beq.n	800520a <HAL_GPIO_Init+0x212>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a4b      	ldr	r2, [pc, #300]	; (8005320 <HAL_GPIO_Init+0x328>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d007      	beq.n	8005206 <HAL_GPIO_Init+0x20e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a4a      	ldr	r2, [pc, #296]	; (8005324 <HAL_GPIO_Init+0x32c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d101      	bne.n	8005202 <HAL_GPIO_Init+0x20a>
 80051fe:	2307      	movs	r3, #7
 8005200:	e00e      	b.n	8005220 <HAL_GPIO_Init+0x228>
 8005202:	2308      	movs	r3, #8
 8005204:	e00c      	b.n	8005220 <HAL_GPIO_Init+0x228>
 8005206:	2306      	movs	r3, #6
 8005208:	e00a      	b.n	8005220 <HAL_GPIO_Init+0x228>
 800520a:	2305      	movs	r3, #5
 800520c:	e008      	b.n	8005220 <HAL_GPIO_Init+0x228>
 800520e:	2304      	movs	r3, #4
 8005210:	e006      	b.n	8005220 <HAL_GPIO_Init+0x228>
 8005212:	2303      	movs	r3, #3
 8005214:	e004      	b.n	8005220 <HAL_GPIO_Init+0x228>
 8005216:	2302      	movs	r3, #2
 8005218:	e002      	b.n	8005220 <HAL_GPIO_Init+0x228>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <HAL_GPIO_Init+0x228>
 800521e:	2300      	movs	r3, #0
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	f002 0203 	and.w	r2, r2, #3
 8005226:	0092      	lsls	r2, r2, #2
 8005228:	4093      	lsls	r3, r2
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4313      	orrs	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005230:	4934      	ldr	r1, [pc, #208]	; (8005304 <HAL_GPIO_Init+0x30c>)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	089b      	lsrs	r3, r3, #2
 8005236:	3302      	adds	r3, #2
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800523e:	4b3a      	ldr	r3, [pc, #232]	; (8005328 <HAL_GPIO_Init+0x330>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	43db      	mvns	r3, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4013      	ands	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005262:	4a31      	ldr	r2, [pc, #196]	; (8005328 <HAL_GPIO_Init+0x330>)
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005268:	4b2f      	ldr	r3, [pc, #188]	; (8005328 <HAL_GPIO_Init+0x330>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	43db      	mvns	r3, r3
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	4013      	ands	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800528c:	4a26      	ldr	r2, [pc, #152]	; (8005328 <HAL_GPIO_Init+0x330>)
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005292:	4b25      	ldr	r3, [pc, #148]	; (8005328 <HAL_GPIO_Init+0x330>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	43db      	mvns	r3, r3
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	4013      	ands	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052b6:	4a1c      	ldr	r2, [pc, #112]	; (8005328 <HAL_GPIO_Init+0x330>)
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052bc:	4b1a      	ldr	r3, [pc, #104]	; (8005328 <HAL_GPIO_Init+0x330>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	43db      	mvns	r3, r3
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4013      	ands	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052e0:	4a11      	ldr	r2, [pc, #68]	; (8005328 <HAL_GPIO_Init+0x330>)
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	3301      	adds	r3, #1
 80052ea:	61fb      	str	r3, [r7, #28]
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	2b0f      	cmp	r3, #15
 80052f0:	f67f ae90 	bls.w	8005014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052f4:	bf00      	nop
 80052f6:	3724      	adds	r7, #36	; 0x24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	40023800 	.word	0x40023800
 8005304:	40013800 	.word	0x40013800
 8005308:	40020000 	.word	0x40020000
 800530c:	40020400 	.word	0x40020400
 8005310:	40020800 	.word	0x40020800
 8005314:	40020c00 	.word	0x40020c00
 8005318:	40021000 	.word	0x40021000
 800531c:	40021400 	.word	0x40021400
 8005320:	40021800 	.word	0x40021800
 8005324:	40021c00 	.word	0x40021c00
 8005328:	40013c00 	.word	0x40013c00

0800532c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	807b      	strh	r3, [r7, #2]
 8005338:	4613      	mov	r3, r2
 800533a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800533c:	787b      	ldrb	r3, [r7, #1]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005342:	887a      	ldrh	r2, [r7, #2]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005348:	e003      	b.n	8005352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800534a:	887b      	ldrh	r3, [r7, #2]
 800534c:	041a      	lsls	r2, r3, #16
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	619a      	str	r2, [r3, #24]
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800536a:	4b08      	ldr	r3, [pc, #32]	; (800538c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800536c:	695a      	ldr	r2, [r3, #20]
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	4013      	ands	r3, r2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d006      	beq.n	8005384 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005376:	4a05      	ldr	r2, [pc, #20]	; (800538c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800537c:	88fb      	ldrh	r3, [r7, #6]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f806 	bl	8005390 <HAL_GPIO_EXTI_Callback>
  }
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40013c00 	.word	0x40013c00

08005390 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	4603      	mov	r3, r0
 8005398:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e25b      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d075      	beq.n	80054b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053c6:	4ba3      	ldr	r3, [pc, #652]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d00c      	beq.n	80053ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053d2:	4ba0      	ldr	r3, [pc, #640]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d112      	bne.n	8005404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053de:	4b9d      	ldr	r3, [pc, #628]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ea:	d10b      	bne.n	8005404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ec:	4b99      	ldr	r3, [pc, #612]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d05b      	beq.n	80054b0 <HAL_RCC_OscConfig+0x108>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d157      	bne.n	80054b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e236      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540c:	d106      	bne.n	800541c <HAL_RCC_OscConfig+0x74>
 800540e:	4b91      	ldr	r3, [pc, #580]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a90      	ldr	r2, [pc, #576]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 8005414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	e01d      	b.n	8005458 <HAL_RCC_OscConfig+0xb0>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005424:	d10c      	bne.n	8005440 <HAL_RCC_OscConfig+0x98>
 8005426:	4b8b      	ldr	r3, [pc, #556]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a8a      	ldr	r2, [pc, #552]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 800542c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	4b88      	ldr	r3, [pc, #544]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a87      	ldr	r2, [pc, #540]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e00b      	b.n	8005458 <HAL_RCC_OscConfig+0xb0>
 8005440:	4b84      	ldr	r3, [pc, #528]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a83      	ldr	r2, [pc, #524]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 8005446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	4b81      	ldr	r3, [pc, #516]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a80      	ldr	r2, [pc, #512]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 8005452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d013      	beq.n	8005488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7fe fde6 	bl	8004030 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005468:	f7fe fde2 	bl	8004030 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b64      	cmp	r3, #100	; 0x64
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e1fb      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800547a:	4b76      	ldr	r3, [pc, #472]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0xc0>
 8005486:	e014      	b.n	80054b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005488:	f7fe fdd2 	bl	8004030 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005490:	f7fe fdce 	bl	8004030 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b64      	cmp	r3, #100	; 0x64
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e1e7      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054a2:	4b6c      	ldr	r3, [pc, #432]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f0      	bne.n	8005490 <HAL_RCC_OscConfig+0xe8>
 80054ae:	e000      	b.n	80054b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d063      	beq.n	8005586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054be:	4b65      	ldr	r3, [pc, #404]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 030c 	and.w	r3, r3, #12
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00b      	beq.n	80054e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ca:	4b62      	ldr	r3, [pc, #392]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d11c      	bne.n	8005510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054d6:	4b5f      	ldr	r3, [pc, #380]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d116      	bne.n	8005510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054e2:	4b5c      	ldr	r3, [pc, #368]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <HAL_RCC_OscConfig+0x152>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d001      	beq.n	80054fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e1bb      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fa:	4b56      	ldr	r3, [pc, #344]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	4952      	ldr	r1, [pc, #328]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 800550a:	4313      	orrs	r3, r2
 800550c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800550e:	e03a      	b.n	8005586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d020      	beq.n	800555a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005518:	4b4f      	ldr	r3, [pc, #316]	; (8005658 <HAL_RCC_OscConfig+0x2b0>)
 800551a:	2201      	movs	r2, #1
 800551c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551e:	f7fe fd87 	bl	8004030 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005526:	f7fe fd83 	bl	8004030 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e19c      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005538:	4b46      	ldr	r3, [pc, #280]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005544:	4b43      	ldr	r3, [pc, #268]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	4940      	ldr	r1, [pc, #256]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 8005554:	4313      	orrs	r3, r2
 8005556:	600b      	str	r3, [r1, #0]
 8005558:	e015      	b.n	8005586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800555a:	4b3f      	ldr	r3, [pc, #252]	; (8005658 <HAL_RCC_OscConfig+0x2b0>)
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005560:	f7fe fd66 	bl	8004030 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005568:	f7fe fd62 	bl	8004030 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e17b      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800557a:	4b36      	ldr	r3, [pc, #216]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f0      	bne.n	8005568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d030      	beq.n	80055f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d016      	beq.n	80055c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800559a:	4b30      	ldr	r3, [pc, #192]	; (800565c <HAL_RCC_OscConfig+0x2b4>)
 800559c:	2201      	movs	r2, #1
 800559e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a0:	f7fe fd46 	bl	8004030 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055a8:	f7fe fd42 	bl	8004030 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e15b      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ba:	4b26      	ldr	r3, [pc, #152]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 80055bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCC_OscConfig+0x200>
 80055c6:	e015      	b.n	80055f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c8:	4b24      	ldr	r3, [pc, #144]	; (800565c <HAL_RCC_OscConfig+0x2b4>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ce:	f7fe fd2f 	bl	8004030 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055d6:	f7fe fd2b 	bl	8004030 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e144      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e8:	4b1a      	ldr	r3, [pc, #104]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 80055ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f0      	bne.n	80055d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80a0 	beq.w	8005742 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005606:	4b13      	ldr	r3, [pc, #76]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10f      	bne.n	8005632 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	4a0e      	ldr	r2, [pc, #56]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 800561c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005620:	6413      	str	r3, [r2, #64]	; 0x40
 8005622:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <HAL_RCC_OscConfig+0x2ac>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800562e:	2301      	movs	r3, #1
 8005630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <HAL_RCC_OscConfig+0x2b8>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563a:	2b00      	cmp	r3, #0
 800563c:	d121      	bne.n	8005682 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800563e:	4b08      	ldr	r3, [pc, #32]	; (8005660 <HAL_RCC_OscConfig+0x2b8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a07      	ldr	r2, [pc, #28]	; (8005660 <HAL_RCC_OscConfig+0x2b8>)
 8005644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800564a:	f7fe fcf1 	bl	8004030 <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005650:	e011      	b.n	8005676 <HAL_RCC_OscConfig+0x2ce>
 8005652:	bf00      	nop
 8005654:	40023800 	.word	0x40023800
 8005658:	42470000 	.word	0x42470000
 800565c:	42470e80 	.word	0x42470e80
 8005660:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005664:	f7fe fce4 	bl	8004030 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e0fd      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005676:	4b81      	ldr	r3, [pc, #516]	; (800587c <HAL_RCC_OscConfig+0x4d4>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0f0      	beq.n	8005664 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d106      	bne.n	8005698 <HAL_RCC_OscConfig+0x2f0>
 800568a:	4b7d      	ldr	r3, [pc, #500]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	4a7c      	ldr	r2, [pc, #496]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	6713      	str	r3, [r2, #112]	; 0x70
 8005696:	e01c      	b.n	80056d2 <HAL_RCC_OscConfig+0x32a>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b05      	cmp	r3, #5
 800569e:	d10c      	bne.n	80056ba <HAL_RCC_OscConfig+0x312>
 80056a0:	4b77      	ldr	r3, [pc, #476]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 80056a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a4:	4a76      	ldr	r2, [pc, #472]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 80056a6:	f043 0304 	orr.w	r3, r3, #4
 80056aa:	6713      	str	r3, [r2, #112]	; 0x70
 80056ac:	4b74      	ldr	r3, [pc, #464]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 80056ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b0:	4a73      	ldr	r2, [pc, #460]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 80056b2:	f043 0301 	orr.w	r3, r3, #1
 80056b6:	6713      	str	r3, [r2, #112]	; 0x70
 80056b8:	e00b      	b.n	80056d2 <HAL_RCC_OscConfig+0x32a>
 80056ba:	4b71      	ldr	r3, [pc, #452]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	4a70      	ldr	r2, [pc, #448]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	6713      	str	r3, [r2, #112]	; 0x70
 80056c6:	4b6e      	ldr	r3, [pc, #440]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	4a6d      	ldr	r2, [pc, #436]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 80056cc:	f023 0304 	bic.w	r3, r3, #4
 80056d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d015      	beq.n	8005706 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056da:	f7fe fca9 	bl	8004030 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e0:	e00a      	b.n	80056f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fe fca5 	bl	8004030 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e0bc      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f8:	4b61      	ldr	r3, [pc, #388]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 80056fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0ee      	beq.n	80056e2 <HAL_RCC_OscConfig+0x33a>
 8005704:	e014      	b.n	8005730 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005706:	f7fe fc93 	bl	8004030 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800570c:	e00a      	b.n	8005724 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800570e:	f7fe fc8f 	bl	8004030 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	f241 3288 	movw	r2, #5000	; 0x1388
 800571c:	4293      	cmp	r3, r2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e0a6      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005724:	4b56      	ldr	r3, [pc, #344]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 8005726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1ee      	bne.n	800570e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d105      	bne.n	8005742 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005736:	4b52      	ldr	r3, [pc, #328]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	4a51      	ldr	r2, [pc, #324]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 800573c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005740:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8092 	beq.w	8005870 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800574c:	4b4c      	ldr	r3, [pc, #304]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 030c 	and.w	r3, r3, #12
 8005754:	2b08      	cmp	r3, #8
 8005756:	d05c      	beq.n	8005812 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d141      	bne.n	80057e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005760:	4b48      	ldr	r3, [pc, #288]	; (8005884 <HAL_RCC_OscConfig+0x4dc>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005766:	f7fe fc63 	bl	8004030 <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800576e:	f7fe fc5f 	bl	8004030 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e078      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005780:	4b3f      	ldr	r3, [pc, #252]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f0      	bne.n	800576e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	019b      	lsls	r3, r3, #6
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a2:	085b      	lsrs	r3, r3, #1
 80057a4:	3b01      	subs	r3, #1
 80057a6:	041b      	lsls	r3, r3, #16
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	061b      	lsls	r3, r3, #24
 80057b0:	4933      	ldr	r1, [pc, #204]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057b6:	4b33      	ldr	r3, [pc, #204]	; (8005884 <HAL_RCC_OscConfig+0x4dc>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057bc:	f7fe fc38 	bl	8004030 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c4:	f7fe fc34 	bl	8004030 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e04d      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d6:	4b2a      	ldr	r3, [pc, #168]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0f0      	beq.n	80057c4 <HAL_RCC_OscConfig+0x41c>
 80057e2:	e045      	b.n	8005870 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e4:	4b27      	ldr	r3, [pc, #156]	; (8005884 <HAL_RCC_OscConfig+0x4dc>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ea:	f7fe fc21 	bl	8004030 <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057f2:	f7fe fc1d 	bl	8004030 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e036      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005804:	4b1e      	ldr	r3, [pc, #120]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f0      	bne.n	80057f2 <HAL_RCC_OscConfig+0x44a>
 8005810:	e02e      	b.n	8005870 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e029      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800581e:	4b18      	ldr	r3, [pc, #96]	; (8005880 <HAL_RCC_OscConfig+0x4d8>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	429a      	cmp	r2, r3
 8005830:	d11c      	bne.n	800586c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583c:	429a      	cmp	r2, r3
 800583e:	d115      	bne.n	800586c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005846:	4013      	ands	r3, r2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800584c:	4293      	cmp	r3, r2
 800584e:	d10d      	bne.n	800586c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800585a:	429a      	cmp	r2, r3
 800585c:	d106      	bne.n	800586c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005868:	429a      	cmp	r2, r3
 800586a:	d001      	beq.n	8005870 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40007000 	.word	0x40007000
 8005880:	40023800 	.word	0x40023800
 8005884:	42470060 	.word	0x42470060

08005888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0cc      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800589c:	4b68      	ldr	r3, [pc, #416]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d90c      	bls.n	80058c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b65      	ldr	r3, [pc, #404]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b2:	4b63      	ldr	r3, [pc, #396]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d001      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0b8      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d020      	beq.n	8005912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058dc:	4b59      	ldr	r3, [pc, #356]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4a58      	ldr	r2, [pc, #352]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058f4:	4b53      	ldr	r3, [pc, #332]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	4a52      	ldr	r2, [pc, #328]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005900:	4b50      	ldr	r3, [pc, #320]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	494d      	ldr	r1, [pc, #308]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	4313      	orrs	r3, r2
 8005910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d044      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d107      	bne.n	8005936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005926:	4b47      	ldr	r3, [pc, #284]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d119      	bne.n	8005966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e07f      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2b02      	cmp	r3, #2
 800593c:	d003      	beq.n	8005946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005942:	2b03      	cmp	r3, #3
 8005944:	d107      	bne.n	8005956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005946:	4b3f      	ldr	r3, [pc, #252]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d109      	bne.n	8005966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e06f      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005956:	4b3b      	ldr	r3, [pc, #236]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e067      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005966:	4b37      	ldr	r3, [pc, #220]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f023 0203 	bic.w	r2, r3, #3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	4934      	ldr	r1, [pc, #208]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	4313      	orrs	r3, r2
 8005976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005978:	f7fe fb5a 	bl	8004030 <HAL_GetTick>
 800597c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597e:	e00a      	b.n	8005996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005980:	f7fe fb56 	bl	8004030 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	; 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e04f      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005996:	4b2b      	ldr	r3, [pc, #172]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 020c 	and.w	r2, r3, #12
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d1eb      	bne.n	8005980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059a8:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d20c      	bcs.n	80059d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b6:	4b22      	ldr	r3, [pc, #136]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059be:	4b20      	ldr	r3, [pc, #128]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d001      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e032      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d008      	beq.n	80059ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059dc:	4b19      	ldr	r3, [pc, #100]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4916      	ldr	r1, [pc, #88]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059fa:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	490e      	ldr	r1, [pc, #56]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a0e:	f000 f821 	bl	8005a54 <HAL_RCC_GetSysClockFreq>
 8005a12:	4601      	mov	r1, r0
 8005a14:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	4a0a      	ldr	r2, [pc, #40]	; (8005a48 <HAL_RCC_ClockConfig+0x1c0>)
 8005a20:	5cd3      	ldrb	r3, [r2, r3]
 8005a22:	fa21 f303 	lsr.w	r3, r1, r3
 8005a26:	4a09      	ldr	r2, [pc, #36]	; (8005a4c <HAL_RCC_ClockConfig+0x1c4>)
 8005a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a2a:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <HAL_RCC_ClockConfig+0x1c8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe f8e4 	bl	8003bfc <HAL_InitTick>

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40023c00 	.word	0x40023c00
 8005a44:	40023800 	.word	0x40023800
 8005a48:	08008e24 	.word	0x08008e24
 8005a4c:	20000048 	.word	0x20000048
 8005a50:	2000004c 	.word	0x2000004c

08005a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	607b      	str	r3, [r7, #4]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	2300      	movs	r3, #0
 8005a64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a6a:	4b50      	ldr	r3, [pc, #320]	; (8005bac <HAL_RCC_GetSysClockFreq+0x158>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 030c 	and.w	r3, r3, #12
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d007      	beq.n	8005a86 <HAL_RCC_GetSysClockFreq+0x32>
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d008      	beq.n	8005a8c <HAL_RCC_GetSysClockFreq+0x38>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f040 808d 	bne.w	8005b9a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a80:	4b4b      	ldr	r3, [pc, #300]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005a82:	60bb      	str	r3, [r7, #8]
       break;
 8005a84:	e08c      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a86:	4b4b      	ldr	r3, [pc, #300]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a88:	60bb      	str	r3, [r7, #8]
      break;
 8005a8a:	e089      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a8c:	4b47      	ldr	r3, [pc, #284]	; (8005bac <HAL_RCC_GetSysClockFreq+0x158>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a96:	4b45      	ldr	r3, [pc, #276]	; (8005bac <HAL_RCC_GetSysClockFreq+0x158>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d023      	beq.n	8005aea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa2:	4b42      	ldr	r3, [pc, #264]	; (8005bac <HAL_RCC_GetSysClockFreq+0x158>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	099b      	lsrs	r3, r3, #6
 8005aa8:	f04f 0400 	mov.w	r4, #0
 8005aac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	ea03 0501 	and.w	r5, r3, r1
 8005ab8:	ea04 0602 	and.w	r6, r4, r2
 8005abc:	4a3d      	ldr	r2, [pc, #244]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005abe:	fb02 f106 	mul.w	r1, r2, r6
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	fb02 f205 	mul.w	r2, r2, r5
 8005ac8:	440a      	add	r2, r1
 8005aca:	493a      	ldr	r1, [pc, #232]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005acc:	fba5 0101 	umull	r0, r1, r5, r1
 8005ad0:	1853      	adds	r3, r2, r1
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f04f 0400 	mov.w	r4, #0
 8005ada:	461a      	mov	r2, r3
 8005adc:	4623      	mov	r3, r4
 8005ade:	f7fb f87b 	bl	8000bd8 <__aeabi_uldivmod>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	e049      	b.n	8005b7e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aea:	4b30      	ldr	r3, [pc, #192]	; (8005bac <HAL_RCC_GetSysClockFreq+0x158>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	099b      	lsrs	r3, r3, #6
 8005af0:	f04f 0400 	mov.w	r4, #0
 8005af4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	ea03 0501 	and.w	r5, r3, r1
 8005b00:	ea04 0602 	and.w	r6, r4, r2
 8005b04:	4629      	mov	r1, r5
 8005b06:	4632      	mov	r2, r6
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	f04f 0400 	mov.w	r4, #0
 8005b10:	0154      	lsls	r4, r2, #5
 8005b12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b16:	014b      	lsls	r3, r1, #5
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	1b49      	subs	r1, r1, r5
 8005b1e:	eb62 0206 	sbc.w	r2, r2, r6
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	f04f 0400 	mov.w	r4, #0
 8005b2a:	0194      	lsls	r4, r2, #6
 8005b2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b30:	018b      	lsls	r3, r1, #6
 8005b32:	1a5b      	subs	r3, r3, r1
 8005b34:	eb64 0402 	sbc.w	r4, r4, r2
 8005b38:	f04f 0100 	mov.w	r1, #0
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	00e2      	lsls	r2, r4, #3
 8005b42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b46:	00d9      	lsls	r1, r3, #3
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4614      	mov	r4, r2
 8005b4c:	195b      	adds	r3, r3, r5
 8005b4e:	eb44 0406 	adc.w	r4, r4, r6
 8005b52:	f04f 0100 	mov.w	r1, #0
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	02a2      	lsls	r2, r4, #10
 8005b5c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005b60:	0299      	lsls	r1, r3, #10
 8005b62:	460b      	mov	r3, r1
 8005b64:	4614      	mov	r4, r2
 8005b66:	4618      	mov	r0, r3
 8005b68:	4621      	mov	r1, r4
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f04f 0400 	mov.w	r4, #0
 8005b70:	461a      	mov	r2, r3
 8005b72:	4623      	mov	r3, r4
 8005b74:	f7fb f830 	bl	8000bd8 <__aeabi_uldivmod>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <HAL_RCC_GetSysClockFreq+0x158>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	0c1b      	lsrs	r3, r3, #16
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	3301      	adds	r3, #1
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b96:	60bb      	str	r3, [r7, #8]
      break;
 8005b98:	e002      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b9a:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005b9c:	60bb      	str	r3, [r7, #8]
      break;
 8005b9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	00f42400 	.word	0x00f42400
 8005bb4:	017d7840 	.word	0x017d7840

08005bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bbc:	4b03      	ldr	r3, [pc, #12]	; (8005bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	20000048 	.word	0x20000048

08005bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bd4:	f7ff fff0 	bl	8005bb8 <HAL_RCC_GetHCLKFreq>
 8005bd8:	4601      	mov	r1, r0
 8005bda:	4b05      	ldr	r3, [pc, #20]	; (8005bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	0a9b      	lsrs	r3, r3, #10
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	4a03      	ldr	r2, [pc, #12]	; (8005bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005be6:	5cd3      	ldrb	r3, [r2, r3]
 8005be8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	08008e34 	.word	0x08008e34

08005bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bfc:	f7ff ffdc 	bl	8005bb8 <HAL_RCC_GetHCLKFreq>
 8005c00:	4601      	mov	r1, r0
 8005c02:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	0b5b      	lsrs	r3, r3, #13
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	4a03      	ldr	r2, [pc, #12]	; (8005c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c0e:	5cd3      	ldrb	r3, [r2, r3]
 8005c10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	08008e34 	.word	0x08008e34

08005c20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	220f      	movs	r2, #15
 8005c2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c30:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <HAL_RCC_GetClockConfig+0x5c>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 0203 	and.w	r2, r3, #3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c3c:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <HAL_RCC_GetClockConfig+0x5c>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c48:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <HAL_RCC_GetClockConfig+0x5c>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c54:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <HAL_RCC_GetClockConfig+0x5c>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	08db      	lsrs	r3, r3, #3
 8005c5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c62:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <HAL_RCC_GetClockConfig+0x60>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 020f 	and.w	r2, r3, #15
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	601a      	str	r2, [r3, #0]
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	40023c00 	.word	0x40023c00

08005c84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e056      	b.n	8005d44 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d106      	bne.n	8005cb6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7fd fe35 	bl	8003920 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ccc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	ea42 0103 	orr.w	r1, r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	0c1b      	lsrs	r3, r3, #16
 8005d14:	f003 0104 	and.w	r1, r3, #4
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69da      	ldr	r2, [r3, #28]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	603b      	str	r3, [r7, #0]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_SPI_Transmit+0x22>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e11e      	b.n	8005fac <HAL_SPI_Transmit+0x260>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d76:	f7fe f95b 	bl	8004030 <HAL_GetTick>
 8005d7a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d7c:	88fb      	ldrh	r3, [r7, #6]
 8005d7e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d002      	beq.n	8005d92 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d90:	e103      	b.n	8005f9a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <HAL_SPI_Transmit+0x52>
 8005d98:	88fb      	ldrh	r3, [r7, #6]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d102      	bne.n	8005da4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005da2:	e0fa      	b.n	8005f9a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2203      	movs	r2, #3
 8005da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	88fa      	ldrh	r2, [r7, #6]
 8005dbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	88fa      	ldrh	r2, [r7, #6]
 8005dc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dea:	d107      	bne.n	8005dfc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dfa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b40      	cmp	r3, #64	; 0x40
 8005e08:	d007      	beq.n	8005e1a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e22:	d14b      	bne.n	8005ebc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <HAL_SPI_Transmit+0xe6>
 8005e2c:	8afb      	ldrh	r3, [r7, #22]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d13e      	bne.n	8005eb0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	881a      	ldrh	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	1c9a      	adds	r2, r3, #2
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e56:	e02b      	b.n	8005eb0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d112      	bne.n	8005e8c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	881a      	ldrh	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	1c9a      	adds	r2, r3, #2
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e8a:	e011      	b.n	8005eb0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e8c:	f7fe f8d0 	bl	8004030 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d803      	bhi.n	8005ea4 <HAL_SPI_Transmit+0x158>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea2:	d102      	bne.n	8005eaa <HAL_SPI_Transmit+0x15e>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d102      	bne.n	8005eb0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005eae:	e074      	b.n	8005f9a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1ce      	bne.n	8005e58 <HAL_SPI_Transmit+0x10c>
 8005eba:	e04c      	b.n	8005f56 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <HAL_SPI_Transmit+0x17e>
 8005ec4:	8afb      	ldrh	r3, [r7, #22]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d140      	bne.n	8005f4c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	330c      	adds	r3, #12
 8005ed4:	7812      	ldrb	r2, [r2, #0]
 8005ed6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ef0:	e02c      	b.n	8005f4c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d113      	bne.n	8005f28 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	7812      	ldrb	r2, [r2, #0]
 8005f0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f26:	e011      	b.n	8005f4c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f28:	f7fe f882 	bl	8004030 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d803      	bhi.n	8005f40 <HAL_SPI_Transmit+0x1f4>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3e:	d102      	bne.n	8005f46 <HAL_SPI_Transmit+0x1fa>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d102      	bne.n	8005f4c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f4a:	e026      	b.n	8005f9a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1cd      	bne.n	8005ef2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fa44 	bl	80063e8 <SPI_EndRxTxTransaction>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f74:	2300      	movs	r3, #0
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	77fb      	strb	r3, [r7, #31]
 8005f96:	e000      	b.n	8005f9a <HAL_SPI_Transmit+0x24e>
  }

error:
 8005f98:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005faa:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3720      	adds	r7, #32
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08c      	sub	sp, #48	; 0x30
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <HAL_SPI_TransmitReceive+0x26>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e18a      	b.n	80062f0 <HAL_SPI_TransmitReceive+0x33c>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fe2:	f7fe f825 	bl	8004030 <HAL_GetTick>
 8005fe6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005ff8:	887b      	ldrh	r3, [r7, #2]
 8005ffa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006000:	2b01      	cmp	r3, #1
 8006002:	d00f      	beq.n	8006024 <HAL_SPI_TransmitReceive+0x70>
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800600a:	d107      	bne.n	800601c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d103      	bne.n	800601c <HAL_SPI_TransmitReceive+0x68>
 8006014:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006018:	2b04      	cmp	r3, #4
 800601a:	d003      	beq.n	8006024 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800601c:	2302      	movs	r3, #2
 800601e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006022:	e15b      	b.n	80062dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d005      	beq.n	8006036 <HAL_SPI_TransmitReceive+0x82>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_SPI_TransmitReceive+0x82>
 8006030:	887b      	ldrh	r3, [r7, #2]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d103      	bne.n	800603e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800603c:	e14e      	b.n	80062dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b04      	cmp	r3, #4
 8006048:	d003      	beq.n	8006052 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2205      	movs	r2, #5
 800604e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	887a      	ldrh	r2, [r7, #2]
 8006062:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	887a      	ldrh	r2, [r7, #2]
 8006068:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	887a      	ldrh	r2, [r7, #2]
 8006074:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	887a      	ldrh	r2, [r7, #2]
 800607a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	d007      	beq.n	80060a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ae:	d178      	bne.n	80061a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HAL_SPI_TransmitReceive+0x10a>
 80060b8:	8b7b      	ldrh	r3, [r7, #26]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d166      	bne.n	800618c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	881a      	ldrh	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	1c9a      	adds	r2, r3, #2
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060e2:	e053      	b.n	800618c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d11b      	bne.n	800612a <HAL_SPI_TransmitReceive+0x176>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d016      	beq.n	800612a <HAL_SPI_TransmitReceive+0x176>
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d113      	bne.n	800612a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006106:	881a      	ldrh	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	1c9a      	adds	r2, r3, #2
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b01      	cmp	r3, #1
 8006136:	d119      	bne.n	800616c <HAL_SPI_TransmitReceive+0x1b8>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d014      	beq.n	800616c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	b292      	uxth	r2, r2
 800614e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006154:	1c9a      	adds	r2, r3, #2
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006168:	2301      	movs	r3, #1
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800616c:	f7fd ff60 	bl	8004030 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006178:	429a      	cmp	r2, r3
 800617a:	d807      	bhi.n	800618c <HAL_SPI_TransmitReceive+0x1d8>
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006182:	d003      	beq.n	800618c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800618a:	e0a7      	b.n	80062dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006190:	b29b      	uxth	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1a6      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x130>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1a1      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x130>
 80061a0:	e07c      	b.n	800629c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_SPI_TransmitReceive+0x1fc>
 80061aa:	8b7b      	ldrh	r3, [r7, #26]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d16b      	bne.n	8006288 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	7812      	ldrb	r2, [r2, #0]
 80061bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d6:	e057      	b.n	8006288 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d11c      	bne.n	8006220 <HAL_SPI_TransmitReceive+0x26c>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d017      	beq.n	8006220 <HAL_SPI_TransmitReceive+0x26c>
 80061f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d114      	bne.n	8006220 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	330c      	adds	r3, #12
 8006200:	7812      	ldrb	r2, [r2, #0]
 8006202:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b01      	cmp	r3, #1
 800622c:	d119      	bne.n	8006262 <HAL_SPI_TransmitReceive+0x2ae>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006232:	b29b      	uxth	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	d014      	beq.n	8006262 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800625e:	2301      	movs	r3, #1
 8006260:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006262:	f7fd fee5 	bl	8004030 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800626e:	429a      	cmp	r2, r3
 8006270:	d803      	bhi.n	800627a <HAL_SPI_TransmitReceive+0x2c6>
 8006272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006278:	d102      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x2cc>
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	2b00      	cmp	r3, #0
 800627e:	d103      	bne.n	8006288 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006286:	e029      	b.n	80062dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800628c:	b29b      	uxth	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1a2      	bne.n	80061d8 <HAL_SPI_TransmitReceive+0x224>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006296:	b29b      	uxth	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d19d      	bne.n	80061d8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800629c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f8a1 	bl	80063e8 <SPI_EndRxTxTransaction>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d006      	beq.n	80062ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2220      	movs	r2, #32
 80062b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80062b8:	e010      	b.n	80062dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10b      	bne.n	80062da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062c2:	2300      	movs	r3, #0
 80062c4:	617b      	str	r3, [r7, #20]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	e000      	b.n	80062dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80062da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3730      	adds	r7, #48	; 0x30
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006306:	b2db      	uxtb	r3, r3
}
 8006308:	4618      	mov	r0, r3
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	4613      	mov	r3, r2
 8006322:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006324:	e04c      	b.n	80063c0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632c:	d048      	beq.n	80063c0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800632e:	f7fd fe7f 	bl	8004030 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d902      	bls.n	8006344 <SPI_WaitFlagStateUntilTimeout+0x30>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d13d      	bne.n	80063c0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006352:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800635c:	d111      	bne.n	8006382 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006366:	d004      	beq.n	8006372 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006370:	d107      	bne.n	8006382 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006380:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800638a:	d10f      	bne.n	80063ac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e00f      	b.n	80063e0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4013      	ands	r3, r2
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	bf0c      	ite	eq
 80063d0:	2301      	moveq	r3, #1
 80063d2:	2300      	movne	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d1a3      	bne.n	8006326 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063f4:	4b1b      	ldr	r3, [pc, #108]	; (8006464 <SPI_EndRxTxTransaction+0x7c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a1b      	ldr	r2, [pc, #108]	; (8006468 <SPI_EndRxTxTransaction+0x80>)
 80063fa:	fba2 2303 	umull	r2, r3, r2, r3
 80063fe:	0d5b      	lsrs	r3, r3, #21
 8006400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006404:	fb02 f303 	mul.w	r3, r2, r3
 8006408:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006412:	d112      	bne.n	800643a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2200      	movs	r2, #0
 800641c:	2180      	movs	r1, #128	; 0x80
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff ff78 	bl	8006314 <SPI_WaitFlagStateUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d016      	beq.n	8006458 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642e:	f043 0220 	orr.w	r2, r3, #32
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e00f      	b.n	800645a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3b01      	subs	r3, #1
 8006444:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006450:	2b80      	cmp	r3, #128	; 0x80
 8006452:	d0f2      	beq.n	800643a <SPI_EndRxTxTransaction+0x52>
 8006454:	e000      	b.n	8006458 <SPI_EndRxTxTransaction+0x70>
        break;
 8006456:	bf00      	nop
  }

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000048 	.word	0x20000048
 8006468:	165e9f81 	.word	0x165e9f81

0800646c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e01d      	b.n	80064ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fd fa8c 	bl	80039b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4619      	mov	r1, r3
 80064aa:	4610      	mov	r0, r2
 80064ac:	f000 fbc0 	bl	8006c30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2202      	movs	r2, #2
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b06      	cmp	r3, #6
 80064e2:	d007      	beq.n	80064f4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0201 	orr.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800650a:	b480      	push	{r7}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0201 	orr.w	r2, r2, #1
 8006520:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b06      	cmp	r3, #6
 8006532:	d007      	beq.n	8006544 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0201 	orr.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b082      	sub	sp, #8
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e01d      	b.n	80065a0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d106      	bne.n	800657e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7fd fa6d 	bl	8003a58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2202      	movs	r2, #2
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	3304      	adds	r3, #4
 800658e:	4619      	mov	r1, r3
 8006590:	4610      	mov	r0, r2
 8006592:	f000 fb4d 	bl	8006c30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2201      	movs	r2, #1
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fe22 	bl	8007204 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a15      	ldr	r2, [pc, #84]	; (800661c <HAL_TIM_PWM_Start+0x74>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d004      	beq.n	80065d4 <HAL_TIM_PWM_Start+0x2c>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a14      	ldr	r2, [pc, #80]	; (8006620 <HAL_TIM_PWM_Start+0x78>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d101      	bne.n	80065d8 <HAL_TIM_PWM_Start+0x30>
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <HAL_TIM_PWM_Start+0x32>
 80065d8:	2300      	movs	r3, #0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d007      	beq.n	80065ee <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b06      	cmp	r3, #6
 80065fe:	d007      	beq.n	8006610 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40010000 	.word	0x40010000
 8006620:	40010400 	.word	0x40010400

08006624 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2200      	movs	r2, #0
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fde4 	bl	8007204 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a22      	ldr	r2, [pc, #136]	; (80066cc <HAL_TIM_PWM_Stop+0xa8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d004      	beq.n	8006650 <HAL_TIM_PWM_Stop+0x2c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a21      	ldr	r2, [pc, #132]	; (80066d0 <HAL_TIM_PWM_Stop+0xac>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d101      	bne.n	8006654 <HAL_TIM_PWM_Stop+0x30>
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <HAL_TIM_PWM_Stop+0x32>
 8006654:	2300      	movs	r3, #0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d017      	beq.n	800668a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6a1a      	ldr	r2, [r3, #32]
 8006660:	f241 1311 	movw	r3, #4369	; 0x1111
 8006664:	4013      	ands	r3, r2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10f      	bne.n	800668a <HAL_TIM_PWM_Stop+0x66>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6a1a      	ldr	r2, [r3, #32]
 8006670:	f240 4344 	movw	r3, #1092	; 0x444
 8006674:	4013      	ands	r3, r2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d107      	bne.n	800668a <HAL_TIM_PWM_Stop+0x66>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006688:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6a1a      	ldr	r2, [r3, #32]
 8006690:	f241 1311 	movw	r3, #4369	; 0x1111
 8006694:	4013      	ands	r3, r2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10f      	bne.n	80066ba <HAL_TIM_PWM_Stop+0x96>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6a1a      	ldr	r2, [r3, #32]
 80066a0:	f240 4344 	movw	r3, #1092	; 0x444
 80066a4:	4013      	ands	r3, r2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d107      	bne.n	80066ba <HAL_TIM_PWM_Stop+0x96>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0201 	bic.w	r2, r2, #1
 80066b8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40010400 	.word	0x40010400

080066d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d122      	bne.n	8006730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d11b      	bne.n	8006730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0202 	mvn.w	r2, #2
 8006700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa6b 	bl	8006bf2 <HAL_TIM_IC_CaptureCallback>
 800671c:	e005      	b.n	800672a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fa5d 	bl	8006bde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fa6e 	bl	8006c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b04      	cmp	r3, #4
 800673c:	d122      	bne.n	8006784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b04      	cmp	r3, #4
 800674a:	d11b      	bne.n	8006784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f06f 0204 	mvn.w	r2, #4
 8006754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa41 	bl	8006bf2 <HAL_TIM_IC_CaptureCallback>
 8006770:	e005      	b.n	800677e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa33 	bl	8006bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fa44 	bl	8006c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0308 	and.w	r3, r3, #8
 800678e:	2b08      	cmp	r3, #8
 8006790:	d122      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0308 	and.w	r3, r3, #8
 800679c:	2b08      	cmp	r3, #8
 800679e:	d11b      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f06f 0208 	mvn.w	r2, #8
 80067a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2204      	movs	r2, #4
 80067ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa17 	bl	8006bf2 <HAL_TIM_IC_CaptureCallback>
 80067c4:	e005      	b.n	80067d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fa09 	bl	8006bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fa1a 	bl	8006c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 0310 	and.w	r3, r3, #16
 80067e2:	2b10      	cmp	r3, #16
 80067e4:	d122      	bne.n	800682c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b10      	cmp	r3, #16
 80067f2:	d11b      	bne.n	800682c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f06f 0210 	mvn.w	r2, #16
 80067fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2208      	movs	r2, #8
 8006802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f9ed 	bl	8006bf2 <HAL_TIM_IC_CaptureCallback>
 8006818:	e005      	b.n	8006826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f9df 	bl	8006bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f9f0 	bl	8006c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b01      	cmp	r3, #1
 8006838:	d10e      	bne.n	8006858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b01      	cmp	r3, #1
 8006846:	d107      	bne.n	8006858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f06f 0201 	mvn.w	r2, #1
 8006850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fc ff5c 	bl	8003710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006862:	2b80      	cmp	r3, #128	; 0x80
 8006864:	d10e      	bne.n	8006884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006870:	2b80      	cmp	r3, #128	; 0x80
 8006872:	d107      	bne.n	8006884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800687c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fd6c 	bl	800735c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688e:	2b40      	cmp	r3, #64	; 0x40
 8006890:	d10e      	bne.n	80068b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689c:	2b40      	cmp	r3, #64	; 0x40
 800689e:	d107      	bne.n	80068b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f9b5 	bl	8006c1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	d10e      	bne.n	80068dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d107      	bne.n	80068dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f06f 0220 	mvn.w	r2, #32
 80068d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fd36 	bl	8007348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e0b4      	b.n	8006a68 <HAL_TIM_PWM_ConfigChannel+0x184>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2202      	movs	r2, #2
 800690a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b0c      	cmp	r3, #12
 8006912:	f200 809f 	bhi.w	8006a54 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006916:	a201      	add	r2, pc, #4	; (adr r2, 800691c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691c:	08006951 	.word	0x08006951
 8006920:	08006a55 	.word	0x08006a55
 8006924:	08006a55 	.word	0x08006a55
 8006928:	08006a55 	.word	0x08006a55
 800692c:	08006991 	.word	0x08006991
 8006930:	08006a55 	.word	0x08006a55
 8006934:	08006a55 	.word	0x08006a55
 8006938:	08006a55 	.word	0x08006a55
 800693c:	080069d3 	.word	0x080069d3
 8006940:	08006a55 	.word	0x08006a55
 8006944:	08006a55 	.word	0x08006a55
 8006948:	08006a55 	.word	0x08006a55
 800694c:	08006a13 	.word	0x08006a13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68b9      	ldr	r1, [r7, #8]
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fa0a 	bl	8006d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0208 	orr.w	r2, r2, #8
 800696a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	699a      	ldr	r2, [r3, #24]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0204 	bic.w	r2, r2, #4
 800697a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6999      	ldr	r1, [r3, #24]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	619a      	str	r2, [r3, #24]
      break;
 800698e:	e062      	b.n	8006a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fa5a 	bl	8006e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699a      	ldr	r2, [r3, #24]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6999      	ldr	r1, [r3, #24]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	021a      	lsls	r2, r3, #8
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	619a      	str	r2, [r3, #24]
      break;
 80069d0:	e041      	b.n	8006a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 faaf 	bl	8006f3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	69da      	ldr	r2, [r3, #28]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0208 	orr.w	r2, r2, #8
 80069ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	69da      	ldr	r2, [r3, #28]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0204 	bic.w	r2, r2, #4
 80069fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69d9      	ldr	r1, [r3, #28]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	691a      	ldr	r2, [r3, #16]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	61da      	str	r2, [r3, #28]
      break;
 8006a10:	e021      	b.n	8006a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fb03 	bl	8007024 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69da      	ldr	r2, [r3, #28]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69da      	ldr	r2, [r3, #28]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69d9      	ldr	r1, [r3, #28]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	021a      	lsls	r2, r3, #8
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	61da      	str	r2, [r3, #28]
      break;
 8006a52:	e000      	b.n	8006a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006a54:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_TIM_ConfigClockSource+0x18>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e0a6      	b.n	8006bd6 <HAL_TIM_ConfigClockSource+0x166>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006aa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b40      	cmp	r3, #64	; 0x40
 8006abe:	d067      	beq.n	8006b90 <HAL_TIM_ConfigClockSource+0x120>
 8006ac0:	2b40      	cmp	r3, #64	; 0x40
 8006ac2:	d80b      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x6c>
 8006ac4:	2b10      	cmp	r3, #16
 8006ac6:	d073      	beq.n	8006bb0 <HAL_TIM_ConfigClockSource+0x140>
 8006ac8:	2b10      	cmp	r3, #16
 8006aca:	d802      	bhi.n	8006ad2 <HAL_TIM_ConfigClockSource+0x62>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d06f      	beq.n	8006bb0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006ad0:	e078      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006ad2:	2b20      	cmp	r3, #32
 8006ad4:	d06c      	beq.n	8006bb0 <HAL_TIM_ConfigClockSource+0x140>
 8006ad6:	2b30      	cmp	r3, #48	; 0x30
 8006ad8:	d06a      	beq.n	8006bb0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006ada:	e073      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006adc:	2b70      	cmp	r3, #112	; 0x70
 8006ade:	d00d      	beq.n	8006afc <HAL_TIM_ConfigClockSource+0x8c>
 8006ae0:	2b70      	cmp	r3, #112	; 0x70
 8006ae2:	d804      	bhi.n	8006aee <HAL_TIM_ConfigClockSource+0x7e>
 8006ae4:	2b50      	cmp	r3, #80	; 0x50
 8006ae6:	d033      	beq.n	8006b50 <HAL_TIM_ConfigClockSource+0xe0>
 8006ae8:	2b60      	cmp	r3, #96	; 0x60
 8006aea:	d041      	beq.n	8006b70 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006aec:	e06a      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af2:	d066      	beq.n	8006bc2 <HAL_TIM_ConfigClockSource+0x152>
 8006af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af8:	d017      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006afa:	e063      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	6899      	ldr	r1, [r3, #8]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f000 fb5a 	bl	80071c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b1e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	609a      	str	r2, [r3, #8]
      break;
 8006b28:	e04c      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6899      	ldr	r1, [r3, #8]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f000 fb43 	bl	80071c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b4c:	609a      	str	r2, [r3, #8]
      break;
 8006b4e:	e039      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6818      	ldr	r0, [r3, #0]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	6859      	ldr	r1, [r3, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	f000 fab7 	bl	80070d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2150      	movs	r1, #80	; 0x50
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fb10 	bl	800718e <TIM_ITRx_SetConfig>
      break;
 8006b6e:	e029      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6818      	ldr	r0, [r3, #0]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	6859      	ldr	r1, [r3, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	f000 fad6 	bl	800712e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2160      	movs	r1, #96	; 0x60
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fb00 	bl	800718e <TIM_ITRx_SetConfig>
      break;
 8006b8e:	e019      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6818      	ldr	r0, [r3, #0]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	6859      	ldr	r1, [r3, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	f000 fa97 	bl	80070d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2140      	movs	r1, #64	; 0x40
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 faf0 	bl	800718e <TIM_ITRx_SetConfig>
      break;
 8006bae:	e009      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	f000 fae7 	bl	800718e <TIM_ITRx_SetConfig>
      break;
 8006bc0:	e000      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006bc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c0e:	bf00      	nop
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
	...

08006c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a40      	ldr	r2, [pc, #256]	; (8006d44 <TIM_Base_SetConfig+0x114>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d013      	beq.n	8006c70 <TIM_Base_SetConfig+0x40>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c4e:	d00f      	beq.n	8006c70 <TIM_Base_SetConfig+0x40>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a3d      	ldr	r2, [pc, #244]	; (8006d48 <TIM_Base_SetConfig+0x118>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00b      	beq.n	8006c70 <TIM_Base_SetConfig+0x40>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a3c      	ldr	r2, [pc, #240]	; (8006d4c <TIM_Base_SetConfig+0x11c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d007      	beq.n	8006c70 <TIM_Base_SetConfig+0x40>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a3b      	ldr	r2, [pc, #236]	; (8006d50 <TIM_Base_SetConfig+0x120>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d003      	beq.n	8006c70 <TIM_Base_SetConfig+0x40>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a3a      	ldr	r2, [pc, #232]	; (8006d54 <TIM_Base_SetConfig+0x124>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d108      	bne.n	8006c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a2f      	ldr	r2, [pc, #188]	; (8006d44 <TIM_Base_SetConfig+0x114>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d02b      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c90:	d027      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a2c      	ldr	r2, [pc, #176]	; (8006d48 <TIM_Base_SetConfig+0x118>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d023      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a2b      	ldr	r2, [pc, #172]	; (8006d4c <TIM_Base_SetConfig+0x11c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d01f      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a2a      	ldr	r2, [pc, #168]	; (8006d50 <TIM_Base_SetConfig+0x120>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d01b      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a29      	ldr	r2, [pc, #164]	; (8006d54 <TIM_Base_SetConfig+0x124>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d017      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a28      	ldr	r2, [pc, #160]	; (8006d58 <TIM_Base_SetConfig+0x128>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d013      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a27      	ldr	r2, [pc, #156]	; (8006d5c <TIM_Base_SetConfig+0x12c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00f      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a26      	ldr	r2, [pc, #152]	; (8006d60 <TIM_Base_SetConfig+0x130>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00b      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a25      	ldr	r2, [pc, #148]	; (8006d64 <TIM_Base_SetConfig+0x134>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d007      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a24      	ldr	r2, [pc, #144]	; (8006d68 <TIM_Base_SetConfig+0x138>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d003      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a23      	ldr	r2, [pc, #140]	; (8006d6c <TIM_Base_SetConfig+0x13c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d108      	bne.n	8006cf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a0a      	ldr	r2, [pc, #40]	; (8006d44 <TIM_Base_SetConfig+0x114>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d003      	beq.n	8006d28 <TIM_Base_SetConfig+0xf8>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a0c      	ldr	r2, [pc, #48]	; (8006d54 <TIM_Base_SetConfig+0x124>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d103      	bne.n	8006d30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	615a      	str	r2, [r3, #20]
}
 8006d36:	bf00      	nop
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	40010000 	.word	0x40010000
 8006d48:	40000400 	.word	0x40000400
 8006d4c:	40000800 	.word	0x40000800
 8006d50:	40000c00 	.word	0x40000c00
 8006d54:	40010400 	.word	0x40010400
 8006d58:	40014000 	.word	0x40014000
 8006d5c:	40014400 	.word	0x40014400
 8006d60:	40014800 	.word	0x40014800
 8006d64:	40001800 	.word	0x40001800
 8006d68:	40001c00 	.word	0x40001c00
 8006d6c:	40002000 	.word	0x40002000

08006d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	f023 0201 	bic.w	r2, r3, #1
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0303 	bic.w	r3, r3, #3
 8006da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f023 0302 	bic.w	r3, r3, #2
 8006db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a20      	ldr	r2, [pc, #128]	; (8006e48 <TIM_OC1_SetConfig+0xd8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d003      	beq.n	8006dd4 <TIM_OC1_SetConfig+0x64>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a1f      	ldr	r2, [pc, #124]	; (8006e4c <TIM_OC1_SetConfig+0xdc>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d10c      	bne.n	8006dee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f023 0308 	bic.w	r3, r3, #8
 8006dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f023 0304 	bic.w	r3, r3, #4
 8006dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a15      	ldr	r2, [pc, #84]	; (8006e48 <TIM_OC1_SetConfig+0xd8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d003      	beq.n	8006dfe <TIM_OC1_SetConfig+0x8e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a14      	ldr	r2, [pc, #80]	; (8006e4c <TIM_OC1_SetConfig+0xdc>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d111      	bne.n	8006e22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	621a      	str	r2, [r3, #32]
}
 8006e3c:	bf00      	nop
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	40010000 	.word	0x40010000
 8006e4c:	40010400 	.word	0x40010400

08006e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	f023 0210 	bic.w	r2, r3, #16
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	021b      	lsls	r3, r3, #8
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f023 0320 	bic.w	r3, r3, #32
 8006e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	011b      	lsls	r3, r3, #4
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a22      	ldr	r2, [pc, #136]	; (8006f34 <TIM_OC2_SetConfig+0xe4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d003      	beq.n	8006eb8 <TIM_OC2_SetConfig+0x68>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a21      	ldr	r2, [pc, #132]	; (8006f38 <TIM_OC2_SetConfig+0xe8>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d10d      	bne.n	8006ed4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ed2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a17      	ldr	r2, [pc, #92]	; (8006f34 <TIM_OC2_SetConfig+0xe4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d003      	beq.n	8006ee4 <TIM_OC2_SetConfig+0x94>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a16      	ldr	r2, [pc, #88]	; (8006f38 <TIM_OC2_SetConfig+0xe8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d113      	bne.n	8006f0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	621a      	str	r2, [r3, #32]
}
 8006f26:	bf00      	nop
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	40010000 	.word	0x40010000
 8006f38:	40010400 	.word	0x40010400

08006f3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0303 	bic.w	r3, r3, #3
 8006f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	021b      	lsls	r3, r3, #8
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a21      	ldr	r2, [pc, #132]	; (800701c <TIM_OC3_SetConfig+0xe0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d003      	beq.n	8006fa2 <TIM_OC3_SetConfig+0x66>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a20      	ldr	r2, [pc, #128]	; (8007020 <TIM_OC3_SetConfig+0xe4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d10d      	bne.n	8006fbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	021b      	lsls	r3, r3, #8
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a16      	ldr	r2, [pc, #88]	; (800701c <TIM_OC3_SetConfig+0xe0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d003      	beq.n	8006fce <TIM_OC3_SetConfig+0x92>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a15      	ldr	r2, [pc, #84]	; (8007020 <TIM_OC3_SetConfig+0xe4>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d113      	bne.n	8006ff6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	011b      	lsls	r3, r3, #4
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	011b      	lsls	r3, r3, #4
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	621a      	str	r2, [r3, #32]
}
 8007010:	bf00      	nop
 8007012:	371c      	adds	r7, #28
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	40010000 	.word	0x40010000
 8007020:	40010400 	.word	0x40010400

08007024 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800705a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	021b      	lsls	r3, r3, #8
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4313      	orrs	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800706e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	031b      	lsls	r3, r3, #12
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	4313      	orrs	r3, r2
 800707a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a12      	ldr	r2, [pc, #72]	; (80070c8 <TIM_OC4_SetConfig+0xa4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_OC4_SetConfig+0x68>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a11      	ldr	r2, [pc, #68]	; (80070cc <TIM_OC4_SetConfig+0xa8>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d109      	bne.n	80070a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	019b      	lsls	r3, r3, #6
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	4313      	orrs	r3, r2
 800709e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	621a      	str	r2, [r3, #32]
}
 80070ba:	bf00      	nop
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	40010000 	.word	0x40010000
 80070cc:	40010400 	.word	0x40010400

080070d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f023 0201 	bic.w	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f023 030a 	bic.w	r3, r3, #10
 800710c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	621a      	str	r2, [r3, #32]
}
 8007122:	bf00      	nop
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800712e:	b480      	push	{r7}
 8007130:	b087      	sub	sp, #28
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f023 0210 	bic.w	r2, r3, #16
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007158:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	031b      	lsls	r3, r3, #12
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800716a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	4313      	orrs	r3, r2
 8007174:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f043 0307 	orr.w	r3, r3, #7
 80071b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	609a      	str	r2, [r3, #8]
}
 80071b8:	bf00      	nop
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	021a      	lsls	r2, r3, #8
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	431a      	orrs	r2, r3
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	609a      	str	r2, [r3, #8]
}
 80071f8:	bf00      	nop
 80071fa:	371c      	adds	r7, #28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f003 031f 	and.w	r3, r3, #31
 8007216:	2201      	movs	r2, #1
 8007218:	fa02 f303 	lsl.w	r3, r2, r3
 800721c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6a1a      	ldr	r2, [r3, #32]
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	43db      	mvns	r3, r3
 8007226:	401a      	ands	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a1a      	ldr	r2, [r3, #32]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f003 031f 	and.w	r3, r3, #31
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	fa01 f303 	lsl.w	r3, r1, r3
 800723c:	431a      	orrs	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	621a      	str	r2, [r3, #32]
}
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
	...

08007250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007264:	2302      	movs	r3, #2
 8007266:	e05a      	b.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a21      	ldr	r2, [pc, #132]	; (800732c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d022      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b4:	d01d      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a1d      	ldr	r2, [pc, #116]	; (8007330 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d018      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a1b      	ldr	r2, [pc, #108]	; (8007334 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d013      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a1a      	ldr	r2, [pc, #104]	; (8007338 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00e      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a18      	ldr	r2, [pc, #96]	; (800733c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d009      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a17      	ldr	r2, [pc, #92]	; (8007340 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d004      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a15      	ldr	r2, [pc, #84]	; (8007344 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d10c      	bne.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	4313      	orrs	r3, r2
 8007302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	40010000 	.word	0x40010000
 8007330:	40000400 	.word	0x40000400
 8007334:	40000800 	.word	0x40000800
 8007338:	40000c00 	.word	0x40000c00
 800733c:	40010400 	.word	0x40010400
 8007340:	40014000 	.word	0x40014000
 8007344:	40001800 	.word	0x40001800

08007348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e03f      	b.n	8007402 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d106      	bne.n	800739c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7fc fbe8 	bl	8003b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2224      	movs	r2, #36	; 0x24
 80073a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f829 	bl	800740c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	691a      	ldr	r2, [r3, #16]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	695a      	ldr	r2, [r3, #20]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	b085      	sub	sp, #20
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	431a      	orrs	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800744e:	f023 030c 	bic.w	r3, r3, #12
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6812      	ldr	r2, [r2, #0]
 8007456:	68f9      	ldr	r1, [r7, #12]
 8007458:	430b      	orrs	r3, r1
 800745a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699a      	ldr	r2, [r3, #24]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800747a:	f040 818b 	bne.w	8007794 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4ac1      	ldr	r2, [pc, #772]	; (8007788 <UART_SetConfig+0x37c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d005      	beq.n	8007494 <UART_SetConfig+0x88>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4abf      	ldr	r2, [pc, #764]	; (800778c <UART_SetConfig+0x380>)
 800748e:	4293      	cmp	r3, r2
 8007490:	f040 80bd 	bne.w	800760e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007494:	f7fe fbb0 	bl	8005bf8 <HAL_RCC_GetPCLK2Freq>
 8007498:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	461d      	mov	r5, r3
 800749e:	f04f 0600 	mov.w	r6, #0
 80074a2:	46a8      	mov	r8, r5
 80074a4:	46b1      	mov	r9, r6
 80074a6:	eb18 0308 	adds.w	r3, r8, r8
 80074aa:	eb49 0409 	adc.w	r4, r9, r9
 80074ae:	4698      	mov	r8, r3
 80074b0:	46a1      	mov	r9, r4
 80074b2:	eb18 0805 	adds.w	r8, r8, r5
 80074b6:	eb49 0906 	adc.w	r9, r9, r6
 80074ba:	f04f 0100 	mov.w	r1, #0
 80074be:	f04f 0200 	mov.w	r2, #0
 80074c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80074c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80074ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80074ce:	4688      	mov	r8, r1
 80074d0:	4691      	mov	r9, r2
 80074d2:	eb18 0005 	adds.w	r0, r8, r5
 80074d6:	eb49 0106 	adc.w	r1, r9, r6
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	461d      	mov	r5, r3
 80074e0:	f04f 0600 	mov.w	r6, #0
 80074e4:	196b      	adds	r3, r5, r5
 80074e6:	eb46 0406 	adc.w	r4, r6, r6
 80074ea:	461a      	mov	r2, r3
 80074ec:	4623      	mov	r3, r4
 80074ee:	f7f9 fb73 	bl	8000bd8 <__aeabi_uldivmod>
 80074f2:	4603      	mov	r3, r0
 80074f4:	460c      	mov	r4, r1
 80074f6:	461a      	mov	r2, r3
 80074f8:	4ba5      	ldr	r3, [pc, #660]	; (8007790 <UART_SetConfig+0x384>)
 80074fa:	fba3 2302 	umull	r2, r3, r3, r2
 80074fe:	095b      	lsrs	r3, r3, #5
 8007500:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	461d      	mov	r5, r3
 8007508:	f04f 0600 	mov.w	r6, #0
 800750c:	46a9      	mov	r9, r5
 800750e:	46b2      	mov	sl, r6
 8007510:	eb19 0309 	adds.w	r3, r9, r9
 8007514:	eb4a 040a 	adc.w	r4, sl, sl
 8007518:	4699      	mov	r9, r3
 800751a:	46a2      	mov	sl, r4
 800751c:	eb19 0905 	adds.w	r9, r9, r5
 8007520:	eb4a 0a06 	adc.w	sl, sl, r6
 8007524:	f04f 0100 	mov.w	r1, #0
 8007528:	f04f 0200 	mov.w	r2, #0
 800752c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007530:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007534:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007538:	4689      	mov	r9, r1
 800753a:	4692      	mov	sl, r2
 800753c:	eb19 0005 	adds.w	r0, r9, r5
 8007540:	eb4a 0106 	adc.w	r1, sl, r6
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	461d      	mov	r5, r3
 800754a:	f04f 0600 	mov.w	r6, #0
 800754e:	196b      	adds	r3, r5, r5
 8007550:	eb46 0406 	adc.w	r4, r6, r6
 8007554:	461a      	mov	r2, r3
 8007556:	4623      	mov	r3, r4
 8007558:	f7f9 fb3e 	bl	8000bd8 <__aeabi_uldivmod>
 800755c:	4603      	mov	r3, r0
 800755e:	460c      	mov	r4, r1
 8007560:	461a      	mov	r2, r3
 8007562:	4b8b      	ldr	r3, [pc, #556]	; (8007790 <UART_SetConfig+0x384>)
 8007564:	fba3 1302 	umull	r1, r3, r3, r2
 8007568:	095b      	lsrs	r3, r3, #5
 800756a:	2164      	movs	r1, #100	; 0x64
 800756c:	fb01 f303 	mul.w	r3, r1, r3
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	3332      	adds	r3, #50	; 0x32
 8007576:	4a86      	ldr	r2, [pc, #536]	; (8007790 <UART_SetConfig+0x384>)
 8007578:	fba2 2303 	umull	r2, r3, r2, r3
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007584:	4498      	add	r8, r3
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	461d      	mov	r5, r3
 800758a:	f04f 0600 	mov.w	r6, #0
 800758e:	46a9      	mov	r9, r5
 8007590:	46b2      	mov	sl, r6
 8007592:	eb19 0309 	adds.w	r3, r9, r9
 8007596:	eb4a 040a 	adc.w	r4, sl, sl
 800759a:	4699      	mov	r9, r3
 800759c:	46a2      	mov	sl, r4
 800759e:	eb19 0905 	adds.w	r9, r9, r5
 80075a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80075a6:	f04f 0100 	mov.w	r1, #0
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075ba:	4689      	mov	r9, r1
 80075bc:	4692      	mov	sl, r2
 80075be:	eb19 0005 	adds.w	r0, r9, r5
 80075c2:	eb4a 0106 	adc.w	r1, sl, r6
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	461d      	mov	r5, r3
 80075cc:	f04f 0600 	mov.w	r6, #0
 80075d0:	196b      	adds	r3, r5, r5
 80075d2:	eb46 0406 	adc.w	r4, r6, r6
 80075d6:	461a      	mov	r2, r3
 80075d8:	4623      	mov	r3, r4
 80075da:	f7f9 fafd 	bl	8000bd8 <__aeabi_uldivmod>
 80075de:	4603      	mov	r3, r0
 80075e0:	460c      	mov	r4, r1
 80075e2:	461a      	mov	r2, r3
 80075e4:	4b6a      	ldr	r3, [pc, #424]	; (8007790 <UART_SetConfig+0x384>)
 80075e6:	fba3 1302 	umull	r1, r3, r3, r2
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	2164      	movs	r1, #100	; 0x64
 80075ee:	fb01 f303 	mul.w	r3, r1, r3
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	3332      	adds	r3, #50	; 0x32
 80075f8:	4a65      	ldr	r2, [pc, #404]	; (8007790 <UART_SetConfig+0x384>)
 80075fa:	fba2 2303 	umull	r2, r3, r2, r3
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	f003 0207 	and.w	r2, r3, #7
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4442      	add	r2, r8
 800760a:	609a      	str	r2, [r3, #8]
 800760c:	e26f      	b.n	8007aee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800760e:	f7fe fadf 	bl	8005bd0 <HAL_RCC_GetPCLK1Freq>
 8007612:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	461d      	mov	r5, r3
 8007618:	f04f 0600 	mov.w	r6, #0
 800761c:	46a8      	mov	r8, r5
 800761e:	46b1      	mov	r9, r6
 8007620:	eb18 0308 	adds.w	r3, r8, r8
 8007624:	eb49 0409 	adc.w	r4, r9, r9
 8007628:	4698      	mov	r8, r3
 800762a:	46a1      	mov	r9, r4
 800762c:	eb18 0805 	adds.w	r8, r8, r5
 8007630:	eb49 0906 	adc.w	r9, r9, r6
 8007634:	f04f 0100 	mov.w	r1, #0
 8007638:	f04f 0200 	mov.w	r2, #0
 800763c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007640:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007644:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007648:	4688      	mov	r8, r1
 800764a:	4691      	mov	r9, r2
 800764c:	eb18 0005 	adds.w	r0, r8, r5
 8007650:	eb49 0106 	adc.w	r1, r9, r6
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	461d      	mov	r5, r3
 800765a:	f04f 0600 	mov.w	r6, #0
 800765e:	196b      	adds	r3, r5, r5
 8007660:	eb46 0406 	adc.w	r4, r6, r6
 8007664:	461a      	mov	r2, r3
 8007666:	4623      	mov	r3, r4
 8007668:	f7f9 fab6 	bl	8000bd8 <__aeabi_uldivmod>
 800766c:	4603      	mov	r3, r0
 800766e:	460c      	mov	r4, r1
 8007670:	461a      	mov	r2, r3
 8007672:	4b47      	ldr	r3, [pc, #284]	; (8007790 <UART_SetConfig+0x384>)
 8007674:	fba3 2302 	umull	r2, r3, r3, r2
 8007678:	095b      	lsrs	r3, r3, #5
 800767a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	461d      	mov	r5, r3
 8007682:	f04f 0600 	mov.w	r6, #0
 8007686:	46a9      	mov	r9, r5
 8007688:	46b2      	mov	sl, r6
 800768a:	eb19 0309 	adds.w	r3, r9, r9
 800768e:	eb4a 040a 	adc.w	r4, sl, sl
 8007692:	4699      	mov	r9, r3
 8007694:	46a2      	mov	sl, r4
 8007696:	eb19 0905 	adds.w	r9, r9, r5
 800769a:	eb4a 0a06 	adc.w	sl, sl, r6
 800769e:	f04f 0100 	mov.w	r1, #0
 80076a2:	f04f 0200 	mov.w	r2, #0
 80076a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076b2:	4689      	mov	r9, r1
 80076b4:	4692      	mov	sl, r2
 80076b6:	eb19 0005 	adds.w	r0, r9, r5
 80076ba:	eb4a 0106 	adc.w	r1, sl, r6
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	461d      	mov	r5, r3
 80076c4:	f04f 0600 	mov.w	r6, #0
 80076c8:	196b      	adds	r3, r5, r5
 80076ca:	eb46 0406 	adc.w	r4, r6, r6
 80076ce:	461a      	mov	r2, r3
 80076d0:	4623      	mov	r3, r4
 80076d2:	f7f9 fa81 	bl	8000bd8 <__aeabi_uldivmod>
 80076d6:	4603      	mov	r3, r0
 80076d8:	460c      	mov	r4, r1
 80076da:	461a      	mov	r2, r3
 80076dc:	4b2c      	ldr	r3, [pc, #176]	; (8007790 <UART_SetConfig+0x384>)
 80076de:	fba3 1302 	umull	r1, r3, r3, r2
 80076e2:	095b      	lsrs	r3, r3, #5
 80076e4:	2164      	movs	r1, #100	; 0x64
 80076e6:	fb01 f303 	mul.w	r3, r1, r3
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	00db      	lsls	r3, r3, #3
 80076ee:	3332      	adds	r3, #50	; 0x32
 80076f0:	4a27      	ldr	r2, [pc, #156]	; (8007790 <UART_SetConfig+0x384>)
 80076f2:	fba2 2303 	umull	r2, r3, r2, r3
 80076f6:	095b      	lsrs	r3, r3, #5
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076fe:	4498      	add	r8, r3
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	461d      	mov	r5, r3
 8007704:	f04f 0600 	mov.w	r6, #0
 8007708:	46a9      	mov	r9, r5
 800770a:	46b2      	mov	sl, r6
 800770c:	eb19 0309 	adds.w	r3, r9, r9
 8007710:	eb4a 040a 	adc.w	r4, sl, sl
 8007714:	4699      	mov	r9, r3
 8007716:	46a2      	mov	sl, r4
 8007718:	eb19 0905 	adds.w	r9, r9, r5
 800771c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007720:	f04f 0100 	mov.w	r1, #0
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800772c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007730:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007734:	4689      	mov	r9, r1
 8007736:	4692      	mov	sl, r2
 8007738:	eb19 0005 	adds.w	r0, r9, r5
 800773c:	eb4a 0106 	adc.w	r1, sl, r6
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	461d      	mov	r5, r3
 8007746:	f04f 0600 	mov.w	r6, #0
 800774a:	196b      	adds	r3, r5, r5
 800774c:	eb46 0406 	adc.w	r4, r6, r6
 8007750:	461a      	mov	r2, r3
 8007752:	4623      	mov	r3, r4
 8007754:	f7f9 fa40 	bl	8000bd8 <__aeabi_uldivmod>
 8007758:	4603      	mov	r3, r0
 800775a:	460c      	mov	r4, r1
 800775c:	461a      	mov	r2, r3
 800775e:	4b0c      	ldr	r3, [pc, #48]	; (8007790 <UART_SetConfig+0x384>)
 8007760:	fba3 1302 	umull	r1, r3, r3, r2
 8007764:	095b      	lsrs	r3, r3, #5
 8007766:	2164      	movs	r1, #100	; 0x64
 8007768:	fb01 f303 	mul.w	r3, r1, r3
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	3332      	adds	r3, #50	; 0x32
 8007772:	4a07      	ldr	r2, [pc, #28]	; (8007790 <UART_SetConfig+0x384>)
 8007774:	fba2 2303 	umull	r2, r3, r2, r3
 8007778:	095b      	lsrs	r3, r3, #5
 800777a:	f003 0207 	and.w	r2, r3, #7
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4442      	add	r2, r8
 8007784:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007786:	e1b2      	b.n	8007aee <UART_SetConfig+0x6e2>
 8007788:	40011000 	.word	0x40011000
 800778c:	40011400 	.word	0x40011400
 8007790:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4ad7      	ldr	r2, [pc, #860]	; (8007af8 <UART_SetConfig+0x6ec>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d005      	beq.n	80077aa <UART_SetConfig+0x39e>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4ad6      	ldr	r2, [pc, #856]	; (8007afc <UART_SetConfig+0x6f0>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	f040 80d1 	bne.w	800794c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80077aa:	f7fe fa25 	bl	8005bf8 <HAL_RCC_GetPCLK2Freq>
 80077ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	469a      	mov	sl, r3
 80077b4:	f04f 0b00 	mov.w	fp, #0
 80077b8:	46d0      	mov	r8, sl
 80077ba:	46d9      	mov	r9, fp
 80077bc:	eb18 0308 	adds.w	r3, r8, r8
 80077c0:	eb49 0409 	adc.w	r4, r9, r9
 80077c4:	4698      	mov	r8, r3
 80077c6:	46a1      	mov	r9, r4
 80077c8:	eb18 080a 	adds.w	r8, r8, sl
 80077cc:	eb49 090b 	adc.w	r9, r9, fp
 80077d0:	f04f 0100 	mov.w	r1, #0
 80077d4:	f04f 0200 	mov.w	r2, #0
 80077d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077e4:	4688      	mov	r8, r1
 80077e6:	4691      	mov	r9, r2
 80077e8:	eb1a 0508 	adds.w	r5, sl, r8
 80077ec:	eb4b 0609 	adc.w	r6, fp, r9
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	4619      	mov	r1, r3
 80077f6:	f04f 0200 	mov.w	r2, #0
 80077fa:	f04f 0300 	mov.w	r3, #0
 80077fe:	f04f 0400 	mov.w	r4, #0
 8007802:	0094      	lsls	r4, r2, #2
 8007804:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007808:	008b      	lsls	r3, r1, #2
 800780a:	461a      	mov	r2, r3
 800780c:	4623      	mov	r3, r4
 800780e:	4628      	mov	r0, r5
 8007810:	4631      	mov	r1, r6
 8007812:	f7f9 f9e1 	bl	8000bd8 <__aeabi_uldivmod>
 8007816:	4603      	mov	r3, r0
 8007818:	460c      	mov	r4, r1
 800781a:	461a      	mov	r2, r3
 800781c:	4bb8      	ldr	r3, [pc, #736]	; (8007b00 <UART_SetConfig+0x6f4>)
 800781e:	fba3 2302 	umull	r2, r3, r3, r2
 8007822:	095b      	lsrs	r3, r3, #5
 8007824:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	469b      	mov	fp, r3
 800782c:	f04f 0c00 	mov.w	ip, #0
 8007830:	46d9      	mov	r9, fp
 8007832:	46e2      	mov	sl, ip
 8007834:	eb19 0309 	adds.w	r3, r9, r9
 8007838:	eb4a 040a 	adc.w	r4, sl, sl
 800783c:	4699      	mov	r9, r3
 800783e:	46a2      	mov	sl, r4
 8007840:	eb19 090b 	adds.w	r9, r9, fp
 8007844:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007848:	f04f 0100 	mov.w	r1, #0
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007854:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007858:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800785c:	4689      	mov	r9, r1
 800785e:	4692      	mov	sl, r2
 8007860:	eb1b 0509 	adds.w	r5, fp, r9
 8007864:	eb4c 060a 	adc.w	r6, ip, sl
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	4619      	mov	r1, r3
 800786e:	f04f 0200 	mov.w	r2, #0
 8007872:	f04f 0300 	mov.w	r3, #0
 8007876:	f04f 0400 	mov.w	r4, #0
 800787a:	0094      	lsls	r4, r2, #2
 800787c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007880:	008b      	lsls	r3, r1, #2
 8007882:	461a      	mov	r2, r3
 8007884:	4623      	mov	r3, r4
 8007886:	4628      	mov	r0, r5
 8007888:	4631      	mov	r1, r6
 800788a:	f7f9 f9a5 	bl	8000bd8 <__aeabi_uldivmod>
 800788e:	4603      	mov	r3, r0
 8007890:	460c      	mov	r4, r1
 8007892:	461a      	mov	r2, r3
 8007894:	4b9a      	ldr	r3, [pc, #616]	; (8007b00 <UART_SetConfig+0x6f4>)
 8007896:	fba3 1302 	umull	r1, r3, r3, r2
 800789a:	095b      	lsrs	r3, r3, #5
 800789c:	2164      	movs	r1, #100	; 0x64
 800789e:	fb01 f303 	mul.w	r3, r1, r3
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	3332      	adds	r3, #50	; 0x32
 80078a8:	4a95      	ldr	r2, [pc, #596]	; (8007b00 <UART_SetConfig+0x6f4>)
 80078aa:	fba2 2303 	umull	r2, r3, r2, r3
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078b4:	4498      	add	r8, r3
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	469b      	mov	fp, r3
 80078ba:	f04f 0c00 	mov.w	ip, #0
 80078be:	46d9      	mov	r9, fp
 80078c0:	46e2      	mov	sl, ip
 80078c2:	eb19 0309 	adds.w	r3, r9, r9
 80078c6:	eb4a 040a 	adc.w	r4, sl, sl
 80078ca:	4699      	mov	r9, r3
 80078cc:	46a2      	mov	sl, r4
 80078ce:	eb19 090b 	adds.w	r9, r9, fp
 80078d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80078d6:	f04f 0100 	mov.w	r1, #0
 80078da:	f04f 0200 	mov.w	r2, #0
 80078de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078ea:	4689      	mov	r9, r1
 80078ec:	4692      	mov	sl, r2
 80078ee:	eb1b 0509 	adds.w	r5, fp, r9
 80078f2:	eb4c 060a 	adc.w	r6, ip, sl
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	4619      	mov	r1, r3
 80078fc:	f04f 0200 	mov.w	r2, #0
 8007900:	f04f 0300 	mov.w	r3, #0
 8007904:	f04f 0400 	mov.w	r4, #0
 8007908:	0094      	lsls	r4, r2, #2
 800790a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800790e:	008b      	lsls	r3, r1, #2
 8007910:	461a      	mov	r2, r3
 8007912:	4623      	mov	r3, r4
 8007914:	4628      	mov	r0, r5
 8007916:	4631      	mov	r1, r6
 8007918:	f7f9 f95e 	bl	8000bd8 <__aeabi_uldivmod>
 800791c:	4603      	mov	r3, r0
 800791e:	460c      	mov	r4, r1
 8007920:	461a      	mov	r2, r3
 8007922:	4b77      	ldr	r3, [pc, #476]	; (8007b00 <UART_SetConfig+0x6f4>)
 8007924:	fba3 1302 	umull	r1, r3, r3, r2
 8007928:	095b      	lsrs	r3, r3, #5
 800792a:	2164      	movs	r1, #100	; 0x64
 800792c:	fb01 f303 	mul.w	r3, r1, r3
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	011b      	lsls	r3, r3, #4
 8007934:	3332      	adds	r3, #50	; 0x32
 8007936:	4a72      	ldr	r2, [pc, #456]	; (8007b00 <UART_SetConfig+0x6f4>)
 8007938:	fba2 2303 	umull	r2, r3, r2, r3
 800793c:	095b      	lsrs	r3, r3, #5
 800793e:	f003 020f 	and.w	r2, r3, #15
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4442      	add	r2, r8
 8007948:	609a      	str	r2, [r3, #8]
 800794a:	e0d0      	b.n	8007aee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800794c:	f7fe f940 	bl	8005bd0 <HAL_RCC_GetPCLK1Freq>
 8007950:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	469a      	mov	sl, r3
 8007956:	f04f 0b00 	mov.w	fp, #0
 800795a:	46d0      	mov	r8, sl
 800795c:	46d9      	mov	r9, fp
 800795e:	eb18 0308 	adds.w	r3, r8, r8
 8007962:	eb49 0409 	adc.w	r4, r9, r9
 8007966:	4698      	mov	r8, r3
 8007968:	46a1      	mov	r9, r4
 800796a:	eb18 080a 	adds.w	r8, r8, sl
 800796e:	eb49 090b 	adc.w	r9, r9, fp
 8007972:	f04f 0100 	mov.w	r1, #0
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800797e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007982:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007986:	4688      	mov	r8, r1
 8007988:	4691      	mov	r9, r2
 800798a:	eb1a 0508 	adds.w	r5, sl, r8
 800798e:	eb4b 0609 	adc.w	r6, fp, r9
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	4619      	mov	r1, r3
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	f04f 0400 	mov.w	r4, #0
 80079a4:	0094      	lsls	r4, r2, #2
 80079a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079aa:	008b      	lsls	r3, r1, #2
 80079ac:	461a      	mov	r2, r3
 80079ae:	4623      	mov	r3, r4
 80079b0:	4628      	mov	r0, r5
 80079b2:	4631      	mov	r1, r6
 80079b4:	f7f9 f910 	bl	8000bd8 <__aeabi_uldivmod>
 80079b8:	4603      	mov	r3, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	461a      	mov	r2, r3
 80079be:	4b50      	ldr	r3, [pc, #320]	; (8007b00 <UART_SetConfig+0x6f4>)
 80079c0:	fba3 2302 	umull	r2, r3, r3, r2
 80079c4:	095b      	lsrs	r3, r3, #5
 80079c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	469b      	mov	fp, r3
 80079ce:	f04f 0c00 	mov.w	ip, #0
 80079d2:	46d9      	mov	r9, fp
 80079d4:	46e2      	mov	sl, ip
 80079d6:	eb19 0309 	adds.w	r3, r9, r9
 80079da:	eb4a 040a 	adc.w	r4, sl, sl
 80079de:	4699      	mov	r9, r3
 80079e0:	46a2      	mov	sl, r4
 80079e2:	eb19 090b 	adds.w	r9, r9, fp
 80079e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079ea:	f04f 0100 	mov.w	r1, #0
 80079ee:	f04f 0200 	mov.w	r2, #0
 80079f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079fe:	4689      	mov	r9, r1
 8007a00:	4692      	mov	sl, r2
 8007a02:	eb1b 0509 	adds.w	r5, fp, r9
 8007a06:	eb4c 060a 	adc.w	r6, ip, sl
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	f04f 0200 	mov.w	r2, #0
 8007a14:	f04f 0300 	mov.w	r3, #0
 8007a18:	f04f 0400 	mov.w	r4, #0
 8007a1c:	0094      	lsls	r4, r2, #2
 8007a1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a22:	008b      	lsls	r3, r1, #2
 8007a24:	461a      	mov	r2, r3
 8007a26:	4623      	mov	r3, r4
 8007a28:	4628      	mov	r0, r5
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	f7f9 f8d4 	bl	8000bd8 <__aeabi_uldivmod>
 8007a30:	4603      	mov	r3, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	461a      	mov	r2, r3
 8007a36:	4b32      	ldr	r3, [pc, #200]	; (8007b00 <UART_SetConfig+0x6f4>)
 8007a38:	fba3 1302 	umull	r1, r3, r3, r2
 8007a3c:	095b      	lsrs	r3, r3, #5
 8007a3e:	2164      	movs	r1, #100	; 0x64
 8007a40:	fb01 f303 	mul.w	r3, r1, r3
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	3332      	adds	r3, #50	; 0x32
 8007a4a:	4a2d      	ldr	r2, [pc, #180]	; (8007b00 <UART_SetConfig+0x6f4>)
 8007a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a50:	095b      	lsrs	r3, r3, #5
 8007a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a56:	4498      	add	r8, r3
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	469b      	mov	fp, r3
 8007a5c:	f04f 0c00 	mov.w	ip, #0
 8007a60:	46d9      	mov	r9, fp
 8007a62:	46e2      	mov	sl, ip
 8007a64:	eb19 0309 	adds.w	r3, r9, r9
 8007a68:	eb4a 040a 	adc.w	r4, sl, sl
 8007a6c:	4699      	mov	r9, r3
 8007a6e:	46a2      	mov	sl, r4
 8007a70:	eb19 090b 	adds.w	r9, r9, fp
 8007a74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a78:	f04f 0100 	mov.w	r1, #0
 8007a7c:	f04f 0200 	mov.w	r2, #0
 8007a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a8c:	4689      	mov	r9, r1
 8007a8e:	4692      	mov	sl, r2
 8007a90:	eb1b 0509 	adds.w	r5, fp, r9
 8007a94:	eb4c 060a 	adc.w	r6, ip, sl
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	f04f 0200 	mov.w	r2, #0
 8007aa2:	f04f 0300 	mov.w	r3, #0
 8007aa6:	f04f 0400 	mov.w	r4, #0
 8007aaa:	0094      	lsls	r4, r2, #2
 8007aac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ab0:	008b      	lsls	r3, r1, #2
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	4623      	mov	r3, r4
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	4631      	mov	r1, r6
 8007aba:	f7f9 f88d 	bl	8000bd8 <__aeabi_uldivmod>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	4b0e      	ldr	r3, [pc, #56]	; (8007b00 <UART_SetConfig+0x6f4>)
 8007ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8007aca:	095b      	lsrs	r3, r3, #5
 8007acc:	2164      	movs	r1, #100	; 0x64
 8007ace:	fb01 f303 	mul.w	r3, r1, r3
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	3332      	adds	r3, #50	; 0x32
 8007ad8:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <UART_SetConfig+0x6f4>)
 8007ada:	fba2 2303 	umull	r2, r3, r2, r3
 8007ade:	095b      	lsrs	r3, r3, #5
 8007ae0:	f003 020f 	and.w	r2, r3, #15
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4442      	add	r2, r8
 8007aea:	609a      	str	r2, [r3, #8]
}
 8007aec:	e7ff      	b.n	8007aee <UART_SetConfig+0x6e2>
 8007aee:	bf00      	nop
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af8:	40011000 	.word	0x40011000
 8007afc:	40011400 	.word	0x40011400
 8007b00:	51eb851f 	.word	0x51eb851f

08007b04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007b08:	4904      	ldr	r1, [pc, #16]	; (8007b1c <MX_FATFS_Init+0x18>)
 8007b0a:	4805      	ldr	r0, [pc, #20]	; (8007b20 <MX_FATFS_Init+0x1c>)
 8007b0c:	f000 f8ae 	bl	8007c6c <FATFS_LinkDriver>
 8007b10:	4603      	mov	r3, r0
 8007b12:	461a      	mov	r2, r3
 8007b14:	4b03      	ldr	r3, [pc, #12]	; (8007b24 <MX_FATFS_Init+0x20>)
 8007b16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007b18:	bf00      	nop
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	200005a8 	.word	0x200005a8
 8007b20:	20000054 	.word	0x20000054
 8007b24:	200005ac 	.word	0x200005ac

08007b28 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */

	return SD_disk_initialize(pdrv);
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7f9 ff37 	bl	80019a8 <SD_disk_initialize>
 8007b3a:	4603      	mov	r3, r0

  /* USER CODE END INIT */
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fa f813 	bl	8001b7c <SD_disk_status>
 8007b56:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	607a      	str	r2, [r7, #4]
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007b70:	7bf8      	ldrb	r0, [r7, #15]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	f7fa f816 	bl	8001ba8 <SD_disk_read>
 8007b7c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	603b      	str	r3, [r7, #0]
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007b96:	7bf8      	ldrb	r0, [r7, #15]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	68b9      	ldr	r1, [r7, #8]
 8007b9e:	f7fa f86d 	bl	8001c7c <SD_disk_write>
 8007ba2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	603a      	str	r2, [r7, #0]
 8007bb6:	71fb      	strb	r3, [r7, #7]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8007bbc:	79b9      	ldrb	r1, [r7, #6]
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	683a      	ldr	r2, [r7, #0]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fa f8de 	bl	8001d84 <SD_disk_ioctl>
 8007bc8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	4613      	mov	r3, r2
 8007be0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007be2:	2301      	movs	r3, #1
 8007be4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007bea:	4b1f      	ldr	r3, [pc, #124]	; (8007c68 <FATFS_LinkDriverEx+0x94>)
 8007bec:	7a5b      	ldrb	r3, [r3, #9]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d131      	bne.n	8007c58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007bf4:	4b1c      	ldr	r3, [pc, #112]	; (8007c68 <FATFS_LinkDriverEx+0x94>)
 8007bf6:	7a5b      	ldrb	r3, [r3, #9]
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4b1a      	ldr	r3, [pc, #104]	; (8007c68 <FATFS_LinkDriverEx+0x94>)
 8007bfe:	2100      	movs	r1, #0
 8007c00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007c02:	4b19      	ldr	r3, [pc, #100]	; (8007c68 <FATFS_LinkDriverEx+0x94>)
 8007c04:	7a5b      	ldrb	r3, [r3, #9]
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	4a17      	ldr	r2, [pc, #92]	; (8007c68 <FATFS_LinkDriverEx+0x94>)
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007c12:	4b15      	ldr	r3, [pc, #84]	; (8007c68 <FATFS_LinkDriverEx+0x94>)
 8007c14:	7a5b      	ldrb	r3, [r3, #9]
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	461a      	mov	r2, r3
 8007c1a:	4b13      	ldr	r3, [pc, #76]	; (8007c68 <FATFS_LinkDriverEx+0x94>)
 8007c1c:	4413      	add	r3, r2
 8007c1e:	79fa      	ldrb	r2, [r7, #7]
 8007c20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007c22:	4b11      	ldr	r3, [pc, #68]	; (8007c68 <FATFS_LinkDriverEx+0x94>)
 8007c24:	7a5b      	ldrb	r3, [r3, #9]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	b2d1      	uxtb	r1, r2
 8007c2c:	4a0e      	ldr	r2, [pc, #56]	; (8007c68 <FATFS_LinkDriverEx+0x94>)
 8007c2e:	7251      	strb	r1, [r2, #9]
 8007c30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007c32:	7dbb      	ldrb	r3, [r7, #22]
 8007c34:	3330      	adds	r3, #48	; 0x30
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	223a      	movs	r2, #58	; 0x3a
 8007c42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	3302      	adds	r3, #2
 8007c48:	222f      	movs	r2, #47	; 0x2f
 8007c4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	3303      	adds	r3, #3
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	200001b4 	.word	0x200001b4

08007c6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007c76:	2200      	movs	r2, #0
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff ffaa 	bl	8007bd4 <FATFS_LinkDriverEx>
 8007c80:	4603      	mov	r3, r0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b085      	sub	sp, #20
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	601a      	str	r2, [r3, #0]
}
 8007cc6:	bf00      	nop
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b085      	sub	sp, #20
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6892      	ldr	r2, [r2, #8]
 8007ce8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	6852      	ldr	r2, [r2, #4]
 8007cf2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d103      	bne.n	8007d06 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	1e5a      	subs	r2, r3, #1
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
	...

08007d28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d32:	4b4e      	ldr	r3, [pc, #312]	; (8007e6c <xTaskIncrementTick+0x144>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f040 8087 	bne.w	8007e4a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d3c:	4b4c      	ldr	r3, [pc, #304]	; (8007e70 <xTaskIncrementTick+0x148>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3301      	adds	r3, #1
 8007d42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d44:	4a4a      	ldr	r2, [pc, #296]	; (8007e70 <xTaskIncrementTick+0x148>)
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d11f      	bne.n	8007d90 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d50:	4b48      	ldr	r3, [pc, #288]	; (8007e74 <xTaskIncrementTick+0x14c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	e7fe      	b.n	8007d6c <xTaskIncrementTick+0x44>
 8007d6e:	4b41      	ldr	r3, [pc, #260]	; (8007e74 <xTaskIncrementTick+0x14c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	4b40      	ldr	r3, [pc, #256]	; (8007e78 <xTaskIncrementTick+0x150>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a3e      	ldr	r2, [pc, #248]	; (8007e74 <xTaskIncrementTick+0x14c>)
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	4a3e      	ldr	r2, [pc, #248]	; (8007e78 <xTaskIncrementTick+0x150>)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	4b3e      	ldr	r3, [pc, #248]	; (8007e7c <xTaskIncrementTick+0x154>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3301      	adds	r3, #1
 8007d88:	4a3c      	ldr	r2, [pc, #240]	; (8007e7c <xTaskIncrementTick+0x154>)
 8007d8a:	6013      	str	r3, [r2, #0]
 8007d8c:	f000 f8de 	bl	8007f4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d90:	4b3b      	ldr	r3, [pc, #236]	; (8007e80 <xTaskIncrementTick+0x158>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d348      	bcc.n	8007e2c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d9a:	4b36      	ldr	r3, [pc, #216]	; (8007e74 <xTaskIncrementTick+0x14c>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d104      	bne.n	8007dae <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007da4:	4b36      	ldr	r3, [pc, #216]	; (8007e80 <xTaskIncrementTick+0x158>)
 8007da6:	f04f 32ff 	mov.w	r2, #4294967295
 8007daa:	601a      	str	r2, [r3, #0]
					break;
 8007dac:	e03e      	b.n	8007e2c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dae:	4b31      	ldr	r3, [pc, #196]	; (8007e74 <xTaskIncrementTick+0x14c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d203      	bcs.n	8007dce <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007dc6:	4a2e      	ldr	r2, [pc, #184]	; (8007e80 <xTaskIncrementTick+0x158>)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007dcc:	e02e      	b.n	8007e2c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff ff7d 	bl	8007cd2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	3318      	adds	r3, #24
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff ff74 	bl	8007cd2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	2201      	movs	r2, #1
 8007df0:	409a      	lsls	r2, r3
 8007df2:	4b24      	ldr	r3, [pc, #144]	; (8007e84 <xTaskIncrementTick+0x15c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	4a22      	ldr	r2, [pc, #136]	; (8007e84 <xTaskIncrementTick+0x15c>)
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e00:	4613      	mov	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4a1f      	ldr	r2, [pc, #124]	; (8007e88 <xTaskIncrementTick+0x160>)
 8007e0a:	441a      	add	r2, r3
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4619      	mov	r1, r3
 8007e12:	4610      	mov	r0, r2
 8007e14:	f7ff ff39 	bl	8007c8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1c:	4b1b      	ldr	r3, [pc, #108]	; (8007e8c <xTaskIncrementTick+0x164>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d3b9      	bcc.n	8007d9a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007e26:	2301      	movs	r3, #1
 8007e28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e2a:	e7b6      	b.n	8007d9a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e2c:	4b17      	ldr	r3, [pc, #92]	; (8007e8c <xTaskIncrementTick+0x164>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e32:	4915      	ldr	r1, [pc, #84]	; (8007e88 <xTaskIncrementTick+0x160>)
 8007e34:	4613      	mov	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	440b      	add	r3, r1
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d907      	bls.n	8007e54 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007e44:	2301      	movs	r3, #1
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	e004      	b.n	8007e54 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e4a:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <xTaskIncrementTick+0x168>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	4a0f      	ldr	r2, [pc, #60]	; (8007e90 <xTaskIncrementTick+0x168>)
 8007e52:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007e54:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <xTaskIncrementTick+0x16c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e60:	697b      	ldr	r3, [r7, #20]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000270 	.word	0x20000270
 8007e70:	20000258 	.word	0x20000258
 8007e74:	20000250 	.word	0x20000250
 8007e78:	20000254 	.word	0x20000254
 8007e7c:	20000268 	.word	0x20000268
 8007e80:	2000026c 	.word	0x2000026c
 8007e84:	2000025c 	.word	0x2000025c
 8007e88:	200001c4 	.word	0x200001c4
 8007e8c:	200001c0 	.word	0x200001c0
 8007e90:	20000260 	.word	0x20000260
 8007e94:	20000264 	.word	0x20000264

08007e98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e9e:	4b26      	ldr	r3, [pc, #152]	; (8007f38 <vTaskSwitchContext+0xa0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ea6:	4b25      	ldr	r3, [pc, #148]	; (8007f3c <vTaskSwitchContext+0xa4>)
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007eac:	e03e      	b.n	8007f2c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007eae:	4b23      	ldr	r3, [pc, #140]	; (8007f3c <vTaskSwitchContext+0xa4>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eb4:	4b22      	ldr	r3, [pc, #136]	; (8007f40 <vTaskSwitchContext+0xa8>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	fab3 f383 	clz	r3, r3
 8007ec0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007ec2:	7afb      	ldrb	r3, [r7, #11]
 8007ec4:	f1c3 031f 	rsb	r3, r3, #31
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	491e      	ldr	r1, [pc, #120]	; (8007f44 <vTaskSwitchContext+0xac>)
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	440b      	add	r3, r1
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d109      	bne.n	8007ef2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	607b      	str	r3, [r7, #4]
 8007ef0:	e7fe      	b.n	8007ef0 <vTaskSwitchContext+0x58>
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4a11      	ldr	r2, [pc, #68]	; (8007f44 <vTaskSwitchContext+0xac>)
 8007efe:	4413      	add	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	605a      	str	r2, [r3, #4]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	3308      	adds	r3, #8
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d104      	bne.n	8007f22 <vTaskSwitchContext+0x8a>
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	605a      	str	r2, [r3, #4]
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	4a07      	ldr	r2, [pc, #28]	; (8007f48 <vTaskSwitchContext+0xb0>)
 8007f2a:	6013      	str	r3, [r2, #0]
}
 8007f2c:	bf00      	nop
 8007f2e:	371c      	adds	r7, #28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	20000270 	.word	0x20000270
 8007f3c:	20000264 	.word	0x20000264
 8007f40:	2000025c 	.word	0x2000025c
 8007f44:	200001c4 	.word	0x200001c4
 8007f48:	200001c0 	.word	0x200001c0

08007f4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f52:	4b0c      	ldr	r3, [pc, #48]	; (8007f84 <prvResetNextTaskUnblockTime+0x38>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d104      	bne.n	8007f66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f5c:	4b0a      	ldr	r3, [pc, #40]	; (8007f88 <prvResetNextTaskUnblockTime+0x3c>)
 8007f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f64:	e008      	b.n	8007f78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f66:	4b07      	ldr	r3, [pc, #28]	; (8007f84 <prvResetNextTaskUnblockTime+0x38>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	4a04      	ldr	r2, [pc, #16]	; (8007f88 <prvResetNextTaskUnblockTime+0x3c>)
 8007f76:	6013      	str	r3, [r2, #0]
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	20000250 	.word	0x20000250
 8007f88:	2000026c 	.word	0x2000026c
 8007f8c:	00000000 	.word	0x00000000

08007f90 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f90:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <pxCurrentTCBConst2>)
 8007f92:	6819      	ldr	r1, [r3, #0]
 8007f94:	6808      	ldr	r0, [r1, #0]
 8007f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9a:	f380 8809 	msr	PSP, r0
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f04f 0000 	mov.w	r0, #0
 8007fa6:	f380 8811 	msr	BASEPRI, r0
 8007faa:	4770      	bx	lr
 8007fac:	f3af 8000 	nop.w

08007fb0 <pxCurrentTCBConst2>:
 8007fb0:	200001c0 	.word	0x200001c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop
	...

08007fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fc0:	f3ef 8009 	mrs	r0, PSP
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	4b15      	ldr	r3, [pc, #84]	; (8008020 <pxCurrentTCBConst>)
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	f01e 0f10 	tst.w	lr, #16
 8007fd0:	bf08      	it	eq
 8007fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fda:	6010      	str	r0, [r2, #0]
 8007fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007fe4:	f380 8811 	msr	BASEPRI, r0
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f7ff ff52 	bl	8007e98 <vTaskSwitchContext>
 8007ff4:	f04f 0000 	mov.w	r0, #0
 8007ff8:	f380 8811 	msr	BASEPRI, r0
 8007ffc:	bc09      	pop	{r0, r3}
 8007ffe:	6819      	ldr	r1, [r3, #0]
 8008000:	6808      	ldr	r0, [r1, #0]
 8008002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008006:	f01e 0f10 	tst.w	lr, #16
 800800a:	bf08      	it	eq
 800800c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008010:	f380 8809 	msr	PSP, r0
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	f3af 8000 	nop.w

08008020 <pxCurrentTCBConst>:
 8008020:	200001c0 	.word	0x200001c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008024:	bf00      	nop
 8008026:	bf00      	nop

08008028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008040:	f7ff fe72 	bl	8007d28 <xTaskIncrementTick>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800804a:	4b06      	ldr	r3, [pc, #24]	; (8008064 <SysTick_Handler+0x3c>)
 800804c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	2300      	movs	r3, #0
 8008054:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	e000ed04 	.word	0xe000ed04

08008068 <__errno>:
 8008068:	4b01      	ldr	r3, [pc, #4]	; (8008070 <__errno+0x8>)
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	20000068 	.word	0x20000068

08008074 <__libc_init_array>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	4e0d      	ldr	r6, [pc, #52]	; (80080ac <__libc_init_array+0x38>)
 8008078:	4c0d      	ldr	r4, [pc, #52]	; (80080b0 <__libc_init_array+0x3c>)
 800807a:	1ba4      	subs	r4, r4, r6
 800807c:	10a4      	asrs	r4, r4, #2
 800807e:	2500      	movs	r5, #0
 8008080:	42a5      	cmp	r5, r4
 8008082:	d109      	bne.n	8008098 <__libc_init_array+0x24>
 8008084:	4e0b      	ldr	r6, [pc, #44]	; (80080b4 <__libc_init_array+0x40>)
 8008086:	4c0c      	ldr	r4, [pc, #48]	; (80080b8 <__libc_init_array+0x44>)
 8008088:	f000 fe66 	bl	8008d58 <_init>
 800808c:	1ba4      	subs	r4, r4, r6
 800808e:	10a4      	asrs	r4, r4, #2
 8008090:	2500      	movs	r5, #0
 8008092:	42a5      	cmp	r5, r4
 8008094:	d105      	bne.n	80080a2 <__libc_init_array+0x2e>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800809c:	4798      	blx	r3
 800809e:	3501      	adds	r5, #1
 80080a0:	e7ee      	b.n	8008080 <__libc_init_array+0xc>
 80080a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080a6:	4798      	blx	r3
 80080a8:	3501      	adds	r5, #1
 80080aa:	e7f2      	b.n	8008092 <__libc_init_array+0x1e>
 80080ac:	08008e84 	.word	0x08008e84
 80080b0:	08008e84 	.word	0x08008e84
 80080b4:	08008e84 	.word	0x08008e84
 80080b8:	08008e88 	.word	0x08008e88

080080bc <memcpy>:
 80080bc:	b510      	push	{r4, lr}
 80080be:	1e43      	subs	r3, r0, #1
 80080c0:	440a      	add	r2, r1
 80080c2:	4291      	cmp	r1, r2
 80080c4:	d100      	bne.n	80080c8 <memcpy+0xc>
 80080c6:	bd10      	pop	{r4, pc}
 80080c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080d0:	e7f7      	b.n	80080c2 <memcpy+0x6>

080080d2 <memset>:
 80080d2:	4402      	add	r2, r0
 80080d4:	4603      	mov	r3, r0
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d100      	bne.n	80080dc <memset+0xa>
 80080da:	4770      	bx	lr
 80080dc:	f803 1b01 	strb.w	r1, [r3], #1
 80080e0:	e7f9      	b.n	80080d6 <memset+0x4>
	...

080080e4 <siprintf>:
 80080e4:	b40e      	push	{r1, r2, r3}
 80080e6:	b500      	push	{lr}
 80080e8:	b09c      	sub	sp, #112	; 0x70
 80080ea:	ab1d      	add	r3, sp, #116	; 0x74
 80080ec:	9002      	str	r0, [sp, #8]
 80080ee:	9006      	str	r0, [sp, #24]
 80080f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080f4:	4809      	ldr	r0, [pc, #36]	; (800811c <siprintf+0x38>)
 80080f6:	9107      	str	r1, [sp, #28]
 80080f8:	9104      	str	r1, [sp, #16]
 80080fa:	4909      	ldr	r1, [pc, #36]	; (8008120 <siprintf+0x3c>)
 80080fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008100:	9105      	str	r1, [sp, #20]
 8008102:	6800      	ldr	r0, [r0, #0]
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	a902      	add	r1, sp, #8
 8008108:	f000 f866 	bl	80081d8 <_svfiprintf_r>
 800810c:	9b02      	ldr	r3, [sp, #8]
 800810e:	2200      	movs	r2, #0
 8008110:	701a      	strb	r2, [r3, #0]
 8008112:	b01c      	add	sp, #112	; 0x70
 8008114:	f85d eb04 	ldr.w	lr, [sp], #4
 8008118:	b003      	add	sp, #12
 800811a:	4770      	bx	lr
 800811c:	20000068 	.word	0x20000068
 8008120:	ffff0208 	.word	0xffff0208

08008124 <__ssputs_r>:
 8008124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008128:	688e      	ldr	r6, [r1, #8]
 800812a:	429e      	cmp	r6, r3
 800812c:	4682      	mov	sl, r0
 800812e:	460c      	mov	r4, r1
 8008130:	4690      	mov	r8, r2
 8008132:	4699      	mov	r9, r3
 8008134:	d837      	bhi.n	80081a6 <__ssputs_r+0x82>
 8008136:	898a      	ldrh	r2, [r1, #12]
 8008138:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800813c:	d031      	beq.n	80081a2 <__ssputs_r+0x7e>
 800813e:	6825      	ldr	r5, [r4, #0]
 8008140:	6909      	ldr	r1, [r1, #16]
 8008142:	1a6f      	subs	r7, r5, r1
 8008144:	6965      	ldr	r5, [r4, #20]
 8008146:	2302      	movs	r3, #2
 8008148:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800814c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008150:	f109 0301 	add.w	r3, r9, #1
 8008154:	443b      	add	r3, r7
 8008156:	429d      	cmp	r5, r3
 8008158:	bf38      	it	cc
 800815a:	461d      	movcc	r5, r3
 800815c:	0553      	lsls	r3, r2, #21
 800815e:	d530      	bpl.n	80081c2 <__ssputs_r+0x9e>
 8008160:	4629      	mov	r1, r5
 8008162:	f000 fb21 	bl	80087a8 <_malloc_r>
 8008166:	4606      	mov	r6, r0
 8008168:	b950      	cbnz	r0, 8008180 <__ssputs_r+0x5c>
 800816a:	230c      	movs	r3, #12
 800816c:	f8ca 3000 	str.w	r3, [sl]
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008176:	81a3      	strh	r3, [r4, #12]
 8008178:	f04f 30ff 	mov.w	r0, #4294967295
 800817c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008180:	463a      	mov	r2, r7
 8008182:	6921      	ldr	r1, [r4, #16]
 8008184:	f7ff ff9a 	bl	80080bc <memcpy>
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800818e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008192:	81a3      	strh	r3, [r4, #12]
 8008194:	6126      	str	r6, [r4, #16]
 8008196:	6165      	str	r5, [r4, #20]
 8008198:	443e      	add	r6, r7
 800819a:	1bed      	subs	r5, r5, r7
 800819c:	6026      	str	r6, [r4, #0]
 800819e:	60a5      	str	r5, [r4, #8]
 80081a0:	464e      	mov	r6, r9
 80081a2:	454e      	cmp	r6, r9
 80081a4:	d900      	bls.n	80081a8 <__ssputs_r+0x84>
 80081a6:	464e      	mov	r6, r9
 80081a8:	4632      	mov	r2, r6
 80081aa:	4641      	mov	r1, r8
 80081ac:	6820      	ldr	r0, [r4, #0]
 80081ae:	f000 fa93 	bl	80086d8 <memmove>
 80081b2:	68a3      	ldr	r3, [r4, #8]
 80081b4:	1b9b      	subs	r3, r3, r6
 80081b6:	60a3      	str	r3, [r4, #8]
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	441e      	add	r6, r3
 80081bc:	6026      	str	r6, [r4, #0]
 80081be:	2000      	movs	r0, #0
 80081c0:	e7dc      	b.n	800817c <__ssputs_r+0x58>
 80081c2:	462a      	mov	r2, r5
 80081c4:	f000 fb4a 	bl	800885c <_realloc_r>
 80081c8:	4606      	mov	r6, r0
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d1e2      	bne.n	8008194 <__ssputs_r+0x70>
 80081ce:	6921      	ldr	r1, [r4, #16]
 80081d0:	4650      	mov	r0, sl
 80081d2:	f000 fa9b 	bl	800870c <_free_r>
 80081d6:	e7c8      	b.n	800816a <__ssputs_r+0x46>

080081d8 <_svfiprintf_r>:
 80081d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	461d      	mov	r5, r3
 80081de:	898b      	ldrh	r3, [r1, #12]
 80081e0:	061f      	lsls	r7, r3, #24
 80081e2:	b09d      	sub	sp, #116	; 0x74
 80081e4:	4680      	mov	r8, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	4616      	mov	r6, r2
 80081ea:	d50f      	bpl.n	800820c <_svfiprintf_r+0x34>
 80081ec:	690b      	ldr	r3, [r1, #16]
 80081ee:	b96b      	cbnz	r3, 800820c <_svfiprintf_r+0x34>
 80081f0:	2140      	movs	r1, #64	; 0x40
 80081f2:	f000 fad9 	bl	80087a8 <_malloc_r>
 80081f6:	6020      	str	r0, [r4, #0]
 80081f8:	6120      	str	r0, [r4, #16]
 80081fa:	b928      	cbnz	r0, 8008208 <_svfiprintf_r+0x30>
 80081fc:	230c      	movs	r3, #12
 80081fe:	f8c8 3000 	str.w	r3, [r8]
 8008202:	f04f 30ff 	mov.w	r0, #4294967295
 8008206:	e0c8      	b.n	800839a <_svfiprintf_r+0x1c2>
 8008208:	2340      	movs	r3, #64	; 0x40
 800820a:	6163      	str	r3, [r4, #20]
 800820c:	2300      	movs	r3, #0
 800820e:	9309      	str	r3, [sp, #36]	; 0x24
 8008210:	2320      	movs	r3, #32
 8008212:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008216:	2330      	movs	r3, #48	; 0x30
 8008218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800821c:	9503      	str	r5, [sp, #12]
 800821e:	f04f 0b01 	mov.w	fp, #1
 8008222:	4637      	mov	r7, r6
 8008224:	463d      	mov	r5, r7
 8008226:	f815 3b01 	ldrb.w	r3, [r5], #1
 800822a:	b10b      	cbz	r3, 8008230 <_svfiprintf_r+0x58>
 800822c:	2b25      	cmp	r3, #37	; 0x25
 800822e:	d13e      	bne.n	80082ae <_svfiprintf_r+0xd6>
 8008230:	ebb7 0a06 	subs.w	sl, r7, r6
 8008234:	d00b      	beq.n	800824e <_svfiprintf_r+0x76>
 8008236:	4653      	mov	r3, sl
 8008238:	4632      	mov	r2, r6
 800823a:	4621      	mov	r1, r4
 800823c:	4640      	mov	r0, r8
 800823e:	f7ff ff71 	bl	8008124 <__ssputs_r>
 8008242:	3001      	adds	r0, #1
 8008244:	f000 80a4 	beq.w	8008390 <_svfiprintf_r+0x1b8>
 8008248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800824a:	4453      	add	r3, sl
 800824c:	9309      	str	r3, [sp, #36]	; 0x24
 800824e:	783b      	ldrb	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 809d 	beq.w	8008390 <_svfiprintf_r+0x1b8>
 8008256:	2300      	movs	r3, #0
 8008258:	f04f 32ff 	mov.w	r2, #4294967295
 800825c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008260:	9304      	str	r3, [sp, #16]
 8008262:	9307      	str	r3, [sp, #28]
 8008264:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008268:	931a      	str	r3, [sp, #104]	; 0x68
 800826a:	462f      	mov	r7, r5
 800826c:	2205      	movs	r2, #5
 800826e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008272:	4850      	ldr	r0, [pc, #320]	; (80083b4 <_svfiprintf_r+0x1dc>)
 8008274:	f7f7 ffac 	bl	80001d0 <memchr>
 8008278:	9b04      	ldr	r3, [sp, #16]
 800827a:	b9d0      	cbnz	r0, 80082b2 <_svfiprintf_r+0xda>
 800827c:	06d9      	lsls	r1, r3, #27
 800827e:	bf44      	itt	mi
 8008280:	2220      	movmi	r2, #32
 8008282:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008286:	071a      	lsls	r2, r3, #28
 8008288:	bf44      	itt	mi
 800828a:	222b      	movmi	r2, #43	; 0x2b
 800828c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008290:	782a      	ldrb	r2, [r5, #0]
 8008292:	2a2a      	cmp	r2, #42	; 0x2a
 8008294:	d015      	beq.n	80082c2 <_svfiprintf_r+0xea>
 8008296:	9a07      	ldr	r2, [sp, #28]
 8008298:	462f      	mov	r7, r5
 800829a:	2000      	movs	r0, #0
 800829c:	250a      	movs	r5, #10
 800829e:	4639      	mov	r1, r7
 80082a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082a4:	3b30      	subs	r3, #48	; 0x30
 80082a6:	2b09      	cmp	r3, #9
 80082a8:	d94d      	bls.n	8008346 <_svfiprintf_r+0x16e>
 80082aa:	b1b8      	cbz	r0, 80082dc <_svfiprintf_r+0x104>
 80082ac:	e00f      	b.n	80082ce <_svfiprintf_r+0xf6>
 80082ae:	462f      	mov	r7, r5
 80082b0:	e7b8      	b.n	8008224 <_svfiprintf_r+0x4c>
 80082b2:	4a40      	ldr	r2, [pc, #256]	; (80083b4 <_svfiprintf_r+0x1dc>)
 80082b4:	1a80      	subs	r0, r0, r2
 80082b6:	fa0b f000 	lsl.w	r0, fp, r0
 80082ba:	4318      	orrs	r0, r3
 80082bc:	9004      	str	r0, [sp, #16]
 80082be:	463d      	mov	r5, r7
 80082c0:	e7d3      	b.n	800826a <_svfiprintf_r+0x92>
 80082c2:	9a03      	ldr	r2, [sp, #12]
 80082c4:	1d11      	adds	r1, r2, #4
 80082c6:	6812      	ldr	r2, [r2, #0]
 80082c8:	9103      	str	r1, [sp, #12]
 80082ca:	2a00      	cmp	r2, #0
 80082cc:	db01      	blt.n	80082d2 <_svfiprintf_r+0xfa>
 80082ce:	9207      	str	r2, [sp, #28]
 80082d0:	e004      	b.n	80082dc <_svfiprintf_r+0x104>
 80082d2:	4252      	negs	r2, r2
 80082d4:	f043 0302 	orr.w	r3, r3, #2
 80082d8:	9207      	str	r2, [sp, #28]
 80082da:	9304      	str	r3, [sp, #16]
 80082dc:	783b      	ldrb	r3, [r7, #0]
 80082de:	2b2e      	cmp	r3, #46	; 0x2e
 80082e0:	d10c      	bne.n	80082fc <_svfiprintf_r+0x124>
 80082e2:	787b      	ldrb	r3, [r7, #1]
 80082e4:	2b2a      	cmp	r3, #42	; 0x2a
 80082e6:	d133      	bne.n	8008350 <_svfiprintf_r+0x178>
 80082e8:	9b03      	ldr	r3, [sp, #12]
 80082ea:	1d1a      	adds	r2, r3, #4
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	9203      	str	r2, [sp, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	bfb8      	it	lt
 80082f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80082f8:	3702      	adds	r7, #2
 80082fa:	9305      	str	r3, [sp, #20]
 80082fc:	4d2e      	ldr	r5, [pc, #184]	; (80083b8 <_svfiprintf_r+0x1e0>)
 80082fe:	7839      	ldrb	r1, [r7, #0]
 8008300:	2203      	movs	r2, #3
 8008302:	4628      	mov	r0, r5
 8008304:	f7f7 ff64 	bl	80001d0 <memchr>
 8008308:	b138      	cbz	r0, 800831a <_svfiprintf_r+0x142>
 800830a:	2340      	movs	r3, #64	; 0x40
 800830c:	1b40      	subs	r0, r0, r5
 800830e:	fa03 f000 	lsl.w	r0, r3, r0
 8008312:	9b04      	ldr	r3, [sp, #16]
 8008314:	4303      	orrs	r3, r0
 8008316:	3701      	adds	r7, #1
 8008318:	9304      	str	r3, [sp, #16]
 800831a:	7839      	ldrb	r1, [r7, #0]
 800831c:	4827      	ldr	r0, [pc, #156]	; (80083bc <_svfiprintf_r+0x1e4>)
 800831e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008322:	2206      	movs	r2, #6
 8008324:	1c7e      	adds	r6, r7, #1
 8008326:	f7f7 ff53 	bl	80001d0 <memchr>
 800832a:	2800      	cmp	r0, #0
 800832c:	d038      	beq.n	80083a0 <_svfiprintf_r+0x1c8>
 800832e:	4b24      	ldr	r3, [pc, #144]	; (80083c0 <_svfiprintf_r+0x1e8>)
 8008330:	bb13      	cbnz	r3, 8008378 <_svfiprintf_r+0x1a0>
 8008332:	9b03      	ldr	r3, [sp, #12]
 8008334:	3307      	adds	r3, #7
 8008336:	f023 0307 	bic.w	r3, r3, #7
 800833a:	3308      	adds	r3, #8
 800833c:	9303      	str	r3, [sp, #12]
 800833e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008340:	444b      	add	r3, r9
 8008342:	9309      	str	r3, [sp, #36]	; 0x24
 8008344:	e76d      	b.n	8008222 <_svfiprintf_r+0x4a>
 8008346:	fb05 3202 	mla	r2, r5, r2, r3
 800834a:	2001      	movs	r0, #1
 800834c:	460f      	mov	r7, r1
 800834e:	e7a6      	b.n	800829e <_svfiprintf_r+0xc6>
 8008350:	2300      	movs	r3, #0
 8008352:	3701      	adds	r7, #1
 8008354:	9305      	str	r3, [sp, #20]
 8008356:	4619      	mov	r1, r3
 8008358:	250a      	movs	r5, #10
 800835a:	4638      	mov	r0, r7
 800835c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008360:	3a30      	subs	r2, #48	; 0x30
 8008362:	2a09      	cmp	r2, #9
 8008364:	d903      	bls.n	800836e <_svfiprintf_r+0x196>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0c8      	beq.n	80082fc <_svfiprintf_r+0x124>
 800836a:	9105      	str	r1, [sp, #20]
 800836c:	e7c6      	b.n	80082fc <_svfiprintf_r+0x124>
 800836e:	fb05 2101 	mla	r1, r5, r1, r2
 8008372:	2301      	movs	r3, #1
 8008374:	4607      	mov	r7, r0
 8008376:	e7f0      	b.n	800835a <_svfiprintf_r+0x182>
 8008378:	ab03      	add	r3, sp, #12
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	4622      	mov	r2, r4
 800837e:	4b11      	ldr	r3, [pc, #68]	; (80083c4 <_svfiprintf_r+0x1ec>)
 8008380:	a904      	add	r1, sp, #16
 8008382:	4640      	mov	r0, r8
 8008384:	f3af 8000 	nop.w
 8008388:	f1b0 3fff 	cmp.w	r0, #4294967295
 800838c:	4681      	mov	r9, r0
 800838e:	d1d6      	bne.n	800833e <_svfiprintf_r+0x166>
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	065b      	lsls	r3, r3, #25
 8008394:	f53f af35 	bmi.w	8008202 <_svfiprintf_r+0x2a>
 8008398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800839a:	b01d      	add	sp, #116	; 0x74
 800839c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a0:	ab03      	add	r3, sp, #12
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	4622      	mov	r2, r4
 80083a6:	4b07      	ldr	r3, [pc, #28]	; (80083c4 <_svfiprintf_r+0x1ec>)
 80083a8:	a904      	add	r1, sp, #16
 80083aa:	4640      	mov	r0, r8
 80083ac:	f000 f882 	bl	80084b4 <_printf_i>
 80083b0:	e7ea      	b.n	8008388 <_svfiprintf_r+0x1b0>
 80083b2:	bf00      	nop
 80083b4:	08008e44 	.word	0x08008e44
 80083b8:	08008e4a 	.word	0x08008e4a
 80083bc:	08008e4e 	.word	0x08008e4e
 80083c0:	00000000 	.word	0x00000000
 80083c4:	08008125 	.word	0x08008125

080083c8 <_printf_common>:
 80083c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083cc:	4691      	mov	r9, r2
 80083ce:	461f      	mov	r7, r3
 80083d0:	688a      	ldr	r2, [r1, #8]
 80083d2:	690b      	ldr	r3, [r1, #16]
 80083d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083d8:	4293      	cmp	r3, r2
 80083da:	bfb8      	it	lt
 80083dc:	4613      	movlt	r3, r2
 80083de:	f8c9 3000 	str.w	r3, [r9]
 80083e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083e6:	4606      	mov	r6, r0
 80083e8:	460c      	mov	r4, r1
 80083ea:	b112      	cbz	r2, 80083f2 <_printf_common+0x2a>
 80083ec:	3301      	adds	r3, #1
 80083ee:	f8c9 3000 	str.w	r3, [r9]
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	0699      	lsls	r1, r3, #26
 80083f6:	bf42      	ittt	mi
 80083f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80083fc:	3302      	addmi	r3, #2
 80083fe:	f8c9 3000 	strmi.w	r3, [r9]
 8008402:	6825      	ldr	r5, [r4, #0]
 8008404:	f015 0506 	ands.w	r5, r5, #6
 8008408:	d107      	bne.n	800841a <_printf_common+0x52>
 800840a:	f104 0a19 	add.w	sl, r4, #25
 800840e:	68e3      	ldr	r3, [r4, #12]
 8008410:	f8d9 2000 	ldr.w	r2, [r9]
 8008414:	1a9b      	subs	r3, r3, r2
 8008416:	42ab      	cmp	r3, r5
 8008418:	dc28      	bgt.n	800846c <_printf_common+0xa4>
 800841a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800841e:	6822      	ldr	r2, [r4, #0]
 8008420:	3300      	adds	r3, #0
 8008422:	bf18      	it	ne
 8008424:	2301      	movne	r3, #1
 8008426:	0692      	lsls	r2, r2, #26
 8008428:	d42d      	bmi.n	8008486 <_printf_common+0xbe>
 800842a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800842e:	4639      	mov	r1, r7
 8008430:	4630      	mov	r0, r6
 8008432:	47c0      	blx	r8
 8008434:	3001      	adds	r0, #1
 8008436:	d020      	beq.n	800847a <_printf_common+0xb2>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	68e5      	ldr	r5, [r4, #12]
 800843c:	f8d9 2000 	ldr.w	r2, [r9]
 8008440:	f003 0306 	and.w	r3, r3, #6
 8008444:	2b04      	cmp	r3, #4
 8008446:	bf08      	it	eq
 8008448:	1aad      	subeq	r5, r5, r2
 800844a:	68a3      	ldr	r3, [r4, #8]
 800844c:	6922      	ldr	r2, [r4, #16]
 800844e:	bf0c      	ite	eq
 8008450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008454:	2500      	movne	r5, #0
 8008456:	4293      	cmp	r3, r2
 8008458:	bfc4      	itt	gt
 800845a:	1a9b      	subgt	r3, r3, r2
 800845c:	18ed      	addgt	r5, r5, r3
 800845e:	f04f 0900 	mov.w	r9, #0
 8008462:	341a      	adds	r4, #26
 8008464:	454d      	cmp	r5, r9
 8008466:	d11a      	bne.n	800849e <_printf_common+0xd6>
 8008468:	2000      	movs	r0, #0
 800846a:	e008      	b.n	800847e <_printf_common+0xb6>
 800846c:	2301      	movs	r3, #1
 800846e:	4652      	mov	r2, sl
 8008470:	4639      	mov	r1, r7
 8008472:	4630      	mov	r0, r6
 8008474:	47c0      	blx	r8
 8008476:	3001      	adds	r0, #1
 8008478:	d103      	bne.n	8008482 <_printf_common+0xba>
 800847a:	f04f 30ff 	mov.w	r0, #4294967295
 800847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008482:	3501      	adds	r5, #1
 8008484:	e7c3      	b.n	800840e <_printf_common+0x46>
 8008486:	18e1      	adds	r1, r4, r3
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	2030      	movs	r0, #48	; 0x30
 800848c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008490:	4422      	add	r2, r4
 8008492:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008496:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800849a:	3302      	adds	r3, #2
 800849c:	e7c5      	b.n	800842a <_printf_common+0x62>
 800849e:	2301      	movs	r3, #1
 80084a0:	4622      	mov	r2, r4
 80084a2:	4639      	mov	r1, r7
 80084a4:	4630      	mov	r0, r6
 80084a6:	47c0      	blx	r8
 80084a8:	3001      	adds	r0, #1
 80084aa:	d0e6      	beq.n	800847a <_printf_common+0xb2>
 80084ac:	f109 0901 	add.w	r9, r9, #1
 80084b0:	e7d8      	b.n	8008464 <_printf_common+0x9c>
	...

080084b4 <_printf_i>:
 80084b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80084bc:	460c      	mov	r4, r1
 80084be:	7e09      	ldrb	r1, [r1, #24]
 80084c0:	b085      	sub	sp, #20
 80084c2:	296e      	cmp	r1, #110	; 0x6e
 80084c4:	4617      	mov	r7, r2
 80084c6:	4606      	mov	r6, r0
 80084c8:	4698      	mov	r8, r3
 80084ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084cc:	f000 80b3 	beq.w	8008636 <_printf_i+0x182>
 80084d0:	d822      	bhi.n	8008518 <_printf_i+0x64>
 80084d2:	2963      	cmp	r1, #99	; 0x63
 80084d4:	d036      	beq.n	8008544 <_printf_i+0x90>
 80084d6:	d80a      	bhi.n	80084ee <_printf_i+0x3a>
 80084d8:	2900      	cmp	r1, #0
 80084da:	f000 80b9 	beq.w	8008650 <_printf_i+0x19c>
 80084de:	2958      	cmp	r1, #88	; 0x58
 80084e0:	f000 8083 	beq.w	80085ea <_printf_i+0x136>
 80084e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80084ec:	e032      	b.n	8008554 <_printf_i+0xa0>
 80084ee:	2964      	cmp	r1, #100	; 0x64
 80084f0:	d001      	beq.n	80084f6 <_printf_i+0x42>
 80084f2:	2969      	cmp	r1, #105	; 0x69
 80084f4:	d1f6      	bne.n	80084e4 <_printf_i+0x30>
 80084f6:	6820      	ldr	r0, [r4, #0]
 80084f8:	6813      	ldr	r3, [r2, #0]
 80084fa:	0605      	lsls	r5, r0, #24
 80084fc:	f103 0104 	add.w	r1, r3, #4
 8008500:	d52a      	bpl.n	8008558 <_printf_i+0xa4>
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6011      	str	r1, [r2, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	da03      	bge.n	8008512 <_printf_i+0x5e>
 800850a:	222d      	movs	r2, #45	; 0x2d
 800850c:	425b      	negs	r3, r3
 800850e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008512:	486f      	ldr	r0, [pc, #444]	; (80086d0 <_printf_i+0x21c>)
 8008514:	220a      	movs	r2, #10
 8008516:	e039      	b.n	800858c <_printf_i+0xd8>
 8008518:	2973      	cmp	r1, #115	; 0x73
 800851a:	f000 809d 	beq.w	8008658 <_printf_i+0x1a4>
 800851e:	d808      	bhi.n	8008532 <_printf_i+0x7e>
 8008520:	296f      	cmp	r1, #111	; 0x6f
 8008522:	d020      	beq.n	8008566 <_printf_i+0xb2>
 8008524:	2970      	cmp	r1, #112	; 0x70
 8008526:	d1dd      	bne.n	80084e4 <_printf_i+0x30>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	f043 0320 	orr.w	r3, r3, #32
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	e003      	b.n	800853a <_printf_i+0x86>
 8008532:	2975      	cmp	r1, #117	; 0x75
 8008534:	d017      	beq.n	8008566 <_printf_i+0xb2>
 8008536:	2978      	cmp	r1, #120	; 0x78
 8008538:	d1d4      	bne.n	80084e4 <_printf_i+0x30>
 800853a:	2378      	movs	r3, #120	; 0x78
 800853c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008540:	4864      	ldr	r0, [pc, #400]	; (80086d4 <_printf_i+0x220>)
 8008542:	e055      	b.n	80085f0 <_printf_i+0x13c>
 8008544:	6813      	ldr	r3, [r2, #0]
 8008546:	1d19      	adds	r1, r3, #4
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6011      	str	r1, [r2, #0]
 800854c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008554:	2301      	movs	r3, #1
 8008556:	e08c      	b.n	8008672 <_printf_i+0x1be>
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6011      	str	r1, [r2, #0]
 800855c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008560:	bf18      	it	ne
 8008562:	b21b      	sxthne	r3, r3
 8008564:	e7cf      	b.n	8008506 <_printf_i+0x52>
 8008566:	6813      	ldr	r3, [r2, #0]
 8008568:	6825      	ldr	r5, [r4, #0]
 800856a:	1d18      	adds	r0, r3, #4
 800856c:	6010      	str	r0, [r2, #0]
 800856e:	0628      	lsls	r0, r5, #24
 8008570:	d501      	bpl.n	8008576 <_printf_i+0xc2>
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	e002      	b.n	800857c <_printf_i+0xc8>
 8008576:	0668      	lsls	r0, r5, #25
 8008578:	d5fb      	bpl.n	8008572 <_printf_i+0xbe>
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	4854      	ldr	r0, [pc, #336]	; (80086d0 <_printf_i+0x21c>)
 800857e:	296f      	cmp	r1, #111	; 0x6f
 8008580:	bf14      	ite	ne
 8008582:	220a      	movne	r2, #10
 8008584:	2208      	moveq	r2, #8
 8008586:	2100      	movs	r1, #0
 8008588:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800858c:	6865      	ldr	r5, [r4, #4]
 800858e:	60a5      	str	r5, [r4, #8]
 8008590:	2d00      	cmp	r5, #0
 8008592:	f2c0 8095 	blt.w	80086c0 <_printf_i+0x20c>
 8008596:	6821      	ldr	r1, [r4, #0]
 8008598:	f021 0104 	bic.w	r1, r1, #4
 800859c:	6021      	str	r1, [r4, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d13d      	bne.n	800861e <_printf_i+0x16a>
 80085a2:	2d00      	cmp	r5, #0
 80085a4:	f040 808e 	bne.w	80086c4 <_printf_i+0x210>
 80085a8:	4665      	mov	r5, ip
 80085aa:	2a08      	cmp	r2, #8
 80085ac:	d10b      	bne.n	80085c6 <_printf_i+0x112>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	07db      	lsls	r3, r3, #31
 80085b2:	d508      	bpl.n	80085c6 <_printf_i+0x112>
 80085b4:	6923      	ldr	r3, [r4, #16]
 80085b6:	6862      	ldr	r2, [r4, #4]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	bfde      	ittt	le
 80085bc:	2330      	movle	r3, #48	; 0x30
 80085be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085c6:	ebac 0305 	sub.w	r3, ip, r5
 80085ca:	6123      	str	r3, [r4, #16]
 80085cc:	f8cd 8000 	str.w	r8, [sp]
 80085d0:	463b      	mov	r3, r7
 80085d2:	aa03      	add	r2, sp, #12
 80085d4:	4621      	mov	r1, r4
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7ff fef6 	bl	80083c8 <_printf_common>
 80085dc:	3001      	adds	r0, #1
 80085de:	d14d      	bne.n	800867c <_printf_i+0x1c8>
 80085e0:	f04f 30ff 	mov.w	r0, #4294967295
 80085e4:	b005      	add	sp, #20
 80085e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085ea:	4839      	ldr	r0, [pc, #228]	; (80086d0 <_printf_i+0x21c>)
 80085ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80085f0:	6813      	ldr	r3, [r2, #0]
 80085f2:	6821      	ldr	r1, [r4, #0]
 80085f4:	1d1d      	adds	r5, r3, #4
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6015      	str	r5, [r2, #0]
 80085fa:	060a      	lsls	r2, r1, #24
 80085fc:	d50b      	bpl.n	8008616 <_printf_i+0x162>
 80085fe:	07ca      	lsls	r2, r1, #31
 8008600:	bf44      	itt	mi
 8008602:	f041 0120 	orrmi.w	r1, r1, #32
 8008606:	6021      	strmi	r1, [r4, #0]
 8008608:	b91b      	cbnz	r3, 8008612 <_printf_i+0x15e>
 800860a:	6822      	ldr	r2, [r4, #0]
 800860c:	f022 0220 	bic.w	r2, r2, #32
 8008610:	6022      	str	r2, [r4, #0]
 8008612:	2210      	movs	r2, #16
 8008614:	e7b7      	b.n	8008586 <_printf_i+0xd2>
 8008616:	064d      	lsls	r5, r1, #25
 8008618:	bf48      	it	mi
 800861a:	b29b      	uxthmi	r3, r3
 800861c:	e7ef      	b.n	80085fe <_printf_i+0x14a>
 800861e:	4665      	mov	r5, ip
 8008620:	fbb3 f1f2 	udiv	r1, r3, r2
 8008624:	fb02 3311 	mls	r3, r2, r1, r3
 8008628:	5cc3      	ldrb	r3, [r0, r3]
 800862a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800862e:	460b      	mov	r3, r1
 8008630:	2900      	cmp	r1, #0
 8008632:	d1f5      	bne.n	8008620 <_printf_i+0x16c>
 8008634:	e7b9      	b.n	80085aa <_printf_i+0xf6>
 8008636:	6813      	ldr	r3, [r2, #0]
 8008638:	6825      	ldr	r5, [r4, #0]
 800863a:	6961      	ldr	r1, [r4, #20]
 800863c:	1d18      	adds	r0, r3, #4
 800863e:	6010      	str	r0, [r2, #0]
 8008640:	0628      	lsls	r0, r5, #24
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	d501      	bpl.n	800864a <_printf_i+0x196>
 8008646:	6019      	str	r1, [r3, #0]
 8008648:	e002      	b.n	8008650 <_printf_i+0x19c>
 800864a:	066a      	lsls	r2, r5, #25
 800864c:	d5fb      	bpl.n	8008646 <_printf_i+0x192>
 800864e:	8019      	strh	r1, [r3, #0]
 8008650:	2300      	movs	r3, #0
 8008652:	6123      	str	r3, [r4, #16]
 8008654:	4665      	mov	r5, ip
 8008656:	e7b9      	b.n	80085cc <_printf_i+0x118>
 8008658:	6813      	ldr	r3, [r2, #0]
 800865a:	1d19      	adds	r1, r3, #4
 800865c:	6011      	str	r1, [r2, #0]
 800865e:	681d      	ldr	r5, [r3, #0]
 8008660:	6862      	ldr	r2, [r4, #4]
 8008662:	2100      	movs	r1, #0
 8008664:	4628      	mov	r0, r5
 8008666:	f7f7 fdb3 	bl	80001d0 <memchr>
 800866a:	b108      	cbz	r0, 8008670 <_printf_i+0x1bc>
 800866c:	1b40      	subs	r0, r0, r5
 800866e:	6060      	str	r0, [r4, #4]
 8008670:	6863      	ldr	r3, [r4, #4]
 8008672:	6123      	str	r3, [r4, #16]
 8008674:	2300      	movs	r3, #0
 8008676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800867a:	e7a7      	b.n	80085cc <_printf_i+0x118>
 800867c:	6923      	ldr	r3, [r4, #16]
 800867e:	462a      	mov	r2, r5
 8008680:	4639      	mov	r1, r7
 8008682:	4630      	mov	r0, r6
 8008684:	47c0      	blx	r8
 8008686:	3001      	adds	r0, #1
 8008688:	d0aa      	beq.n	80085e0 <_printf_i+0x12c>
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	079b      	lsls	r3, r3, #30
 800868e:	d413      	bmi.n	80086b8 <_printf_i+0x204>
 8008690:	68e0      	ldr	r0, [r4, #12]
 8008692:	9b03      	ldr	r3, [sp, #12]
 8008694:	4298      	cmp	r0, r3
 8008696:	bfb8      	it	lt
 8008698:	4618      	movlt	r0, r3
 800869a:	e7a3      	b.n	80085e4 <_printf_i+0x130>
 800869c:	2301      	movs	r3, #1
 800869e:	464a      	mov	r2, r9
 80086a0:	4639      	mov	r1, r7
 80086a2:	4630      	mov	r0, r6
 80086a4:	47c0      	blx	r8
 80086a6:	3001      	adds	r0, #1
 80086a8:	d09a      	beq.n	80085e0 <_printf_i+0x12c>
 80086aa:	3501      	adds	r5, #1
 80086ac:	68e3      	ldr	r3, [r4, #12]
 80086ae:	9a03      	ldr	r2, [sp, #12]
 80086b0:	1a9b      	subs	r3, r3, r2
 80086b2:	42ab      	cmp	r3, r5
 80086b4:	dcf2      	bgt.n	800869c <_printf_i+0x1e8>
 80086b6:	e7eb      	b.n	8008690 <_printf_i+0x1dc>
 80086b8:	2500      	movs	r5, #0
 80086ba:	f104 0919 	add.w	r9, r4, #25
 80086be:	e7f5      	b.n	80086ac <_printf_i+0x1f8>
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1ac      	bne.n	800861e <_printf_i+0x16a>
 80086c4:	7803      	ldrb	r3, [r0, #0]
 80086c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086ce:	e76c      	b.n	80085aa <_printf_i+0xf6>
 80086d0:	08008e55 	.word	0x08008e55
 80086d4:	08008e66 	.word	0x08008e66

080086d8 <memmove>:
 80086d8:	4288      	cmp	r0, r1
 80086da:	b510      	push	{r4, lr}
 80086dc:	eb01 0302 	add.w	r3, r1, r2
 80086e0:	d807      	bhi.n	80086f2 <memmove+0x1a>
 80086e2:	1e42      	subs	r2, r0, #1
 80086e4:	4299      	cmp	r1, r3
 80086e6:	d00a      	beq.n	80086fe <memmove+0x26>
 80086e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ec:	f802 4f01 	strb.w	r4, [r2, #1]!
 80086f0:	e7f8      	b.n	80086e4 <memmove+0xc>
 80086f2:	4283      	cmp	r3, r0
 80086f4:	d9f5      	bls.n	80086e2 <memmove+0xa>
 80086f6:	1881      	adds	r1, r0, r2
 80086f8:	1ad2      	subs	r2, r2, r3
 80086fa:	42d3      	cmn	r3, r2
 80086fc:	d100      	bne.n	8008700 <memmove+0x28>
 80086fe:	bd10      	pop	{r4, pc}
 8008700:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008704:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008708:	e7f7      	b.n	80086fa <memmove+0x22>
	...

0800870c <_free_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4605      	mov	r5, r0
 8008710:	2900      	cmp	r1, #0
 8008712:	d045      	beq.n	80087a0 <_free_r+0x94>
 8008714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008718:	1f0c      	subs	r4, r1, #4
 800871a:	2b00      	cmp	r3, #0
 800871c:	bfb8      	it	lt
 800871e:	18e4      	addlt	r4, r4, r3
 8008720:	f000 f8d2 	bl	80088c8 <__malloc_lock>
 8008724:	4a1f      	ldr	r2, [pc, #124]	; (80087a4 <_free_r+0x98>)
 8008726:	6813      	ldr	r3, [r2, #0]
 8008728:	4610      	mov	r0, r2
 800872a:	b933      	cbnz	r3, 800873a <_free_r+0x2e>
 800872c:	6063      	str	r3, [r4, #4]
 800872e:	6014      	str	r4, [r2, #0]
 8008730:	4628      	mov	r0, r5
 8008732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008736:	f000 b8c8 	b.w	80088ca <__malloc_unlock>
 800873a:	42a3      	cmp	r3, r4
 800873c:	d90c      	bls.n	8008758 <_free_r+0x4c>
 800873e:	6821      	ldr	r1, [r4, #0]
 8008740:	1862      	adds	r2, r4, r1
 8008742:	4293      	cmp	r3, r2
 8008744:	bf04      	itt	eq
 8008746:	681a      	ldreq	r2, [r3, #0]
 8008748:	685b      	ldreq	r3, [r3, #4]
 800874a:	6063      	str	r3, [r4, #4]
 800874c:	bf04      	itt	eq
 800874e:	1852      	addeq	r2, r2, r1
 8008750:	6022      	streq	r2, [r4, #0]
 8008752:	6004      	str	r4, [r0, #0]
 8008754:	e7ec      	b.n	8008730 <_free_r+0x24>
 8008756:	4613      	mov	r3, r2
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	b10a      	cbz	r2, 8008760 <_free_r+0x54>
 800875c:	42a2      	cmp	r2, r4
 800875e:	d9fa      	bls.n	8008756 <_free_r+0x4a>
 8008760:	6819      	ldr	r1, [r3, #0]
 8008762:	1858      	adds	r0, r3, r1
 8008764:	42a0      	cmp	r0, r4
 8008766:	d10b      	bne.n	8008780 <_free_r+0x74>
 8008768:	6820      	ldr	r0, [r4, #0]
 800876a:	4401      	add	r1, r0
 800876c:	1858      	adds	r0, r3, r1
 800876e:	4282      	cmp	r2, r0
 8008770:	6019      	str	r1, [r3, #0]
 8008772:	d1dd      	bne.n	8008730 <_free_r+0x24>
 8008774:	6810      	ldr	r0, [r2, #0]
 8008776:	6852      	ldr	r2, [r2, #4]
 8008778:	605a      	str	r2, [r3, #4]
 800877a:	4401      	add	r1, r0
 800877c:	6019      	str	r1, [r3, #0]
 800877e:	e7d7      	b.n	8008730 <_free_r+0x24>
 8008780:	d902      	bls.n	8008788 <_free_r+0x7c>
 8008782:	230c      	movs	r3, #12
 8008784:	602b      	str	r3, [r5, #0]
 8008786:	e7d3      	b.n	8008730 <_free_r+0x24>
 8008788:	6820      	ldr	r0, [r4, #0]
 800878a:	1821      	adds	r1, r4, r0
 800878c:	428a      	cmp	r2, r1
 800878e:	bf04      	itt	eq
 8008790:	6811      	ldreq	r1, [r2, #0]
 8008792:	6852      	ldreq	r2, [r2, #4]
 8008794:	6062      	str	r2, [r4, #4]
 8008796:	bf04      	itt	eq
 8008798:	1809      	addeq	r1, r1, r0
 800879a:	6021      	streq	r1, [r4, #0]
 800879c:	605c      	str	r4, [r3, #4]
 800879e:	e7c7      	b.n	8008730 <_free_r+0x24>
 80087a0:	bd38      	pop	{r3, r4, r5, pc}
 80087a2:	bf00      	nop
 80087a4:	20000274 	.word	0x20000274

080087a8 <_malloc_r>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	1ccd      	adds	r5, r1, #3
 80087ac:	f025 0503 	bic.w	r5, r5, #3
 80087b0:	3508      	adds	r5, #8
 80087b2:	2d0c      	cmp	r5, #12
 80087b4:	bf38      	it	cc
 80087b6:	250c      	movcc	r5, #12
 80087b8:	2d00      	cmp	r5, #0
 80087ba:	4606      	mov	r6, r0
 80087bc:	db01      	blt.n	80087c2 <_malloc_r+0x1a>
 80087be:	42a9      	cmp	r1, r5
 80087c0:	d903      	bls.n	80087ca <_malloc_r+0x22>
 80087c2:	230c      	movs	r3, #12
 80087c4:	6033      	str	r3, [r6, #0]
 80087c6:	2000      	movs	r0, #0
 80087c8:	bd70      	pop	{r4, r5, r6, pc}
 80087ca:	f000 f87d 	bl	80088c8 <__malloc_lock>
 80087ce:	4a21      	ldr	r2, [pc, #132]	; (8008854 <_malloc_r+0xac>)
 80087d0:	6814      	ldr	r4, [r2, #0]
 80087d2:	4621      	mov	r1, r4
 80087d4:	b991      	cbnz	r1, 80087fc <_malloc_r+0x54>
 80087d6:	4c20      	ldr	r4, [pc, #128]	; (8008858 <_malloc_r+0xb0>)
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	b91b      	cbnz	r3, 80087e4 <_malloc_r+0x3c>
 80087dc:	4630      	mov	r0, r6
 80087de:	f000 f863 	bl	80088a8 <_sbrk_r>
 80087e2:	6020      	str	r0, [r4, #0]
 80087e4:	4629      	mov	r1, r5
 80087e6:	4630      	mov	r0, r6
 80087e8:	f000 f85e 	bl	80088a8 <_sbrk_r>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d124      	bne.n	800883a <_malloc_r+0x92>
 80087f0:	230c      	movs	r3, #12
 80087f2:	6033      	str	r3, [r6, #0]
 80087f4:	4630      	mov	r0, r6
 80087f6:	f000 f868 	bl	80088ca <__malloc_unlock>
 80087fa:	e7e4      	b.n	80087c6 <_malloc_r+0x1e>
 80087fc:	680b      	ldr	r3, [r1, #0]
 80087fe:	1b5b      	subs	r3, r3, r5
 8008800:	d418      	bmi.n	8008834 <_malloc_r+0x8c>
 8008802:	2b0b      	cmp	r3, #11
 8008804:	d90f      	bls.n	8008826 <_malloc_r+0x7e>
 8008806:	600b      	str	r3, [r1, #0]
 8008808:	50cd      	str	r5, [r1, r3]
 800880a:	18cc      	adds	r4, r1, r3
 800880c:	4630      	mov	r0, r6
 800880e:	f000 f85c 	bl	80088ca <__malloc_unlock>
 8008812:	f104 000b 	add.w	r0, r4, #11
 8008816:	1d23      	adds	r3, r4, #4
 8008818:	f020 0007 	bic.w	r0, r0, #7
 800881c:	1ac3      	subs	r3, r0, r3
 800881e:	d0d3      	beq.n	80087c8 <_malloc_r+0x20>
 8008820:	425a      	negs	r2, r3
 8008822:	50e2      	str	r2, [r4, r3]
 8008824:	e7d0      	b.n	80087c8 <_malloc_r+0x20>
 8008826:	428c      	cmp	r4, r1
 8008828:	684b      	ldr	r3, [r1, #4]
 800882a:	bf16      	itet	ne
 800882c:	6063      	strne	r3, [r4, #4]
 800882e:	6013      	streq	r3, [r2, #0]
 8008830:	460c      	movne	r4, r1
 8008832:	e7eb      	b.n	800880c <_malloc_r+0x64>
 8008834:	460c      	mov	r4, r1
 8008836:	6849      	ldr	r1, [r1, #4]
 8008838:	e7cc      	b.n	80087d4 <_malloc_r+0x2c>
 800883a:	1cc4      	adds	r4, r0, #3
 800883c:	f024 0403 	bic.w	r4, r4, #3
 8008840:	42a0      	cmp	r0, r4
 8008842:	d005      	beq.n	8008850 <_malloc_r+0xa8>
 8008844:	1a21      	subs	r1, r4, r0
 8008846:	4630      	mov	r0, r6
 8008848:	f000 f82e 	bl	80088a8 <_sbrk_r>
 800884c:	3001      	adds	r0, #1
 800884e:	d0cf      	beq.n	80087f0 <_malloc_r+0x48>
 8008850:	6025      	str	r5, [r4, #0]
 8008852:	e7db      	b.n	800880c <_malloc_r+0x64>
 8008854:	20000274 	.word	0x20000274
 8008858:	20000278 	.word	0x20000278

0800885c <_realloc_r>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	4607      	mov	r7, r0
 8008860:	4614      	mov	r4, r2
 8008862:	460e      	mov	r6, r1
 8008864:	b921      	cbnz	r1, 8008870 <_realloc_r+0x14>
 8008866:	4611      	mov	r1, r2
 8008868:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800886c:	f7ff bf9c 	b.w	80087a8 <_malloc_r>
 8008870:	b922      	cbnz	r2, 800887c <_realloc_r+0x20>
 8008872:	f7ff ff4b 	bl	800870c <_free_r>
 8008876:	4625      	mov	r5, r4
 8008878:	4628      	mov	r0, r5
 800887a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800887c:	f000 f826 	bl	80088cc <_malloc_usable_size_r>
 8008880:	42a0      	cmp	r0, r4
 8008882:	d20f      	bcs.n	80088a4 <_realloc_r+0x48>
 8008884:	4621      	mov	r1, r4
 8008886:	4638      	mov	r0, r7
 8008888:	f7ff ff8e 	bl	80087a8 <_malloc_r>
 800888c:	4605      	mov	r5, r0
 800888e:	2800      	cmp	r0, #0
 8008890:	d0f2      	beq.n	8008878 <_realloc_r+0x1c>
 8008892:	4631      	mov	r1, r6
 8008894:	4622      	mov	r2, r4
 8008896:	f7ff fc11 	bl	80080bc <memcpy>
 800889a:	4631      	mov	r1, r6
 800889c:	4638      	mov	r0, r7
 800889e:	f7ff ff35 	bl	800870c <_free_r>
 80088a2:	e7e9      	b.n	8008878 <_realloc_r+0x1c>
 80088a4:	4635      	mov	r5, r6
 80088a6:	e7e7      	b.n	8008878 <_realloc_r+0x1c>

080088a8 <_sbrk_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	4c06      	ldr	r4, [pc, #24]	; (80088c4 <_sbrk_r+0x1c>)
 80088ac:	2300      	movs	r3, #0
 80088ae:	4605      	mov	r5, r0
 80088b0:	4608      	mov	r0, r1
 80088b2:	6023      	str	r3, [r4, #0]
 80088b4:	f7fb fb10 	bl	8003ed8 <_sbrk>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d102      	bne.n	80088c2 <_sbrk_r+0x1a>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	b103      	cbz	r3, 80088c2 <_sbrk_r+0x1a>
 80088c0:	602b      	str	r3, [r5, #0]
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	20000a14 	.word	0x20000a14

080088c8 <__malloc_lock>:
 80088c8:	4770      	bx	lr

080088ca <__malloc_unlock>:
 80088ca:	4770      	bx	lr

080088cc <_malloc_usable_size_r>:
 80088cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088d0:	1f18      	subs	r0, r3, #4
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bfbc      	itt	lt
 80088d6:	580b      	ldrlt	r3, [r1, r0]
 80088d8:	18c0      	addlt	r0, r0, r3
 80088da:	4770      	bx	lr

080088dc <log>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	ed2d 8b02 	vpush	{d8}
 80088e2:	b08a      	sub	sp, #40	; 0x28
 80088e4:	ec55 4b10 	vmov	r4, r5, d0
 80088e8:	f000 f87a 	bl	80089e0 <__ieee754_log>
 80088ec:	4b36      	ldr	r3, [pc, #216]	; (80089c8 <log+0xec>)
 80088ee:	eeb0 8a40 	vmov.f32	s16, s0
 80088f2:	eef0 8a60 	vmov.f32	s17, s1
 80088f6:	f993 6000 	ldrsb.w	r6, [r3]
 80088fa:	1c73      	adds	r3, r6, #1
 80088fc:	d05b      	beq.n	80089b6 <log+0xda>
 80088fe:	4622      	mov	r2, r4
 8008900:	462b      	mov	r3, r5
 8008902:	4620      	mov	r0, r4
 8008904:	4629      	mov	r1, r5
 8008906:	f7f8 f909 	bl	8000b1c <__aeabi_dcmpun>
 800890a:	2800      	cmp	r0, #0
 800890c:	d153      	bne.n	80089b6 <log+0xda>
 800890e:	2200      	movs	r2, #0
 8008910:	2300      	movs	r3, #0
 8008912:	4620      	mov	r0, r4
 8008914:	4629      	mov	r1, r5
 8008916:	f7f8 f8f7 	bl	8000b08 <__aeabi_dcmpgt>
 800891a:	2800      	cmp	r0, #0
 800891c:	d14b      	bne.n	80089b6 <log+0xda>
 800891e:	4b2b      	ldr	r3, [pc, #172]	; (80089cc <log+0xf0>)
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	9008      	str	r0, [sp, #32]
 8008924:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008928:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800892c:	b9a6      	cbnz	r6, 8008958 <log+0x7c>
 800892e:	4b28      	ldr	r3, [pc, #160]	; (80089d0 <log+0xf4>)
 8008930:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008934:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008938:	4620      	mov	r0, r4
 800893a:	2200      	movs	r2, #0
 800893c:	2300      	movs	r3, #0
 800893e:	4629      	mov	r1, r5
 8008940:	f7f8 f8ba 	bl	8000ab8 <__aeabi_dcmpeq>
 8008944:	bb40      	cbnz	r0, 8008998 <log+0xbc>
 8008946:	2301      	movs	r3, #1
 8008948:	2e02      	cmp	r6, #2
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	d119      	bne.n	8008982 <log+0xa6>
 800894e:	f7ff fb8b 	bl	8008068 <__errno>
 8008952:	2321      	movs	r3, #33	; 0x21
 8008954:	6003      	str	r3, [r0, #0]
 8008956:	e019      	b.n	800898c <log+0xb0>
 8008958:	4b1e      	ldr	r3, [pc, #120]	; (80089d4 <log+0xf8>)
 800895a:	2200      	movs	r2, #0
 800895c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008960:	4620      	mov	r0, r4
 8008962:	2200      	movs	r2, #0
 8008964:	2300      	movs	r3, #0
 8008966:	4629      	mov	r1, r5
 8008968:	f7f8 f8a6 	bl	8000ab8 <__aeabi_dcmpeq>
 800896c:	2800      	cmp	r0, #0
 800896e:	d0ea      	beq.n	8008946 <log+0x6a>
 8008970:	2302      	movs	r3, #2
 8008972:	429e      	cmp	r6, r3
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	d111      	bne.n	800899c <log+0xc0>
 8008978:	f7ff fb76 	bl	8008068 <__errno>
 800897c:	2322      	movs	r3, #34	; 0x22
 800897e:	6003      	str	r3, [r0, #0]
 8008980:	e011      	b.n	80089a6 <log+0xca>
 8008982:	4668      	mov	r0, sp
 8008984:	f000 f9de 	bl	8008d44 <matherr>
 8008988:	2800      	cmp	r0, #0
 800898a:	d0e0      	beq.n	800894e <log+0x72>
 800898c:	4812      	ldr	r0, [pc, #72]	; (80089d8 <log+0xfc>)
 800898e:	f000 f9db 	bl	8008d48 <nan>
 8008992:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008996:	e006      	b.n	80089a6 <log+0xca>
 8008998:	2302      	movs	r3, #2
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	4668      	mov	r0, sp
 800899e:	f000 f9d1 	bl	8008d44 <matherr>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d0e8      	beq.n	8008978 <log+0x9c>
 80089a6:	9b08      	ldr	r3, [sp, #32]
 80089a8:	b11b      	cbz	r3, 80089b2 <log+0xd6>
 80089aa:	f7ff fb5d 	bl	8008068 <__errno>
 80089ae:	9b08      	ldr	r3, [sp, #32]
 80089b0:	6003      	str	r3, [r0, #0]
 80089b2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80089b6:	eeb0 0a48 	vmov.f32	s0, s16
 80089ba:	eef0 0a68 	vmov.f32	s1, s17
 80089be:	b00a      	add	sp, #40	; 0x28
 80089c0:	ecbd 8b02 	vpop	{d8}
 80089c4:	bd70      	pop	{r4, r5, r6, pc}
 80089c6:	bf00      	nop
 80089c8:	200000cc 	.word	0x200000cc
 80089cc:	08008e77 	.word	0x08008e77
 80089d0:	c7efffff 	.word	0xc7efffff
 80089d4:	fff00000 	.word	0xfff00000
 80089d8:	08008e49 	.word	0x08008e49
 80089dc:	00000000 	.word	0x00000000

080089e0 <__ieee754_log>:
 80089e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e4:	ec51 0b10 	vmov	r0, r1, d0
 80089e8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80089ec:	b087      	sub	sp, #28
 80089ee:	460d      	mov	r5, r1
 80089f0:	da27      	bge.n	8008a42 <__ieee754_log+0x62>
 80089f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80089f6:	4303      	orrs	r3, r0
 80089f8:	ee10 2a10 	vmov	r2, s0
 80089fc:	d10a      	bne.n	8008a14 <__ieee754_log+0x34>
 80089fe:	49cc      	ldr	r1, [pc, #816]	; (8008d30 <__ieee754_log+0x350>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	2300      	movs	r3, #0
 8008a04:	2000      	movs	r0, #0
 8008a06:	f7f7 ff19 	bl	800083c <__aeabi_ddiv>
 8008a0a:	ec41 0b10 	vmov	d0, r0, r1
 8008a0e:	b007      	add	sp, #28
 8008a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a14:	2900      	cmp	r1, #0
 8008a16:	da05      	bge.n	8008a24 <__ieee754_log+0x44>
 8008a18:	460b      	mov	r3, r1
 8008a1a:	f7f7 fc2d 	bl	8000278 <__aeabi_dsub>
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2300      	movs	r3, #0
 8008a22:	e7f0      	b.n	8008a06 <__ieee754_log+0x26>
 8008a24:	4bc3      	ldr	r3, [pc, #780]	; (8008d34 <__ieee754_log+0x354>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	f7f7 fdde 	bl	80005e8 <__aeabi_dmul>
 8008a2c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008a30:	460d      	mov	r5, r1
 8008a32:	4ac1      	ldr	r2, [pc, #772]	; (8008d38 <__ieee754_log+0x358>)
 8008a34:	4295      	cmp	r5, r2
 8008a36:	dd06      	ble.n	8008a46 <__ieee754_log+0x66>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	f7f7 fc1e 	bl	800027c <__adddf3>
 8008a40:	e7e3      	b.n	8008a0a <__ieee754_log+0x2a>
 8008a42:	2300      	movs	r3, #0
 8008a44:	e7f5      	b.n	8008a32 <__ieee754_log+0x52>
 8008a46:	152c      	asrs	r4, r5, #20
 8008a48:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008a4c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008a50:	441c      	add	r4, r3
 8008a52:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8008a56:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a5e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8008a62:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8008a66:	ea42 0105 	orr.w	r1, r2, r5
 8008a6a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008a6e:	2200      	movs	r2, #0
 8008a70:	4bb2      	ldr	r3, [pc, #712]	; (8008d3c <__ieee754_log+0x35c>)
 8008a72:	f7f7 fc01 	bl	8000278 <__aeabi_dsub>
 8008a76:	1cab      	adds	r3, r5, #2
 8008a78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	4682      	mov	sl, r0
 8008a80:	468b      	mov	fp, r1
 8008a82:	f04f 0200 	mov.w	r2, #0
 8008a86:	dc53      	bgt.n	8008b30 <__ieee754_log+0x150>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f7f8 f815 	bl	8000ab8 <__aeabi_dcmpeq>
 8008a8e:	b1d0      	cbz	r0, 8008ac6 <__ieee754_log+0xe6>
 8008a90:	2c00      	cmp	r4, #0
 8008a92:	f000 8120 	beq.w	8008cd6 <__ieee754_log+0x2f6>
 8008a96:	4620      	mov	r0, r4
 8008a98:	f7f7 fd3c 	bl	8000514 <__aeabi_i2d>
 8008a9c:	a390      	add	r3, pc, #576	; (adr r3, 8008ce0 <__ieee754_log+0x300>)
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	460f      	mov	r7, r1
 8008aa6:	f7f7 fd9f 	bl	80005e8 <__aeabi_dmul>
 8008aaa:	a38f      	add	r3, pc, #572	; (adr r3, 8008ce8 <__ieee754_log+0x308>)
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	460d      	mov	r5, r1
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	4639      	mov	r1, r7
 8008ab8:	f7f7 fd96 	bl	80005e8 <__aeabi_dmul>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	e7ba      	b.n	8008a3c <__ieee754_log+0x5c>
 8008ac6:	a38a      	add	r3, pc, #552	; (adr r3, 8008cf0 <__ieee754_log+0x310>)
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	4650      	mov	r0, sl
 8008ace:	4659      	mov	r1, fp
 8008ad0:	f7f7 fd8a 	bl	80005e8 <__aeabi_dmul>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	2000      	movs	r0, #0
 8008ada:	4999      	ldr	r1, [pc, #612]	; (8008d40 <__ieee754_log+0x360>)
 8008adc:	f7f7 fbcc 	bl	8000278 <__aeabi_dsub>
 8008ae0:	4652      	mov	r2, sl
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	460f      	mov	r7, r1
 8008ae6:	465b      	mov	r3, fp
 8008ae8:	4650      	mov	r0, sl
 8008aea:	4659      	mov	r1, fp
 8008aec:	f7f7 fd7c 	bl	80005e8 <__aeabi_dmul>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4630      	mov	r0, r6
 8008af6:	4639      	mov	r1, r7
 8008af8:	f7f7 fd76 	bl	80005e8 <__aeabi_dmul>
 8008afc:	4606      	mov	r6, r0
 8008afe:	460f      	mov	r7, r1
 8008b00:	b914      	cbnz	r4, 8008b08 <__ieee754_log+0x128>
 8008b02:	4632      	mov	r2, r6
 8008b04:	463b      	mov	r3, r7
 8008b06:	e0a0      	b.n	8008c4a <__ieee754_log+0x26a>
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f7f7 fd03 	bl	8000514 <__aeabi_i2d>
 8008b0e:	a374      	add	r3, pc, #464	; (adr r3, 8008ce0 <__ieee754_log+0x300>)
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	4680      	mov	r8, r0
 8008b16:	4689      	mov	r9, r1
 8008b18:	f7f7 fd66 	bl	80005e8 <__aeabi_dmul>
 8008b1c:	a372      	add	r3, pc, #456	; (adr r3, 8008ce8 <__ieee754_log+0x308>)
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	4604      	mov	r4, r0
 8008b24:	460d      	mov	r5, r1
 8008b26:	4640      	mov	r0, r8
 8008b28:	4649      	mov	r1, r9
 8008b2a:	f7f7 fd5d 	bl	80005e8 <__aeabi_dmul>
 8008b2e:	e0a5      	b.n	8008c7c <__ieee754_log+0x29c>
 8008b30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b34:	f7f7 fba2 	bl	800027c <__adddf3>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4650      	mov	r0, sl
 8008b3e:	4659      	mov	r1, fp
 8008b40:	f7f7 fe7c 	bl	800083c <__aeabi_ddiv>
 8008b44:	e9cd 0100 	strd	r0, r1, [sp]
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f7f7 fce3 	bl	8000514 <__aeabi_i2d>
 8008b4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b56:	4610      	mov	r0, r2
 8008b58:	4619      	mov	r1, r3
 8008b5a:	f7f7 fd45 	bl	80005e8 <__aeabi_dmul>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	460b      	mov	r3, r1
 8008b62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b66:	f7f7 fd3f 	bl	80005e8 <__aeabi_dmul>
 8008b6a:	a363      	add	r3, pc, #396	; (adr r3, 8008cf8 <__ieee754_log+0x318>)
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	4680      	mov	r8, r0
 8008b72:	4689      	mov	r9, r1
 8008b74:	f7f7 fd38 	bl	80005e8 <__aeabi_dmul>
 8008b78:	a361      	add	r3, pc, #388	; (adr r3, 8008d00 <__ieee754_log+0x320>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	f7f7 fb7d 	bl	800027c <__adddf3>
 8008b82:	4642      	mov	r2, r8
 8008b84:	464b      	mov	r3, r9
 8008b86:	f7f7 fd2f 	bl	80005e8 <__aeabi_dmul>
 8008b8a:	a35f      	add	r3, pc, #380	; (adr r3, 8008d08 <__ieee754_log+0x328>)
 8008b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b90:	f7f7 fb74 	bl	800027c <__adddf3>
 8008b94:	4642      	mov	r2, r8
 8008b96:	464b      	mov	r3, r9
 8008b98:	f7f7 fd26 	bl	80005e8 <__aeabi_dmul>
 8008b9c:	a35c      	add	r3, pc, #368	; (adr r3, 8008d10 <__ieee754_log+0x330>)
 8008b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba2:	f7f7 fb6b 	bl	800027c <__adddf3>
 8008ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008baa:	f7f7 fd1d 	bl	80005e8 <__aeabi_dmul>
 8008bae:	a35a      	add	r3, pc, #360	; (adr r3, 8008d18 <__ieee754_log+0x338>)
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bb8:	4640      	mov	r0, r8
 8008bba:	4649      	mov	r1, r9
 8008bbc:	f7f7 fd14 	bl	80005e8 <__aeabi_dmul>
 8008bc0:	a357      	add	r3, pc, #348	; (adr r3, 8008d20 <__ieee754_log+0x340>)
 8008bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc6:	f7f7 fb59 	bl	800027c <__adddf3>
 8008bca:	4642      	mov	r2, r8
 8008bcc:	464b      	mov	r3, r9
 8008bce:	f7f7 fd0b 	bl	80005e8 <__aeabi_dmul>
 8008bd2:	a355      	add	r3, pc, #340	; (adr r3, 8008d28 <__ieee754_log+0x348>)
 8008bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd8:	f7f7 fb50 	bl	800027c <__adddf3>
 8008bdc:	4642      	mov	r2, r8
 8008bde:	464b      	mov	r3, r9
 8008be0:	f7f7 fd02 	bl	80005e8 <__aeabi_dmul>
 8008be4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008bf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bf4:	f7f7 fb42 	bl	800027c <__adddf3>
 8008bf8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8008bfc:	3551      	adds	r5, #81	; 0x51
 8008bfe:	4335      	orrs	r5, r6
 8008c00:	2d00      	cmp	r5, #0
 8008c02:	4680      	mov	r8, r0
 8008c04:	4689      	mov	r9, r1
 8008c06:	dd48      	ble.n	8008c9a <__ieee754_log+0x2ba>
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4b4d      	ldr	r3, [pc, #308]	; (8008d40 <__ieee754_log+0x360>)
 8008c0c:	4650      	mov	r0, sl
 8008c0e:	4659      	mov	r1, fp
 8008c10:	f7f7 fcea 	bl	80005e8 <__aeabi_dmul>
 8008c14:	4652      	mov	r2, sl
 8008c16:	465b      	mov	r3, fp
 8008c18:	f7f7 fce6 	bl	80005e8 <__aeabi_dmul>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4606      	mov	r6, r0
 8008c22:	460f      	mov	r7, r1
 8008c24:	4640      	mov	r0, r8
 8008c26:	4649      	mov	r1, r9
 8008c28:	f7f7 fb28 	bl	800027c <__adddf3>
 8008c2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c30:	f7f7 fcda 	bl	80005e8 <__aeabi_dmul>
 8008c34:	4680      	mov	r8, r0
 8008c36:	4689      	mov	r9, r1
 8008c38:	b964      	cbnz	r4, 8008c54 <__ieee754_log+0x274>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4630      	mov	r0, r6
 8008c40:	4639      	mov	r1, r7
 8008c42:	f7f7 fb19 	bl	8000278 <__aeabi_dsub>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4650      	mov	r0, sl
 8008c4c:	4659      	mov	r1, fp
 8008c4e:	f7f7 fb13 	bl	8000278 <__aeabi_dsub>
 8008c52:	e6da      	b.n	8008a0a <__ieee754_log+0x2a>
 8008c54:	a322      	add	r3, pc, #136	; (adr r3, 8008ce0 <__ieee754_log+0x300>)
 8008c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c5e:	f7f7 fcc3 	bl	80005e8 <__aeabi_dmul>
 8008c62:	a321      	add	r3, pc, #132	; (adr r3, 8008ce8 <__ieee754_log+0x308>)
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	4604      	mov	r4, r0
 8008c6a:	460d      	mov	r5, r1
 8008c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c70:	f7f7 fcba 	bl	80005e8 <__aeabi_dmul>
 8008c74:	4642      	mov	r2, r8
 8008c76:	464b      	mov	r3, r9
 8008c78:	f7f7 fb00 	bl	800027c <__adddf3>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4630      	mov	r0, r6
 8008c82:	4639      	mov	r1, r7
 8008c84:	f7f7 faf8 	bl	8000278 <__aeabi_dsub>
 8008c88:	4652      	mov	r2, sl
 8008c8a:	465b      	mov	r3, fp
 8008c8c:	f7f7 faf4 	bl	8000278 <__aeabi_dsub>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4620      	mov	r0, r4
 8008c96:	4629      	mov	r1, r5
 8008c98:	e7d9      	b.n	8008c4e <__ieee754_log+0x26e>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4650      	mov	r0, sl
 8008ca0:	4659      	mov	r1, fp
 8008ca2:	f7f7 fae9 	bl	8000278 <__aeabi_dsub>
 8008ca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008caa:	f7f7 fc9d 	bl	80005e8 <__aeabi_dmul>
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	2c00      	cmp	r4, #0
 8008cb4:	f43f af25 	beq.w	8008b02 <__ieee754_log+0x122>
 8008cb8:	a309      	add	r3, pc, #36	; (adr r3, 8008ce0 <__ieee754_log+0x300>)
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cc2:	f7f7 fc91 	bl	80005e8 <__aeabi_dmul>
 8008cc6:	a308      	add	r3, pc, #32	; (adr r3, 8008ce8 <__ieee754_log+0x308>)
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	4604      	mov	r4, r0
 8008cce:	460d      	mov	r5, r1
 8008cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cd4:	e729      	b.n	8008b2a <__ieee754_log+0x14a>
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	2100      	movs	r1, #0
 8008cda:	e696      	b.n	8008a0a <__ieee754_log+0x2a>
 8008cdc:	f3af 8000 	nop.w
 8008ce0:	fee00000 	.word	0xfee00000
 8008ce4:	3fe62e42 	.word	0x3fe62e42
 8008ce8:	35793c76 	.word	0x35793c76
 8008cec:	3dea39ef 	.word	0x3dea39ef
 8008cf0:	55555555 	.word	0x55555555
 8008cf4:	3fd55555 	.word	0x3fd55555
 8008cf8:	df3e5244 	.word	0xdf3e5244
 8008cfc:	3fc2f112 	.word	0x3fc2f112
 8008d00:	96cb03de 	.word	0x96cb03de
 8008d04:	3fc74664 	.word	0x3fc74664
 8008d08:	94229359 	.word	0x94229359
 8008d0c:	3fd24924 	.word	0x3fd24924
 8008d10:	55555593 	.word	0x55555593
 8008d14:	3fe55555 	.word	0x3fe55555
 8008d18:	d078c69f 	.word	0xd078c69f
 8008d1c:	3fc39a09 	.word	0x3fc39a09
 8008d20:	1d8e78af 	.word	0x1d8e78af
 8008d24:	3fcc71c5 	.word	0x3fcc71c5
 8008d28:	9997fa04 	.word	0x9997fa04
 8008d2c:	3fd99999 	.word	0x3fd99999
 8008d30:	c3500000 	.word	0xc3500000
 8008d34:	43500000 	.word	0x43500000
 8008d38:	7fefffff 	.word	0x7fefffff
 8008d3c:	3ff00000 	.word	0x3ff00000
 8008d40:	3fe00000 	.word	0x3fe00000

08008d44 <matherr>:
 8008d44:	2000      	movs	r0, #0
 8008d46:	4770      	bx	lr

08008d48 <nan>:
 8008d48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008d50 <nan+0x8>
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	00000000 	.word	0x00000000
 8008d54:	7ff80000 	.word	0x7ff80000

08008d58 <_init>:
 8008d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5a:	bf00      	nop
 8008d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5e:	bc08      	pop	{r3}
 8008d60:	469e      	mov	lr, r3
 8008d62:	4770      	bx	lr

08008d64 <_fini>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	bf00      	nop
 8008d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6a:	bc08      	pop	{r3}
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	4770      	bx	lr
