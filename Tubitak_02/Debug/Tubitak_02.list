
Tubitak_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bf0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08005cb0  08005cb0  00015cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e70  08005e70  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e70  08005e70  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e70  08005e70  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e70  08005e70  00015e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e74  08005e74  00015e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000009c  08005f14  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08005f14  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b463  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a46  00000000  00000000  0002b527  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  0002cf70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  0002da80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019796  00000000  00000000  0002e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000965e  00000000  00000000  00047c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094d58  00000000  00000000  000512ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6004  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c70  00000000  00000000  000e6080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000009c 	.word	0x2000009c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005c98 	.word	0x08005c98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a0 	.word	0x200000a0
 8000104:	08005c98 	.word	0x08005c98

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fe33 	bl	8001e9c <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 fd8b 	bl	8001d5c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fe25 	bl	8001e9c <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fe1b 	bl	8001e9c <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fdad 	bl	8001dd4 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fda3 	bl	8001dd4 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 fb8b 	bl	80009c0 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 fb0d 	bl	80008d4 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fb7d 	bl	80009c0 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fb73 	bl	80009c0 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fb1b 	bl	8000924 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 fb11 	bl	8000924 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_f2uiz>:
 8000310:	219e      	movs	r1, #158	; 0x9e
 8000312:	b510      	push	{r4, lr}
 8000314:	05c9      	lsls	r1, r1, #23
 8000316:	1c04      	adds	r4, r0, #0
 8000318:	f7ff fff0 	bl	80002fc <__aeabi_fcmpge>
 800031c:	2800      	cmp	r0, #0
 800031e:	d103      	bne.n	8000328 <__aeabi_f2uiz+0x18>
 8000320:	1c20      	adds	r0, r4, #0
 8000322:	f000 fe93 	bl	800104c <__aeabi_f2iz>
 8000326:	bd10      	pop	{r4, pc}
 8000328:	219e      	movs	r1, #158	; 0x9e
 800032a:	1c20      	adds	r0, r4, #0
 800032c:	05c9      	lsls	r1, r1, #23
 800032e:	f000 fcc9 	bl	8000cc4 <__aeabi_fsub>
 8000332:	f000 fe8b 	bl	800104c <__aeabi_f2iz>
 8000336:	2380      	movs	r3, #128	; 0x80
 8000338:	061b      	lsls	r3, r3, #24
 800033a:	469c      	mov	ip, r3
 800033c:	4460      	add	r0, ip
 800033e:	e7f2      	b.n	8000326 <__aeabi_f2uiz+0x16>

08000340 <__aeabi_d2uiz>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	2200      	movs	r2, #0
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <__aeabi_d2uiz+0x38>)
 8000346:	0004      	movs	r4, r0
 8000348:	000d      	movs	r5, r1
 800034a:	f7ff ff9d 	bl	8000288 <__aeabi_dcmpge>
 800034e:	2800      	cmp	r0, #0
 8000350:	d104      	bne.n	800035c <__aeabi_d2uiz+0x1c>
 8000352:	0020      	movs	r0, r4
 8000354:	0029      	movs	r1, r5
 8000356:	f002 fbc3 	bl	8002ae0 <__aeabi_d2iz>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <__aeabi_d2uiz+0x38>)
 800035e:	2200      	movs	r2, #0
 8000360:	0020      	movs	r0, r4
 8000362:	0029      	movs	r1, r5
 8000364:	f002 f874 	bl	8002450 <__aeabi_dsub>
 8000368:	f002 fbba 	bl	8002ae0 <__aeabi_d2iz>
 800036c:	2380      	movs	r3, #128	; 0x80
 800036e:	061b      	lsls	r3, r3, #24
 8000370:	469c      	mov	ip, r3
 8000372:	4460      	add	r0, ip
 8000374:	e7f1      	b.n	800035a <__aeabi_d2uiz+0x1a>
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	41e00000 	.word	0x41e00000

0800037c <__aeabi_fadd>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	4647      	mov	r7, r8
 8000380:	46ce      	mov	lr, r9
 8000382:	0243      	lsls	r3, r0, #9
 8000384:	0a5b      	lsrs	r3, r3, #9
 8000386:	0044      	lsls	r4, r0, #1
 8000388:	0fc2      	lsrs	r2, r0, #31
 800038a:	469c      	mov	ip, r3
 800038c:	0048      	lsls	r0, r1, #1
 800038e:	00dd      	lsls	r5, r3, #3
 8000390:	024b      	lsls	r3, r1, #9
 8000392:	0e24      	lsrs	r4, r4, #24
 8000394:	0a5b      	lsrs	r3, r3, #9
 8000396:	0e00      	lsrs	r0, r0, #24
 8000398:	b580      	push	{r7, lr}
 800039a:	4698      	mov	r8, r3
 800039c:	0026      	movs	r6, r4
 800039e:	4691      	mov	r9, r2
 80003a0:	0fc9      	lsrs	r1, r1, #31
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	1a27      	subs	r7, r4, r0
 80003a6:	428a      	cmp	r2, r1
 80003a8:	d029      	beq.n	80003fe <__aeabi_fadd+0x82>
 80003aa:	2f00      	cmp	r7, #0
 80003ac:	dd15      	ble.n	80003da <__aeabi_fadd+0x5e>
 80003ae:	2800      	cmp	r0, #0
 80003b0:	d14a      	bne.n	8000448 <__aeabi_fadd+0xcc>
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d000      	beq.n	80003b8 <__aeabi_fadd+0x3c>
 80003b6:	e095      	b.n	80004e4 <__aeabi_fadd+0x168>
 80003b8:	08ed      	lsrs	r5, r5, #3
 80003ba:	2cff      	cmp	r4, #255	; 0xff
 80003bc:	d100      	bne.n	80003c0 <__aeabi_fadd+0x44>
 80003be:	e088      	b.n	80004d2 <__aeabi_fadd+0x156>
 80003c0:	026b      	lsls	r3, r5, #9
 80003c2:	0a5b      	lsrs	r3, r3, #9
 80003c4:	b2e6      	uxtb	r6, r4
 80003c6:	025b      	lsls	r3, r3, #9
 80003c8:	05f6      	lsls	r6, r6, #23
 80003ca:	0a58      	lsrs	r0, r3, #9
 80003cc:	4330      	orrs	r0, r6
 80003ce:	07d2      	lsls	r2, r2, #31
 80003d0:	4310      	orrs	r0, r2
 80003d2:	bc0c      	pop	{r2, r3}
 80003d4:	4690      	mov	r8, r2
 80003d6:	4699      	mov	r9, r3
 80003d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d000      	beq.n	80003e0 <__aeabi_fadd+0x64>
 80003de:	e087      	b.n	80004f0 <__aeabi_fadd+0x174>
 80003e0:	1c60      	adds	r0, r4, #1
 80003e2:	b2c0      	uxtb	r0, r0
 80003e4:	2801      	cmp	r0, #1
 80003e6:	dc00      	bgt.n	80003ea <__aeabi_fadd+0x6e>
 80003e8:	e0b6      	b.n	8000558 <__aeabi_fadd+0x1dc>
 80003ea:	1aee      	subs	r6, r5, r3
 80003ec:	0172      	lsls	r2, r6, #5
 80003ee:	d500      	bpl.n	80003f2 <__aeabi_fadd+0x76>
 80003f0:	e0c5      	b.n	800057e <__aeabi_fadd+0x202>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d13d      	bne.n	8000472 <__aeabi_fadd+0xf6>
 80003f6:	2200      	movs	r2, #0
 80003f8:	2600      	movs	r6, #0
 80003fa:	2300      	movs	r3, #0
 80003fc:	e7e3      	b.n	80003c6 <__aeabi_fadd+0x4a>
 80003fe:	2f00      	cmp	r7, #0
 8000400:	dc00      	bgt.n	8000404 <__aeabi_fadd+0x88>
 8000402:	e096      	b.n	8000532 <__aeabi_fadd+0x1b6>
 8000404:	2800      	cmp	r0, #0
 8000406:	d05d      	beq.n	80004c4 <__aeabi_fadd+0x148>
 8000408:	2cff      	cmp	r4, #255	; 0xff
 800040a:	d060      	beq.n	80004ce <__aeabi_fadd+0x152>
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	04d2      	lsls	r2, r2, #19
 8000410:	4313      	orrs	r3, r2
 8000412:	2f1b      	cmp	r7, #27
 8000414:	dd00      	ble.n	8000418 <__aeabi_fadd+0x9c>
 8000416:	e0ec      	b.n	80005f2 <__aeabi_fadd+0x276>
 8000418:	2220      	movs	r2, #32
 800041a:	1bd2      	subs	r2, r2, r7
 800041c:	0018      	movs	r0, r3
 800041e:	4093      	lsls	r3, r2
 8000420:	40f8      	lsrs	r0, r7
 8000422:	1e5a      	subs	r2, r3, #1
 8000424:	4193      	sbcs	r3, r2
 8000426:	4303      	orrs	r3, r0
 8000428:	18ed      	adds	r5, r5, r3
 800042a:	016b      	lsls	r3, r5, #5
 800042c:	d57b      	bpl.n	8000526 <__aeabi_fadd+0x1aa>
 800042e:	3401      	adds	r4, #1
 8000430:	2cff      	cmp	r4, #255	; 0xff
 8000432:	d100      	bne.n	8000436 <__aeabi_fadd+0xba>
 8000434:	e0b7      	b.n	80005a6 <__aeabi_fadd+0x22a>
 8000436:	2201      	movs	r2, #1
 8000438:	2607      	movs	r6, #7
 800043a:	402a      	ands	r2, r5
 800043c:	086b      	lsrs	r3, r5, #1
 800043e:	4d9a      	ldr	r5, [pc, #616]	; (80006a8 <__aeabi_fadd+0x32c>)
 8000440:	401d      	ands	r5, r3
 8000442:	4315      	orrs	r5, r2
 8000444:	402e      	ands	r6, r5
 8000446:	e029      	b.n	800049c <__aeabi_fadd+0x120>
 8000448:	2cff      	cmp	r4, #255	; 0xff
 800044a:	d0b5      	beq.n	80003b8 <__aeabi_fadd+0x3c>
 800044c:	2280      	movs	r2, #128	; 0x80
 800044e:	04d2      	lsls	r2, r2, #19
 8000450:	4313      	orrs	r3, r2
 8000452:	2f1b      	cmp	r7, #27
 8000454:	dd00      	ble.n	8000458 <__aeabi_fadd+0xdc>
 8000456:	e0b2      	b.n	80005be <__aeabi_fadd+0x242>
 8000458:	2220      	movs	r2, #32
 800045a:	1bd2      	subs	r2, r2, r7
 800045c:	0019      	movs	r1, r3
 800045e:	4093      	lsls	r3, r2
 8000460:	40f9      	lsrs	r1, r7
 8000462:	1e5a      	subs	r2, r3, #1
 8000464:	4193      	sbcs	r3, r2
 8000466:	430b      	orrs	r3, r1
 8000468:	1aed      	subs	r5, r5, r3
 800046a:	016b      	lsls	r3, r5, #5
 800046c:	d55b      	bpl.n	8000526 <__aeabi_fadd+0x1aa>
 800046e:	01ad      	lsls	r5, r5, #6
 8000470:	09ae      	lsrs	r6, r5, #6
 8000472:	0030      	movs	r0, r6
 8000474:	f002 fcac 	bl	8002dd0 <__clzsi2>
 8000478:	3805      	subs	r0, #5
 800047a:	4086      	lsls	r6, r0
 800047c:	4284      	cmp	r4, r0
 800047e:	dc65      	bgt.n	800054c <__aeabi_fadd+0x1d0>
 8000480:	1b04      	subs	r4, r0, r4
 8000482:	0033      	movs	r3, r6
 8000484:	2020      	movs	r0, #32
 8000486:	3401      	adds	r4, #1
 8000488:	40e3      	lsrs	r3, r4
 800048a:	1b04      	subs	r4, r0, r4
 800048c:	40a6      	lsls	r6, r4
 800048e:	1e75      	subs	r5, r6, #1
 8000490:	41ae      	sbcs	r6, r5
 8000492:	4333      	orrs	r3, r6
 8000494:	2607      	movs	r6, #7
 8000496:	001d      	movs	r5, r3
 8000498:	2400      	movs	r4, #0
 800049a:	401e      	ands	r6, r3
 800049c:	2201      	movs	r2, #1
 800049e:	464b      	mov	r3, r9
 80004a0:	401a      	ands	r2, r3
 80004a2:	2e00      	cmp	r6, #0
 80004a4:	d004      	beq.n	80004b0 <__aeabi_fadd+0x134>
 80004a6:	230f      	movs	r3, #15
 80004a8:	402b      	ands	r3, r5
 80004aa:	2b04      	cmp	r3, #4
 80004ac:	d000      	beq.n	80004b0 <__aeabi_fadd+0x134>
 80004ae:	3504      	adds	r5, #4
 80004b0:	016b      	lsls	r3, r5, #5
 80004b2:	d400      	bmi.n	80004b6 <__aeabi_fadd+0x13a>
 80004b4:	e780      	b.n	80003b8 <__aeabi_fadd+0x3c>
 80004b6:	3401      	adds	r4, #1
 80004b8:	b2e6      	uxtb	r6, r4
 80004ba:	2cff      	cmp	r4, #255	; 0xff
 80004bc:	d12f      	bne.n	800051e <__aeabi_fadd+0x1a2>
 80004be:	26ff      	movs	r6, #255	; 0xff
 80004c0:	2300      	movs	r3, #0
 80004c2:	e780      	b.n	80003c6 <__aeabi_fadd+0x4a>
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d152      	bne.n	800056e <__aeabi_fadd+0x1f2>
 80004c8:	2cff      	cmp	r4, #255	; 0xff
 80004ca:	d000      	beq.n	80004ce <__aeabi_fadd+0x152>
 80004cc:	e774      	b.n	80003b8 <__aeabi_fadd+0x3c>
 80004ce:	000a      	movs	r2, r1
 80004d0:	08ed      	lsrs	r5, r5, #3
 80004d2:	2d00      	cmp	r5, #0
 80004d4:	d0f3      	beq.n	80004be <__aeabi_fadd+0x142>
 80004d6:	2380      	movs	r3, #128	; 0x80
 80004d8:	03db      	lsls	r3, r3, #15
 80004da:	432b      	orrs	r3, r5
 80004dc:	025b      	lsls	r3, r3, #9
 80004de:	0a5b      	lsrs	r3, r3, #9
 80004e0:	26ff      	movs	r6, #255	; 0xff
 80004e2:	e770      	b.n	80003c6 <__aeabi_fadd+0x4a>
 80004e4:	3f01      	subs	r7, #1
 80004e6:	2f00      	cmp	r7, #0
 80004e8:	d0be      	beq.n	8000468 <__aeabi_fadd+0xec>
 80004ea:	2cff      	cmp	r4, #255	; 0xff
 80004ec:	d1b1      	bne.n	8000452 <__aeabi_fadd+0xd6>
 80004ee:	e763      	b.n	80003b8 <__aeabi_fadd+0x3c>
 80004f0:	2c00      	cmp	r4, #0
 80004f2:	d047      	beq.n	8000584 <__aeabi_fadd+0x208>
 80004f4:	28ff      	cmp	r0, #255	; 0xff
 80004f6:	d069      	beq.n	80005cc <__aeabi_fadd+0x250>
 80004f8:	2480      	movs	r4, #128	; 0x80
 80004fa:	04e4      	lsls	r4, r4, #19
 80004fc:	427a      	negs	r2, r7
 80004fe:	4325      	orrs	r5, r4
 8000500:	2a1b      	cmp	r2, #27
 8000502:	dd00      	ble.n	8000506 <__aeabi_fadd+0x18a>
 8000504:	e0c5      	b.n	8000692 <__aeabi_fadd+0x316>
 8000506:	002c      	movs	r4, r5
 8000508:	2620      	movs	r6, #32
 800050a:	40d4      	lsrs	r4, r2
 800050c:	1ab2      	subs	r2, r6, r2
 800050e:	4095      	lsls	r5, r2
 8000510:	1e6a      	subs	r2, r5, #1
 8000512:	4195      	sbcs	r5, r2
 8000514:	4325      	orrs	r5, r4
 8000516:	1b5d      	subs	r5, r3, r5
 8000518:	0004      	movs	r4, r0
 800051a:	4689      	mov	r9, r1
 800051c:	e7a5      	b.n	800046a <__aeabi_fadd+0xee>
 800051e:	01ab      	lsls	r3, r5, #6
 8000520:	0a5b      	lsrs	r3, r3, #9
 8000522:	e750      	b.n	80003c6 <__aeabi_fadd+0x4a>
 8000524:	2400      	movs	r4, #0
 8000526:	2201      	movs	r2, #1
 8000528:	464b      	mov	r3, r9
 800052a:	401a      	ands	r2, r3
 800052c:	076b      	lsls	r3, r5, #29
 800052e:	d1ba      	bne.n	80004a6 <__aeabi_fadd+0x12a>
 8000530:	e742      	b.n	80003b8 <__aeabi_fadd+0x3c>
 8000532:	2f00      	cmp	r7, #0
 8000534:	d13b      	bne.n	80005ae <__aeabi_fadd+0x232>
 8000536:	3401      	adds	r4, #1
 8000538:	b2e0      	uxtb	r0, r4
 800053a:	2801      	cmp	r0, #1
 800053c:	dd4a      	ble.n	80005d4 <__aeabi_fadd+0x258>
 800053e:	2cff      	cmp	r4, #255	; 0xff
 8000540:	d0bd      	beq.n	80004be <__aeabi_fadd+0x142>
 8000542:	2607      	movs	r6, #7
 8000544:	18ed      	adds	r5, r5, r3
 8000546:	086d      	lsrs	r5, r5, #1
 8000548:	402e      	ands	r6, r5
 800054a:	e7a7      	b.n	800049c <__aeabi_fadd+0x120>
 800054c:	2307      	movs	r3, #7
 800054e:	4d57      	ldr	r5, [pc, #348]	; (80006ac <__aeabi_fadd+0x330>)
 8000550:	1a24      	subs	r4, r4, r0
 8000552:	4035      	ands	r5, r6
 8000554:	401e      	ands	r6, r3
 8000556:	e7a1      	b.n	800049c <__aeabi_fadd+0x120>
 8000558:	2c00      	cmp	r4, #0
 800055a:	d11b      	bne.n	8000594 <__aeabi_fadd+0x218>
 800055c:	2d00      	cmp	r5, #0
 800055e:	d16e      	bne.n	800063e <__aeabi_fadd+0x2c2>
 8000560:	2b00      	cmp	r3, #0
 8000562:	d100      	bne.n	8000566 <__aeabi_fadd+0x1ea>
 8000564:	e09a      	b.n	800069c <__aeabi_fadd+0x320>
 8000566:	000a      	movs	r2, r1
 8000568:	001d      	movs	r5, r3
 800056a:	003c      	movs	r4, r7
 800056c:	e724      	b.n	80003b8 <__aeabi_fadd+0x3c>
 800056e:	3f01      	subs	r7, #1
 8000570:	2f00      	cmp	r7, #0
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x1fa>
 8000574:	e758      	b.n	8000428 <__aeabi_fadd+0xac>
 8000576:	2cff      	cmp	r4, #255	; 0xff
 8000578:	d000      	beq.n	800057c <__aeabi_fadd+0x200>
 800057a:	e74a      	b.n	8000412 <__aeabi_fadd+0x96>
 800057c:	e7a7      	b.n	80004ce <__aeabi_fadd+0x152>
 800057e:	1b5e      	subs	r6, r3, r5
 8000580:	4689      	mov	r9, r1
 8000582:	e776      	b.n	8000472 <__aeabi_fadd+0xf6>
 8000584:	2d00      	cmp	r5, #0
 8000586:	d11c      	bne.n	80005c2 <__aeabi_fadd+0x246>
 8000588:	000a      	movs	r2, r1
 800058a:	28ff      	cmp	r0, #255	; 0xff
 800058c:	d01f      	beq.n	80005ce <__aeabi_fadd+0x252>
 800058e:	0004      	movs	r4, r0
 8000590:	001d      	movs	r5, r3
 8000592:	e711      	b.n	80003b8 <__aeabi_fadd+0x3c>
 8000594:	2d00      	cmp	r5, #0
 8000596:	d15d      	bne.n	8000654 <__aeabi_fadd+0x2d8>
 8000598:	2b00      	cmp	r3, #0
 800059a:	d117      	bne.n	80005cc <__aeabi_fadd+0x250>
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	2200      	movs	r2, #0
 80005a0:	03db      	lsls	r3, r3, #15
 80005a2:	26ff      	movs	r6, #255	; 0xff
 80005a4:	e70f      	b.n	80003c6 <__aeabi_fadd+0x4a>
 80005a6:	000a      	movs	r2, r1
 80005a8:	26ff      	movs	r6, #255	; 0xff
 80005aa:	2300      	movs	r3, #0
 80005ac:	e70b      	b.n	80003c6 <__aeabi_fadd+0x4a>
 80005ae:	2c00      	cmp	r4, #0
 80005b0:	d121      	bne.n	80005f6 <__aeabi_fadd+0x27a>
 80005b2:	2d00      	cmp	r5, #0
 80005b4:	d166      	bne.n	8000684 <__aeabi_fadd+0x308>
 80005b6:	28ff      	cmp	r0, #255	; 0xff
 80005b8:	d1e9      	bne.n	800058e <__aeabi_fadd+0x212>
 80005ba:	001d      	movs	r5, r3
 80005bc:	e787      	b.n	80004ce <__aeabi_fadd+0x152>
 80005be:	2301      	movs	r3, #1
 80005c0:	e752      	b.n	8000468 <__aeabi_fadd+0xec>
 80005c2:	1c7a      	adds	r2, r7, #1
 80005c4:	d0a7      	beq.n	8000516 <__aeabi_fadd+0x19a>
 80005c6:	43fa      	mvns	r2, r7
 80005c8:	28ff      	cmp	r0, #255	; 0xff
 80005ca:	d199      	bne.n	8000500 <__aeabi_fadd+0x184>
 80005cc:	000a      	movs	r2, r1
 80005ce:	001d      	movs	r5, r3
 80005d0:	24ff      	movs	r4, #255	; 0xff
 80005d2:	e6f1      	b.n	80003b8 <__aeabi_fadd+0x3c>
 80005d4:	2e00      	cmp	r6, #0
 80005d6:	d121      	bne.n	800061c <__aeabi_fadd+0x2a0>
 80005d8:	2d00      	cmp	r5, #0
 80005da:	d04f      	beq.n	800067c <__aeabi_fadd+0x300>
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d04c      	beq.n	800067a <__aeabi_fadd+0x2fe>
 80005e0:	18ed      	adds	r5, r5, r3
 80005e2:	016b      	lsls	r3, r5, #5
 80005e4:	d59e      	bpl.n	8000524 <__aeabi_fadd+0x1a8>
 80005e6:	4b31      	ldr	r3, [pc, #196]	; (80006ac <__aeabi_fadd+0x330>)
 80005e8:	3607      	adds	r6, #7
 80005ea:	402e      	ands	r6, r5
 80005ec:	2401      	movs	r4, #1
 80005ee:	401d      	ands	r5, r3
 80005f0:	e754      	b.n	800049c <__aeabi_fadd+0x120>
 80005f2:	2301      	movs	r3, #1
 80005f4:	e718      	b.n	8000428 <__aeabi_fadd+0xac>
 80005f6:	28ff      	cmp	r0, #255	; 0xff
 80005f8:	d0df      	beq.n	80005ba <__aeabi_fadd+0x23e>
 80005fa:	2480      	movs	r4, #128	; 0x80
 80005fc:	04e4      	lsls	r4, r4, #19
 80005fe:	427f      	negs	r7, r7
 8000600:	4325      	orrs	r5, r4
 8000602:	2f1b      	cmp	r7, #27
 8000604:	dc4d      	bgt.n	80006a2 <__aeabi_fadd+0x326>
 8000606:	2620      	movs	r6, #32
 8000608:	1bf6      	subs	r6, r6, r7
 800060a:	002c      	movs	r4, r5
 800060c:	40b5      	lsls	r5, r6
 800060e:	40fc      	lsrs	r4, r7
 8000610:	1e6a      	subs	r2, r5, #1
 8000612:	4195      	sbcs	r5, r2
 8000614:	4325      	orrs	r5, r4
 8000616:	18ed      	adds	r5, r5, r3
 8000618:	0004      	movs	r4, r0
 800061a:	e706      	b.n	800042a <__aeabi_fadd+0xae>
 800061c:	2d00      	cmp	r5, #0
 800061e:	d0cc      	beq.n	80005ba <__aeabi_fadd+0x23e>
 8000620:	2b00      	cmp	r3, #0
 8000622:	d100      	bne.n	8000626 <__aeabi_fadd+0x2aa>
 8000624:	e753      	b.n	80004ce <__aeabi_fadd+0x152>
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	4660      	mov	r0, ip
 800062a:	03c9      	lsls	r1, r1, #15
 800062c:	4208      	tst	r0, r1
 800062e:	d003      	beq.n	8000638 <__aeabi_fadd+0x2bc>
 8000630:	4640      	mov	r0, r8
 8000632:	4208      	tst	r0, r1
 8000634:	d100      	bne.n	8000638 <__aeabi_fadd+0x2bc>
 8000636:	001d      	movs	r5, r3
 8000638:	2101      	movs	r1, #1
 800063a:	4011      	ands	r1, r2
 800063c:	e747      	b.n	80004ce <__aeabi_fadd+0x152>
 800063e:	2b00      	cmp	r3, #0
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x2c8>
 8000642:	e6b9      	b.n	80003b8 <__aeabi_fadd+0x3c>
 8000644:	1aea      	subs	r2, r5, r3
 8000646:	0150      	lsls	r0, r2, #5
 8000648:	d525      	bpl.n	8000696 <__aeabi_fadd+0x31a>
 800064a:	2607      	movs	r6, #7
 800064c:	1b5d      	subs	r5, r3, r5
 800064e:	402e      	ands	r6, r5
 8000650:	4689      	mov	r9, r1
 8000652:	e723      	b.n	800049c <__aeabi_fadd+0x120>
 8000654:	24ff      	movs	r4, #255	; 0xff
 8000656:	2b00      	cmp	r3, #0
 8000658:	d100      	bne.n	800065c <__aeabi_fadd+0x2e0>
 800065a:	e6ad      	b.n	80003b8 <__aeabi_fadd+0x3c>
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	4660      	mov	r0, ip
 8000660:	03d2      	lsls	r2, r2, #15
 8000662:	4210      	tst	r0, r2
 8000664:	d004      	beq.n	8000670 <__aeabi_fadd+0x2f4>
 8000666:	4640      	mov	r0, r8
 8000668:	4210      	tst	r0, r2
 800066a:	d101      	bne.n	8000670 <__aeabi_fadd+0x2f4>
 800066c:	001d      	movs	r5, r3
 800066e:	4689      	mov	r9, r1
 8000670:	2201      	movs	r2, #1
 8000672:	464b      	mov	r3, r9
 8000674:	24ff      	movs	r4, #255	; 0xff
 8000676:	401a      	ands	r2, r3
 8000678:	e69e      	b.n	80003b8 <__aeabi_fadd+0x3c>
 800067a:	002b      	movs	r3, r5
 800067c:	08dd      	lsrs	r5, r3, #3
 800067e:	000a      	movs	r2, r1
 8000680:	2400      	movs	r4, #0
 8000682:	e69d      	b.n	80003c0 <__aeabi_fadd+0x44>
 8000684:	1c7a      	adds	r2, r7, #1
 8000686:	d0c6      	beq.n	8000616 <__aeabi_fadd+0x29a>
 8000688:	43ff      	mvns	r7, r7
 800068a:	28ff      	cmp	r0, #255	; 0xff
 800068c:	d1b9      	bne.n	8000602 <__aeabi_fadd+0x286>
 800068e:	001d      	movs	r5, r3
 8000690:	e71d      	b.n	80004ce <__aeabi_fadd+0x152>
 8000692:	2501      	movs	r5, #1
 8000694:	e73f      	b.n	8000516 <__aeabi_fadd+0x19a>
 8000696:	1e15      	subs	r5, r2, #0
 8000698:	d000      	beq.n	800069c <__aeabi_fadd+0x320>
 800069a:	e744      	b.n	8000526 <__aeabi_fadd+0x1aa>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	e691      	b.n	80003c6 <__aeabi_fadd+0x4a>
 80006a2:	2501      	movs	r5, #1
 80006a4:	e7b7      	b.n	8000616 <__aeabi_fadd+0x29a>
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	7dffffff 	.word	0x7dffffff
 80006ac:	fbffffff 	.word	0xfbffffff

080006b0 <__aeabi_fdiv>:
 80006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b2:	4657      	mov	r7, sl
 80006b4:	464e      	mov	r6, r9
 80006b6:	4645      	mov	r5, r8
 80006b8:	46de      	mov	lr, fp
 80006ba:	0244      	lsls	r4, r0, #9
 80006bc:	b5e0      	push	{r5, r6, r7, lr}
 80006be:	0046      	lsls	r6, r0, #1
 80006c0:	4688      	mov	r8, r1
 80006c2:	0a64      	lsrs	r4, r4, #9
 80006c4:	0e36      	lsrs	r6, r6, #24
 80006c6:	0fc7      	lsrs	r7, r0, #31
 80006c8:	2e00      	cmp	r6, #0
 80006ca:	d063      	beq.n	8000794 <__aeabi_fdiv+0xe4>
 80006cc:	2eff      	cmp	r6, #255	; 0xff
 80006ce:	d024      	beq.n	800071a <__aeabi_fdiv+0x6a>
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	00e4      	lsls	r4, r4, #3
 80006d4:	04db      	lsls	r3, r3, #19
 80006d6:	431c      	orrs	r4, r3
 80006d8:	2300      	movs	r3, #0
 80006da:	4699      	mov	r9, r3
 80006dc:	469b      	mov	fp, r3
 80006de:	3e7f      	subs	r6, #127	; 0x7f
 80006e0:	4643      	mov	r3, r8
 80006e2:	4642      	mov	r2, r8
 80006e4:	025d      	lsls	r5, r3, #9
 80006e6:	0fd2      	lsrs	r2, r2, #31
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	0a6d      	lsrs	r5, r5, #9
 80006ec:	0e1b      	lsrs	r3, r3, #24
 80006ee:	4690      	mov	r8, r2
 80006f0:	4692      	mov	sl, r2
 80006f2:	d065      	beq.n	80007c0 <__aeabi_fdiv+0x110>
 80006f4:	2bff      	cmp	r3, #255	; 0xff
 80006f6:	d055      	beq.n	80007a4 <__aeabi_fdiv+0xf4>
 80006f8:	2280      	movs	r2, #128	; 0x80
 80006fa:	2100      	movs	r1, #0
 80006fc:	00ed      	lsls	r5, r5, #3
 80006fe:	04d2      	lsls	r2, r2, #19
 8000700:	3b7f      	subs	r3, #127	; 0x7f
 8000702:	4315      	orrs	r5, r2
 8000704:	1af6      	subs	r6, r6, r3
 8000706:	4643      	mov	r3, r8
 8000708:	464a      	mov	r2, r9
 800070a:	407b      	eors	r3, r7
 800070c:	2a0f      	cmp	r2, #15
 800070e:	d900      	bls.n	8000712 <__aeabi_fdiv+0x62>
 8000710:	e08d      	b.n	800082e <__aeabi_fdiv+0x17e>
 8000712:	486d      	ldr	r0, [pc, #436]	; (80008c8 <__aeabi_fdiv+0x218>)
 8000714:	0092      	lsls	r2, r2, #2
 8000716:	5882      	ldr	r2, [r0, r2]
 8000718:	4697      	mov	pc, r2
 800071a:	2c00      	cmp	r4, #0
 800071c:	d154      	bne.n	80007c8 <__aeabi_fdiv+0x118>
 800071e:	2308      	movs	r3, #8
 8000720:	4699      	mov	r9, r3
 8000722:	3b06      	subs	r3, #6
 8000724:	26ff      	movs	r6, #255	; 0xff
 8000726:	469b      	mov	fp, r3
 8000728:	e7da      	b.n	80006e0 <__aeabi_fdiv+0x30>
 800072a:	2500      	movs	r5, #0
 800072c:	4653      	mov	r3, sl
 800072e:	2902      	cmp	r1, #2
 8000730:	d01b      	beq.n	800076a <__aeabi_fdiv+0xba>
 8000732:	2903      	cmp	r1, #3
 8000734:	d100      	bne.n	8000738 <__aeabi_fdiv+0x88>
 8000736:	e0bf      	b.n	80008b8 <__aeabi_fdiv+0x208>
 8000738:	2901      	cmp	r1, #1
 800073a:	d028      	beq.n	800078e <__aeabi_fdiv+0xde>
 800073c:	0030      	movs	r0, r6
 800073e:	307f      	adds	r0, #127	; 0x7f
 8000740:	2800      	cmp	r0, #0
 8000742:	dd20      	ble.n	8000786 <__aeabi_fdiv+0xd6>
 8000744:	076a      	lsls	r2, r5, #29
 8000746:	d004      	beq.n	8000752 <__aeabi_fdiv+0xa2>
 8000748:	220f      	movs	r2, #15
 800074a:	402a      	ands	r2, r5
 800074c:	2a04      	cmp	r2, #4
 800074e:	d000      	beq.n	8000752 <__aeabi_fdiv+0xa2>
 8000750:	3504      	adds	r5, #4
 8000752:	012a      	lsls	r2, r5, #4
 8000754:	d503      	bpl.n	800075e <__aeabi_fdiv+0xae>
 8000756:	0030      	movs	r0, r6
 8000758:	4a5c      	ldr	r2, [pc, #368]	; (80008cc <__aeabi_fdiv+0x21c>)
 800075a:	3080      	adds	r0, #128	; 0x80
 800075c:	4015      	ands	r5, r2
 800075e:	28fe      	cmp	r0, #254	; 0xfe
 8000760:	dc03      	bgt.n	800076a <__aeabi_fdiv+0xba>
 8000762:	01ac      	lsls	r4, r5, #6
 8000764:	0a64      	lsrs	r4, r4, #9
 8000766:	b2c2      	uxtb	r2, r0
 8000768:	e001      	b.n	800076e <__aeabi_fdiv+0xbe>
 800076a:	22ff      	movs	r2, #255	; 0xff
 800076c:	2400      	movs	r4, #0
 800076e:	0264      	lsls	r4, r4, #9
 8000770:	05d2      	lsls	r2, r2, #23
 8000772:	0a60      	lsrs	r0, r4, #9
 8000774:	07db      	lsls	r3, r3, #31
 8000776:	4310      	orrs	r0, r2
 8000778:	4318      	orrs	r0, r3
 800077a:	bc3c      	pop	{r2, r3, r4, r5}
 800077c:	4690      	mov	r8, r2
 800077e:	4699      	mov	r9, r3
 8000780:	46a2      	mov	sl, r4
 8000782:	46ab      	mov	fp, r5
 8000784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000786:	2201      	movs	r2, #1
 8000788:	1a10      	subs	r0, r2, r0
 800078a:	281b      	cmp	r0, #27
 800078c:	dd7c      	ble.n	8000888 <__aeabi_fdiv+0x1d8>
 800078e:	2200      	movs	r2, #0
 8000790:	2400      	movs	r4, #0
 8000792:	e7ec      	b.n	800076e <__aeabi_fdiv+0xbe>
 8000794:	2c00      	cmp	r4, #0
 8000796:	d11d      	bne.n	80007d4 <__aeabi_fdiv+0x124>
 8000798:	2304      	movs	r3, #4
 800079a:	4699      	mov	r9, r3
 800079c:	3b03      	subs	r3, #3
 800079e:	2600      	movs	r6, #0
 80007a0:	469b      	mov	fp, r3
 80007a2:	e79d      	b.n	80006e0 <__aeabi_fdiv+0x30>
 80007a4:	3eff      	subs	r6, #255	; 0xff
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d120      	bne.n	80007ec <__aeabi_fdiv+0x13c>
 80007aa:	2102      	movs	r1, #2
 80007ac:	4643      	mov	r3, r8
 80007ae:	464a      	mov	r2, r9
 80007b0:	407b      	eors	r3, r7
 80007b2:	430a      	orrs	r2, r1
 80007b4:	2a0f      	cmp	r2, #15
 80007b6:	d8d8      	bhi.n	800076a <__aeabi_fdiv+0xba>
 80007b8:	4845      	ldr	r0, [pc, #276]	; (80008d0 <__aeabi_fdiv+0x220>)
 80007ba:	0092      	lsls	r2, r2, #2
 80007bc:	5882      	ldr	r2, [r0, r2]
 80007be:	4697      	mov	pc, r2
 80007c0:	2d00      	cmp	r5, #0
 80007c2:	d119      	bne.n	80007f8 <__aeabi_fdiv+0x148>
 80007c4:	2101      	movs	r1, #1
 80007c6:	e7f1      	b.n	80007ac <__aeabi_fdiv+0xfc>
 80007c8:	230c      	movs	r3, #12
 80007ca:	4699      	mov	r9, r3
 80007cc:	3b09      	subs	r3, #9
 80007ce:	26ff      	movs	r6, #255	; 0xff
 80007d0:	469b      	mov	fp, r3
 80007d2:	e785      	b.n	80006e0 <__aeabi_fdiv+0x30>
 80007d4:	0020      	movs	r0, r4
 80007d6:	f002 fafb 	bl	8002dd0 <__clzsi2>
 80007da:	2676      	movs	r6, #118	; 0x76
 80007dc:	1f43      	subs	r3, r0, #5
 80007de:	409c      	lsls	r4, r3
 80007e0:	2300      	movs	r3, #0
 80007e2:	4276      	negs	r6, r6
 80007e4:	1a36      	subs	r6, r6, r0
 80007e6:	4699      	mov	r9, r3
 80007e8:	469b      	mov	fp, r3
 80007ea:	e779      	b.n	80006e0 <__aeabi_fdiv+0x30>
 80007ec:	464a      	mov	r2, r9
 80007ee:	2303      	movs	r3, #3
 80007f0:	431a      	orrs	r2, r3
 80007f2:	4691      	mov	r9, r2
 80007f4:	2103      	movs	r1, #3
 80007f6:	e786      	b.n	8000706 <__aeabi_fdiv+0x56>
 80007f8:	0028      	movs	r0, r5
 80007fa:	f002 fae9 	bl	8002dd0 <__clzsi2>
 80007fe:	1f43      	subs	r3, r0, #5
 8000800:	1836      	adds	r6, r6, r0
 8000802:	409d      	lsls	r5, r3
 8000804:	3676      	adds	r6, #118	; 0x76
 8000806:	2100      	movs	r1, #0
 8000808:	e77d      	b.n	8000706 <__aeabi_fdiv+0x56>
 800080a:	2480      	movs	r4, #128	; 0x80
 800080c:	2300      	movs	r3, #0
 800080e:	03e4      	lsls	r4, r4, #15
 8000810:	22ff      	movs	r2, #255	; 0xff
 8000812:	e7ac      	b.n	800076e <__aeabi_fdiv+0xbe>
 8000814:	2500      	movs	r5, #0
 8000816:	2380      	movs	r3, #128	; 0x80
 8000818:	03db      	lsls	r3, r3, #15
 800081a:	421c      	tst	r4, r3
 800081c:	d028      	beq.n	8000870 <__aeabi_fdiv+0x1c0>
 800081e:	421d      	tst	r5, r3
 8000820:	d126      	bne.n	8000870 <__aeabi_fdiv+0x1c0>
 8000822:	432b      	orrs	r3, r5
 8000824:	025c      	lsls	r4, r3, #9
 8000826:	0a64      	lsrs	r4, r4, #9
 8000828:	4643      	mov	r3, r8
 800082a:	22ff      	movs	r2, #255	; 0xff
 800082c:	e79f      	b.n	800076e <__aeabi_fdiv+0xbe>
 800082e:	0162      	lsls	r2, r4, #5
 8000830:	016c      	lsls	r4, r5, #5
 8000832:	42a2      	cmp	r2, r4
 8000834:	d224      	bcs.n	8000880 <__aeabi_fdiv+0x1d0>
 8000836:	211b      	movs	r1, #27
 8000838:	2500      	movs	r5, #0
 800083a:	3e01      	subs	r6, #1
 800083c:	2701      	movs	r7, #1
 800083e:	0010      	movs	r0, r2
 8000840:	006d      	lsls	r5, r5, #1
 8000842:	0052      	lsls	r2, r2, #1
 8000844:	2800      	cmp	r0, #0
 8000846:	db01      	blt.n	800084c <__aeabi_fdiv+0x19c>
 8000848:	4294      	cmp	r4, r2
 800084a:	d801      	bhi.n	8000850 <__aeabi_fdiv+0x1a0>
 800084c:	1b12      	subs	r2, r2, r4
 800084e:	433d      	orrs	r5, r7
 8000850:	3901      	subs	r1, #1
 8000852:	2900      	cmp	r1, #0
 8000854:	d1f3      	bne.n	800083e <__aeabi_fdiv+0x18e>
 8000856:	0014      	movs	r4, r2
 8000858:	1e62      	subs	r2, r4, #1
 800085a:	4194      	sbcs	r4, r2
 800085c:	4325      	orrs	r5, r4
 800085e:	e76d      	b.n	800073c <__aeabi_fdiv+0x8c>
 8000860:	46ba      	mov	sl, r7
 8000862:	4659      	mov	r1, fp
 8000864:	0025      	movs	r5, r4
 8000866:	4653      	mov	r3, sl
 8000868:	2902      	cmp	r1, #2
 800086a:	d000      	beq.n	800086e <__aeabi_fdiv+0x1be>
 800086c:	e761      	b.n	8000732 <__aeabi_fdiv+0x82>
 800086e:	e77c      	b.n	800076a <__aeabi_fdiv+0xba>
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	03db      	lsls	r3, r3, #15
 8000874:	431c      	orrs	r4, r3
 8000876:	0264      	lsls	r4, r4, #9
 8000878:	0a64      	lsrs	r4, r4, #9
 800087a:	003b      	movs	r3, r7
 800087c:	22ff      	movs	r2, #255	; 0xff
 800087e:	e776      	b.n	800076e <__aeabi_fdiv+0xbe>
 8000880:	1b12      	subs	r2, r2, r4
 8000882:	211a      	movs	r1, #26
 8000884:	2501      	movs	r5, #1
 8000886:	e7d9      	b.n	800083c <__aeabi_fdiv+0x18c>
 8000888:	369e      	adds	r6, #158	; 0x9e
 800088a:	002a      	movs	r2, r5
 800088c:	40b5      	lsls	r5, r6
 800088e:	002c      	movs	r4, r5
 8000890:	40c2      	lsrs	r2, r0
 8000892:	1e65      	subs	r5, r4, #1
 8000894:	41ac      	sbcs	r4, r5
 8000896:	4314      	orrs	r4, r2
 8000898:	0762      	lsls	r2, r4, #29
 800089a:	d004      	beq.n	80008a6 <__aeabi_fdiv+0x1f6>
 800089c:	220f      	movs	r2, #15
 800089e:	4022      	ands	r2, r4
 80008a0:	2a04      	cmp	r2, #4
 80008a2:	d000      	beq.n	80008a6 <__aeabi_fdiv+0x1f6>
 80008a4:	3404      	adds	r4, #4
 80008a6:	0162      	lsls	r2, r4, #5
 80008a8:	d403      	bmi.n	80008b2 <__aeabi_fdiv+0x202>
 80008aa:	01a4      	lsls	r4, r4, #6
 80008ac:	0a64      	lsrs	r4, r4, #9
 80008ae:	2200      	movs	r2, #0
 80008b0:	e75d      	b.n	800076e <__aeabi_fdiv+0xbe>
 80008b2:	2201      	movs	r2, #1
 80008b4:	2400      	movs	r4, #0
 80008b6:	e75a      	b.n	800076e <__aeabi_fdiv+0xbe>
 80008b8:	2480      	movs	r4, #128	; 0x80
 80008ba:	03e4      	lsls	r4, r4, #15
 80008bc:	432c      	orrs	r4, r5
 80008be:	0264      	lsls	r4, r4, #9
 80008c0:	0a64      	lsrs	r4, r4, #9
 80008c2:	22ff      	movs	r2, #255	; 0xff
 80008c4:	e753      	b.n	800076e <__aeabi_fdiv+0xbe>
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	08005ce0 	.word	0x08005ce0
 80008cc:	f7ffffff 	.word	0xf7ffffff
 80008d0:	08005d20 	.word	0x08005d20

080008d4 <__eqsf2>:
 80008d4:	b570      	push	{r4, r5, r6, lr}
 80008d6:	0042      	lsls	r2, r0, #1
 80008d8:	024e      	lsls	r6, r1, #9
 80008da:	004c      	lsls	r4, r1, #1
 80008dc:	0245      	lsls	r5, r0, #9
 80008de:	0a6d      	lsrs	r5, r5, #9
 80008e0:	0e12      	lsrs	r2, r2, #24
 80008e2:	0fc3      	lsrs	r3, r0, #31
 80008e4:	0a76      	lsrs	r6, r6, #9
 80008e6:	0e24      	lsrs	r4, r4, #24
 80008e8:	0fc9      	lsrs	r1, r1, #31
 80008ea:	2aff      	cmp	r2, #255	; 0xff
 80008ec:	d00f      	beq.n	800090e <__eqsf2+0x3a>
 80008ee:	2cff      	cmp	r4, #255	; 0xff
 80008f0:	d011      	beq.n	8000916 <__eqsf2+0x42>
 80008f2:	2001      	movs	r0, #1
 80008f4:	42a2      	cmp	r2, r4
 80008f6:	d000      	beq.n	80008fa <__eqsf2+0x26>
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
 80008fa:	42b5      	cmp	r5, r6
 80008fc:	d1fc      	bne.n	80008f8 <__eqsf2+0x24>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d00d      	beq.n	800091e <__eqsf2+0x4a>
 8000902:	2a00      	cmp	r2, #0
 8000904:	d1f8      	bne.n	80008f8 <__eqsf2+0x24>
 8000906:	0028      	movs	r0, r5
 8000908:	1e45      	subs	r5, r0, #1
 800090a:	41a8      	sbcs	r0, r5
 800090c:	e7f4      	b.n	80008f8 <__eqsf2+0x24>
 800090e:	2001      	movs	r0, #1
 8000910:	2d00      	cmp	r5, #0
 8000912:	d1f1      	bne.n	80008f8 <__eqsf2+0x24>
 8000914:	e7eb      	b.n	80008ee <__eqsf2+0x1a>
 8000916:	2001      	movs	r0, #1
 8000918:	2e00      	cmp	r6, #0
 800091a:	d1ed      	bne.n	80008f8 <__eqsf2+0x24>
 800091c:	e7e9      	b.n	80008f2 <__eqsf2+0x1e>
 800091e:	2000      	movs	r0, #0
 8000920:	e7ea      	b.n	80008f8 <__eqsf2+0x24>
 8000922:	46c0      	nop			; (mov r8, r8)

08000924 <__gesf2>:
 8000924:	b570      	push	{r4, r5, r6, lr}
 8000926:	004a      	lsls	r2, r1, #1
 8000928:	024e      	lsls	r6, r1, #9
 800092a:	0245      	lsls	r5, r0, #9
 800092c:	0044      	lsls	r4, r0, #1
 800092e:	0a6d      	lsrs	r5, r5, #9
 8000930:	0e24      	lsrs	r4, r4, #24
 8000932:	0fc3      	lsrs	r3, r0, #31
 8000934:	0a76      	lsrs	r6, r6, #9
 8000936:	0e12      	lsrs	r2, r2, #24
 8000938:	0fc9      	lsrs	r1, r1, #31
 800093a:	2cff      	cmp	r4, #255	; 0xff
 800093c:	d015      	beq.n	800096a <__gesf2+0x46>
 800093e:	2aff      	cmp	r2, #255	; 0xff
 8000940:	d00e      	beq.n	8000960 <__gesf2+0x3c>
 8000942:	2c00      	cmp	r4, #0
 8000944:	d115      	bne.n	8000972 <__gesf2+0x4e>
 8000946:	2a00      	cmp	r2, #0
 8000948:	d101      	bne.n	800094e <__gesf2+0x2a>
 800094a:	2e00      	cmp	r6, #0
 800094c:	d01c      	beq.n	8000988 <__gesf2+0x64>
 800094e:	2d00      	cmp	r5, #0
 8000950:	d014      	beq.n	800097c <__gesf2+0x58>
 8000952:	428b      	cmp	r3, r1
 8000954:	d027      	beq.n	80009a6 <__gesf2+0x82>
 8000956:	2002      	movs	r0, #2
 8000958:	3b01      	subs	r3, #1
 800095a:	4018      	ands	r0, r3
 800095c:	3801      	subs	r0, #1
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	2e00      	cmp	r6, #0
 8000962:	d0ee      	beq.n	8000942 <__gesf2+0x1e>
 8000964:	2002      	movs	r0, #2
 8000966:	4240      	negs	r0, r0
 8000968:	e7f9      	b.n	800095e <__gesf2+0x3a>
 800096a:	2d00      	cmp	r5, #0
 800096c:	d1fa      	bne.n	8000964 <__gesf2+0x40>
 800096e:	2aff      	cmp	r2, #255	; 0xff
 8000970:	d00e      	beq.n	8000990 <__gesf2+0x6c>
 8000972:	2a00      	cmp	r2, #0
 8000974:	d10e      	bne.n	8000994 <__gesf2+0x70>
 8000976:	2e00      	cmp	r6, #0
 8000978:	d0ed      	beq.n	8000956 <__gesf2+0x32>
 800097a:	e00b      	b.n	8000994 <__gesf2+0x70>
 800097c:	2301      	movs	r3, #1
 800097e:	3901      	subs	r1, #1
 8000980:	4399      	bics	r1, r3
 8000982:	0008      	movs	r0, r1
 8000984:	3001      	adds	r0, #1
 8000986:	e7ea      	b.n	800095e <__gesf2+0x3a>
 8000988:	2000      	movs	r0, #0
 800098a:	2d00      	cmp	r5, #0
 800098c:	d0e7      	beq.n	800095e <__gesf2+0x3a>
 800098e:	e7e2      	b.n	8000956 <__gesf2+0x32>
 8000990:	2e00      	cmp	r6, #0
 8000992:	d1e7      	bne.n	8000964 <__gesf2+0x40>
 8000994:	428b      	cmp	r3, r1
 8000996:	d1de      	bne.n	8000956 <__gesf2+0x32>
 8000998:	4294      	cmp	r4, r2
 800099a:	dd05      	ble.n	80009a8 <__gesf2+0x84>
 800099c:	2102      	movs	r1, #2
 800099e:	1e58      	subs	r0, r3, #1
 80009a0:	4008      	ands	r0, r1
 80009a2:	3801      	subs	r0, #1
 80009a4:	e7db      	b.n	800095e <__gesf2+0x3a>
 80009a6:	2400      	movs	r4, #0
 80009a8:	42a2      	cmp	r2, r4
 80009aa:	dc04      	bgt.n	80009b6 <__gesf2+0x92>
 80009ac:	42b5      	cmp	r5, r6
 80009ae:	d8d2      	bhi.n	8000956 <__gesf2+0x32>
 80009b0:	2000      	movs	r0, #0
 80009b2:	42b5      	cmp	r5, r6
 80009b4:	d2d3      	bcs.n	800095e <__gesf2+0x3a>
 80009b6:	1e58      	subs	r0, r3, #1
 80009b8:	2301      	movs	r3, #1
 80009ba:	4398      	bics	r0, r3
 80009bc:	3001      	adds	r0, #1
 80009be:	e7ce      	b.n	800095e <__gesf2+0x3a>

080009c0 <__lesf2>:
 80009c0:	b530      	push	{r4, r5, lr}
 80009c2:	0042      	lsls	r2, r0, #1
 80009c4:	0244      	lsls	r4, r0, #9
 80009c6:	024d      	lsls	r5, r1, #9
 80009c8:	0fc3      	lsrs	r3, r0, #31
 80009ca:	0048      	lsls	r0, r1, #1
 80009cc:	0a64      	lsrs	r4, r4, #9
 80009ce:	0e12      	lsrs	r2, r2, #24
 80009d0:	0a6d      	lsrs	r5, r5, #9
 80009d2:	0e00      	lsrs	r0, r0, #24
 80009d4:	0fc9      	lsrs	r1, r1, #31
 80009d6:	2aff      	cmp	r2, #255	; 0xff
 80009d8:	d012      	beq.n	8000a00 <__lesf2+0x40>
 80009da:	28ff      	cmp	r0, #255	; 0xff
 80009dc:	d00c      	beq.n	80009f8 <__lesf2+0x38>
 80009de:	2a00      	cmp	r2, #0
 80009e0:	d112      	bne.n	8000a08 <__lesf2+0x48>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	d119      	bne.n	8000a1a <__lesf2+0x5a>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	d117      	bne.n	8000a1a <__lesf2+0x5a>
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	d02b      	beq.n	8000a46 <__lesf2+0x86>
 80009ee:	2002      	movs	r0, #2
 80009f0:	3b01      	subs	r3, #1
 80009f2:	4018      	ands	r0, r3
 80009f4:	3801      	subs	r0, #1
 80009f6:	e026      	b.n	8000a46 <__lesf2+0x86>
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d0f0      	beq.n	80009de <__lesf2+0x1e>
 80009fc:	2002      	movs	r0, #2
 80009fe:	e022      	b.n	8000a46 <__lesf2+0x86>
 8000a00:	2c00      	cmp	r4, #0
 8000a02:	d1fb      	bne.n	80009fc <__lesf2+0x3c>
 8000a04:	28ff      	cmp	r0, #255	; 0xff
 8000a06:	d01f      	beq.n	8000a48 <__lesf2+0x88>
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	d11f      	bne.n	8000a4c <__lesf2+0x8c>
 8000a0c:	2d00      	cmp	r5, #0
 8000a0e:	d11d      	bne.n	8000a4c <__lesf2+0x8c>
 8000a10:	2002      	movs	r0, #2
 8000a12:	3b01      	subs	r3, #1
 8000a14:	4018      	ands	r0, r3
 8000a16:	3801      	subs	r0, #1
 8000a18:	e015      	b.n	8000a46 <__lesf2+0x86>
 8000a1a:	2c00      	cmp	r4, #0
 8000a1c:	d00e      	beq.n	8000a3c <__lesf2+0x7c>
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d1e5      	bne.n	80009ee <__lesf2+0x2e>
 8000a22:	2200      	movs	r2, #0
 8000a24:	4290      	cmp	r0, r2
 8000a26:	dc04      	bgt.n	8000a32 <__lesf2+0x72>
 8000a28:	42ac      	cmp	r4, r5
 8000a2a:	d8e0      	bhi.n	80009ee <__lesf2+0x2e>
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	42ac      	cmp	r4, r5
 8000a30:	d209      	bcs.n	8000a46 <__lesf2+0x86>
 8000a32:	1e58      	subs	r0, r3, #1
 8000a34:	2301      	movs	r3, #1
 8000a36:	4398      	bics	r0, r3
 8000a38:	3001      	adds	r0, #1
 8000a3a:	e004      	b.n	8000a46 <__lesf2+0x86>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	3901      	subs	r1, #1
 8000a40:	4399      	bics	r1, r3
 8000a42:	0008      	movs	r0, r1
 8000a44:	3001      	adds	r0, #1
 8000a46:	bd30      	pop	{r4, r5, pc}
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d1d7      	bne.n	80009fc <__lesf2+0x3c>
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d1ce      	bne.n	80009ee <__lesf2+0x2e>
 8000a50:	4282      	cmp	r2, r0
 8000a52:	dde7      	ble.n	8000a24 <__lesf2+0x64>
 8000a54:	2102      	movs	r1, #2
 8000a56:	1e58      	subs	r0, r3, #1
 8000a58:	4008      	ands	r0, r1
 8000a5a:	3801      	subs	r0, #1
 8000a5c:	e7f3      	b.n	8000a46 <__lesf2+0x86>
 8000a5e:	46c0      	nop			; (mov r8, r8)

08000a60 <__aeabi_fmul>:
 8000a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a62:	464e      	mov	r6, r9
 8000a64:	4657      	mov	r7, sl
 8000a66:	4645      	mov	r5, r8
 8000a68:	46de      	mov	lr, fp
 8000a6a:	b5e0      	push	{r5, r6, r7, lr}
 8000a6c:	0243      	lsls	r3, r0, #9
 8000a6e:	0a5b      	lsrs	r3, r3, #9
 8000a70:	0045      	lsls	r5, r0, #1
 8000a72:	b083      	sub	sp, #12
 8000a74:	1c0f      	adds	r7, r1, #0
 8000a76:	4699      	mov	r9, r3
 8000a78:	0e2d      	lsrs	r5, r5, #24
 8000a7a:	0fc6      	lsrs	r6, r0, #31
 8000a7c:	2d00      	cmp	r5, #0
 8000a7e:	d057      	beq.n	8000b30 <__aeabi_fmul+0xd0>
 8000a80:	2dff      	cmp	r5, #255	; 0xff
 8000a82:	d024      	beq.n	8000ace <__aeabi_fmul+0x6e>
 8000a84:	2080      	movs	r0, #128	; 0x80
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	04c0      	lsls	r0, r0, #19
 8000a8a:	4318      	orrs	r0, r3
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	4681      	mov	r9, r0
 8000a90:	469a      	mov	sl, r3
 8000a92:	469b      	mov	fp, r3
 8000a94:	3d7f      	subs	r5, #127	; 0x7f
 8000a96:	027c      	lsls	r4, r7, #9
 8000a98:	007a      	lsls	r2, r7, #1
 8000a9a:	0ffb      	lsrs	r3, r7, #31
 8000a9c:	0a64      	lsrs	r4, r4, #9
 8000a9e:	0e12      	lsrs	r2, r2, #24
 8000aa0:	4698      	mov	r8, r3
 8000aa2:	d023      	beq.n	8000aec <__aeabi_fmul+0x8c>
 8000aa4:	2aff      	cmp	r2, #255	; 0xff
 8000aa6:	d04b      	beq.n	8000b40 <__aeabi_fmul+0xe0>
 8000aa8:	00e3      	lsls	r3, r4, #3
 8000aaa:	2480      	movs	r4, #128	; 0x80
 8000aac:	2000      	movs	r0, #0
 8000aae:	04e4      	lsls	r4, r4, #19
 8000ab0:	3a7f      	subs	r2, #127	; 0x7f
 8000ab2:	431c      	orrs	r4, r3
 8000ab4:	18ad      	adds	r5, r5, r2
 8000ab6:	1c6b      	adds	r3, r5, #1
 8000ab8:	4647      	mov	r7, r8
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	4653      	mov	r3, sl
 8000abe:	4077      	eors	r7, r6
 8000ac0:	003a      	movs	r2, r7
 8000ac2:	2b0f      	cmp	r3, #15
 8000ac4:	d848      	bhi.n	8000b58 <__aeabi_fmul+0xf8>
 8000ac6:	497d      	ldr	r1, [pc, #500]	; (8000cbc <__aeabi_fmul+0x25c>)
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	58cb      	ldr	r3, [r1, r3]
 8000acc:	469f      	mov	pc, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d000      	beq.n	8000ad4 <__aeabi_fmul+0x74>
 8000ad2:	e085      	b.n	8000be0 <__aeabi_fmul+0x180>
 8000ad4:	3308      	adds	r3, #8
 8000ad6:	469a      	mov	sl, r3
 8000ad8:	3b06      	subs	r3, #6
 8000ada:	469b      	mov	fp, r3
 8000adc:	027c      	lsls	r4, r7, #9
 8000ade:	007a      	lsls	r2, r7, #1
 8000ae0:	0ffb      	lsrs	r3, r7, #31
 8000ae2:	25ff      	movs	r5, #255	; 0xff
 8000ae4:	0a64      	lsrs	r4, r4, #9
 8000ae6:	0e12      	lsrs	r2, r2, #24
 8000ae8:	4698      	mov	r8, r3
 8000aea:	d1db      	bne.n	8000aa4 <__aeabi_fmul+0x44>
 8000aec:	2c00      	cmp	r4, #0
 8000aee:	d000      	beq.n	8000af2 <__aeabi_fmul+0x92>
 8000af0:	e090      	b.n	8000c14 <__aeabi_fmul+0x1b4>
 8000af2:	4652      	mov	r2, sl
 8000af4:	2301      	movs	r3, #1
 8000af6:	431a      	orrs	r2, r3
 8000af8:	4692      	mov	sl, r2
 8000afa:	2001      	movs	r0, #1
 8000afc:	e7db      	b.n	8000ab6 <__aeabi_fmul+0x56>
 8000afe:	464c      	mov	r4, r9
 8000b00:	4658      	mov	r0, fp
 8000b02:	0017      	movs	r7, r2
 8000b04:	2802      	cmp	r0, #2
 8000b06:	d024      	beq.n	8000b52 <__aeabi_fmul+0xf2>
 8000b08:	2803      	cmp	r0, #3
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_fmul+0xae>
 8000b0c:	e0cf      	b.n	8000cae <__aeabi_fmul+0x24e>
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2300      	movs	r3, #0
 8000b12:	2801      	cmp	r0, #1
 8000b14:	d14d      	bne.n	8000bb2 <__aeabi_fmul+0x152>
 8000b16:	0258      	lsls	r0, r3, #9
 8000b18:	05d2      	lsls	r2, r2, #23
 8000b1a:	0a40      	lsrs	r0, r0, #9
 8000b1c:	07ff      	lsls	r7, r7, #31
 8000b1e:	4310      	orrs	r0, r2
 8000b20:	4338      	orrs	r0, r7
 8000b22:	b003      	add	sp, #12
 8000b24:	bc3c      	pop	{r2, r3, r4, r5}
 8000b26:	4690      	mov	r8, r2
 8000b28:	4699      	mov	r9, r3
 8000b2a:	46a2      	mov	sl, r4
 8000b2c:	46ab      	mov	fp, r5
 8000b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d15b      	bne.n	8000bec <__aeabi_fmul+0x18c>
 8000b34:	2304      	movs	r3, #4
 8000b36:	469a      	mov	sl, r3
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	2500      	movs	r5, #0
 8000b3c:	469b      	mov	fp, r3
 8000b3e:	e7aa      	b.n	8000a96 <__aeabi_fmul+0x36>
 8000b40:	35ff      	adds	r5, #255	; 0xff
 8000b42:	2c00      	cmp	r4, #0
 8000b44:	d160      	bne.n	8000c08 <__aeabi_fmul+0x1a8>
 8000b46:	4652      	mov	r2, sl
 8000b48:	2302      	movs	r3, #2
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	4692      	mov	sl, r2
 8000b4e:	2002      	movs	r0, #2
 8000b50:	e7b1      	b.n	8000ab6 <__aeabi_fmul+0x56>
 8000b52:	22ff      	movs	r2, #255	; 0xff
 8000b54:	2300      	movs	r3, #0
 8000b56:	e7de      	b.n	8000b16 <__aeabi_fmul+0xb6>
 8000b58:	464b      	mov	r3, r9
 8000b5a:	0c1b      	lsrs	r3, r3, #16
 8000b5c:	469c      	mov	ip, r3
 8000b5e:	464b      	mov	r3, r9
 8000b60:	0426      	lsls	r6, r4, #16
 8000b62:	0c36      	lsrs	r6, r6, #16
 8000b64:	0418      	lsls	r0, r3, #16
 8000b66:	4661      	mov	r1, ip
 8000b68:	0033      	movs	r3, r6
 8000b6a:	0c22      	lsrs	r2, r4, #16
 8000b6c:	4664      	mov	r4, ip
 8000b6e:	0c00      	lsrs	r0, r0, #16
 8000b70:	4343      	muls	r3, r0
 8000b72:	434e      	muls	r6, r1
 8000b74:	4350      	muls	r0, r2
 8000b76:	4354      	muls	r4, r2
 8000b78:	1980      	adds	r0, r0, r6
 8000b7a:	0c1a      	lsrs	r2, r3, #16
 8000b7c:	1812      	adds	r2, r2, r0
 8000b7e:	4296      	cmp	r6, r2
 8000b80:	d903      	bls.n	8000b8a <__aeabi_fmul+0x12a>
 8000b82:	2180      	movs	r1, #128	; 0x80
 8000b84:	0249      	lsls	r1, r1, #9
 8000b86:	468c      	mov	ip, r1
 8000b88:	4464      	add	r4, ip
 8000b8a:	041b      	lsls	r3, r3, #16
 8000b8c:	0c1b      	lsrs	r3, r3, #16
 8000b8e:	0410      	lsls	r0, r2, #16
 8000b90:	18c0      	adds	r0, r0, r3
 8000b92:	0183      	lsls	r3, r0, #6
 8000b94:	1e5e      	subs	r6, r3, #1
 8000b96:	41b3      	sbcs	r3, r6
 8000b98:	0e80      	lsrs	r0, r0, #26
 8000b9a:	4318      	orrs	r0, r3
 8000b9c:	0c13      	lsrs	r3, r2, #16
 8000b9e:	191b      	adds	r3, r3, r4
 8000ba0:	019b      	lsls	r3, r3, #6
 8000ba2:	4303      	orrs	r3, r0
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	0123      	lsls	r3, r4, #4
 8000ba8:	d579      	bpl.n	8000c9e <__aeabi_fmul+0x23e>
 8000baa:	2301      	movs	r3, #1
 8000bac:	0862      	lsrs	r2, r4, #1
 8000bae:	401c      	ands	r4, r3
 8000bb0:	4314      	orrs	r4, r2
 8000bb2:	9a01      	ldr	r2, [sp, #4]
 8000bb4:	327f      	adds	r2, #127	; 0x7f
 8000bb6:	2a00      	cmp	r2, #0
 8000bb8:	dd4d      	ble.n	8000c56 <__aeabi_fmul+0x1f6>
 8000bba:	0763      	lsls	r3, r4, #29
 8000bbc:	d004      	beq.n	8000bc8 <__aeabi_fmul+0x168>
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	4023      	ands	r3, r4
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_fmul+0x168>
 8000bc6:	3404      	adds	r4, #4
 8000bc8:	0123      	lsls	r3, r4, #4
 8000bca:	d503      	bpl.n	8000bd4 <__aeabi_fmul+0x174>
 8000bcc:	4b3c      	ldr	r3, [pc, #240]	; (8000cc0 <__aeabi_fmul+0x260>)
 8000bce:	9a01      	ldr	r2, [sp, #4]
 8000bd0:	401c      	ands	r4, r3
 8000bd2:	3280      	adds	r2, #128	; 0x80
 8000bd4:	2afe      	cmp	r2, #254	; 0xfe
 8000bd6:	dcbc      	bgt.n	8000b52 <__aeabi_fmul+0xf2>
 8000bd8:	01a3      	lsls	r3, r4, #6
 8000bda:	0a5b      	lsrs	r3, r3, #9
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	e79a      	b.n	8000b16 <__aeabi_fmul+0xb6>
 8000be0:	230c      	movs	r3, #12
 8000be2:	469a      	mov	sl, r3
 8000be4:	3b09      	subs	r3, #9
 8000be6:	25ff      	movs	r5, #255	; 0xff
 8000be8:	469b      	mov	fp, r3
 8000bea:	e754      	b.n	8000a96 <__aeabi_fmul+0x36>
 8000bec:	0018      	movs	r0, r3
 8000bee:	f002 f8ef 	bl	8002dd0 <__clzsi2>
 8000bf2:	464a      	mov	r2, r9
 8000bf4:	1f43      	subs	r3, r0, #5
 8000bf6:	2576      	movs	r5, #118	; 0x76
 8000bf8:	409a      	lsls	r2, r3
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	426d      	negs	r5, r5
 8000bfe:	4691      	mov	r9, r2
 8000c00:	1a2d      	subs	r5, r5, r0
 8000c02:	469a      	mov	sl, r3
 8000c04:	469b      	mov	fp, r3
 8000c06:	e746      	b.n	8000a96 <__aeabi_fmul+0x36>
 8000c08:	4652      	mov	r2, sl
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	4692      	mov	sl, r2
 8000c10:	2003      	movs	r0, #3
 8000c12:	e750      	b.n	8000ab6 <__aeabi_fmul+0x56>
 8000c14:	0020      	movs	r0, r4
 8000c16:	f002 f8db 	bl	8002dd0 <__clzsi2>
 8000c1a:	1f43      	subs	r3, r0, #5
 8000c1c:	1a2d      	subs	r5, r5, r0
 8000c1e:	409c      	lsls	r4, r3
 8000c20:	3d76      	subs	r5, #118	; 0x76
 8000c22:	2000      	movs	r0, #0
 8000c24:	e747      	b.n	8000ab6 <__aeabi_fmul+0x56>
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	2700      	movs	r7, #0
 8000c2a:	03db      	lsls	r3, r3, #15
 8000c2c:	22ff      	movs	r2, #255	; 0xff
 8000c2e:	e772      	b.n	8000b16 <__aeabi_fmul+0xb6>
 8000c30:	4642      	mov	r2, r8
 8000c32:	e766      	b.n	8000b02 <__aeabi_fmul+0xa2>
 8000c34:	464c      	mov	r4, r9
 8000c36:	0032      	movs	r2, r6
 8000c38:	4658      	mov	r0, fp
 8000c3a:	e762      	b.n	8000b02 <__aeabi_fmul+0xa2>
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	464a      	mov	r2, r9
 8000c40:	03db      	lsls	r3, r3, #15
 8000c42:	421a      	tst	r2, r3
 8000c44:	d022      	beq.n	8000c8c <__aeabi_fmul+0x22c>
 8000c46:	421c      	tst	r4, r3
 8000c48:	d120      	bne.n	8000c8c <__aeabi_fmul+0x22c>
 8000c4a:	4323      	orrs	r3, r4
 8000c4c:	025b      	lsls	r3, r3, #9
 8000c4e:	0a5b      	lsrs	r3, r3, #9
 8000c50:	4647      	mov	r7, r8
 8000c52:	22ff      	movs	r2, #255	; 0xff
 8000c54:	e75f      	b.n	8000b16 <__aeabi_fmul+0xb6>
 8000c56:	2301      	movs	r3, #1
 8000c58:	1a9a      	subs	r2, r3, r2
 8000c5a:	2a1b      	cmp	r2, #27
 8000c5c:	dc21      	bgt.n	8000ca2 <__aeabi_fmul+0x242>
 8000c5e:	0023      	movs	r3, r4
 8000c60:	9901      	ldr	r1, [sp, #4]
 8000c62:	40d3      	lsrs	r3, r2
 8000c64:	319e      	adds	r1, #158	; 0x9e
 8000c66:	408c      	lsls	r4, r1
 8000c68:	001a      	movs	r2, r3
 8000c6a:	0023      	movs	r3, r4
 8000c6c:	1e5c      	subs	r4, r3, #1
 8000c6e:	41a3      	sbcs	r3, r4
 8000c70:	4313      	orrs	r3, r2
 8000c72:	075a      	lsls	r2, r3, #29
 8000c74:	d004      	beq.n	8000c80 <__aeabi_fmul+0x220>
 8000c76:	220f      	movs	r2, #15
 8000c78:	401a      	ands	r2, r3
 8000c7a:	2a04      	cmp	r2, #4
 8000c7c:	d000      	beq.n	8000c80 <__aeabi_fmul+0x220>
 8000c7e:	3304      	adds	r3, #4
 8000c80:	015a      	lsls	r2, r3, #5
 8000c82:	d411      	bmi.n	8000ca8 <__aeabi_fmul+0x248>
 8000c84:	019b      	lsls	r3, r3, #6
 8000c86:	0a5b      	lsrs	r3, r3, #9
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e744      	b.n	8000b16 <__aeabi_fmul+0xb6>
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	464a      	mov	r2, r9
 8000c90:	03db      	lsls	r3, r3, #15
 8000c92:	4313      	orrs	r3, r2
 8000c94:	025b      	lsls	r3, r3, #9
 8000c96:	0a5b      	lsrs	r3, r3, #9
 8000c98:	0037      	movs	r7, r6
 8000c9a:	22ff      	movs	r2, #255	; 0xff
 8000c9c:	e73b      	b.n	8000b16 <__aeabi_fmul+0xb6>
 8000c9e:	9501      	str	r5, [sp, #4]
 8000ca0:	e787      	b.n	8000bb2 <__aeabi_fmul+0x152>
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e736      	b.n	8000b16 <__aeabi_fmul+0xb6>
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2300      	movs	r3, #0
 8000cac:	e733      	b.n	8000b16 <__aeabi_fmul+0xb6>
 8000cae:	2380      	movs	r3, #128	; 0x80
 8000cb0:	03db      	lsls	r3, r3, #15
 8000cb2:	4323      	orrs	r3, r4
 8000cb4:	025b      	lsls	r3, r3, #9
 8000cb6:	0a5b      	lsrs	r3, r3, #9
 8000cb8:	22ff      	movs	r2, #255	; 0xff
 8000cba:	e72c      	b.n	8000b16 <__aeabi_fmul+0xb6>
 8000cbc:	08005d60 	.word	0x08005d60
 8000cc0:	f7ffffff 	.word	0xf7ffffff

08000cc4 <__aeabi_fsub>:
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	4647      	mov	r7, r8
 8000cc8:	46ce      	mov	lr, r9
 8000cca:	0044      	lsls	r4, r0, #1
 8000ccc:	0fc2      	lsrs	r2, r0, #31
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	0247      	lsls	r7, r0, #9
 8000cd2:	0248      	lsls	r0, r1, #9
 8000cd4:	0a40      	lsrs	r0, r0, #9
 8000cd6:	4684      	mov	ip, r0
 8000cd8:	4666      	mov	r6, ip
 8000cda:	0048      	lsls	r0, r1, #1
 8000cdc:	0a7f      	lsrs	r7, r7, #9
 8000cde:	0e24      	lsrs	r4, r4, #24
 8000ce0:	00f6      	lsls	r6, r6, #3
 8000ce2:	0025      	movs	r5, r4
 8000ce4:	4690      	mov	r8, r2
 8000ce6:	00fb      	lsls	r3, r7, #3
 8000ce8:	0e00      	lsrs	r0, r0, #24
 8000cea:	0fc9      	lsrs	r1, r1, #31
 8000cec:	46b1      	mov	r9, r6
 8000cee:	28ff      	cmp	r0, #255	; 0xff
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_fsub+0x30>
 8000cf2:	e085      	b.n	8000e00 <__aeabi_fsub+0x13c>
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	4071      	eors	r1, r6
 8000cf8:	1a26      	subs	r6, r4, r0
 8000cfa:	4291      	cmp	r1, r2
 8000cfc:	d057      	beq.n	8000dae <__aeabi_fsub+0xea>
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	dd43      	ble.n	8000d8a <__aeabi_fsub+0xc6>
 8000d02:	2800      	cmp	r0, #0
 8000d04:	d000      	beq.n	8000d08 <__aeabi_fsub+0x44>
 8000d06:	e07f      	b.n	8000e08 <__aeabi_fsub+0x144>
 8000d08:	4649      	mov	r1, r9
 8000d0a:	2900      	cmp	r1, #0
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_fsub+0x4c>
 8000d0e:	e0aa      	b.n	8000e66 <__aeabi_fsub+0x1a2>
 8000d10:	3e01      	subs	r6, #1
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d000      	beq.n	8000d18 <__aeabi_fsub+0x54>
 8000d16:	e0f7      	b.n	8000f08 <__aeabi_fsub+0x244>
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	015a      	lsls	r2, r3, #5
 8000d1c:	d400      	bmi.n	8000d20 <__aeabi_fsub+0x5c>
 8000d1e:	e08b      	b.n	8000e38 <__aeabi_fsub+0x174>
 8000d20:	019b      	lsls	r3, r3, #6
 8000d22:	099c      	lsrs	r4, r3, #6
 8000d24:	0020      	movs	r0, r4
 8000d26:	f002 f853 	bl	8002dd0 <__clzsi2>
 8000d2a:	3805      	subs	r0, #5
 8000d2c:	4084      	lsls	r4, r0
 8000d2e:	4285      	cmp	r5, r0
 8000d30:	dd00      	ble.n	8000d34 <__aeabi_fsub+0x70>
 8000d32:	e0d3      	b.n	8000edc <__aeabi_fsub+0x218>
 8000d34:	1b45      	subs	r5, r0, r5
 8000d36:	0023      	movs	r3, r4
 8000d38:	2020      	movs	r0, #32
 8000d3a:	3501      	adds	r5, #1
 8000d3c:	40eb      	lsrs	r3, r5
 8000d3e:	1b45      	subs	r5, r0, r5
 8000d40:	40ac      	lsls	r4, r5
 8000d42:	1e62      	subs	r2, r4, #1
 8000d44:	4194      	sbcs	r4, r2
 8000d46:	4323      	orrs	r3, r4
 8000d48:	2407      	movs	r4, #7
 8000d4a:	2500      	movs	r5, #0
 8000d4c:	401c      	ands	r4, r3
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4641      	mov	r1, r8
 8000d52:	400a      	ands	r2, r1
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d004      	beq.n	8000d62 <__aeabi_fsub+0x9e>
 8000d58:	210f      	movs	r1, #15
 8000d5a:	4019      	ands	r1, r3
 8000d5c:	2904      	cmp	r1, #4
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_fsub+0x9e>
 8000d60:	3304      	adds	r3, #4
 8000d62:	0159      	lsls	r1, r3, #5
 8000d64:	d400      	bmi.n	8000d68 <__aeabi_fsub+0xa4>
 8000d66:	e080      	b.n	8000e6a <__aeabi_fsub+0x1a6>
 8000d68:	3501      	adds	r5, #1
 8000d6a:	b2ec      	uxtb	r4, r5
 8000d6c:	2dff      	cmp	r5, #255	; 0xff
 8000d6e:	d000      	beq.n	8000d72 <__aeabi_fsub+0xae>
 8000d70:	e0a3      	b.n	8000eba <__aeabi_fsub+0x1f6>
 8000d72:	24ff      	movs	r4, #255	; 0xff
 8000d74:	2300      	movs	r3, #0
 8000d76:	025b      	lsls	r3, r3, #9
 8000d78:	05e4      	lsls	r4, r4, #23
 8000d7a:	0a58      	lsrs	r0, r3, #9
 8000d7c:	07d2      	lsls	r2, r2, #31
 8000d7e:	4320      	orrs	r0, r4
 8000d80:	4310      	orrs	r0, r2
 8000d82:	bc0c      	pop	{r2, r3}
 8000d84:	4690      	mov	r8, r2
 8000d86:	4699      	mov	r9, r3
 8000d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d174      	bne.n	8000e78 <__aeabi_fsub+0x1b4>
 8000d8e:	1c60      	adds	r0, r4, #1
 8000d90:	b2c0      	uxtb	r0, r0
 8000d92:	2801      	cmp	r0, #1
 8000d94:	dc00      	bgt.n	8000d98 <__aeabi_fsub+0xd4>
 8000d96:	e0a7      	b.n	8000ee8 <__aeabi_fsub+0x224>
 8000d98:	464a      	mov	r2, r9
 8000d9a:	1a9c      	subs	r4, r3, r2
 8000d9c:	0162      	lsls	r2, r4, #5
 8000d9e:	d500      	bpl.n	8000da2 <__aeabi_fsub+0xde>
 8000da0:	e0b6      	b.n	8000f10 <__aeabi_fsub+0x24c>
 8000da2:	2c00      	cmp	r4, #0
 8000da4:	d1be      	bne.n	8000d24 <__aeabi_fsub+0x60>
 8000da6:	2200      	movs	r2, #0
 8000da8:	2400      	movs	r4, #0
 8000daa:	2300      	movs	r3, #0
 8000dac:	e7e3      	b.n	8000d76 <__aeabi_fsub+0xb2>
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	dc00      	bgt.n	8000db4 <__aeabi_fsub+0xf0>
 8000db2:	e085      	b.n	8000ec0 <__aeabi_fsub+0x1fc>
 8000db4:	2800      	cmp	r0, #0
 8000db6:	d046      	beq.n	8000e46 <__aeabi_fsub+0x182>
 8000db8:	2cff      	cmp	r4, #255	; 0xff
 8000dba:	d049      	beq.n	8000e50 <__aeabi_fsub+0x18c>
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	4648      	mov	r0, r9
 8000dc0:	04d2      	lsls	r2, r2, #19
 8000dc2:	4310      	orrs	r0, r2
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2e1b      	cmp	r6, #27
 8000dca:	dc09      	bgt.n	8000de0 <__aeabi_fsub+0x11c>
 8000dcc:	2020      	movs	r0, #32
 8000dce:	464c      	mov	r4, r9
 8000dd0:	1b80      	subs	r0, r0, r6
 8000dd2:	4084      	lsls	r4, r0
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	0020      	movs	r0, r4
 8000dd8:	40f2      	lsrs	r2, r6
 8000dda:	1e44      	subs	r4, r0, #1
 8000ddc:	41a0      	sbcs	r0, r4
 8000dde:	4302      	orrs	r2, r0
 8000de0:	189b      	adds	r3, r3, r2
 8000de2:	015a      	lsls	r2, r3, #5
 8000de4:	d528      	bpl.n	8000e38 <__aeabi_fsub+0x174>
 8000de6:	3501      	adds	r5, #1
 8000de8:	2dff      	cmp	r5, #255	; 0xff
 8000dea:	d100      	bne.n	8000dee <__aeabi_fsub+0x12a>
 8000dec:	e0a8      	b.n	8000f40 <__aeabi_fsub+0x27c>
 8000dee:	2201      	movs	r2, #1
 8000df0:	2407      	movs	r4, #7
 8000df2:	4994      	ldr	r1, [pc, #592]	; (8001044 <__aeabi_fsub+0x380>)
 8000df4:	401a      	ands	r2, r3
 8000df6:	085b      	lsrs	r3, r3, #1
 8000df8:	400b      	ands	r3, r1
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	401c      	ands	r4, r3
 8000dfe:	e7a6      	b.n	8000d4e <__aeabi_fsub+0x8a>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d000      	beq.n	8000e06 <__aeabi_fsub+0x142>
 8000e04:	e778      	b.n	8000cf8 <__aeabi_fsub+0x34>
 8000e06:	e775      	b.n	8000cf4 <__aeabi_fsub+0x30>
 8000e08:	2cff      	cmp	r4, #255	; 0xff
 8000e0a:	d054      	beq.n	8000eb6 <__aeabi_fsub+0x1f2>
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	4649      	mov	r1, r9
 8000e10:	04d2      	lsls	r2, r2, #19
 8000e12:	4311      	orrs	r1, r2
 8000e14:	4689      	mov	r9, r1
 8000e16:	2201      	movs	r2, #1
 8000e18:	2e1b      	cmp	r6, #27
 8000e1a:	dc09      	bgt.n	8000e30 <__aeabi_fsub+0x16c>
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	4648      	mov	r0, r9
 8000e20:	1b89      	subs	r1, r1, r6
 8000e22:	4088      	lsls	r0, r1
 8000e24:	464a      	mov	r2, r9
 8000e26:	0001      	movs	r1, r0
 8000e28:	40f2      	lsrs	r2, r6
 8000e2a:	1e48      	subs	r0, r1, #1
 8000e2c:	4181      	sbcs	r1, r0
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	1a9b      	subs	r3, r3, r2
 8000e32:	015a      	lsls	r2, r3, #5
 8000e34:	d500      	bpl.n	8000e38 <__aeabi_fsub+0x174>
 8000e36:	e773      	b.n	8000d20 <__aeabi_fsub+0x5c>
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4641      	mov	r1, r8
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	0759      	lsls	r1, r3, #29
 8000e40:	d000      	beq.n	8000e44 <__aeabi_fsub+0x180>
 8000e42:	e789      	b.n	8000d58 <__aeabi_fsub+0x94>
 8000e44:	e011      	b.n	8000e6a <__aeabi_fsub+0x1a6>
 8000e46:	4648      	mov	r0, r9
 8000e48:	2800      	cmp	r0, #0
 8000e4a:	d158      	bne.n	8000efe <__aeabi_fsub+0x23a>
 8000e4c:	2cff      	cmp	r4, #255	; 0xff
 8000e4e:	d10c      	bne.n	8000e6a <__aeabi_fsub+0x1a6>
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d100      	bne.n	8000e58 <__aeabi_fsub+0x194>
 8000e56:	e78c      	b.n	8000d72 <__aeabi_fsub+0xae>
 8000e58:	2080      	movs	r0, #128	; 0x80
 8000e5a:	03c0      	lsls	r0, r0, #15
 8000e5c:	4303      	orrs	r3, r0
 8000e5e:	025b      	lsls	r3, r3, #9
 8000e60:	0a5b      	lsrs	r3, r3, #9
 8000e62:	24ff      	movs	r4, #255	; 0xff
 8000e64:	e787      	b.n	8000d76 <__aeabi_fsub+0xb2>
 8000e66:	2cff      	cmp	r4, #255	; 0xff
 8000e68:	d025      	beq.n	8000eb6 <__aeabi_fsub+0x1f2>
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	2dff      	cmp	r5, #255	; 0xff
 8000e6e:	d0f0      	beq.n	8000e52 <__aeabi_fsub+0x18e>
 8000e70:	025b      	lsls	r3, r3, #9
 8000e72:	0a5b      	lsrs	r3, r3, #9
 8000e74:	b2ec      	uxtb	r4, r5
 8000e76:	e77e      	b.n	8000d76 <__aeabi_fsub+0xb2>
 8000e78:	2c00      	cmp	r4, #0
 8000e7a:	d04d      	beq.n	8000f18 <__aeabi_fsub+0x254>
 8000e7c:	28ff      	cmp	r0, #255	; 0xff
 8000e7e:	d018      	beq.n	8000eb2 <__aeabi_fsub+0x1ee>
 8000e80:	2480      	movs	r4, #128	; 0x80
 8000e82:	04e4      	lsls	r4, r4, #19
 8000e84:	4272      	negs	r2, r6
 8000e86:	4323      	orrs	r3, r4
 8000e88:	2a1b      	cmp	r2, #27
 8000e8a:	dd00      	ble.n	8000e8e <__aeabi_fsub+0x1ca>
 8000e8c:	e0c4      	b.n	8001018 <__aeabi_fsub+0x354>
 8000e8e:	001c      	movs	r4, r3
 8000e90:	2520      	movs	r5, #32
 8000e92:	40d4      	lsrs	r4, r2
 8000e94:	1aaa      	subs	r2, r5, r2
 8000e96:	4093      	lsls	r3, r2
 8000e98:	1e5a      	subs	r2, r3, #1
 8000e9a:	4193      	sbcs	r3, r2
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	464a      	mov	r2, r9
 8000ea0:	0005      	movs	r5, r0
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	4688      	mov	r8, r1
 8000ea6:	e738      	b.n	8000d1a <__aeabi_fsub+0x56>
 8000ea8:	1c72      	adds	r2, r6, #1
 8000eaa:	d0f8      	beq.n	8000e9e <__aeabi_fsub+0x1da>
 8000eac:	43f2      	mvns	r2, r6
 8000eae:	28ff      	cmp	r0, #255	; 0xff
 8000eb0:	d1ea      	bne.n	8000e88 <__aeabi_fsub+0x1c4>
 8000eb2:	000a      	movs	r2, r1
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	25ff      	movs	r5, #255	; 0xff
 8000eb8:	e7d7      	b.n	8000e6a <__aeabi_fsub+0x1a6>
 8000eba:	019b      	lsls	r3, r3, #6
 8000ebc:	0a5b      	lsrs	r3, r3, #9
 8000ebe:	e75a      	b.n	8000d76 <__aeabi_fsub+0xb2>
 8000ec0:	2e00      	cmp	r6, #0
 8000ec2:	d141      	bne.n	8000f48 <__aeabi_fsub+0x284>
 8000ec4:	1c65      	adds	r5, r4, #1
 8000ec6:	b2e9      	uxtb	r1, r5
 8000ec8:	2901      	cmp	r1, #1
 8000eca:	dd45      	ble.n	8000f58 <__aeabi_fsub+0x294>
 8000ecc:	2dff      	cmp	r5, #255	; 0xff
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_fsub+0x20e>
 8000ed0:	e74f      	b.n	8000d72 <__aeabi_fsub+0xae>
 8000ed2:	2407      	movs	r4, #7
 8000ed4:	444b      	add	r3, r9
 8000ed6:	085b      	lsrs	r3, r3, #1
 8000ed8:	401c      	ands	r4, r3
 8000eda:	e738      	b.n	8000d4e <__aeabi_fsub+0x8a>
 8000edc:	2207      	movs	r2, #7
 8000ede:	4b5a      	ldr	r3, [pc, #360]	; (8001048 <__aeabi_fsub+0x384>)
 8000ee0:	1a2d      	subs	r5, r5, r0
 8000ee2:	4023      	ands	r3, r4
 8000ee4:	4014      	ands	r4, r2
 8000ee6:	e732      	b.n	8000d4e <__aeabi_fsub+0x8a>
 8000ee8:	2c00      	cmp	r4, #0
 8000eea:	d11d      	bne.n	8000f28 <__aeabi_fsub+0x264>
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d17a      	bne.n	8000fe6 <__aeabi_fsub+0x322>
 8000ef0:	464b      	mov	r3, r9
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_fsub+0x234>
 8000ef6:	e091      	b.n	800101c <__aeabi_fsub+0x358>
 8000ef8:	000a      	movs	r2, r1
 8000efa:	2500      	movs	r5, #0
 8000efc:	e7b5      	b.n	8000e6a <__aeabi_fsub+0x1a6>
 8000efe:	3e01      	subs	r6, #1
 8000f00:	2e00      	cmp	r6, #0
 8000f02:	d119      	bne.n	8000f38 <__aeabi_fsub+0x274>
 8000f04:	444b      	add	r3, r9
 8000f06:	e76c      	b.n	8000de2 <__aeabi_fsub+0x11e>
 8000f08:	2cff      	cmp	r4, #255	; 0xff
 8000f0a:	d184      	bne.n	8000e16 <__aeabi_fsub+0x152>
 8000f0c:	25ff      	movs	r5, #255	; 0xff
 8000f0e:	e7ac      	b.n	8000e6a <__aeabi_fsub+0x1a6>
 8000f10:	464a      	mov	r2, r9
 8000f12:	4688      	mov	r8, r1
 8000f14:	1ad4      	subs	r4, r2, r3
 8000f16:	e705      	b.n	8000d24 <__aeabi_fsub+0x60>
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1c5      	bne.n	8000ea8 <__aeabi_fsub+0x1e4>
 8000f1c:	000a      	movs	r2, r1
 8000f1e:	28ff      	cmp	r0, #255	; 0xff
 8000f20:	d0c8      	beq.n	8000eb4 <__aeabi_fsub+0x1f0>
 8000f22:	0005      	movs	r5, r0
 8000f24:	464b      	mov	r3, r9
 8000f26:	e7a0      	b.n	8000e6a <__aeabi_fsub+0x1a6>
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d149      	bne.n	8000fc0 <__aeabi_fsub+0x2fc>
 8000f2c:	464b      	mov	r3, r9
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d077      	beq.n	8001022 <__aeabi_fsub+0x35e>
 8000f32:	000a      	movs	r2, r1
 8000f34:	25ff      	movs	r5, #255	; 0xff
 8000f36:	e798      	b.n	8000e6a <__aeabi_fsub+0x1a6>
 8000f38:	2cff      	cmp	r4, #255	; 0xff
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_fsub+0x27a>
 8000f3c:	e743      	b.n	8000dc6 <__aeabi_fsub+0x102>
 8000f3e:	e787      	b.n	8000e50 <__aeabi_fsub+0x18c>
 8000f40:	000a      	movs	r2, r1
 8000f42:	24ff      	movs	r4, #255	; 0xff
 8000f44:	2300      	movs	r3, #0
 8000f46:	e716      	b.n	8000d76 <__aeabi_fsub+0xb2>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d115      	bne.n	8000f78 <__aeabi_fsub+0x2b4>
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d157      	bne.n	8001000 <__aeabi_fsub+0x33c>
 8000f50:	28ff      	cmp	r0, #255	; 0xff
 8000f52:	d1e6      	bne.n	8000f22 <__aeabi_fsub+0x25e>
 8000f54:	464b      	mov	r3, r9
 8000f56:	e77b      	b.n	8000e50 <__aeabi_fsub+0x18c>
 8000f58:	2c00      	cmp	r4, #0
 8000f5a:	d120      	bne.n	8000f9e <__aeabi_fsub+0x2da>
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d057      	beq.n	8001010 <__aeabi_fsub+0x34c>
 8000f60:	4649      	mov	r1, r9
 8000f62:	2900      	cmp	r1, #0
 8000f64:	d053      	beq.n	800100e <__aeabi_fsub+0x34a>
 8000f66:	444b      	add	r3, r9
 8000f68:	015a      	lsls	r2, r3, #5
 8000f6a:	d568      	bpl.n	800103e <__aeabi_fsub+0x37a>
 8000f6c:	2407      	movs	r4, #7
 8000f6e:	4a36      	ldr	r2, [pc, #216]	; (8001048 <__aeabi_fsub+0x384>)
 8000f70:	401c      	ands	r4, r3
 8000f72:	2501      	movs	r5, #1
 8000f74:	4013      	ands	r3, r2
 8000f76:	e6ea      	b.n	8000d4e <__aeabi_fsub+0x8a>
 8000f78:	28ff      	cmp	r0, #255	; 0xff
 8000f7a:	d0eb      	beq.n	8000f54 <__aeabi_fsub+0x290>
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	04d2      	lsls	r2, r2, #19
 8000f80:	4276      	negs	r6, r6
 8000f82:	4313      	orrs	r3, r2
 8000f84:	2e1b      	cmp	r6, #27
 8000f86:	dc53      	bgt.n	8001030 <__aeabi_fsub+0x36c>
 8000f88:	2520      	movs	r5, #32
 8000f8a:	1bad      	subs	r5, r5, r6
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	40ab      	lsls	r3, r5
 8000f90:	40f2      	lsrs	r2, r6
 8000f92:	1e5c      	subs	r4, r3, #1
 8000f94:	41a3      	sbcs	r3, r4
 8000f96:	4313      	orrs	r3, r2
 8000f98:	444b      	add	r3, r9
 8000f9a:	0005      	movs	r5, r0
 8000f9c:	e721      	b.n	8000de2 <__aeabi_fsub+0x11e>
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0d8      	beq.n	8000f54 <__aeabi_fsub+0x290>
 8000fa2:	4649      	mov	r1, r9
 8000fa4:	2900      	cmp	r1, #0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_fsub+0x2e6>
 8000fa8:	e752      	b.n	8000e50 <__aeabi_fsub+0x18c>
 8000faa:	2180      	movs	r1, #128	; 0x80
 8000fac:	03c9      	lsls	r1, r1, #15
 8000fae:	420f      	tst	r7, r1
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_fsub+0x2f0>
 8000fb2:	e74d      	b.n	8000e50 <__aeabi_fsub+0x18c>
 8000fb4:	4660      	mov	r0, ip
 8000fb6:	4208      	tst	r0, r1
 8000fb8:	d000      	beq.n	8000fbc <__aeabi_fsub+0x2f8>
 8000fba:	e749      	b.n	8000e50 <__aeabi_fsub+0x18c>
 8000fbc:	464b      	mov	r3, r9
 8000fbe:	e747      	b.n	8000e50 <__aeabi_fsub+0x18c>
 8000fc0:	4648      	mov	r0, r9
 8000fc2:	25ff      	movs	r5, #255	; 0xff
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d100      	bne.n	8000fca <__aeabi_fsub+0x306>
 8000fc8:	e74f      	b.n	8000e6a <__aeabi_fsub+0x1a6>
 8000fca:	2280      	movs	r2, #128	; 0x80
 8000fcc:	03d2      	lsls	r2, r2, #15
 8000fce:	4217      	tst	r7, r2
 8000fd0:	d004      	beq.n	8000fdc <__aeabi_fsub+0x318>
 8000fd2:	4660      	mov	r0, ip
 8000fd4:	4210      	tst	r0, r2
 8000fd6:	d101      	bne.n	8000fdc <__aeabi_fsub+0x318>
 8000fd8:	464b      	mov	r3, r9
 8000fda:	4688      	mov	r8, r1
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4641      	mov	r1, r8
 8000fe0:	25ff      	movs	r5, #255	; 0xff
 8000fe2:	400a      	ands	r2, r1
 8000fe4:	e741      	b.n	8000e6a <__aeabi_fsub+0x1a6>
 8000fe6:	4648      	mov	r0, r9
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d01f      	beq.n	800102c <__aeabi_fsub+0x368>
 8000fec:	1a1a      	subs	r2, r3, r0
 8000fee:	0150      	lsls	r0, r2, #5
 8000ff0:	d520      	bpl.n	8001034 <__aeabi_fsub+0x370>
 8000ff2:	464a      	mov	r2, r9
 8000ff4:	2407      	movs	r4, #7
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	401c      	ands	r4, r3
 8000ffa:	4688      	mov	r8, r1
 8000ffc:	2500      	movs	r5, #0
 8000ffe:	e6a6      	b.n	8000d4e <__aeabi_fsub+0x8a>
 8001000:	1c74      	adds	r4, r6, #1
 8001002:	d0c9      	beq.n	8000f98 <__aeabi_fsub+0x2d4>
 8001004:	43f6      	mvns	r6, r6
 8001006:	28ff      	cmp	r0, #255	; 0xff
 8001008:	d1bc      	bne.n	8000f84 <__aeabi_fsub+0x2c0>
 800100a:	464b      	mov	r3, r9
 800100c:	e720      	b.n	8000e50 <__aeabi_fsub+0x18c>
 800100e:	4699      	mov	r9, r3
 8001010:	464b      	mov	r3, r9
 8001012:	2500      	movs	r5, #0
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	e72b      	b.n	8000e70 <__aeabi_fsub+0x1ac>
 8001018:	2301      	movs	r3, #1
 800101a:	e740      	b.n	8000e9e <__aeabi_fsub+0x1da>
 800101c:	2200      	movs	r2, #0
 800101e:	2300      	movs	r3, #0
 8001020:	e6a9      	b.n	8000d76 <__aeabi_fsub+0xb2>
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	2200      	movs	r2, #0
 8001026:	03db      	lsls	r3, r3, #15
 8001028:	24ff      	movs	r4, #255	; 0xff
 800102a:	e6a4      	b.n	8000d76 <__aeabi_fsub+0xb2>
 800102c:	2500      	movs	r5, #0
 800102e:	e71c      	b.n	8000e6a <__aeabi_fsub+0x1a6>
 8001030:	2301      	movs	r3, #1
 8001032:	e7b1      	b.n	8000f98 <__aeabi_fsub+0x2d4>
 8001034:	2a00      	cmp	r2, #0
 8001036:	d0f1      	beq.n	800101c <__aeabi_fsub+0x358>
 8001038:	0013      	movs	r3, r2
 800103a:	2500      	movs	r5, #0
 800103c:	e6fc      	b.n	8000e38 <__aeabi_fsub+0x174>
 800103e:	2500      	movs	r5, #0
 8001040:	e6fa      	b.n	8000e38 <__aeabi_fsub+0x174>
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	7dffffff 	.word	0x7dffffff
 8001048:	fbffffff 	.word	0xfbffffff

0800104c <__aeabi_f2iz>:
 800104c:	0241      	lsls	r1, r0, #9
 800104e:	0042      	lsls	r2, r0, #1
 8001050:	0fc3      	lsrs	r3, r0, #31
 8001052:	0a49      	lsrs	r1, r1, #9
 8001054:	0e12      	lsrs	r2, r2, #24
 8001056:	2000      	movs	r0, #0
 8001058:	2a7e      	cmp	r2, #126	; 0x7e
 800105a:	d90d      	bls.n	8001078 <__aeabi_f2iz+0x2c>
 800105c:	2a9d      	cmp	r2, #157	; 0x9d
 800105e:	d80c      	bhi.n	800107a <__aeabi_f2iz+0x2e>
 8001060:	2080      	movs	r0, #128	; 0x80
 8001062:	0400      	lsls	r0, r0, #16
 8001064:	4301      	orrs	r1, r0
 8001066:	2a95      	cmp	r2, #149	; 0x95
 8001068:	dc0a      	bgt.n	8001080 <__aeabi_f2iz+0x34>
 800106a:	2096      	movs	r0, #150	; 0x96
 800106c:	1a82      	subs	r2, r0, r2
 800106e:	40d1      	lsrs	r1, r2
 8001070:	4248      	negs	r0, r1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d100      	bne.n	8001078 <__aeabi_f2iz+0x2c>
 8001076:	0008      	movs	r0, r1
 8001078:	4770      	bx	lr
 800107a:	4a03      	ldr	r2, [pc, #12]	; (8001088 <__aeabi_f2iz+0x3c>)
 800107c:	1898      	adds	r0, r3, r2
 800107e:	e7fb      	b.n	8001078 <__aeabi_f2iz+0x2c>
 8001080:	3a96      	subs	r2, #150	; 0x96
 8001082:	4091      	lsls	r1, r2
 8001084:	e7f4      	b.n	8001070 <__aeabi_f2iz+0x24>
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	7fffffff 	.word	0x7fffffff

0800108c <__aeabi_i2f>:
 800108c:	b570      	push	{r4, r5, r6, lr}
 800108e:	2800      	cmp	r0, #0
 8001090:	d03d      	beq.n	800110e <__aeabi_i2f+0x82>
 8001092:	17c3      	asrs	r3, r0, #31
 8001094:	18c5      	adds	r5, r0, r3
 8001096:	405d      	eors	r5, r3
 8001098:	0fc4      	lsrs	r4, r0, #31
 800109a:	0028      	movs	r0, r5
 800109c:	f001 fe98 	bl	8002dd0 <__clzsi2>
 80010a0:	229e      	movs	r2, #158	; 0x9e
 80010a2:	1a12      	subs	r2, r2, r0
 80010a4:	2a96      	cmp	r2, #150	; 0x96
 80010a6:	dc07      	bgt.n	80010b8 <__aeabi_i2f+0x2c>
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	2808      	cmp	r0, #8
 80010ac:	dd33      	ble.n	8001116 <__aeabi_i2f+0x8a>
 80010ae:	3808      	subs	r0, #8
 80010b0:	4085      	lsls	r5, r0
 80010b2:	0268      	lsls	r0, r5, #9
 80010b4:	0a40      	lsrs	r0, r0, #9
 80010b6:	e023      	b.n	8001100 <__aeabi_i2f+0x74>
 80010b8:	2a99      	cmp	r2, #153	; 0x99
 80010ba:	dd0b      	ble.n	80010d4 <__aeabi_i2f+0x48>
 80010bc:	2305      	movs	r3, #5
 80010be:	0029      	movs	r1, r5
 80010c0:	1a1b      	subs	r3, r3, r0
 80010c2:	40d9      	lsrs	r1, r3
 80010c4:	0003      	movs	r3, r0
 80010c6:	331b      	adds	r3, #27
 80010c8:	409d      	lsls	r5, r3
 80010ca:	002b      	movs	r3, r5
 80010cc:	1e5d      	subs	r5, r3, #1
 80010ce:	41ab      	sbcs	r3, r5
 80010d0:	4319      	orrs	r1, r3
 80010d2:	000d      	movs	r5, r1
 80010d4:	2805      	cmp	r0, #5
 80010d6:	dd01      	ble.n	80010dc <__aeabi_i2f+0x50>
 80010d8:	1f43      	subs	r3, r0, #5
 80010da:	409d      	lsls	r5, r3
 80010dc:	002b      	movs	r3, r5
 80010de:	490f      	ldr	r1, [pc, #60]	; (800111c <__aeabi_i2f+0x90>)
 80010e0:	400b      	ands	r3, r1
 80010e2:	076e      	lsls	r6, r5, #29
 80010e4:	d009      	beq.n	80010fa <__aeabi_i2f+0x6e>
 80010e6:	260f      	movs	r6, #15
 80010e8:	4035      	ands	r5, r6
 80010ea:	2d04      	cmp	r5, #4
 80010ec:	d005      	beq.n	80010fa <__aeabi_i2f+0x6e>
 80010ee:	3304      	adds	r3, #4
 80010f0:	015d      	lsls	r5, r3, #5
 80010f2:	d502      	bpl.n	80010fa <__aeabi_i2f+0x6e>
 80010f4:	229f      	movs	r2, #159	; 0x9f
 80010f6:	400b      	ands	r3, r1
 80010f8:	1a12      	subs	r2, r2, r0
 80010fa:	019b      	lsls	r3, r3, #6
 80010fc:	0a58      	lsrs	r0, r3, #9
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	0240      	lsls	r0, r0, #9
 8001102:	05d2      	lsls	r2, r2, #23
 8001104:	0a40      	lsrs	r0, r0, #9
 8001106:	07e4      	lsls	r4, r4, #31
 8001108:	4310      	orrs	r0, r2
 800110a:	4320      	orrs	r0, r4
 800110c:	bd70      	pop	{r4, r5, r6, pc}
 800110e:	2400      	movs	r4, #0
 8001110:	2200      	movs	r2, #0
 8001112:	2000      	movs	r0, #0
 8001114:	e7f4      	b.n	8001100 <__aeabi_i2f+0x74>
 8001116:	0268      	lsls	r0, r5, #9
 8001118:	0a40      	lsrs	r0, r0, #9
 800111a:	e7f1      	b.n	8001100 <__aeabi_i2f+0x74>
 800111c:	fbffffff 	.word	0xfbffffff

08001120 <__aeabi_dadd>:
 8001120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001122:	464f      	mov	r7, r9
 8001124:	4646      	mov	r6, r8
 8001126:	46d6      	mov	lr, sl
 8001128:	000c      	movs	r4, r1
 800112a:	0309      	lsls	r1, r1, #12
 800112c:	b5c0      	push	{r6, r7, lr}
 800112e:	0a49      	lsrs	r1, r1, #9
 8001130:	0f47      	lsrs	r7, r0, #29
 8001132:	005e      	lsls	r6, r3, #1
 8001134:	4339      	orrs	r1, r7
 8001136:	031f      	lsls	r7, r3, #12
 8001138:	0fdb      	lsrs	r3, r3, #31
 800113a:	469c      	mov	ip, r3
 800113c:	0065      	lsls	r5, r4, #1
 800113e:	0a7b      	lsrs	r3, r7, #9
 8001140:	0f57      	lsrs	r7, r2, #29
 8001142:	431f      	orrs	r7, r3
 8001144:	0d6d      	lsrs	r5, r5, #21
 8001146:	0fe4      	lsrs	r4, r4, #31
 8001148:	0d76      	lsrs	r6, r6, #21
 800114a:	46a1      	mov	r9, r4
 800114c:	00c0      	lsls	r0, r0, #3
 800114e:	46b8      	mov	r8, r7
 8001150:	00d2      	lsls	r2, r2, #3
 8001152:	1bab      	subs	r3, r5, r6
 8001154:	4564      	cmp	r4, ip
 8001156:	d07b      	beq.n	8001250 <__aeabi_dadd+0x130>
 8001158:	2b00      	cmp	r3, #0
 800115a:	dd5f      	ble.n	800121c <__aeabi_dadd+0xfc>
 800115c:	2e00      	cmp	r6, #0
 800115e:	d000      	beq.n	8001162 <__aeabi_dadd+0x42>
 8001160:	e0a4      	b.n	80012ac <__aeabi_dadd+0x18c>
 8001162:	003e      	movs	r6, r7
 8001164:	4316      	orrs	r6, r2
 8001166:	d100      	bne.n	800116a <__aeabi_dadd+0x4a>
 8001168:	e112      	b.n	8001390 <__aeabi_dadd+0x270>
 800116a:	1e5e      	subs	r6, r3, #1
 800116c:	2e00      	cmp	r6, #0
 800116e:	d000      	beq.n	8001172 <__aeabi_dadd+0x52>
 8001170:	e19e      	b.n	80014b0 <__aeabi_dadd+0x390>
 8001172:	1a87      	subs	r7, r0, r2
 8001174:	4643      	mov	r3, r8
 8001176:	42b8      	cmp	r0, r7
 8001178:	4180      	sbcs	r0, r0
 800117a:	2501      	movs	r5, #1
 800117c:	1ac9      	subs	r1, r1, r3
 800117e:	4240      	negs	r0, r0
 8001180:	1a09      	subs	r1, r1, r0
 8001182:	020b      	lsls	r3, r1, #8
 8001184:	d400      	bmi.n	8001188 <__aeabi_dadd+0x68>
 8001186:	e131      	b.n	80013ec <__aeabi_dadd+0x2cc>
 8001188:	0249      	lsls	r1, r1, #9
 800118a:	0a4e      	lsrs	r6, r1, #9
 800118c:	2e00      	cmp	r6, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_dadd+0x72>
 8001190:	e16e      	b.n	8001470 <__aeabi_dadd+0x350>
 8001192:	0030      	movs	r0, r6
 8001194:	f001 fe1c 	bl	8002dd0 <__clzsi2>
 8001198:	0003      	movs	r3, r0
 800119a:	3b08      	subs	r3, #8
 800119c:	2b1f      	cmp	r3, #31
 800119e:	dd00      	ble.n	80011a2 <__aeabi_dadd+0x82>
 80011a0:	e161      	b.n	8001466 <__aeabi_dadd+0x346>
 80011a2:	2220      	movs	r2, #32
 80011a4:	0039      	movs	r1, r7
 80011a6:	1ad2      	subs	r2, r2, r3
 80011a8:	409e      	lsls	r6, r3
 80011aa:	40d1      	lsrs	r1, r2
 80011ac:	409f      	lsls	r7, r3
 80011ae:	430e      	orrs	r6, r1
 80011b0:	429d      	cmp	r5, r3
 80011b2:	dd00      	ble.n	80011b6 <__aeabi_dadd+0x96>
 80011b4:	e151      	b.n	800145a <__aeabi_dadd+0x33a>
 80011b6:	1b5d      	subs	r5, r3, r5
 80011b8:	1c6b      	adds	r3, r5, #1
 80011ba:	2b1f      	cmp	r3, #31
 80011bc:	dd00      	ble.n	80011c0 <__aeabi_dadd+0xa0>
 80011be:	e17c      	b.n	80014ba <__aeabi_dadd+0x39a>
 80011c0:	2120      	movs	r1, #32
 80011c2:	1ac9      	subs	r1, r1, r3
 80011c4:	003d      	movs	r5, r7
 80011c6:	0030      	movs	r0, r6
 80011c8:	408f      	lsls	r7, r1
 80011ca:	4088      	lsls	r0, r1
 80011cc:	40dd      	lsrs	r5, r3
 80011ce:	1e79      	subs	r1, r7, #1
 80011d0:	418f      	sbcs	r7, r1
 80011d2:	0031      	movs	r1, r6
 80011d4:	2207      	movs	r2, #7
 80011d6:	4328      	orrs	r0, r5
 80011d8:	40d9      	lsrs	r1, r3
 80011da:	2500      	movs	r5, #0
 80011dc:	4307      	orrs	r7, r0
 80011de:	403a      	ands	r2, r7
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	d009      	beq.n	80011f8 <__aeabi_dadd+0xd8>
 80011e4:	230f      	movs	r3, #15
 80011e6:	403b      	ands	r3, r7
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d005      	beq.n	80011f8 <__aeabi_dadd+0xd8>
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	42bb      	cmp	r3, r7
 80011f0:	41bf      	sbcs	r7, r7
 80011f2:	427f      	negs	r7, r7
 80011f4:	19c9      	adds	r1, r1, r7
 80011f6:	001f      	movs	r7, r3
 80011f8:	020b      	lsls	r3, r1, #8
 80011fa:	d400      	bmi.n	80011fe <__aeabi_dadd+0xde>
 80011fc:	e226      	b.n	800164c <__aeabi_dadd+0x52c>
 80011fe:	1c6a      	adds	r2, r5, #1
 8001200:	4bc6      	ldr	r3, [pc, #792]	; (800151c <__aeabi_dadd+0x3fc>)
 8001202:	0555      	lsls	r5, r2, #21
 8001204:	0d6d      	lsrs	r5, r5, #21
 8001206:	429a      	cmp	r2, r3
 8001208:	d100      	bne.n	800120c <__aeabi_dadd+0xec>
 800120a:	e106      	b.n	800141a <__aeabi_dadd+0x2fa>
 800120c:	4ac4      	ldr	r2, [pc, #784]	; (8001520 <__aeabi_dadd+0x400>)
 800120e:	08ff      	lsrs	r7, r7, #3
 8001210:	400a      	ands	r2, r1
 8001212:	0753      	lsls	r3, r2, #29
 8001214:	0252      	lsls	r2, r2, #9
 8001216:	433b      	orrs	r3, r7
 8001218:	0b12      	lsrs	r2, r2, #12
 800121a:	e08e      	b.n	800133a <__aeabi_dadd+0x21a>
 800121c:	2b00      	cmp	r3, #0
 800121e:	d000      	beq.n	8001222 <__aeabi_dadd+0x102>
 8001220:	e0b8      	b.n	8001394 <__aeabi_dadd+0x274>
 8001222:	1c6b      	adds	r3, r5, #1
 8001224:	055b      	lsls	r3, r3, #21
 8001226:	0d5b      	lsrs	r3, r3, #21
 8001228:	2b01      	cmp	r3, #1
 800122a:	dc00      	bgt.n	800122e <__aeabi_dadd+0x10e>
 800122c:	e130      	b.n	8001490 <__aeabi_dadd+0x370>
 800122e:	1a87      	subs	r7, r0, r2
 8001230:	4643      	mov	r3, r8
 8001232:	42b8      	cmp	r0, r7
 8001234:	41b6      	sbcs	r6, r6
 8001236:	1acb      	subs	r3, r1, r3
 8001238:	4276      	negs	r6, r6
 800123a:	1b9e      	subs	r6, r3, r6
 800123c:	0233      	lsls	r3, r6, #8
 800123e:	d500      	bpl.n	8001242 <__aeabi_dadd+0x122>
 8001240:	e14c      	b.n	80014dc <__aeabi_dadd+0x3bc>
 8001242:	003b      	movs	r3, r7
 8001244:	4333      	orrs	r3, r6
 8001246:	d1a1      	bne.n	800118c <__aeabi_dadd+0x6c>
 8001248:	2200      	movs	r2, #0
 800124a:	2400      	movs	r4, #0
 800124c:	2500      	movs	r5, #0
 800124e:	e070      	b.n	8001332 <__aeabi_dadd+0x212>
 8001250:	2b00      	cmp	r3, #0
 8001252:	dc00      	bgt.n	8001256 <__aeabi_dadd+0x136>
 8001254:	e0e5      	b.n	8001422 <__aeabi_dadd+0x302>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_dadd+0x13c>
 800125a:	e083      	b.n	8001364 <__aeabi_dadd+0x244>
 800125c:	4eaf      	ldr	r6, [pc, #700]	; (800151c <__aeabi_dadd+0x3fc>)
 800125e:	42b5      	cmp	r5, r6
 8001260:	d060      	beq.n	8001324 <__aeabi_dadd+0x204>
 8001262:	2680      	movs	r6, #128	; 0x80
 8001264:	0436      	lsls	r6, r6, #16
 8001266:	4337      	orrs	r7, r6
 8001268:	46b8      	mov	r8, r7
 800126a:	2b38      	cmp	r3, #56	; 0x38
 800126c:	dc00      	bgt.n	8001270 <__aeabi_dadd+0x150>
 800126e:	e13e      	b.n	80014ee <__aeabi_dadd+0x3ce>
 8001270:	4643      	mov	r3, r8
 8001272:	4313      	orrs	r3, r2
 8001274:	001f      	movs	r7, r3
 8001276:	1e7a      	subs	r2, r7, #1
 8001278:	4197      	sbcs	r7, r2
 800127a:	183f      	adds	r7, r7, r0
 800127c:	4287      	cmp	r7, r0
 800127e:	4180      	sbcs	r0, r0
 8001280:	4240      	negs	r0, r0
 8001282:	1809      	adds	r1, r1, r0
 8001284:	020b      	lsls	r3, r1, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_dadd+0x16a>
 8001288:	e0b0      	b.n	80013ec <__aeabi_dadd+0x2cc>
 800128a:	4ba4      	ldr	r3, [pc, #656]	; (800151c <__aeabi_dadd+0x3fc>)
 800128c:	3501      	adds	r5, #1
 800128e:	429d      	cmp	r5, r3
 8001290:	d100      	bne.n	8001294 <__aeabi_dadd+0x174>
 8001292:	e0c3      	b.n	800141c <__aeabi_dadd+0x2fc>
 8001294:	4aa2      	ldr	r2, [pc, #648]	; (8001520 <__aeabi_dadd+0x400>)
 8001296:	087b      	lsrs	r3, r7, #1
 8001298:	400a      	ands	r2, r1
 800129a:	2101      	movs	r1, #1
 800129c:	400f      	ands	r7, r1
 800129e:	431f      	orrs	r7, r3
 80012a0:	0851      	lsrs	r1, r2, #1
 80012a2:	07d3      	lsls	r3, r2, #31
 80012a4:	2207      	movs	r2, #7
 80012a6:	431f      	orrs	r7, r3
 80012a8:	403a      	ands	r2, r7
 80012aa:	e799      	b.n	80011e0 <__aeabi_dadd+0xc0>
 80012ac:	4e9b      	ldr	r6, [pc, #620]	; (800151c <__aeabi_dadd+0x3fc>)
 80012ae:	42b5      	cmp	r5, r6
 80012b0:	d038      	beq.n	8001324 <__aeabi_dadd+0x204>
 80012b2:	2680      	movs	r6, #128	; 0x80
 80012b4:	0436      	lsls	r6, r6, #16
 80012b6:	4337      	orrs	r7, r6
 80012b8:	46b8      	mov	r8, r7
 80012ba:	2b38      	cmp	r3, #56	; 0x38
 80012bc:	dd00      	ble.n	80012c0 <__aeabi_dadd+0x1a0>
 80012be:	e0dc      	b.n	800147a <__aeabi_dadd+0x35a>
 80012c0:	2b1f      	cmp	r3, #31
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_dadd+0x1a6>
 80012c4:	e130      	b.n	8001528 <__aeabi_dadd+0x408>
 80012c6:	001e      	movs	r6, r3
 80012c8:	4647      	mov	r7, r8
 80012ca:	3e20      	subs	r6, #32
 80012cc:	40f7      	lsrs	r7, r6
 80012ce:	46bc      	mov	ip, r7
 80012d0:	2b20      	cmp	r3, #32
 80012d2:	d004      	beq.n	80012de <__aeabi_dadd+0x1be>
 80012d4:	2640      	movs	r6, #64	; 0x40
 80012d6:	1af3      	subs	r3, r6, r3
 80012d8:	4646      	mov	r6, r8
 80012da:	409e      	lsls	r6, r3
 80012dc:	4332      	orrs	r2, r6
 80012de:	0017      	movs	r7, r2
 80012e0:	4663      	mov	r3, ip
 80012e2:	1e7a      	subs	r2, r7, #1
 80012e4:	4197      	sbcs	r7, r2
 80012e6:	431f      	orrs	r7, r3
 80012e8:	e0cc      	b.n	8001484 <__aeabi_dadd+0x364>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d100      	bne.n	80012f0 <__aeabi_dadd+0x1d0>
 80012ee:	e204      	b.n	80016fa <__aeabi_dadd+0x5da>
 80012f0:	4643      	mov	r3, r8
 80012f2:	4313      	orrs	r3, r2
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dadd+0x1d8>
 80012f6:	e159      	b.n	80015ac <__aeabi_dadd+0x48c>
 80012f8:	074b      	lsls	r3, r1, #29
 80012fa:	08c0      	lsrs	r0, r0, #3
 80012fc:	4318      	orrs	r0, r3
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	08c9      	lsrs	r1, r1, #3
 8001302:	031b      	lsls	r3, r3, #12
 8001304:	4219      	tst	r1, r3
 8001306:	d008      	beq.n	800131a <__aeabi_dadd+0x1fa>
 8001308:	4645      	mov	r5, r8
 800130a:	08ed      	lsrs	r5, r5, #3
 800130c:	421d      	tst	r5, r3
 800130e:	d104      	bne.n	800131a <__aeabi_dadd+0x1fa>
 8001310:	4643      	mov	r3, r8
 8001312:	08d0      	lsrs	r0, r2, #3
 8001314:	0759      	lsls	r1, r3, #29
 8001316:	4308      	orrs	r0, r1
 8001318:	0029      	movs	r1, r5
 800131a:	0f42      	lsrs	r2, r0, #29
 800131c:	00c9      	lsls	r1, r1, #3
 800131e:	4d7f      	ldr	r5, [pc, #508]	; (800151c <__aeabi_dadd+0x3fc>)
 8001320:	4311      	orrs	r1, r2
 8001322:	00c0      	lsls	r0, r0, #3
 8001324:	074b      	lsls	r3, r1, #29
 8001326:	08ca      	lsrs	r2, r1, #3
 8001328:	497c      	ldr	r1, [pc, #496]	; (800151c <__aeabi_dadd+0x3fc>)
 800132a:	08c0      	lsrs	r0, r0, #3
 800132c:	4303      	orrs	r3, r0
 800132e:	428d      	cmp	r5, r1
 8001330:	d068      	beq.n	8001404 <__aeabi_dadd+0x2e4>
 8001332:	0312      	lsls	r2, r2, #12
 8001334:	056d      	lsls	r5, r5, #21
 8001336:	0b12      	lsrs	r2, r2, #12
 8001338:	0d6d      	lsrs	r5, r5, #21
 800133a:	2100      	movs	r1, #0
 800133c:	0312      	lsls	r2, r2, #12
 800133e:	0018      	movs	r0, r3
 8001340:	0b13      	lsrs	r3, r2, #12
 8001342:	0d0a      	lsrs	r2, r1, #20
 8001344:	0512      	lsls	r2, r2, #20
 8001346:	431a      	orrs	r2, r3
 8001348:	4b76      	ldr	r3, [pc, #472]	; (8001524 <__aeabi_dadd+0x404>)
 800134a:	052d      	lsls	r5, r5, #20
 800134c:	4013      	ands	r3, r2
 800134e:	432b      	orrs	r3, r5
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	07e4      	lsls	r4, r4, #31
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	4323      	orrs	r3, r4
 8001358:	0019      	movs	r1, r3
 800135a:	bc1c      	pop	{r2, r3, r4}
 800135c:	4690      	mov	r8, r2
 800135e:	4699      	mov	r9, r3
 8001360:	46a2      	mov	sl, r4
 8001362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001364:	003e      	movs	r6, r7
 8001366:	4316      	orrs	r6, r2
 8001368:	d012      	beq.n	8001390 <__aeabi_dadd+0x270>
 800136a:	1e5e      	subs	r6, r3, #1
 800136c:	2e00      	cmp	r6, #0
 800136e:	d000      	beq.n	8001372 <__aeabi_dadd+0x252>
 8001370:	e100      	b.n	8001574 <__aeabi_dadd+0x454>
 8001372:	1887      	adds	r7, r0, r2
 8001374:	4287      	cmp	r7, r0
 8001376:	4180      	sbcs	r0, r0
 8001378:	4441      	add	r1, r8
 800137a:	4240      	negs	r0, r0
 800137c:	1809      	adds	r1, r1, r0
 800137e:	2501      	movs	r5, #1
 8001380:	020b      	lsls	r3, r1, #8
 8001382:	d533      	bpl.n	80013ec <__aeabi_dadd+0x2cc>
 8001384:	2502      	movs	r5, #2
 8001386:	e785      	b.n	8001294 <__aeabi_dadd+0x174>
 8001388:	4664      	mov	r4, ip
 800138a:	0033      	movs	r3, r6
 800138c:	4641      	mov	r1, r8
 800138e:	0010      	movs	r0, r2
 8001390:	001d      	movs	r5, r3
 8001392:	e7c7      	b.n	8001324 <__aeabi_dadd+0x204>
 8001394:	2d00      	cmp	r5, #0
 8001396:	d000      	beq.n	800139a <__aeabi_dadd+0x27a>
 8001398:	e0da      	b.n	8001550 <__aeabi_dadd+0x430>
 800139a:	000c      	movs	r4, r1
 800139c:	4304      	orrs	r4, r0
 800139e:	d0f3      	beq.n	8001388 <__aeabi_dadd+0x268>
 80013a0:	1c5c      	adds	r4, r3, #1
 80013a2:	d100      	bne.n	80013a6 <__aeabi_dadd+0x286>
 80013a4:	e19f      	b.n	80016e6 <__aeabi_dadd+0x5c6>
 80013a6:	4c5d      	ldr	r4, [pc, #372]	; (800151c <__aeabi_dadd+0x3fc>)
 80013a8:	42a6      	cmp	r6, r4
 80013aa:	d100      	bne.n	80013ae <__aeabi_dadd+0x28e>
 80013ac:	e12f      	b.n	800160e <__aeabi_dadd+0x4ee>
 80013ae:	43db      	mvns	r3, r3
 80013b0:	2b38      	cmp	r3, #56	; 0x38
 80013b2:	dd00      	ble.n	80013b6 <__aeabi_dadd+0x296>
 80013b4:	e166      	b.n	8001684 <__aeabi_dadd+0x564>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x29c>
 80013ba:	e183      	b.n	80016c4 <__aeabi_dadd+0x5a4>
 80013bc:	2420      	movs	r4, #32
 80013be:	0005      	movs	r5, r0
 80013c0:	1ae4      	subs	r4, r4, r3
 80013c2:	000f      	movs	r7, r1
 80013c4:	40dd      	lsrs	r5, r3
 80013c6:	40d9      	lsrs	r1, r3
 80013c8:	40a0      	lsls	r0, r4
 80013ca:	4643      	mov	r3, r8
 80013cc:	40a7      	lsls	r7, r4
 80013ce:	1a5b      	subs	r3, r3, r1
 80013d0:	1e44      	subs	r4, r0, #1
 80013d2:	41a0      	sbcs	r0, r4
 80013d4:	4698      	mov	r8, r3
 80013d6:	432f      	orrs	r7, r5
 80013d8:	4338      	orrs	r0, r7
 80013da:	1a17      	subs	r7, r2, r0
 80013dc:	42ba      	cmp	r2, r7
 80013de:	4192      	sbcs	r2, r2
 80013e0:	4643      	mov	r3, r8
 80013e2:	4252      	negs	r2, r2
 80013e4:	1a99      	subs	r1, r3, r2
 80013e6:	4664      	mov	r4, ip
 80013e8:	0035      	movs	r5, r6
 80013ea:	e6ca      	b.n	8001182 <__aeabi_dadd+0x62>
 80013ec:	2207      	movs	r2, #7
 80013ee:	403a      	ands	r2, r7
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	d000      	beq.n	80013f6 <__aeabi_dadd+0x2d6>
 80013f4:	e6f6      	b.n	80011e4 <__aeabi_dadd+0xc4>
 80013f6:	074b      	lsls	r3, r1, #29
 80013f8:	08ca      	lsrs	r2, r1, #3
 80013fa:	4948      	ldr	r1, [pc, #288]	; (800151c <__aeabi_dadd+0x3fc>)
 80013fc:	08ff      	lsrs	r7, r7, #3
 80013fe:	433b      	orrs	r3, r7
 8001400:	428d      	cmp	r5, r1
 8001402:	d196      	bne.n	8001332 <__aeabi_dadd+0x212>
 8001404:	0019      	movs	r1, r3
 8001406:	4311      	orrs	r1, r2
 8001408:	d100      	bne.n	800140c <__aeabi_dadd+0x2ec>
 800140a:	e19e      	b.n	800174a <__aeabi_dadd+0x62a>
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	0309      	lsls	r1, r1, #12
 8001410:	430a      	orrs	r2, r1
 8001412:	0312      	lsls	r2, r2, #12
 8001414:	0b12      	lsrs	r2, r2, #12
 8001416:	4d41      	ldr	r5, [pc, #260]	; (800151c <__aeabi_dadd+0x3fc>)
 8001418:	e78f      	b.n	800133a <__aeabi_dadd+0x21a>
 800141a:	0015      	movs	r5, r2
 800141c:	2200      	movs	r2, #0
 800141e:	2300      	movs	r3, #0
 8001420:	e78b      	b.n	800133a <__aeabi_dadd+0x21a>
 8001422:	2b00      	cmp	r3, #0
 8001424:	d000      	beq.n	8001428 <__aeabi_dadd+0x308>
 8001426:	e0c7      	b.n	80015b8 <__aeabi_dadd+0x498>
 8001428:	1c6b      	adds	r3, r5, #1
 800142a:	055f      	lsls	r7, r3, #21
 800142c:	0d7f      	lsrs	r7, r7, #21
 800142e:	2f01      	cmp	r7, #1
 8001430:	dc00      	bgt.n	8001434 <__aeabi_dadd+0x314>
 8001432:	e0f1      	b.n	8001618 <__aeabi_dadd+0x4f8>
 8001434:	4d39      	ldr	r5, [pc, #228]	; (800151c <__aeabi_dadd+0x3fc>)
 8001436:	42ab      	cmp	r3, r5
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x31c>
 800143a:	e0b9      	b.n	80015b0 <__aeabi_dadd+0x490>
 800143c:	1885      	adds	r5, r0, r2
 800143e:	000a      	movs	r2, r1
 8001440:	4285      	cmp	r5, r0
 8001442:	4189      	sbcs	r1, r1
 8001444:	4442      	add	r2, r8
 8001446:	4249      	negs	r1, r1
 8001448:	1851      	adds	r1, r2, r1
 800144a:	2207      	movs	r2, #7
 800144c:	07cf      	lsls	r7, r1, #31
 800144e:	086d      	lsrs	r5, r5, #1
 8001450:	432f      	orrs	r7, r5
 8001452:	0849      	lsrs	r1, r1, #1
 8001454:	403a      	ands	r2, r7
 8001456:	001d      	movs	r5, r3
 8001458:	e6c2      	b.n	80011e0 <__aeabi_dadd+0xc0>
 800145a:	2207      	movs	r2, #7
 800145c:	4930      	ldr	r1, [pc, #192]	; (8001520 <__aeabi_dadd+0x400>)
 800145e:	1aed      	subs	r5, r5, r3
 8001460:	4031      	ands	r1, r6
 8001462:	403a      	ands	r2, r7
 8001464:	e6bc      	b.n	80011e0 <__aeabi_dadd+0xc0>
 8001466:	003e      	movs	r6, r7
 8001468:	3828      	subs	r0, #40	; 0x28
 800146a:	4086      	lsls	r6, r0
 800146c:	2700      	movs	r7, #0
 800146e:	e69f      	b.n	80011b0 <__aeabi_dadd+0x90>
 8001470:	0038      	movs	r0, r7
 8001472:	f001 fcad 	bl	8002dd0 <__clzsi2>
 8001476:	3020      	adds	r0, #32
 8001478:	e68e      	b.n	8001198 <__aeabi_dadd+0x78>
 800147a:	4643      	mov	r3, r8
 800147c:	4313      	orrs	r3, r2
 800147e:	001f      	movs	r7, r3
 8001480:	1e7a      	subs	r2, r7, #1
 8001482:	4197      	sbcs	r7, r2
 8001484:	1bc7      	subs	r7, r0, r7
 8001486:	42b8      	cmp	r0, r7
 8001488:	4180      	sbcs	r0, r0
 800148a:	4240      	negs	r0, r0
 800148c:	1a09      	subs	r1, r1, r0
 800148e:	e678      	b.n	8001182 <__aeabi_dadd+0x62>
 8001490:	000e      	movs	r6, r1
 8001492:	003b      	movs	r3, r7
 8001494:	4306      	orrs	r6, r0
 8001496:	4313      	orrs	r3, r2
 8001498:	2d00      	cmp	r5, #0
 800149a:	d161      	bne.n	8001560 <__aeabi_dadd+0x440>
 800149c:	2e00      	cmp	r6, #0
 800149e:	d000      	beq.n	80014a2 <__aeabi_dadd+0x382>
 80014a0:	e0f4      	b.n	800168c <__aeabi_dadd+0x56c>
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dadd+0x388>
 80014a6:	e11b      	b.n	80016e0 <__aeabi_dadd+0x5c0>
 80014a8:	4664      	mov	r4, ip
 80014aa:	0039      	movs	r1, r7
 80014ac:	0010      	movs	r0, r2
 80014ae:	e739      	b.n	8001324 <__aeabi_dadd+0x204>
 80014b0:	4f1a      	ldr	r7, [pc, #104]	; (800151c <__aeabi_dadd+0x3fc>)
 80014b2:	42bb      	cmp	r3, r7
 80014b4:	d07a      	beq.n	80015ac <__aeabi_dadd+0x48c>
 80014b6:	0033      	movs	r3, r6
 80014b8:	e6ff      	b.n	80012ba <__aeabi_dadd+0x19a>
 80014ba:	0030      	movs	r0, r6
 80014bc:	3d1f      	subs	r5, #31
 80014be:	40e8      	lsrs	r0, r5
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	d003      	beq.n	80014cc <__aeabi_dadd+0x3ac>
 80014c4:	2140      	movs	r1, #64	; 0x40
 80014c6:	1acb      	subs	r3, r1, r3
 80014c8:	409e      	lsls	r6, r3
 80014ca:	4337      	orrs	r7, r6
 80014cc:	1e7b      	subs	r3, r7, #1
 80014ce:	419f      	sbcs	r7, r3
 80014d0:	2207      	movs	r2, #7
 80014d2:	4307      	orrs	r7, r0
 80014d4:	403a      	ands	r2, r7
 80014d6:	2100      	movs	r1, #0
 80014d8:	2500      	movs	r5, #0
 80014da:	e789      	b.n	80013f0 <__aeabi_dadd+0x2d0>
 80014dc:	1a17      	subs	r7, r2, r0
 80014de:	4643      	mov	r3, r8
 80014e0:	42ba      	cmp	r2, r7
 80014e2:	41b6      	sbcs	r6, r6
 80014e4:	1a59      	subs	r1, r3, r1
 80014e6:	4276      	negs	r6, r6
 80014e8:	1b8e      	subs	r6, r1, r6
 80014ea:	4664      	mov	r4, ip
 80014ec:	e64e      	b.n	800118c <__aeabi_dadd+0x6c>
 80014ee:	2b1f      	cmp	r3, #31
 80014f0:	dd00      	ble.n	80014f4 <__aeabi_dadd+0x3d4>
 80014f2:	e0ad      	b.n	8001650 <__aeabi_dadd+0x530>
 80014f4:	2620      	movs	r6, #32
 80014f6:	4647      	mov	r7, r8
 80014f8:	1af6      	subs	r6, r6, r3
 80014fa:	40b7      	lsls	r7, r6
 80014fc:	46b9      	mov	r9, r7
 80014fe:	0017      	movs	r7, r2
 8001500:	46b2      	mov	sl, r6
 8001502:	40df      	lsrs	r7, r3
 8001504:	464e      	mov	r6, r9
 8001506:	433e      	orrs	r6, r7
 8001508:	0037      	movs	r7, r6
 800150a:	4656      	mov	r6, sl
 800150c:	40b2      	lsls	r2, r6
 800150e:	1e56      	subs	r6, r2, #1
 8001510:	41b2      	sbcs	r2, r6
 8001512:	4317      	orrs	r7, r2
 8001514:	4642      	mov	r2, r8
 8001516:	40da      	lsrs	r2, r3
 8001518:	1889      	adds	r1, r1, r2
 800151a:	e6ae      	b.n	800127a <__aeabi_dadd+0x15a>
 800151c:	000007ff 	.word	0x000007ff
 8001520:	ff7fffff 	.word	0xff7fffff
 8001524:	800fffff 	.word	0x800fffff
 8001528:	2620      	movs	r6, #32
 800152a:	4647      	mov	r7, r8
 800152c:	1af6      	subs	r6, r6, r3
 800152e:	40b7      	lsls	r7, r6
 8001530:	46b9      	mov	r9, r7
 8001532:	0017      	movs	r7, r2
 8001534:	46b2      	mov	sl, r6
 8001536:	40df      	lsrs	r7, r3
 8001538:	464e      	mov	r6, r9
 800153a:	433e      	orrs	r6, r7
 800153c:	0037      	movs	r7, r6
 800153e:	4656      	mov	r6, sl
 8001540:	40b2      	lsls	r2, r6
 8001542:	1e56      	subs	r6, r2, #1
 8001544:	41b2      	sbcs	r2, r6
 8001546:	4317      	orrs	r7, r2
 8001548:	4642      	mov	r2, r8
 800154a:	40da      	lsrs	r2, r3
 800154c:	1a89      	subs	r1, r1, r2
 800154e:	e799      	b.n	8001484 <__aeabi_dadd+0x364>
 8001550:	4c7f      	ldr	r4, [pc, #508]	; (8001750 <__aeabi_dadd+0x630>)
 8001552:	42a6      	cmp	r6, r4
 8001554:	d05b      	beq.n	800160e <__aeabi_dadd+0x4ee>
 8001556:	2480      	movs	r4, #128	; 0x80
 8001558:	0424      	lsls	r4, r4, #16
 800155a:	425b      	negs	r3, r3
 800155c:	4321      	orrs	r1, r4
 800155e:	e727      	b.n	80013b0 <__aeabi_dadd+0x290>
 8001560:	2e00      	cmp	r6, #0
 8001562:	d10c      	bne.n	800157e <__aeabi_dadd+0x45e>
 8001564:	2b00      	cmp	r3, #0
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0x44a>
 8001568:	e0cb      	b.n	8001702 <__aeabi_dadd+0x5e2>
 800156a:	4664      	mov	r4, ip
 800156c:	0039      	movs	r1, r7
 800156e:	0010      	movs	r0, r2
 8001570:	4d77      	ldr	r5, [pc, #476]	; (8001750 <__aeabi_dadd+0x630>)
 8001572:	e6d7      	b.n	8001324 <__aeabi_dadd+0x204>
 8001574:	4f76      	ldr	r7, [pc, #472]	; (8001750 <__aeabi_dadd+0x630>)
 8001576:	42bb      	cmp	r3, r7
 8001578:	d018      	beq.n	80015ac <__aeabi_dadd+0x48c>
 800157a:	0033      	movs	r3, r6
 800157c:	e675      	b.n	800126a <__aeabi_dadd+0x14a>
 800157e:	2b00      	cmp	r3, #0
 8001580:	d014      	beq.n	80015ac <__aeabi_dadd+0x48c>
 8001582:	074b      	lsls	r3, r1, #29
 8001584:	08c0      	lsrs	r0, r0, #3
 8001586:	4318      	orrs	r0, r3
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	08c9      	lsrs	r1, r1, #3
 800158c:	031b      	lsls	r3, r3, #12
 800158e:	4219      	tst	r1, r3
 8001590:	d007      	beq.n	80015a2 <__aeabi_dadd+0x482>
 8001592:	08fc      	lsrs	r4, r7, #3
 8001594:	421c      	tst	r4, r3
 8001596:	d104      	bne.n	80015a2 <__aeabi_dadd+0x482>
 8001598:	0779      	lsls	r1, r7, #29
 800159a:	08d0      	lsrs	r0, r2, #3
 800159c:	4308      	orrs	r0, r1
 800159e:	46e1      	mov	r9, ip
 80015a0:	0021      	movs	r1, r4
 80015a2:	464c      	mov	r4, r9
 80015a4:	0f42      	lsrs	r2, r0, #29
 80015a6:	00c9      	lsls	r1, r1, #3
 80015a8:	4311      	orrs	r1, r2
 80015aa:	00c0      	lsls	r0, r0, #3
 80015ac:	4d68      	ldr	r5, [pc, #416]	; (8001750 <__aeabi_dadd+0x630>)
 80015ae:	e6b9      	b.n	8001324 <__aeabi_dadd+0x204>
 80015b0:	001d      	movs	r5, r3
 80015b2:	2200      	movs	r2, #0
 80015b4:	2300      	movs	r3, #0
 80015b6:	e6c0      	b.n	800133a <__aeabi_dadd+0x21a>
 80015b8:	2d00      	cmp	r5, #0
 80015ba:	d15b      	bne.n	8001674 <__aeabi_dadd+0x554>
 80015bc:	000d      	movs	r5, r1
 80015be:	4305      	orrs	r5, r0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dadd+0x4a4>
 80015c2:	e6e2      	b.n	800138a <__aeabi_dadd+0x26a>
 80015c4:	1c5d      	adds	r5, r3, #1
 80015c6:	d100      	bne.n	80015ca <__aeabi_dadd+0x4aa>
 80015c8:	e0b0      	b.n	800172c <__aeabi_dadd+0x60c>
 80015ca:	4d61      	ldr	r5, [pc, #388]	; (8001750 <__aeabi_dadd+0x630>)
 80015cc:	42ae      	cmp	r6, r5
 80015ce:	d01f      	beq.n	8001610 <__aeabi_dadd+0x4f0>
 80015d0:	43db      	mvns	r3, r3
 80015d2:	2b38      	cmp	r3, #56	; 0x38
 80015d4:	dc71      	bgt.n	80016ba <__aeabi_dadd+0x59a>
 80015d6:	2b1f      	cmp	r3, #31
 80015d8:	dd00      	ble.n	80015dc <__aeabi_dadd+0x4bc>
 80015da:	e096      	b.n	800170a <__aeabi_dadd+0x5ea>
 80015dc:	2520      	movs	r5, #32
 80015de:	000f      	movs	r7, r1
 80015e0:	1aed      	subs	r5, r5, r3
 80015e2:	40af      	lsls	r7, r5
 80015e4:	46b9      	mov	r9, r7
 80015e6:	0007      	movs	r7, r0
 80015e8:	46aa      	mov	sl, r5
 80015ea:	40df      	lsrs	r7, r3
 80015ec:	464d      	mov	r5, r9
 80015ee:	433d      	orrs	r5, r7
 80015f0:	002f      	movs	r7, r5
 80015f2:	4655      	mov	r5, sl
 80015f4:	40a8      	lsls	r0, r5
 80015f6:	40d9      	lsrs	r1, r3
 80015f8:	1e45      	subs	r5, r0, #1
 80015fa:	41a8      	sbcs	r0, r5
 80015fc:	4488      	add	r8, r1
 80015fe:	4307      	orrs	r7, r0
 8001600:	18bf      	adds	r7, r7, r2
 8001602:	4297      	cmp	r7, r2
 8001604:	4192      	sbcs	r2, r2
 8001606:	4251      	negs	r1, r2
 8001608:	4441      	add	r1, r8
 800160a:	0035      	movs	r5, r6
 800160c:	e63a      	b.n	8001284 <__aeabi_dadd+0x164>
 800160e:	4664      	mov	r4, ip
 8001610:	0035      	movs	r5, r6
 8001612:	4641      	mov	r1, r8
 8001614:	0010      	movs	r0, r2
 8001616:	e685      	b.n	8001324 <__aeabi_dadd+0x204>
 8001618:	000b      	movs	r3, r1
 800161a:	4303      	orrs	r3, r0
 800161c:	2d00      	cmp	r5, #0
 800161e:	d000      	beq.n	8001622 <__aeabi_dadd+0x502>
 8001620:	e663      	b.n	80012ea <__aeabi_dadd+0x1ca>
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f5      	beq.n	8001612 <__aeabi_dadd+0x4f2>
 8001626:	4643      	mov	r3, r8
 8001628:	4313      	orrs	r3, r2
 800162a:	d100      	bne.n	800162e <__aeabi_dadd+0x50e>
 800162c:	e67a      	b.n	8001324 <__aeabi_dadd+0x204>
 800162e:	1887      	adds	r7, r0, r2
 8001630:	4287      	cmp	r7, r0
 8001632:	4180      	sbcs	r0, r0
 8001634:	2207      	movs	r2, #7
 8001636:	4441      	add	r1, r8
 8001638:	4240      	negs	r0, r0
 800163a:	1809      	adds	r1, r1, r0
 800163c:	403a      	ands	r2, r7
 800163e:	020b      	lsls	r3, r1, #8
 8001640:	d400      	bmi.n	8001644 <__aeabi_dadd+0x524>
 8001642:	e6d5      	b.n	80013f0 <__aeabi_dadd+0x2d0>
 8001644:	4b43      	ldr	r3, [pc, #268]	; (8001754 <__aeabi_dadd+0x634>)
 8001646:	3501      	adds	r5, #1
 8001648:	4019      	ands	r1, r3
 800164a:	e5c9      	b.n	80011e0 <__aeabi_dadd+0xc0>
 800164c:	0038      	movs	r0, r7
 800164e:	e669      	b.n	8001324 <__aeabi_dadd+0x204>
 8001650:	001e      	movs	r6, r3
 8001652:	4647      	mov	r7, r8
 8001654:	3e20      	subs	r6, #32
 8001656:	40f7      	lsrs	r7, r6
 8001658:	46bc      	mov	ip, r7
 800165a:	2b20      	cmp	r3, #32
 800165c:	d004      	beq.n	8001668 <__aeabi_dadd+0x548>
 800165e:	2640      	movs	r6, #64	; 0x40
 8001660:	1af3      	subs	r3, r6, r3
 8001662:	4646      	mov	r6, r8
 8001664:	409e      	lsls	r6, r3
 8001666:	4332      	orrs	r2, r6
 8001668:	0017      	movs	r7, r2
 800166a:	4663      	mov	r3, ip
 800166c:	1e7a      	subs	r2, r7, #1
 800166e:	4197      	sbcs	r7, r2
 8001670:	431f      	orrs	r7, r3
 8001672:	e602      	b.n	800127a <__aeabi_dadd+0x15a>
 8001674:	4d36      	ldr	r5, [pc, #216]	; (8001750 <__aeabi_dadd+0x630>)
 8001676:	42ae      	cmp	r6, r5
 8001678:	d0ca      	beq.n	8001610 <__aeabi_dadd+0x4f0>
 800167a:	2580      	movs	r5, #128	; 0x80
 800167c:	042d      	lsls	r5, r5, #16
 800167e:	425b      	negs	r3, r3
 8001680:	4329      	orrs	r1, r5
 8001682:	e7a6      	b.n	80015d2 <__aeabi_dadd+0x4b2>
 8001684:	4308      	orrs	r0, r1
 8001686:	1e41      	subs	r1, r0, #1
 8001688:	4188      	sbcs	r0, r1
 800168a:	e6a6      	b.n	80013da <__aeabi_dadd+0x2ba>
 800168c:	2b00      	cmp	r3, #0
 800168e:	d100      	bne.n	8001692 <__aeabi_dadd+0x572>
 8001690:	e648      	b.n	8001324 <__aeabi_dadd+0x204>
 8001692:	1a87      	subs	r7, r0, r2
 8001694:	4643      	mov	r3, r8
 8001696:	42b8      	cmp	r0, r7
 8001698:	41b6      	sbcs	r6, r6
 800169a:	1acb      	subs	r3, r1, r3
 800169c:	4276      	negs	r6, r6
 800169e:	1b9e      	subs	r6, r3, r6
 80016a0:	0233      	lsls	r3, r6, #8
 80016a2:	d54b      	bpl.n	800173c <__aeabi_dadd+0x61c>
 80016a4:	1a17      	subs	r7, r2, r0
 80016a6:	4643      	mov	r3, r8
 80016a8:	42ba      	cmp	r2, r7
 80016aa:	4192      	sbcs	r2, r2
 80016ac:	1a59      	subs	r1, r3, r1
 80016ae:	4252      	negs	r2, r2
 80016b0:	1a89      	subs	r1, r1, r2
 80016b2:	2207      	movs	r2, #7
 80016b4:	4664      	mov	r4, ip
 80016b6:	403a      	ands	r2, r7
 80016b8:	e592      	b.n	80011e0 <__aeabi_dadd+0xc0>
 80016ba:	4301      	orrs	r1, r0
 80016bc:	000f      	movs	r7, r1
 80016be:	1e79      	subs	r1, r7, #1
 80016c0:	418f      	sbcs	r7, r1
 80016c2:	e79d      	b.n	8001600 <__aeabi_dadd+0x4e0>
 80016c4:	001c      	movs	r4, r3
 80016c6:	000f      	movs	r7, r1
 80016c8:	3c20      	subs	r4, #32
 80016ca:	40e7      	lsrs	r7, r4
 80016cc:	2b20      	cmp	r3, #32
 80016ce:	d003      	beq.n	80016d8 <__aeabi_dadd+0x5b8>
 80016d0:	2440      	movs	r4, #64	; 0x40
 80016d2:	1ae3      	subs	r3, r4, r3
 80016d4:	4099      	lsls	r1, r3
 80016d6:	4308      	orrs	r0, r1
 80016d8:	1e41      	subs	r1, r0, #1
 80016da:	4188      	sbcs	r0, r1
 80016dc:	4338      	orrs	r0, r7
 80016de:	e67c      	b.n	80013da <__aeabi_dadd+0x2ba>
 80016e0:	2200      	movs	r2, #0
 80016e2:	2400      	movs	r4, #0
 80016e4:	e625      	b.n	8001332 <__aeabi_dadd+0x212>
 80016e6:	1a17      	subs	r7, r2, r0
 80016e8:	4643      	mov	r3, r8
 80016ea:	42ba      	cmp	r2, r7
 80016ec:	4192      	sbcs	r2, r2
 80016ee:	1a59      	subs	r1, r3, r1
 80016f0:	4252      	negs	r2, r2
 80016f2:	1a89      	subs	r1, r1, r2
 80016f4:	4664      	mov	r4, ip
 80016f6:	0035      	movs	r5, r6
 80016f8:	e543      	b.n	8001182 <__aeabi_dadd+0x62>
 80016fa:	4641      	mov	r1, r8
 80016fc:	0010      	movs	r0, r2
 80016fe:	4d14      	ldr	r5, [pc, #80]	; (8001750 <__aeabi_dadd+0x630>)
 8001700:	e610      	b.n	8001324 <__aeabi_dadd+0x204>
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	2400      	movs	r4, #0
 8001706:	0312      	lsls	r2, r2, #12
 8001708:	e680      	b.n	800140c <__aeabi_dadd+0x2ec>
 800170a:	001d      	movs	r5, r3
 800170c:	000f      	movs	r7, r1
 800170e:	3d20      	subs	r5, #32
 8001710:	40ef      	lsrs	r7, r5
 8001712:	46bc      	mov	ip, r7
 8001714:	2b20      	cmp	r3, #32
 8001716:	d003      	beq.n	8001720 <__aeabi_dadd+0x600>
 8001718:	2540      	movs	r5, #64	; 0x40
 800171a:	1aeb      	subs	r3, r5, r3
 800171c:	4099      	lsls	r1, r3
 800171e:	4308      	orrs	r0, r1
 8001720:	0007      	movs	r7, r0
 8001722:	4663      	mov	r3, ip
 8001724:	1e78      	subs	r0, r7, #1
 8001726:	4187      	sbcs	r7, r0
 8001728:	431f      	orrs	r7, r3
 800172a:	e769      	b.n	8001600 <__aeabi_dadd+0x4e0>
 800172c:	1887      	adds	r7, r0, r2
 800172e:	4297      	cmp	r7, r2
 8001730:	419b      	sbcs	r3, r3
 8001732:	4441      	add	r1, r8
 8001734:	425b      	negs	r3, r3
 8001736:	18c9      	adds	r1, r1, r3
 8001738:	0035      	movs	r5, r6
 800173a:	e5a3      	b.n	8001284 <__aeabi_dadd+0x164>
 800173c:	003b      	movs	r3, r7
 800173e:	4333      	orrs	r3, r6
 8001740:	d0ce      	beq.n	80016e0 <__aeabi_dadd+0x5c0>
 8001742:	2207      	movs	r2, #7
 8001744:	0031      	movs	r1, r6
 8001746:	403a      	ands	r2, r7
 8001748:	e652      	b.n	80013f0 <__aeabi_dadd+0x2d0>
 800174a:	2300      	movs	r3, #0
 800174c:	001a      	movs	r2, r3
 800174e:	e5f4      	b.n	800133a <__aeabi_dadd+0x21a>
 8001750:	000007ff 	.word	0x000007ff
 8001754:	ff7fffff 	.word	0xff7fffff

08001758 <__aeabi_ddiv>:
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175a:	4657      	mov	r7, sl
 800175c:	46de      	mov	lr, fp
 800175e:	464e      	mov	r6, r9
 8001760:	4645      	mov	r5, r8
 8001762:	b5e0      	push	{r5, r6, r7, lr}
 8001764:	4683      	mov	fp, r0
 8001766:	0007      	movs	r7, r0
 8001768:	030e      	lsls	r6, r1, #12
 800176a:	0048      	lsls	r0, r1, #1
 800176c:	b085      	sub	sp, #20
 800176e:	4692      	mov	sl, r2
 8001770:	001c      	movs	r4, r3
 8001772:	0b36      	lsrs	r6, r6, #12
 8001774:	0d40      	lsrs	r0, r0, #21
 8001776:	0fcd      	lsrs	r5, r1, #31
 8001778:	2800      	cmp	r0, #0
 800177a:	d100      	bne.n	800177e <__aeabi_ddiv+0x26>
 800177c:	e09d      	b.n	80018ba <__aeabi_ddiv+0x162>
 800177e:	4b95      	ldr	r3, [pc, #596]	; (80019d4 <__aeabi_ddiv+0x27c>)
 8001780:	4298      	cmp	r0, r3
 8001782:	d039      	beq.n	80017f8 <__aeabi_ddiv+0xa0>
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	00f6      	lsls	r6, r6, #3
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	431e      	orrs	r6, r3
 800178c:	4a92      	ldr	r2, [pc, #584]	; (80019d8 <__aeabi_ddiv+0x280>)
 800178e:	0f7b      	lsrs	r3, r7, #29
 8001790:	4333      	orrs	r3, r6
 8001792:	4699      	mov	r9, r3
 8001794:	4694      	mov	ip, r2
 8001796:	0003      	movs	r3, r0
 8001798:	4463      	add	r3, ip
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2300      	movs	r3, #0
 800179e:	2600      	movs	r6, #0
 80017a0:	00ff      	lsls	r7, r7, #3
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	0323      	lsls	r3, r4, #12
 80017a6:	0b1b      	lsrs	r3, r3, #12
 80017a8:	4698      	mov	r8, r3
 80017aa:	0063      	lsls	r3, r4, #1
 80017ac:	0fe4      	lsrs	r4, r4, #31
 80017ae:	4652      	mov	r2, sl
 80017b0:	0d5b      	lsrs	r3, r3, #21
 80017b2:	9401      	str	r4, [sp, #4]
 80017b4:	d100      	bne.n	80017b8 <__aeabi_ddiv+0x60>
 80017b6:	e0b3      	b.n	8001920 <__aeabi_ddiv+0x1c8>
 80017b8:	4986      	ldr	r1, [pc, #536]	; (80019d4 <__aeabi_ddiv+0x27c>)
 80017ba:	428b      	cmp	r3, r1
 80017bc:	d100      	bne.n	80017c0 <__aeabi_ddiv+0x68>
 80017be:	e09e      	b.n	80018fe <__aeabi_ddiv+0x1a6>
 80017c0:	4642      	mov	r2, r8
 80017c2:	00d1      	lsls	r1, r2, #3
 80017c4:	2280      	movs	r2, #128	; 0x80
 80017c6:	0412      	lsls	r2, r2, #16
 80017c8:	430a      	orrs	r2, r1
 80017ca:	4651      	mov	r1, sl
 80017cc:	0f49      	lsrs	r1, r1, #29
 80017ce:	4311      	orrs	r1, r2
 80017d0:	468b      	mov	fp, r1
 80017d2:	4981      	ldr	r1, [pc, #516]	; (80019d8 <__aeabi_ddiv+0x280>)
 80017d4:	4652      	mov	r2, sl
 80017d6:	468c      	mov	ip, r1
 80017d8:	9900      	ldr	r1, [sp, #0]
 80017da:	4463      	add	r3, ip
 80017dc:	1acb      	subs	r3, r1, r3
 80017de:	2100      	movs	r1, #0
 80017e0:	00d2      	lsls	r2, r2, #3
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	002b      	movs	r3, r5
 80017e6:	4063      	eors	r3, r4
 80017e8:	469a      	mov	sl, r3
 80017ea:	2e0f      	cmp	r6, #15
 80017ec:	d900      	bls.n	80017f0 <__aeabi_ddiv+0x98>
 80017ee:	e105      	b.n	80019fc <__aeabi_ddiv+0x2a4>
 80017f0:	4b7a      	ldr	r3, [pc, #488]	; (80019dc <__aeabi_ddiv+0x284>)
 80017f2:	00b6      	lsls	r6, r6, #2
 80017f4:	599b      	ldr	r3, [r3, r6]
 80017f6:	469f      	mov	pc, r3
 80017f8:	465b      	mov	r3, fp
 80017fa:	4333      	orrs	r3, r6
 80017fc:	4699      	mov	r9, r3
 80017fe:	d000      	beq.n	8001802 <__aeabi_ddiv+0xaa>
 8001800:	e0b8      	b.n	8001974 <__aeabi_ddiv+0x21c>
 8001802:	2302      	movs	r3, #2
 8001804:	2608      	movs	r6, #8
 8001806:	2700      	movs	r7, #0
 8001808:	9000      	str	r0, [sp, #0]
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	e7ca      	b.n	80017a4 <__aeabi_ddiv+0x4c>
 800180e:	46cb      	mov	fp, r9
 8001810:	003a      	movs	r2, r7
 8001812:	9902      	ldr	r1, [sp, #8]
 8001814:	9501      	str	r5, [sp, #4]
 8001816:	9b01      	ldr	r3, [sp, #4]
 8001818:	469a      	mov	sl, r3
 800181a:	2902      	cmp	r1, #2
 800181c:	d027      	beq.n	800186e <__aeabi_ddiv+0x116>
 800181e:	2903      	cmp	r1, #3
 8001820:	d100      	bne.n	8001824 <__aeabi_ddiv+0xcc>
 8001822:	e280      	b.n	8001d26 <__aeabi_ddiv+0x5ce>
 8001824:	2901      	cmp	r1, #1
 8001826:	d044      	beq.n	80018b2 <__aeabi_ddiv+0x15a>
 8001828:	496d      	ldr	r1, [pc, #436]	; (80019e0 <__aeabi_ddiv+0x288>)
 800182a:	9b00      	ldr	r3, [sp, #0]
 800182c:	468c      	mov	ip, r1
 800182e:	4463      	add	r3, ip
 8001830:	001c      	movs	r4, r3
 8001832:	2c00      	cmp	r4, #0
 8001834:	dd38      	ble.n	80018a8 <__aeabi_ddiv+0x150>
 8001836:	0753      	lsls	r3, r2, #29
 8001838:	d000      	beq.n	800183c <__aeabi_ddiv+0xe4>
 800183a:	e213      	b.n	8001c64 <__aeabi_ddiv+0x50c>
 800183c:	08d2      	lsrs	r2, r2, #3
 800183e:	465b      	mov	r3, fp
 8001840:	01db      	lsls	r3, r3, #7
 8001842:	d509      	bpl.n	8001858 <__aeabi_ddiv+0x100>
 8001844:	4659      	mov	r1, fp
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <__aeabi_ddiv+0x28c>)
 8001848:	4019      	ands	r1, r3
 800184a:	468b      	mov	fp, r1
 800184c:	2180      	movs	r1, #128	; 0x80
 800184e:	00c9      	lsls	r1, r1, #3
 8001850:	468c      	mov	ip, r1
 8001852:	9b00      	ldr	r3, [sp, #0]
 8001854:	4463      	add	r3, ip
 8001856:	001c      	movs	r4, r3
 8001858:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <__aeabi_ddiv+0x290>)
 800185a:	429c      	cmp	r4, r3
 800185c:	dc07      	bgt.n	800186e <__aeabi_ddiv+0x116>
 800185e:	465b      	mov	r3, fp
 8001860:	0564      	lsls	r4, r4, #21
 8001862:	075f      	lsls	r7, r3, #29
 8001864:	025b      	lsls	r3, r3, #9
 8001866:	4317      	orrs	r7, r2
 8001868:	0b1b      	lsrs	r3, r3, #12
 800186a:	0d62      	lsrs	r2, r4, #21
 800186c:	e002      	b.n	8001874 <__aeabi_ddiv+0x11c>
 800186e:	2300      	movs	r3, #0
 8001870:	2700      	movs	r7, #0
 8001872:	4a58      	ldr	r2, [pc, #352]	; (80019d4 <__aeabi_ddiv+0x27c>)
 8001874:	2100      	movs	r1, #0
 8001876:	031b      	lsls	r3, r3, #12
 8001878:	0b1c      	lsrs	r4, r3, #12
 800187a:	0d0b      	lsrs	r3, r1, #20
 800187c:	051b      	lsls	r3, r3, #20
 800187e:	4323      	orrs	r3, r4
 8001880:	0514      	lsls	r4, r2, #20
 8001882:	4a5a      	ldr	r2, [pc, #360]	; (80019ec <__aeabi_ddiv+0x294>)
 8001884:	0038      	movs	r0, r7
 8001886:	4013      	ands	r3, r2
 8001888:	431c      	orrs	r4, r3
 800188a:	4653      	mov	r3, sl
 800188c:	0064      	lsls	r4, r4, #1
 800188e:	07db      	lsls	r3, r3, #31
 8001890:	0864      	lsrs	r4, r4, #1
 8001892:	431c      	orrs	r4, r3
 8001894:	0021      	movs	r1, r4
 8001896:	b005      	add	sp, #20
 8001898:	bc3c      	pop	{r2, r3, r4, r5}
 800189a:	4690      	mov	r8, r2
 800189c:	4699      	mov	r9, r3
 800189e:	46a2      	mov	sl, r4
 80018a0:	46ab      	mov	fp, r5
 80018a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a4:	2201      	movs	r2, #1
 80018a6:	4252      	negs	r2, r2
 80018a8:	2301      	movs	r3, #1
 80018aa:	1b1b      	subs	r3, r3, r4
 80018ac:	2b38      	cmp	r3, #56	; 0x38
 80018ae:	dc00      	bgt.n	80018b2 <__aeabi_ddiv+0x15a>
 80018b0:	e1ad      	b.n	8001c0e <__aeabi_ddiv+0x4b6>
 80018b2:	2200      	movs	r2, #0
 80018b4:	2300      	movs	r3, #0
 80018b6:	2700      	movs	r7, #0
 80018b8:	e7dc      	b.n	8001874 <__aeabi_ddiv+0x11c>
 80018ba:	465b      	mov	r3, fp
 80018bc:	4333      	orrs	r3, r6
 80018be:	4699      	mov	r9, r3
 80018c0:	d05e      	beq.n	8001980 <__aeabi_ddiv+0x228>
 80018c2:	2e00      	cmp	r6, #0
 80018c4:	d100      	bne.n	80018c8 <__aeabi_ddiv+0x170>
 80018c6:	e18a      	b.n	8001bde <__aeabi_ddiv+0x486>
 80018c8:	0030      	movs	r0, r6
 80018ca:	f001 fa81 	bl	8002dd0 <__clzsi2>
 80018ce:	0003      	movs	r3, r0
 80018d0:	3b0b      	subs	r3, #11
 80018d2:	2b1c      	cmp	r3, #28
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_ddiv+0x180>
 80018d6:	e17b      	b.n	8001bd0 <__aeabi_ddiv+0x478>
 80018d8:	221d      	movs	r2, #29
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	465a      	mov	r2, fp
 80018de:	0001      	movs	r1, r0
 80018e0:	40da      	lsrs	r2, r3
 80018e2:	3908      	subs	r1, #8
 80018e4:	408e      	lsls	r6, r1
 80018e6:	0013      	movs	r3, r2
 80018e8:	465f      	mov	r7, fp
 80018ea:	4333      	orrs	r3, r6
 80018ec:	4699      	mov	r9, r3
 80018ee:	408f      	lsls	r7, r1
 80018f0:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <__aeabi_ddiv+0x298>)
 80018f2:	2600      	movs	r6, #0
 80018f4:	1a1b      	subs	r3, r3, r0
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2300      	movs	r3, #0
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	e752      	b.n	80017a4 <__aeabi_ddiv+0x4c>
 80018fe:	4641      	mov	r1, r8
 8001900:	4653      	mov	r3, sl
 8001902:	430b      	orrs	r3, r1
 8001904:	493b      	ldr	r1, [pc, #236]	; (80019f4 <__aeabi_ddiv+0x29c>)
 8001906:	469b      	mov	fp, r3
 8001908:	468c      	mov	ip, r1
 800190a:	9b00      	ldr	r3, [sp, #0]
 800190c:	4463      	add	r3, ip
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	465b      	mov	r3, fp
 8001912:	2b00      	cmp	r3, #0
 8001914:	d13b      	bne.n	800198e <__aeabi_ddiv+0x236>
 8001916:	2302      	movs	r3, #2
 8001918:	2200      	movs	r2, #0
 800191a:	431e      	orrs	r6, r3
 800191c:	2102      	movs	r1, #2
 800191e:	e761      	b.n	80017e4 <__aeabi_ddiv+0x8c>
 8001920:	4643      	mov	r3, r8
 8001922:	4313      	orrs	r3, r2
 8001924:	469b      	mov	fp, r3
 8001926:	d037      	beq.n	8001998 <__aeabi_ddiv+0x240>
 8001928:	4643      	mov	r3, r8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d100      	bne.n	8001930 <__aeabi_ddiv+0x1d8>
 800192e:	e162      	b.n	8001bf6 <__aeabi_ddiv+0x49e>
 8001930:	4640      	mov	r0, r8
 8001932:	f001 fa4d 	bl	8002dd0 <__clzsi2>
 8001936:	0003      	movs	r3, r0
 8001938:	3b0b      	subs	r3, #11
 800193a:	2b1c      	cmp	r3, #28
 800193c:	dd00      	ble.n	8001940 <__aeabi_ddiv+0x1e8>
 800193e:	e153      	b.n	8001be8 <__aeabi_ddiv+0x490>
 8001940:	0002      	movs	r2, r0
 8001942:	4641      	mov	r1, r8
 8001944:	3a08      	subs	r2, #8
 8001946:	4091      	lsls	r1, r2
 8001948:	4688      	mov	r8, r1
 800194a:	211d      	movs	r1, #29
 800194c:	1acb      	subs	r3, r1, r3
 800194e:	4651      	mov	r1, sl
 8001950:	40d9      	lsrs	r1, r3
 8001952:	000b      	movs	r3, r1
 8001954:	4641      	mov	r1, r8
 8001956:	430b      	orrs	r3, r1
 8001958:	469b      	mov	fp, r3
 800195a:	4653      	mov	r3, sl
 800195c:	4093      	lsls	r3, r2
 800195e:	001a      	movs	r2, r3
 8001960:	9b00      	ldr	r3, [sp, #0]
 8001962:	4925      	ldr	r1, [pc, #148]	; (80019f8 <__aeabi_ddiv+0x2a0>)
 8001964:	469c      	mov	ip, r3
 8001966:	4460      	add	r0, ip
 8001968:	0003      	movs	r3, r0
 800196a:	468c      	mov	ip, r1
 800196c:	4463      	add	r3, ip
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2100      	movs	r1, #0
 8001972:	e737      	b.n	80017e4 <__aeabi_ddiv+0x8c>
 8001974:	2303      	movs	r3, #3
 8001976:	46b1      	mov	r9, r6
 8001978:	9000      	str	r0, [sp, #0]
 800197a:	260c      	movs	r6, #12
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	e711      	b.n	80017a4 <__aeabi_ddiv+0x4c>
 8001980:	2300      	movs	r3, #0
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	2604      	movs	r6, #4
 8001988:	2700      	movs	r7, #0
 800198a:	9302      	str	r3, [sp, #8]
 800198c:	e70a      	b.n	80017a4 <__aeabi_ddiv+0x4c>
 800198e:	2303      	movs	r3, #3
 8001990:	46c3      	mov	fp, r8
 8001992:	431e      	orrs	r6, r3
 8001994:	2103      	movs	r1, #3
 8001996:	e725      	b.n	80017e4 <__aeabi_ddiv+0x8c>
 8001998:	3301      	adds	r3, #1
 800199a:	431e      	orrs	r6, r3
 800199c:	2200      	movs	r2, #0
 800199e:	2101      	movs	r1, #1
 80019a0:	e720      	b.n	80017e4 <__aeabi_ddiv+0x8c>
 80019a2:	2300      	movs	r3, #0
 80019a4:	469a      	mov	sl, r3
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	2700      	movs	r7, #0
 80019aa:	031b      	lsls	r3, r3, #12
 80019ac:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <__aeabi_ddiv+0x27c>)
 80019ae:	e761      	b.n	8001874 <__aeabi_ddiv+0x11c>
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	4649      	mov	r1, r9
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	4219      	tst	r1, r3
 80019b8:	d100      	bne.n	80019bc <__aeabi_ddiv+0x264>
 80019ba:	e0e2      	b.n	8001b82 <__aeabi_ddiv+0x42a>
 80019bc:	4659      	mov	r1, fp
 80019be:	4219      	tst	r1, r3
 80019c0:	d000      	beq.n	80019c4 <__aeabi_ddiv+0x26c>
 80019c2:	e0de      	b.n	8001b82 <__aeabi_ddiv+0x42a>
 80019c4:	430b      	orrs	r3, r1
 80019c6:	031b      	lsls	r3, r3, #12
 80019c8:	0017      	movs	r7, r2
 80019ca:	0b1b      	lsrs	r3, r3, #12
 80019cc:	46a2      	mov	sl, r4
 80019ce:	4a01      	ldr	r2, [pc, #4]	; (80019d4 <__aeabi_ddiv+0x27c>)
 80019d0:	e750      	b.n	8001874 <__aeabi_ddiv+0x11c>
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	000007ff 	.word	0x000007ff
 80019d8:	fffffc01 	.word	0xfffffc01
 80019dc:	08005da0 	.word	0x08005da0
 80019e0:	000003ff 	.word	0x000003ff
 80019e4:	feffffff 	.word	0xfeffffff
 80019e8:	000007fe 	.word	0x000007fe
 80019ec:	800fffff 	.word	0x800fffff
 80019f0:	fffffc0d 	.word	0xfffffc0d
 80019f4:	fffff801 	.word	0xfffff801
 80019f8:	000003f3 	.word	0x000003f3
 80019fc:	45d9      	cmp	r9, fp
 80019fe:	d900      	bls.n	8001a02 <__aeabi_ddiv+0x2aa>
 8001a00:	e0cb      	b.n	8001b9a <__aeabi_ddiv+0x442>
 8001a02:	d100      	bne.n	8001a06 <__aeabi_ddiv+0x2ae>
 8001a04:	e0c6      	b.n	8001b94 <__aeabi_ddiv+0x43c>
 8001a06:	003c      	movs	r4, r7
 8001a08:	4648      	mov	r0, r9
 8001a0a:	2700      	movs	r7, #0
 8001a0c:	9b00      	ldr	r3, [sp, #0]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	465b      	mov	r3, fp
 8001a14:	0e16      	lsrs	r6, r2, #24
 8001a16:	021b      	lsls	r3, r3, #8
 8001a18:	431e      	orrs	r6, r3
 8001a1a:	0213      	lsls	r3, r2, #8
 8001a1c:	4698      	mov	r8, r3
 8001a1e:	0433      	lsls	r3, r6, #16
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	4699      	mov	r9, r3
 8001a24:	0c31      	lsrs	r1, r6, #16
 8001a26:	9101      	str	r1, [sp, #4]
 8001a28:	f7fe fbf4 	bl	8000214 <__aeabi_uidivmod>
 8001a2c:	464a      	mov	r2, r9
 8001a2e:	4342      	muls	r2, r0
 8001a30:	040b      	lsls	r3, r1, #16
 8001a32:	0c21      	lsrs	r1, r4, #16
 8001a34:	0005      	movs	r5, r0
 8001a36:	4319      	orrs	r1, r3
 8001a38:	428a      	cmp	r2, r1
 8001a3a:	d907      	bls.n	8001a4c <__aeabi_ddiv+0x2f4>
 8001a3c:	1989      	adds	r1, r1, r6
 8001a3e:	3d01      	subs	r5, #1
 8001a40:	428e      	cmp	r6, r1
 8001a42:	d803      	bhi.n	8001a4c <__aeabi_ddiv+0x2f4>
 8001a44:	428a      	cmp	r2, r1
 8001a46:	d901      	bls.n	8001a4c <__aeabi_ddiv+0x2f4>
 8001a48:	1e85      	subs	r5, r0, #2
 8001a4a:	1989      	adds	r1, r1, r6
 8001a4c:	1a88      	subs	r0, r1, r2
 8001a4e:	9901      	ldr	r1, [sp, #4]
 8001a50:	f7fe fbe0 	bl	8000214 <__aeabi_uidivmod>
 8001a54:	0409      	lsls	r1, r1, #16
 8001a56:	468c      	mov	ip, r1
 8001a58:	464a      	mov	r2, r9
 8001a5a:	0421      	lsls	r1, r4, #16
 8001a5c:	4664      	mov	r4, ip
 8001a5e:	4342      	muls	r2, r0
 8001a60:	0c09      	lsrs	r1, r1, #16
 8001a62:	0003      	movs	r3, r0
 8001a64:	4321      	orrs	r1, r4
 8001a66:	428a      	cmp	r2, r1
 8001a68:	d904      	bls.n	8001a74 <__aeabi_ddiv+0x31c>
 8001a6a:	1989      	adds	r1, r1, r6
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	428e      	cmp	r6, r1
 8001a70:	d800      	bhi.n	8001a74 <__aeabi_ddiv+0x31c>
 8001a72:	e0f1      	b.n	8001c58 <__aeabi_ddiv+0x500>
 8001a74:	042d      	lsls	r5, r5, #16
 8001a76:	431d      	orrs	r5, r3
 8001a78:	46ab      	mov	fp, r5
 8001a7a:	4643      	mov	r3, r8
 8001a7c:	1a89      	subs	r1, r1, r2
 8001a7e:	4642      	mov	r2, r8
 8001a80:	0c28      	lsrs	r0, r5, #16
 8001a82:	0412      	lsls	r2, r2, #16
 8001a84:	0c1d      	lsrs	r5, r3, #16
 8001a86:	465b      	mov	r3, fp
 8001a88:	0c14      	lsrs	r4, r2, #16
 8001a8a:	0022      	movs	r2, r4
 8001a8c:	041b      	lsls	r3, r3, #16
 8001a8e:	0c1b      	lsrs	r3, r3, #16
 8001a90:	435a      	muls	r2, r3
 8001a92:	9403      	str	r4, [sp, #12]
 8001a94:	436b      	muls	r3, r5
 8001a96:	4344      	muls	r4, r0
 8001a98:	9502      	str	r5, [sp, #8]
 8001a9a:	4368      	muls	r0, r5
 8001a9c:	191b      	adds	r3, r3, r4
 8001a9e:	0c15      	lsrs	r5, r2, #16
 8001aa0:	18eb      	adds	r3, r5, r3
 8001aa2:	429c      	cmp	r4, r3
 8001aa4:	d903      	bls.n	8001aae <__aeabi_ddiv+0x356>
 8001aa6:	2480      	movs	r4, #128	; 0x80
 8001aa8:	0264      	lsls	r4, r4, #9
 8001aaa:	46a4      	mov	ip, r4
 8001aac:	4460      	add	r0, ip
 8001aae:	0c1c      	lsrs	r4, r3, #16
 8001ab0:	0415      	lsls	r5, r2, #16
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	0c2d      	lsrs	r5, r5, #16
 8001ab6:	1820      	adds	r0, r4, r0
 8001ab8:	195d      	adds	r5, r3, r5
 8001aba:	4281      	cmp	r1, r0
 8001abc:	d377      	bcc.n	8001bae <__aeabi_ddiv+0x456>
 8001abe:	d073      	beq.n	8001ba8 <__aeabi_ddiv+0x450>
 8001ac0:	1a0c      	subs	r4, r1, r0
 8001ac2:	4aa2      	ldr	r2, [pc, #648]	; (8001d4c <__aeabi_ddiv+0x5f4>)
 8001ac4:	1b7d      	subs	r5, r7, r5
 8001ac6:	42af      	cmp	r7, r5
 8001ac8:	41bf      	sbcs	r7, r7
 8001aca:	4694      	mov	ip, r2
 8001acc:	9b00      	ldr	r3, [sp, #0]
 8001ace:	427f      	negs	r7, r7
 8001ad0:	4463      	add	r3, ip
 8001ad2:	1be0      	subs	r0, r4, r7
 8001ad4:	001c      	movs	r4, r3
 8001ad6:	4286      	cmp	r6, r0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_ddiv+0x384>
 8001ada:	e0db      	b.n	8001c94 <__aeabi_ddiv+0x53c>
 8001adc:	9901      	ldr	r1, [sp, #4]
 8001ade:	f7fe fb99 	bl	8000214 <__aeabi_uidivmod>
 8001ae2:	464a      	mov	r2, r9
 8001ae4:	4342      	muls	r2, r0
 8001ae6:	040b      	lsls	r3, r1, #16
 8001ae8:	0c29      	lsrs	r1, r5, #16
 8001aea:	0007      	movs	r7, r0
 8001aec:	4319      	orrs	r1, r3
 8001aee:	428a      	cmp	r2, r1
 8001af0:	d907      	bls.n	8001b02 <__aeabi_ddiv+0x3aa>
 8001af2:	1989      	adds	r1, r1, r6
 8001af4:	3f01      	subs	r7, #1
 8001af6:	428e      	cmp	r6, r1
 8001af8:	d803      	bhi.n	8001b02 <__aeabi_ddiv+0x3aa>
 8001afa:	428a      	cmp	r2, r1
 8001afc:	d901      	bls.n	8001b02 <__aeabi_ddiv+0x3aa>
 8001afe:	1e87      	subs	r7, r0, #2
 8001b00:	1989      	adds	r1, r1, r6
 8001b02:	1a88      	subs	r0, r1, r2
 8001b04:	9901      	ldr	r1, [sp, #4]
 8001b06:	f7fe fb85 	bl	8000214 <__aeabi_uidivmod>
 8001b0a:	0409      	lsls	r1, r1, #16
 8001b0c:	464a      	mov	r2, r9
 8001b0e:	4689      	mov	r9, r1
 8001b10:	0429      	lsls	r1, r5, #16
 8001b12:	464d      	mov	r5, r9
 8001b14:	4342      	muls	r2, r0
 8001b16:	0c09      	lsrs	r1, r1, #16
 8001b18:	0003      	movs	r3, r0
 8001b1a:	4329      	orrs	r1, r5
 8001b1c:	428a      	cmp	r2, r1
 8001b1e:	d907      	bls.n	8001b30 <__aeabi_ddiv+0x3d8>
 8001b20:	1989      	adds	r1, r1, r6
 8001b22:	3b01      	subs	r3, #1
 8001b24:	428e      	cmp	r6, r1
 8001b26:	d803      	bhi.n	8001b30 <__aeabi_ddiv+0x3d8>
 8001b28:	428a      	cmp	r2, r1
 8001b2a:	d901      	bls.n	8001b30 <__aeabi_ddiv+0x3d8>
 8001b2c:	1e83      	subs	r3, r0, #2
 8001b2e:	1989      	adds	r1, r1, r6
 8001b30:	043f      	lsls	r7, r7, #16
 8001b32:	1a89      	subs	r1, r1, r2
 8001b34:	003a      	movs	r2, r7
 8001b36:	9f03      	ldr	r7, [sp, #12]
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	0038      	movs	r0, r7
 8001b3c:	0413      	lsls	r3, r2, #16
 8001b3e:	0c1b      	lsrs	r3, r3, #16
 8001b40:	4358      	muls	r0, r3
 8001b42:	4681      	mov	r9, r0
 8001b44:	9802      	ldr	r0, [sp, #8]
 8001b46:	0c15      	lsrs	r5, r2, #16
 8001b48:	436f      	muls	r7, r5
 8001b4a:	4343      	muls	r3, r0
 8001b4c:	4345      	muls	r5, r0
 8001b4e:	4648      	mov	r0, r9
 8001b50:	0c00      	lsrs	r0, r0, #16
 8001b52:	4684      	mov	ip, r0
 8001b54:	19db      	adds	r3, r3, r7
 8001b56:	4463      	add	r3, ip
 8001b58:	429f      	cmp	r7, r3
 8001b5a:	d903      	bls.n	8001b64 <__aeabi_ddiv+0x40c>
 8001b5c:	2080      	movs	r0, #128	; 0x80
 8001b5e:	0240      	lsls	r0, r0, #9
 8001b60:	4684      	mov	ip, r0
 8001b62:	4465      	add	r5, ip
 8001b64:	4648      	mov	r0, r9
 8001b66:	0c1f      	lsrs	r7, r3, #16
 8001b68:	0400      	lsls	r0, r0, #16
 8001b6a:	041b      	lsls	r3, r3, #16
 8001b6c:	0c00      	lsrs	r0, r0, #16
 8001b6e:	197d      	adds	r5, r7, r5
 8001b70:	1818      	adds	r0, r3, r0
 8001b72:	42a9      	cmp	r1, r5
 8001b74:	d200      	bcs.n	8001b78 <__aeabi_ddiv+0x420>
 8001b76:	e084      	b.n	8001c82 <__aeabi_ddiv+0x52a>
 8001b78:	d100      	bne.n	8001b7c <__aeabi_ddiv+0x424>
 8001b7a:	e07f      	b.n	8001c7c <__aeabi_ddiv+0x524>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	e657      	b.n	8001832 <__aeabi_ddiv+0xda>
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	464a      	mov	r2, r9
 8001b86:	031b      	lsls	r3, r3, #12
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	031b      	lsls	r3, r3, #12
 8001b8c:	0b1b      	lsrs	r3, r3, #12
 8001b8e:	46aa      	mov	sl, r5
 8001b90:	4a6f      	ldr	r2, [pc, #444]	; (8001d50 <__aeabi_ddiv+0x5f8>)
 8001b92:	e66f      	b.n	8001874 <__aeabi_ddiv+0x11c>
 8001b94:	42ba      	cmp	r2, r7
 8001b96:	d900      	bls.n	8001b9a <__aeabi_ddiv+0x442>
 8001b98:	e735      	b.n	8001a06 <__aeabi_ddiv+0x2ae>
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	07dc      	lsls	r4, r3, #31
 8001b9e:	0858      	lsrs	r0, r3, #1
 8001ba0:	087b      	lsrs	r3, r7, #1
 8001ba2:	431c      	orrs	r4, r3
 8001ba4:	07ff      	lsls	r7, r7, #31
 8001ba6:	e734      	b.n	8001a12 <__aeabi_ddiv+0x2ba>
 8001ba8:	2400      	movs	r4, #0
 8001baa:	42af      	cmp	r7, r5
 8001bac:	d289      	bcs.n	8001ac2 <__aeabi_ddiv+0x36a>
 8001bae:	4447      	add	r7, r8
 8001bb0:	4547      	cmp	r7, r8
 8001bb2:	41a4      	sbcs	r4, r4
 8001bb4:	465b      	mov	r3, fp
 8001bb6:	4264      	negs	r4, r4
 8001bb8:	19a4      	adds	r4, r4, r6
 8001bba:	1864      	adds	r4, r4, r1
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	42a6      	cmp	r6, r4
 8001bc0:	d21e      	bcs.n	8001c00 <__aeabi_ddiv+0x4a8>
 8001bc2:	42a0      	cmp	r0, r4
 8001bc4:	d86d      	bhi.n	8001ca2 <__aeabi_ddiv+0x54a>
 8001bc6:	d100      	bne.n	8001bca <__aeabi_ddiv+0x472>
 8001bc8:	e0b6      	b.n	8001d38 <__aeabi_ddiv+0x5e0>
 8001bca:	1a24      	subs	r4, r4, r0
 8001bcc:	469b      	mov	fp, r3
 8001bce:	e778      	b.n	8001ac2 <__aeabi_ddiv+0x36a>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	465a      	mov	r2, fp
 8001bd4:	3b28      	subs	r3, #40	; 0x28
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	2700      	movs	r7, #0
 8001bda:	4691      	mov	r9, r2
 8001bdc:	e688      	b.n	80018f0 <__aeabi_ddiv+0x198>
 8001bde:	4658      	mov	r0, fp
 8001be0:	f001 f8f6 	bl	8002dd0 <__clzsi2>
 8001be4:	3020      	adds	r0, #32
 8001be6:	e672      	b.n	80018ce <__aeabi_ddiv+0x176>
 8001be8:	0003      	movs	r3, r0
 8001bea:	4652      	mov	r2, sl
 8001bec:	3b28      	subs	r3, #40	; 0x28
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	4693      	mov	fp, r2
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	e6b4      	b.n	8001960 <__aeabi_ddiv+0x208>
 8001bf6:	4650      	mov	r0, sl
 8001bf8:	f001 f8ea 	bl	8002dd0 <__clzsi2>
 8001bfc:	3020      	adds	r0, #32
 8001bfe:	e69a      	b.n	8001936 <__aeabi_ddiv+0x1de>
 8001c00:	42a6      	cmp	r6, r4
 8001c02:	d1e2      	bne.n	8001bca <__aeabi_ddiv+0x472>
 8001c04:	45b8      	cmp	r8, r7
 8001c06:	d9dc      	bls.n	8001bc2 <__aeabi_ddiv+0x46a>
 8001c08:	1a34      	subs	r4, r6, r0
 8001c0a:	469b      	mov	fp, r3
 8001c0c:	e759      	b.n	8001ac2 <__aeabi_ddiv+0x36a>
 8001c0e:	2b1f      	cmp	r3, #31
 8001c10:	dc65      	bgt.n	8001cde <__aeabi_ddiv+0x586>
 8001c12:	4c50      	ldr	r4, [pc, #320]	; (8001d54 <__aeabi_ddiv+0x5fc>)
 8001c14:	9900      	ldr	r1, [sp, #0]
 8001c16:	46a4      	mov	ip, r4
 8001c18:	465c      	mov	r4, fp
 8001c1a:	4461      	add	r1, ip
 8001c1c:	0008      	movs	r0, r1
 8001c1e:	408c      	lsls	r4, r1
 8001c20:	0011      	movs	r1, r2
 8001c22:	4082      	lsls	r2, r0
 8001c24:	40d9      	lsrs	r1, r3
 8001c26:	1e50      	subs	r0, r2, #1
 8001c28:	4182      	sbcs	r2, r0
 8001c2a:	430c      	orrs	r4, r1
 8001c2c:	4314      	orrs	r4, r2
 8001c2e:	465a      	mov	r2, fp
 8001c30:	40da      	lsrs	r2, r3
 8001c32:	0013      	movs	r3, r2
 8001c34:	0762      	lsls	r2, r4, #29
 8001c36:	d009      	beq.n	8001c4c <__aeabi_ddiv+0x4f4>
 8001c38:	220f      	movs	r2, #15
 8001c3a:	4022      	ands	r2, r4
 8001c3c:	2a04      	cmp	r2, #4
 8001c3e:	d005      	beq.n	8001c4c <__aeabi_ddiv+0x4f4>
 8001c40:	0022      	movs	r2, r4
 8001c42:	1d14      	adds	r4, r2, #4
 8001c44:	4294      	cmp	r4, r2
 8001c46:	4189      	sbcs	r1, r1
 8001c48:	4249      	negs	r1, r1
 8001c4a:	185b      	adds	r3, r3, r1
 8001c4c:	021a      	lsls	r2, r3, #8
 8001c4e:	d562      	bpl.n	8001d16 <__aeabi_ddiv+0x5be>
 8001c50:	2201      	movs	r2, #1
 8001c52:	2300      	movs	r3, #0
 8001c54:	2700      	movs	r7, #0
 8001c56:	e60d      	b.n	8001874 <__aeabi_ddiv+0x11c>
 8001c58:	428a      	cmp	r2, r1
 8001c5a:	d800      	bhi.n	8001c5e <__aeabi_ddiv+0x506>
 8001c5c:	e70a      	b.n	8001a74 <__aeabi_ddiv+0x31c>
 8001c5e:	1e83      	subs	r3, r0, #2
 8001c60:	1989      	adds	r1, r1, r6
 8001c62:	e707      	b.n	8001a74 <__aeabi_ddiv+0x31c>
 8001c64:	230f      	movs	r3, #15
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_ddiv+0x516>
 8001c6c:	e5e6      	b.n	800183c <__aeabi_ddiv+0xe4>
 8001c6e:	1d17      	adds	r7, r2, #4
 8001c70:	4297      	cmp	r7, r2
 8001c72:	4192      	sbcs	r2, r2
 8001c74:	4253      	negs	r3, r2
 8001c76:	449b      	add	fp, r3
 8001c78:	08fa      	lsrs	r2, r7, #3
 8001c7a:	e5e0      	b.n	800183e <__aeabi_ddiv+0xe6>
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_ddiv+0x52a>
 8001c80:	e5d7      	b.n	8001832 <__aeabi_ddiv+0xda>
 8001c82:	1871      	adds	r1, r6, r1
 8001c84:	1e53      	subs	r3, r2, #1
 8001c86:	42b1      	cmp	r1, r6
 8001c88:	d327      	bcc.n	8001cda <__aeabi_ddiv+0x582>
 8001c8a:	42a9      	cmp	r1, r5
 8001c8c:	d315      	bcc.n	8001cba <__aeabi_ddiv+0x562>
 8001c8e:	d058      	beq.n	8001d42 <__aeabi_ddiv+0x5ea>
 8001c90:	001a      	movs	r2, r3
 8001c92:	e773      	b.n	8001b7c <__aeabi_ddiv+0x424>
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	dc00      	bgt.n	8001c9a <__aeabi_ddiv+0x542>
 8001c98:	e604      	b.n	80018a4 <__aeabi_ddiv+0x14c>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	449b      	add	fp, r3
 8001ca0:	e5cd      	b.n	800183e <__aeabi_ddiv+0xe6>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	4447      	add	r7, r8
 8001ca6:	4547      	cmp	r7, r8
 8001ca8:	4189      	sbcs	r1, r1
 8001caa:	425b      	negs	r3, r3
 8001cac:	469c      	mov	ip, r3
 8001cae:	4249      	negs	r1, r1
 8001cb0:	1989      	adds	r1, r1, r6
 8001cb2:	190c      	adds	r4, r1, r4
 8001cb4:	44e3      	add	fp, ip
 8001cb6:	1a24      	subs	r4, r4, r0
 8001cb8:	e703      	b.n	8001ac2 <__aeabi_ddiv+0x36a>
 8001cba:	4643      	mov	r3, r8
 8001cbc:	005f      	lsls	r7, r3, #1
 8001cbe:	4547      	cmp	r7, r8
 8001cc0:	419b      	sbcs	r3, r3
 8001cc2:	46b8      	mov	r8, r7
 8001cc4:	425b      	negs	r3, r3
 8001cc6:	199e      	adds	r6, r3, r6
 8001cc8:	3a02      	subs	r2, #2
 8001cca:	1989      	adds	r1, r1, r6
 8001ccc:	42a9      	cmp	r1, r5
 8001cce:	d000      	beq.n	8001cd2 <__aeabi_ddiv+0x57a>
 8001cd0:	e754      	b.n	8001b7c <__aeabi_ddiv+0x424>
 8001cd2:	4540      	cmp	r0, r8
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_ddiv+0x580>
 8001cd6:	e751      	b.n	8001b7c <__aeabi_ddiv+0x424>
 8001cd8:	e5ab      	b.n	8001832 <__aeabi_ddiv+0xda>
 8001cda:	001a      	movs	r2, r3
 8001cdc:	e7f6      	b.n	8001ccc <__aeabi_ddiv+0x574>
 8001cde:	211f      	movs	r1, #31
 8001ce0:	465f      	mov	r7, fp
 8001ce2:	4249      	negs	r1, r1
 8001ce4:	1b0c      	subs	r4, r1, r4
 8001ce6:	40e7      	lsrs	r7, r4
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	d007      	beq.n	8001cfc <__aeabi_ddiv+0x5a4>
 8001cec:	491a      	ldr	r1, [pc, #104]	; (8001d58 <__aeabi_ddiv+0x600>)
 8001cee:	9b00      	ldr	r3, [sp, #0]
 8001cf0:	468c      	mov	ip, r1
 8001cf2:	4463      	add	r3, ip
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	465b      	mov	r3, fp
 8001cf8:	4083      	lsls	r3, r0
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	1e50      	subs	r0, r2, #1
 8001cfe:	4182      	sbcs	r2, r0
 8001d00:	433a      	orrs	r2, r7
 8001d02:	2707      	movs	r7, #7
 8001d04:	2300      	movs	r3, #0
 8001d06:	4017      	ands	r7, r2
 8001d08:	d009      	beq.n	8001d1e <__aeabi_ddiv+0x5c6>
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	4011      	ands	r1, r2
 8001d10:	0014      	movs	r4, r2
 8001d12:	2904      	cmp	r1, #4
 8001d14:	d195      	bne.n	8001c42 <__aeabi_ddiv+0x4ea>
 8001d16:	0022      	movs	r2, r4
 8001d18:	075f      	lsls	r7, r3, #29
 8001d1a:	025b      	lsls	r3, r3, #9
 8001d1c:	0b1b      	lsrs	r3, r3, #12
 8001d1e:	08d2      	lsrs	r2, r2, #3
 8001d20:	4317      	orrs	r7, r2
 8001d22:	2200      	movs	r2, #0
 8001d24:	e5a6      	b.n	8001874 <__aeabi_ddiv+0x11c>
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	4659      	mov	r1, fp
 8001d2a:	031b      	lsls	r3, r3, #12
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	031b      	lsls	r3, r3, #12
 8001d30:	0017      	movs	r7, r2
 8001d32:	0b1b      	lsrs	r3, r3, #12
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <__aeabi_ddiv+0x5f8>)
 8001d36:	e59d      	b.n	8001874 <__aeabi_ddiv+0x11c>
 8001d38:	42bd      	cmp	r5, r7
 8001d3a:	d8b2      	bhi.n	8001ca2 <__aeabi_ddiv+0x54a>
 8001d3c:	469b      	mov	fp, r3
 8001d3e:	2400      	movs	r4, #0
 8001d40:	e6bf      	b.n	8001ac2 <__aeabi_ddiv+0x36a>
 8001d42:	4580      	cmp	r8, r0
 8001d44:	d3b9      	bcc.n	8001cba <__aeabi_ddiv+0x562>
 8001d46:	001a      	movs	r2, r3
 8001d48:	e7c3      	b.n	8001cd2 <__aeabi_ddiv+0x57a>
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	000003ff 	.word	0x000003ff
 8001d50:	000007ff 	.word	0x000007ff
 8001d54:	0000041e 	.word	0x0000041e
 8001d58:	0000043e 	.word	0x0000043e

08001d5c <__eqdf2>:
 8001d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5e:	464f      	mov	r7, r9
 8001d60:	4646      	mov	r6, r8
 8001d62:	46d6      	mov	lr, sl
 8001d64:	4684      	mov	ip, r0
 8001d66:	b5c0      	push	{r6, r7, lr}
 8001d68:	4680      	mov	r8, r0
 8001d6a:	4e19      	ldr	r6, [pc, #100]	; (8001dd0 <__eqdf2+0x74>)
 8001d6c:	0318      	lsls	r0, r3, #12
 8001d6e:	030f      	lsls	r7, r1, #12
 8001d70:	004d      	lsls	r5, r1, #1
 8001d72:	0b00      	lsrs	r0, r0, #12
 8001d74:	005c      	lsls	r4, r3, #1
 8001d76:	4682      	mov	sl, r0
 8001d78:	0b3f      	lsrs	r7, r7, #12
 8001d7a:	0d6d      	lsrs	r5, r5, #21
 8001d7c:	0fc9      	lsrs	r1, r1, #31
 8001d7e:	4691      	mov	r9, r2
 8001d80:	0d64      	lsrs	r4, r4, #21
 8001d82:	0fdb      	lsrs	r3, r3, #31
 8001d84:	2001      	movs	r0, #1
 8001d86:	42b5      	cmp	r5, r6
 8001d88:	d00a      	beq.n	8001da0 <__eqdf2+0x44>
 8001d8a:	42b4      	cmp	r4, r6
 8001d8c:	d003      	beq.n	8001d96 <__eqdf2+0x3a>
 8001d8e:	42a5      	cmp	r5, r4
 8001d90:	d101      	bne.n	8001d96 <__eqdf2+0x3a>
 8001d92:	4557      	cmp	r7, sl
 8001d94:	d00c      	beq.n	8001db0 <__eqdf2+0x54>
 8001d96:	bc1c      	pop	{r2, r3, r4}
 8001d98:	4690      	mov	r8, r2
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	46a2      	mov	sl, r4
 8001d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da0:	4666      	mov	r6, ip
 8001da2:	433e      	orrs	r6, r7
 8001da4:	d1f7      	bne.n	8001d96 <__eqdf2+0x3a>
 8001da6:	42ac      	cmp	r4, r5
 8001da8:	d1f5      	bne.n	8001d96 <__eqdf2+0x3a>
 8001daa:	4654      	mov	r4, sl
 8001dac:	4314      	orrs	r4, r2
 8001dae:	d1f2      	bne.n	8001d96 <__eqdf2+0x3a>
 8001db0:	2001      	movs	r0, #1
 8001db2:	45c8      	cmp	r8, r9
 8001db4:	d1ef      	bne.n	8001d96 <__eqdf2+0x3a>
 8001db6:	4299      	cmp	r1, r3
 8001db8:	d007      	beq.n	8001dca <__eqdf2+0x6e>
 8001dba:	2d00      	cmp	r5, #0
 8001dbc:	d1eb      	bne.n	8001d96 <__eqdf2+0x3a>
 8001dbe:	4663      	mov	r3, ip
 8001dc0:	431f      	orrs	r7, r3
 8001dc2:	0038      	movs	r0, r7
 8001dc4:	1e47      	subs	r7, r0, #1
 8001dc6:	41b8      	sbcs	r0, r7
 8001dc8:	e7e5      	b.n	8001d96 <__eqdf2+0x3a>
 8001dca:	2000      	movs	r0, #0
 8001dcc:	e7e3      	b.n	8001d96 <__eqdf2+0x3a>
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	000007ff 	.word	0x000007ff

08001dd4 <__gedf2>:
 8001dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd6:	464f      	mov	r7, r9
 8001dd8:	4646      	mov	r6, r8
 8001dda:	46d6      	mov	lr, sl
 8001ddc:	004d      	lsls	r5, r1, #1
 8001dde:	b5c0      	push	{r6, r7, lr}
 8001de0:	030e      	lsls	r6, r1, #12
 8001de2:	0fc9      	lsrs	r1, r1, #31
 8001de4:	468a      	mov	sl, r1
 8001de6:	492c      	ldr	r1, [pc, #176]	; (8001e98 <__gedf2+0xc4>)
 8001de8:	031f      	lsls	r7, r3, #12
 8001dea:	005c      	lsls	r4, r3, #1
 8001dec:	4680      	mov	r8, r0
 8001dee:	0b36      	lsrs	r6, r6, #12
 8001df0:	0d6d      	lsrs	r5, r5, #21
 8001df2:	4691      	mov	r9, r2
 8001df4:	0b3f      	lsrs	r7, r7, #12
 8001df6:	0d64      	lsrs	r4, r4, #21
 8001df8:	0fdb      	lsrs	r3, r3, #31
 8001dfa:	428d      	cmp	r5, r1
 8001dfc:	d01e      	beq.n	8001e3c <__gedf2+0x68>
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d016      	beq.n	8001e30 <__gedf2+0x5c>
 8001e02:	2d00      	cmp	r5, #0
 8001e04:	d11e      	bne.n	8001e44 <__gedf2+0x70>
 8001e06:	4330      	orrs	r0, r6
 8001e08:	4684      	mov	ip, r0
 8001e0a:	2c00      	cmp	r4, #0
 8001e0c:	d101      	bne.n	8001e12 <__gedf2+0x3e>
 8001e0e:	433a      	orrs	r2, r7
 8001e10:	d023      	beq.n	8001e5a <__gedf2+0x86>
 8001e12:	4662      	mov	r2, ip
 8001e14:	2a00      	cmp	r2, #0
 8001e16:	d01a      	beq.n	8001e4e <__gedf2+0x7a>
 8001e18:	459a      	cmp	sl, r3
 8001e1a:	d029      	beq.n	8001e70 <__gedf2+0x9c>
 8001e1c:	4651      	mov	r1, sl
 8001e1e:	2002      	movs	r0, #2
 8001e20:	3901      	subs	r1, #1
 8001e22:	4008      	ands	r0, r1
 8001e24:	3801      	subs	r0, #1
 8001e26:	bc1c      	pop	{r2, r3, r4}
 8001e28:	4690      	mov	r8, r2
 8001e2a:	4699      	mov	r9, r3
 8001e2c:	46a2      	mov	sl, r4
 8001e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e30:	0039      	movs	r1, r7
 8001e32:	4311      	orrs	r1, r2
 8001e34:	d0e5      	beq.n	8001e02 <__gedf2+0x2e>
 8001e36:	2002      	movs	r0, #2
 8001e38:	4240      	negs	r0, r0
 8001e3a:	e7f4      	b.n	8001e26 <__gedf2+0x52>
 8001e3c:	4330      	orrs	r0, r6
 8001e3e:	d1fa      	bne.n	8001e36 <__gedf2+0x62>
 8001e40:	42ac      	cmp	r4, r5
 8001e42:	d00f      	beq.n	8001e64 <__gedf2+0x90>
 8001e44:	2c00      	cmp	r4, #0
 8001e46:	d10f      	bne.n	8001e68 <__gedf2+0x94>
 8001e48:	433a      	orrs	r2, r7
 8001e4a:	d0e7      	beq.n	8001e1c <__gedf2+0x48>
 8001e4c:	e00c      	b.n	8001e68 <__gedf2+0x94>
 8001e4e:	2201      	movs	r2, #1
 8001e50:	3b01      	subs	r3, #1
 8001e52:	4393      	bics	r3, r2
 8001e54:	0018      	movs	r0, r3
 8001e56:	3001      	adds	r0, #1
 8001e58:	e7e5      	b.n	8001e26 <__gedf2+0x52>
 8001e5a:	4663      	mov	r3, ip
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0e1      	beq.n	8001e26 <__gedf2+0x52>
 8001e62:	e7db      	b.n	8001e1c <__gedf2+0x48>
 8001e64:	433a      	orrs	r2, r7
 8001e66:	d1e6      	bne.n	8001e36 <__gedf2+0x62>
 8001e68:	459a      	cmp	sl, r3
 8001e6a:	d1d7      	bne.n	8001e1c <__gedf2+0x48>
 8001e6c:	42a5      	cmp	r5, r4
 8001e6e:	dcd5      	bgt.n	8001e1c <__gedf2+0x48>
 8001e70:	42a5      	cmp	r5, r4
 8001e72:	db05      	blt.n	8001e80 <__gedf2+0xac>
 8001e74:	42be      	cmp	r6, r7
 8001e76:	d8d1      	bhi.n	8001e1c <__gedf2+0x48>
 8001e78:	d008      	beq.n	8001e8c <__gedf2+0xb8>
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	42be      	cmp	r6, r7
 8001e7e:	d2d2      	bcs.n	8001e26 <__gedf2+0x52>
 8001e80:	4650      	mov	r0, sl
 8001e82:	2301      	movs	r3, #1
 8001e84:	3801      	subs	r0, #1
 8001e86:	4398      	bics	r0, r3
 8001e88:	3001      	adds	r0, #1
 8001e8a:	e7cc      	b.n	8001e26 <__gedf2+0x52>
 8001e8c:	45c8      	cmp	r8, r9
 8001e8e:	d8c5      	bhi.n	8001e1c <__gedf2+0x48>
 8001e90:	2000      	movs	r0, #0
 8001e92:	45c8      	cmp	r8, r9
 8001e94:	d3f4      	bcc.n	8001e80 <__gedf2+0xac>
 8001e96:	e7c6      	b.n	8001e26 <__gedf2+0x52>
 8001e98:	000007ff 	.word	0x000007ff

08001e9c <__ledf2>:
 8001e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9e:	464f      	mov	r7, r9
 8001ea0:	4646      	mov	r6, r8
 8001ea2:	46d6      	mov	lr, sl
 8001ea4:	004d      	lsls	r5, r1, #1
 8001ea6:	b5c0      	push	{r6, r7, lr}
 8001ea8:	030e      	lsls	r6, r1, #12
 8001eaa:	0fc9      	lsrs	r1, r1, #31
 8001eac:	468a      	mov	sl, r1
 8001eae:	492e      	ldr	r1, [pc, #184]	; (8001f68 <__ledf2+0xcc>)
 8001eb0:	031f      	lsls	r7, r3, #12
 8001eb2:	005c      	lsls	r4, r3, #1
 8001eb4:	4680      	mov	r8, r0
 8001eb6:	0b36      	lsrs	r6, r6, #12
 8001eb8:	0d6d      	lsrs	r5, r5, #21
 8001eba:	4691      	mov	r9, r2
 8001ebc:	0b3f      	lsrs	r7, r7, #12
 8001ebe:	0d64      	lsrs	r4, r4, #21
 8001ec0:	0fdb      	lsrs	r3, r3, #31
 8001ec2:	428d      	cmp	r5, r1
 8001ec4:	d018      	beq.n	8001ef8 <__ledf2+0x5c>
 8001ec6:	428c      	cmp	r4, r1
 8001ec8:	d011      	beq.n	8001eee <__ledf2+0x52>
 8001eca:	2d00      	cmp	r5, #0
 8001ecc:	d118      	bne.n	8001f00 <__ledf2+0x64>
 8001ece:	4330      	orrs	r0, r6
 8001ed0:	4684      	mov	ip, r0
 8001ed2:	2c00      	cmp	r4, #0
 8001ed4:	d11e      	bne.n	8001f14 <__ledf2+0x78>
 8001ed6:	433a      	orrs	r2, r7
 8001ed8:	d11c      	bne.n	8001f14 <__ledf2+0x78>
 8001eda:	4663      	mov	r3, ip
 8001edc:	2000      	movs	r0, #0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d030      	beq.n	8001f44 <__ledf2+0xa8>
 8001ee2:	4651      	mov	r1, sl
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	3901      	subs	r1, #1
 8001ee8:	4008      	ands	r0, r1
 8001eea:	3801      	subs	r0, #1
 8001eec:	e02a      	b.n	8001f44 <__ledf2+0xa8>
 8001eee:	0039      	movs	r1, r7
 8001ef0:	4311      	orrs	r1, r2
 8001ef2:	d0ea      	beq.n	8001eca <__ledf2+0x2e>
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	e025      	b.n	8001f44 <__ledf2+0xa8>
 8001ef8:	4330      	orrs	r0, r6
 8001efa:	d1fb      	bne.n	8001ef4 <__ledf2+0x58>
 8001efc:	42ac      	cmp	r4, r5
 8001efe:	d026      	beq.n	8001f4e <__ledf2+0xb2>
 8001f00:	2c00      	cmp	r4, #0
 8001f02:	d126      	bne.n	8001f52 <__ledf2+0xb6>
 8001f04:	433a      	orrs	r2, r7
 8001f06:	d124      	bne.n	8001f52 <__ledf2+0xb6>
 8001f08:	4651      	mov	r1, sl
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	3901      	subs	r1, #1
 8001f0e:	4008      	ands	r0, r1
 8001f10:	3801      	subs	r0, #1
 8001f12:	e017      	b.n	8001f44 <__ledf2+0xa8>
 8001f14:	4662      	mov	r2, ip
 8001f16:	2a00      	cmp	r2, #0
 8001f18:	d00f      	beq.n	8001f3a <__ledf2+0x9e>
 8001f1a:	459a      	cmp	sl, r3
 8001f1c:	d1e1      	bne.n	8001ee2 <__ledf2+0x46>
 8001f1e:	42a5      	cmp	r5, r4
 8001f20:	db05      	blt.n	8001f2e <__ledf2+0x92>
 8001f22:	42be      	cmp	r6, r7
 8001f24:	d8dd      	bhi.n	8001ee2 <__ledf2+0x46>
 8001f26:	d019      	beq.n	8001f5c <__ledf2+0xc0>
 8001f28:	2000      	movs	r0, #0
 8001f2a:	42be      	cmp	r6, r7
 8001f2c:	d20a      	bcs.n	8001f44 <__ledf2+0xa8>
 8001f2e:	4650      	mov	r0, sl
 8001f30:	2301      	movs	r3, #1
 8001f32:	3801      	subs	r0, #1
 8001f34:	4398      	bics	r0, r3
 8001f36:	3001      	adds	r0, #1
 8001f38:	e004      	b.n	8001f44 <__ledf2+0xa8>
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	4393      	bics	r3, r2
 8001f40:	0018      	movs	r0, r3
 8001f42:	3001      	adds	r0, #1
 8001f44:	bc1c      	pop	{r2, r3, r4}
 8001f46:	4690      	mov	r8, r2
 8001f48:	4699      	mov	r9, r3
 8001f4a:	46a2      	mov	sl, r4
 8001f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f4e:	433a      	orrs	r2, r7
 8001f50:	d1d0      	bne.n	8001ef4 <__ledf2+0x58>
 8001f52:	459a      	cmp	sl, r3
 8001f54:	d1c5      	bne.n	8001ee2 <__ledf2+0x46>
 8001f56:	42a5      	cmp	r5, r4
 8001f58:	dcc3      	bgt.n	8001ee2 <__ledf2+0x46>
 8001f5a:	e7e0      	b.n	8001f1e <__ledf2+0x82>
 8001f5c:	45c8      	cmp	r8, r9
 8001f5e:	d8c0      	bhi.n	8001ee2 <__ledf2+0x46>
 8001f60:	2000      	movs	r0, #0
 8001f62:	45c8      	cmp	r8, r9
 8001f64:	d3e3      	bcc.n	8001f2e <__ledf2+0x92>
 8001f66:	e7ed      	b.n	8001f44 <__ledf2+0xa8>
 8001f68:	000007ff 	.word	0x000007ff

08001f6c <__aeabi_dmul>:
 8001f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6e:	4657      	mov	r7, sl
 8001f70:	46de      	mov	lr, fp
 8001f72:	464e      	mov	r6, r9
 8001f74:	4645      	mov	r5, r8
 8001f76:	b5e0      	push	{r5, r6, r7, lr}
 8001f78:	4683      	mov	fp, r0
 8001f7a:	0006      	movs	r6, r0
 8001f7c:	030f      	lsls	r7, r1, #12
 8001f7e:	0048      	lsls	r0, r1, #1
 8001f80:	b087      	sub	sp, #28
 8001f82:	4692      	mov	sl, r2
 8001f84:	001d      	movs	r5, r3
 8001f86:	0b3f      	lsrs	r7, r7, #12
 8001f88:	0d40      	lsrs	r0, r0, #21
 8001f8a:	0fcc      	lsrs	r4, r1, #31
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_dmul+0x26>
 8001f90:	e06f      	b.n	8002072 <__aeabi_dmul+0x106>
 8001f92:	4bde      	ldr	r3, [pc, #888]	; (800230c <__aeabi_dmul+0x3a0>)
 8001f94:	4298      	cmp	r0, r3
 8001f96:	d038      	beq.n	800200a <__aeabi_dmul+0x9e>
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	00ff      	lsls	r7, r7, #3
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	431f      	orrs	r7, r3
 8001fa0:	0f73      	lsrs	r3, r6, #29
 8001fa2:	433b      	orrs	r3, r7
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	4bda      	ldr	r3, [pc, #872]	; (8002310 <__aeabi_dmul+0x3a4>)
 8001fa8:	2700      	movs	r7, #0
 8001faa:	4699      	mov	r9, r3
 8001fac:	2300      	movs	r3, #0
 8001fae:	469b      	mov	fp, r3
 8001fb0:	00f6      	lsls	r6, r6, #3
 8001fb2:	4481      	add	r9, r0
 8001fb4:	032b      	lsls	r3, r5, #12
 8001fb6:	0069      	lsls	r1, r5, #1
 8001fb8:	0b1b      	lsrs	r3, r3, #12
 8001fba:	4652      	mov	r2, sl
 8001fbc:	4698      	mov	r8, r3
 8001fbe:	0d49      	lsrs	r1, r1, #21
 8001fc0:	0fed      	lsrs	r5, r5, #31
 8001fc2:	2900      	cmp	r1, #0
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dmul+0x5c>
 8001fc6:	e085      	b.n	80020d4 <__aeabi_dmul+0x168>
 8001fc8:	4bd0      	ldr	r3, [pc, #832]	; (800230c <__aeabi_dmul+0x3a0>)
 8001fca:	4299      	cmp	r1, r3
 8001fcc:	d100      	bne.n	8001fd0 <__aeabi_dmul+0x64>
 8001fce:	e073      	b.n	80020b8 <__aeabi_dmul+0x14c>
 8001fd0:	4643      	mov	r3, r8
 8001fd2:	00da      	lsls	r2, r3, #3
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	041b      	lsls	r3, r3, #16
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	4652      	mov	r2, sl
 8001fdc:	48cc      	ldr	r0, [pc, #816]	; (8002310 <__aeabi_dmul+0x3a4>)
 8001fde:	0f52      	lsrs	r2, r2, #29
 8001fe0:	4684      	mov	ip, r0
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	4652      	mov	r2, sl
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	4461      	add	r1, ip
 8001fea:	00d2      	lsls	r2, r2, #3
 8001fec:	4489      	add	r9, r1
 8001fee:	0021      	movs	r1, r4
 8001ff0:	4069      	eors	r1, r5
 8001ff2:	9100      	str	r1, [sp, #0]
 8001ff4:	468c      	mov	ip, r1
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	4449      	add	r1, r9
 8001ffa:	468a      	mov	sl, r1
 8001ffc:	2f0f      	cmp	r7, #15
 8001ffe:	d900      	bls.n	8002002 <__aeabi_dmul+0x96>
 8002000:	e090      	b.n	8002124 <__aeabi_dmul+0x1b8>
 8002002:	49c4      	ldr	r1, [pc, #784]	; (8002314 <__aeabi_dmul+0x3a8>)
 8002004:	00bf      	lsls	r7, r7, #2
 8002006:	59cf      	ldr	r7, [r1, r7]
 8002008:	46bf      	mov	pc, r7
 800200a:	465b      	mov	r3, fp
 800200c:	433b      	orrs	r3, r7
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	d000      	beq.n	8002014 <__aeabi_dmul+0xa8>
 8002012:	e16a      	b.n	80022ea <__aeabi_dmul+0x37e>
 8002014:	2302      	movs	r3, #2
 8002016:	2708      	movs	r7, #8
 8002018:	2600      	movs	r6, #0
 800201a:	4681      	mov	r9, r0
 800201c:	469b      	mov	fp, r3
 800201e:	e7c9      	b.n	8001fb4 <__aeabi_dmul+0x48>
 8002020:	0032      	movs	r2, r6
 8002022:	4658      	mov	r0, fp
 8002024:	9b01      	ldr	r3, [sp, #4]
 8002026:	4661      	mov	r1, ip
 8002028:	9100      	str	r1, [sp, #0]
 800202a:	2802      	cmp	r0, #2
 800202c:	d100      	bne.n	8002030 <__aeabi_dmul+0xc4>
 800202e:	e075      	b.n	800211c <__aeabi_dmul+0x1b0>
 8002030:	2803      	cmp	r0, #3
 8002032:	d100      	bne.n	8002036 <__aeabi_dmul+0xca>
 8002034:	e1fe      	b.n	8002434 <__aeabi_dmul+0x4c8>
 8002036:	2801      	cmp	r0, #1
 8002038:	d000      	beq.n	800203c <__aeabi_dmul+0xd0>
 800203a:	e12c      	b.n	8002296 <__aeabi_dmul+0x32a>
 800203c:	2300      	movs	r3, #0
 800203e:	2700      	movs	r7, #0
 8002040:	2600      	movs	r6, #0
 8002042:	2500      	movs	r5, #0
 8002044:	033f      	lsls	r7, r7, #12
 8002046:	0d2a      	lsrs	r2, r5, #20
 8002048:	0b3f      	lsrs	r7, r7, #12
 800204a:	48b3      	ldr	r0, [pc, #716]	; (8002318 <__aeabi_dmul+0x3ac>)
 800204c:	0512      	lsls	r2, r2, #20
 800204e:	433a      	orrs	r2, r7
 8002050:	4002      	ands	r2, r0
 8002052:	051b      	lsls	r3, r3, #20
 8002054:	4313      	orrs	r3, r2
 8002056:	9a00      	ldr	r2, [sp, #0]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	07d1      	lsls	r1, r2, #31
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	430b      	orrs	r3, r1
 8002060:	0030      	movs	r0, r6
 8002062:	0019      	movs	r1, r3
 8002064:	b007      	add	sp, #28
 8002066:	bc3c      	pop	{r2, r3, r4, r5}
 8002068:	4690      	mov	r8, r2
 800206a:	4699      	mov	r9, r3
 800206c:	46a2      	mov	sl, r4
 800206e:	46ab      	mov	fp, r5
 8002070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002072:	465b      	mov	r3, fp
 8002074:	433b      	orrs	r3, r7
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	d100      	bne.n	800207c <__aeabi_dmul+0x110>
 800207a:	e12f      	b.n	80022dc <__aeabi_dmul+0x370>
 800207c:	2f00      	cmp	r7, #0
 800207e:	d100      	bne.n	8002082 <__aeabi_dmul+0x116>
 8002080:	e1a5      	b.n	80023ce <__aeabi_dmul+0x462>
 8002082:	0038      	movs	r0, r7
 8002084:	f000 fea4 	bl	8002dd0 <__clzsi2>
 8002088:	0003      	movs	r3, r0
 800208a:	3b0b      	subs	r3, #11
 800208c:	2b1c      	cmp	r3, #28
 800208e:	dd00      	ble.n	8002092 <__aeabi_dmul+0x126>
 8002090:	e196      	b.n	80023c0 <__aeabi_dmul+0x454>
 8002092:	221d      	movs	r2, #29
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	465a      	mov	r2, fp
 8002098:	0001      	movs	r1, r0
 800209a:	40da      	lsrs	r2, r3
 800209c:	465e      	mov	r6, fp
 800209e:	3908      	subs	r1, #8
 80020a0:	408f      	lsls	r7, r1
 80020a2:	0013      	movs	r3, r2
 80020a4:	408e      	lsls	r6, r1
 80020a6:	433b      	orrs	r3, r7
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	4b9c      	ldr	r3, [pc, #624]	; (800231c <__aeabi_dmul+0x3b0>)
 80020ac:	2700      	movs	r7, #0
 80020ae:	1a1b      	subs	r3, r3, r0
 80020b0:	4699      	mov	r9, r3
 80020b2:	2300      	movs	r3, #0
 80020b4:	469b      	mov	fp, r3
 80020b6:	e77d      	b.n	8001fb4 <__aeabi_dmul+0x48>
 80020b8:	4641      	mov	r1, r8
 80020ba:	4653      	mov	r3, sl
 80020bc:	430b      	orrs	r3, r1
 80020be:	4993      	ldr	r1, [pc, #588]	; (800230c <__aeabi_dmul+0x3a0>)
 80020c0:	468c      	mov	ip, r1
 80020c2:	44e1      	add	r9, ip
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d000      	beq.n	80020ca <__aeabi_dmul+0x15e>
 80020c8:	e11a      	b.n	8002300 <__aeabi_dmul+0x394>
 80020ca:	2202      	movs	r2, #2
 80020cc:	2002      	movs	r0, #2
 80020ce:	4317      	orrs	r7, r2
 80020d0:	2200      	movs	r2, #0
 80020d2:	e78c      	b.n	8001fee <__aeabi_dmul+0x82>
 80020d4:	4313      	orrs	r3, r2
 80020d6:	d100      	bne.n	80020da <__aeabi_dmul+0x16e>
 80020d8:	e10d      	b.n	80022f6 <__aeabi_dmul+0x38a>
 80020da:	4643      	mov	r3, r8
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d100      	bne.n	80020e2 <__aeabi_dmul+0x176>
 80020e0:	e181      	b.n	80023e6 <__aeabi_dmul+0x47a>
 80020e2:	4640      	mov	r0, r8
 80020e4:	f000 fe74 	bl	8002dd0 <__clzsi2>
 80020e8:	0002      	movs	r2, r0
 80020ea:	3a0b      	subs	r2, #11
 80020ec:	2a1c      	cmp	r2, #28
 80020ee:	dd00      	ble.n	80020f2 <__aeabi_dmul+0x186>
 80020f0:	e172      	b.n	80023d8 <__aeabi_dmul+0x46c>
 80020f2:	0001      	movs	r1, r0
 80020f4:	4643      	mov	r3, r8
 80020f6:	3908      	subs	r1, #8
 80020f8:	408b      	lsls	r3, r1
 80020fa:	4698      	mov	r8, r3
 80020fc:	231d      	movs	r3, #29
 80020fe:	1a9a      	subs	r2, r3, r2
 8002100:	4653      	mov	r3, sl
 8002102:	40d3      	lsrs	r3, r2
 8002104:	001a      	movs	r2, r3
 8002106:	4643      	mov	r3, r8
 8002108:	4313      	orrs	r3, r2
 800210a:	4652      	mov	r2, sl
 800210c:	408a      	lsls	r2, r1
 800210e:	4649      	mov	r1, r9
 8002110:	1a08      	subs	r0, r1, r0
 8002112:	4982      	ldr	r1, [pc, #520]	; (800231c <__aeabi_dmul+0x3b0>)
 8002114:	4689      	mov	r9, r1
 8002116:	4481      	add	r9, r0
 8002118:	2000      	movs	r0, #0
 800211a:	e768      	b.n	8001fee <__aeabi_dmul+0x82>
 800211c:	4b7b      	ldr	r3, [pc, #492]	; (800230c <__aeabi_dmul+0x3a0>)
 800211e:	2700      	movs	r7, #0
 8002120:	2600      	movs	r6, #0
 8002122:	e78e      	b.n	8002042 <__aeabi_dmul+0xd6>
 8002124:	0c14      	lsrs	r4, r2, #16
 8002126:	0412      	lsls	r2, r2, #16
 8002128:	0c12      	lsrs	r2, r2, #16
 800212a:	0011      	movs	r1, r2
 800212c:	0c37      	lsrs	r7, r6, #16
 800212e:	0436      	lsls	r6, r6, #16
 8002130:	0c35      	lsrs	r5, r6, #16
 8002132:	4379      	muls	r1, r7
 8002134:	0028      	movs	r0, r5
 8002136:	468c      	mov	ip, r1
 8002138:	002e      	movs	r6, r5
 800213a:	4360      	muls	r0, r4
 800213c:	4460      	add	r0, ip
 800213e:	4683      	mov	fp, r0
 8002140:	4356      	muls	r6, r2
 8002142:	0021      	movs	r1, r4
 8002144:	0c30      	lsrs	r0, r6, #16
 8002146:	4680      	mov	r8, r0
 8002148:	4658      	mov	r0, fp
 800214a:	4379      	muls	r1, r7
 800214c:	4440      	add	r0, r8
 800214e:	9102      	str	r1, [sp, #8]
 8002150:	4584      	cmp	ip, r0
 8002152:	d906      	bls.n	8002162 <__aeabi_dmul+0x1f6>
 8002154:	4688      	mov	r8, r1
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	0249      	lsls	r1, r1, #9
 800215a:	468c      	mov	ip, r1
 800215c:	44e0      	add	r8, ip
 800215e:	4641      	mov	r1, r8
 8002160:	9102      	str	r1, [sp, #8]
 8002162:	0436      	lsls	r6, r6, #16
 8002164:	0c01      	lsrs	r1, r0, #16
 8002166:	0c36      	lsrs	r6, r6, #16
 8002168:	0400      	lsls	r0, r0, #16
 800216a:	468b      	mov	fp, r1
 800216c:	1981      	adds	r1, r0, r6
 800216e:	0c1e      	lsrs	r6, r3, #16
 8002170:	041b      	lsls	r3, r3, #16
 8002172:	0c1b      	lsrs	r3, r3, #16
 8002174:	9103      	str	r1, [sp, #12]
 8002176:	0019      	movs	r1, r3
 8002178:	4379      	muls	r1, r7
 800217a:	468c      	mov	ip, r1
 800217c:	0028      	movs	r0, r5
 800217e:	4375      	muls	r5, r6
 8002180:	4465      	add	r5, ip
 8002182:	46a8      	mov	r8, r5
 8002184:	4358      	muls	r0, r3
 8002186:	0c05      	lsrs	r5, r0, #16
 8002188:	4445      	add	r5, r8
 800218a:	4377      	muls	r7, r6
 800218c:	42a9      	cmp	r1, r5
 800218e:	d903      	bls.n	8002198 <__aeabi_dmul+0x22c>
 8002190:	2180      	movs	r1, #128	; 0x80
 8002192:	0249      	lsls	r1, r1, #9
 8002194:	468c      	mov	ip, r1
 8002196:	4467      	add	r7, ip
 8002198:	0c29      	lsrs	r1, r5, #16
 800219a:	468c      	mov	ip, r1
 800219c:	0039      	movs	r1, r7
 800219e:	0400      	lsls	r0, r0, #16
 80021a0:	0c00      	lsrs	r0, r0, #16
 80021a2:	042d      	lsls	r5, r5, #16
 80021a4:	182d      	adds	r5, r5, r0
 80021a6:	4461      	add	r1, ip
 80021a8:	44ab      	add	fp, r5
 80021aa:	9105      	str	r1, [sp, #20]
 80021ac:	4659      	mov	r1, fp
 80021ae:	9104      	str	r1, [sp, #16]
 80021b0:	9901      	ldr	r1, [sp, #4]
 80021b2:	040f      	lsls	r7, r1, #16
 80021b4:	0c3f      	lsrs	r7, r7, #16
 80021b6:	0c08      	lsrs	r0, r1, #16
 80021b8:	0039      	movs	r1, r7
 80021ba:	4351      	muls	r1, r2
 80021bc:	4342      	muls	r2, r0
 80021be:	4690      	mov	r8, r2
 80021c0:	0002      	movs	r2, r0
 80021c2:	468c      	mov	ip, r1
 80021c4:	0c09      	lsrs	r1, r1, #16
 80021c6:	468b      	mov	fp, r1
 80021c8:	4362      	muls	r2, r4
 80021ca:	437c      	muls	r4, r7
 80021cc:	4444      	add	r4, r8
 80021ce:	445c      	add	r4, fp
 80021d0:	45a0      	cmp	r8, r4
 80021d2:	d903      	bls.n	80021dc <__aeabi_dmul+0x270>
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	0249      	lsls	r1, r1, #9
 80021d8:	4688      	mov	r8, r1
 80021da:	4442      	add	r2, r8
 80021dc:	0c21      	lsrs	r1, r4, #16
 80021de:	4688      	mov	r8, r1
 80021e0:	4661      	mov	r1, ip
 80021e2:	0409      	lsls	r1, r1, #16
 80021e4:	0c09      	lsrs	r1, r1, #16
 80021e6:	468c      	mov	ip, r1
 80021e8:	0039      	movs	r1, r7
 80021ea:	4359      	muls	r1, r3
 80021ec:	4343      	muls	r3, r0
 80021ee:	4370      	muls	r0, r6
 80021f0:	437e      	muls	r6, r7
 80021f2:	0c0f      	lsrs	r7, r1, #16
 80021f4:	18f6      	adds	r6, r6, r3
 80021f6:	0424      	lsls	r4, r4, #16
 80021f8:	19be      	adds	r6, r7, r6
 80021fa:	4464      	add	r4, ip
 80021fc:	4442      	add	r2, r8
 80021fe:	468c      	mov	ip, r1
 8002200:	42b3      	cmp	r3, r6
 8002202:	d903      	bls.n	800220c <__aeabi_dmul+0x2a0>
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	025b      	lsls	r3, r3, #9
 8002208:	4698      	mov	r8, r3
 800220a:	4440      	add	r0, r8
 800220c:	9b02      	ldr	r3, [sp, #8]
 800220e:	4661      	mov	r1, ip
 8002210:	4698      	mov	r8, r3
 8002212:	9b04      	ldr	r3, [sp, #16]
 8002214:	0437      	lsls	r7, r6, #16
 8002216:	4443      	add	r3, r8
 8002218:	469b      	mov	fp, r3
 800221a:	45ab      	cmp	fp, r5
 800221c:	41ad      	sbcs	r5, r5
 800221e:	426b      	negs	r3, r5
 8002220:	040d      	lsls	r5, r1, #16
 8002222:	9905      	ldr	r1, [sp, #20]
 8002224:	0c2d      	lsrs	r5, r5, #16
 8002226:	468c      	mov	ip, r1
 8002228:	197f      	adds	r7, r7, r5
 800222a:	4467      	add	r7, ip
 800222c:	18fd      	adds	r5, r7, r3
 800222e:	46a8      	mov	r8, r5
 8002230:	465d      	mov	r5, fp
 8002232:	192d      	adds	r5, r5, r4
 8002234:	42a5      	cmp	r5, r4
 8002236:	41a4      	sbcs	r4, r4
 8002238:	4693      	mov	fp, r2
 800223a:	4264      	negs	r4, r4
 800223c:	46a4      	mov	ip, r4
 800223e:	44c3      	add	fp, r8
 8002240:	44dc      	add	ip, fp
 8002242:	428f      	cmp	r7, r1
 8002244:	41bf      	sbcs	r7, r7
 8002246:	4598      	cmp	r8, r3
 8002248:	419b      	sbcs	r3, r3
 800224a:	4593      	cmp	fp, r2
 800224c:	4192      	sbcs	r2, r2
 800224e:	45a4      	cmp	ip, r4
 8002250:	41a4      	sbcs	r4, r4
 8002252:	425b      	negs	r3, r3
 8002254:	427f      	negs	r7, r7
 8002256:	431f      	orrs	r7, r3
 8002258:	0c36      	lsrs	r6, r6, #16
 800225a:	4252      	negs	r2, r2
 800225c:	4264      	negs	r4, r4
 800225e:	19bf      	adds	r7, r7, r6
 8002260:	4322      	orrs	r2, r4
 8002262:	18bf      	adds	r7, r7, r2
 8002264:	4662      	mov	r2, ip
 8002266:	1838      	adds	r0, r7, r0
 8002268:	0243      	lsls	r3, r0, #9
 800226a:	0dd2      	lsrs	r2, r2, #23
 800226c:	9903      	ldr	r1, [sp, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	026a      	lsls	r2, r5, #9
 8002272:	430a      	orrs	r2, r1
 8002274:	1e50      	subs	r0, r2, #1
 8002276:	4182      	sbcs	r2, r0
 8002278:	4661      	mov	r1, ip
 800227a:	0ded      	lsrs	r5, r5, #23
 800227c:	432a      	orrs	r2, r5
 800227e:	024e      	lsls	r6, r1, #9
 8002280:	4332      	orrs	r2, r6
 8002282:	01d9      	lsls	r1, r3, #7
 8002284:	d400      	bmi.n	8002288 <__aeabi_dmul+0x31c>
 8002286:	e0b3      	b.n	80023f0 <__aeabi_dmul+0x484>
 8002288:	2601      	movs	r6, #1
 800228a:	0850      	lsrs	r0, r2, #1
 800228c:	4032      	ands	r2, r6
 800228e:	4302      	orrs	r2, r0
 8002290:	07de      	lsls	r6, r3, #31
 8002292:	4332      	orrs	r2, r6
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	4c22      	ldr	r4, [pc, #136]	; (8002320 <__aeabi_dmul+0x3b4>)
 8002298:	4454      	add	r4, sl
 800229a:	2c00      	cmp	r4, #0
 800229c:	dd62      	ble.n	8002364 <__aeabi_dmul+0x3f8>
 800229e:	0751      	lsls	r1, r2, #29
 80022a0:	d009      	beq.n	80022b6 <__aeabi_dmul+0x34a>
 80022a2:	200f      	movs	r0, #15
 80022a4:	4010      	ands	r0, r2
 80022a6:	2804      	cmp	r0, #4
 80022a8:	d005      	beq.n	80022b6 <__aeabi_dmul+0x34a>
 80022aa:	1d10      	adds	r0, r2, #4
 80022ac:	4290      	cmp	r0, r2
 80022ae:	4192      	sbcs	r2, r2
 80022b0:	4252      	negs	r2, r2
 80022b2:	189b      	adds	r3, r3, r2
 80022b4:	0002      	movs	r2, r0
 80022b6:	01d9      	lsls	r1, r3, #7
 80022b8:	d504      	bpl.n	80022c4 <__aeabi_dmul+0x358>
 80022ba:	2480      	movs	r4, #128	; 0x80
 80022bc:	4819      	ldr	r0, [pc, #100]	; (8002324 <__aeabi_dmul+0x3b8>)
 80022be:	00e4      	lsls	r4, r4, #3
 80022c0:	4003      	ands	r3, r0
 80022c2:	4454      	add	r4, sl
 80022c4:	4818      	ldr	r0, [pc, #96]	; (8002328 <__aeabi_dmul+0x3bc>)
 80022c6:	4284      	cmp	r4, r0
 80022c8:	dd00      	ble.n	80022cc <__aeabi_dmul+0x360>
 80022ca:	e727      	b.n	800211c <__aeabi_dmul+0x1b0>
 80022cc:	075e      	lsls	r6, r3, #29
 80022ce:	025b      	lsls	r3, r3, #9
 80022d0:	08d2      	lsrs	r2, r2, #3
 80022d2:	0b1f      	lsrs	r7, r3, #12
 80022d4:	0563      	lsls	r3, r4, #21
 80022d6:	4316      	orrs	r6, r2
 80022d8:	0d5b      	lsrs	r3, r3, #21
 80022da:	e6b2      	b.n	8002042 <__aeabi_dmul+0xd6>
 80022dc:	2300      	movs	r3, #0
 80022de:	4699      	mov	r9, r3
 80022e0:	3301      	adds	r3, #1
 80022e2:	2704      	movs	r7, #4
 80022e4:	2600      	movs	r6, #0
 80022e6:	469b      	mov	fp, r3
 80022e8:	e664      	b.n	8001fb4 <__aeabi_dmul+0x48>
 80022ea:	2303      	movs	r3, #3
 80022ec:	9701      	str	r7, [sp, #4]
 80022ee:	4681      	mov	r9, r0
 80022f0:	270c      	movs	r7, #12
 80022f2:	469b      	mov	fp, r3
 80022f4:	e65e      	b.n	8001fb4 <__aeabi_dmul+0x48>
 80022f6:	2201      	movs	r2, #1
 80022f8:	2001      	movs	r0, #1
 80022fa:	4317      	orrs	r7, r2
 80022fc:	2200      	movs	r2, #0
 80022fe:	e676      	b.n	8001fee <__aeabi_dmul+0x82>
 8002300:	2303      	movs	r3, #3
 8002302:	2003      	movs	r0, #3
 8002304:	431f      	orrs	r7, r3
 8002306:	4643      	mov	r3, r8
 8002308:	e671      	b.n	8001fee <__aeabi_dmul+0x82>
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	000007ff 	.word	0x000007ff
 8002310:	fffffc01 	.word	0xfffffc01
 8002314:	08005de0 	.word	0x08005de0
 8002318:	800fffff 	.word	0x800fffff
 800231c:	fffffc0d 	.word	0xfffffc0d
 8002320:	000003ff 	.word	0x000003ff
 8002324:	feffffff 	.word	0xfeffffff
 8002328:	000007fe 	.word	0x000007fe
 800232c:	2300      	movs	r3, #0
 800232e:	2780      	movs	r7, #128	; 0x80
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	033f      	lsls	r7, r7, #12
 8002334:	2600      	movs	r6, #0
 8002336:	4b43      	ldr	r3, [pc, #268]	; (8002444 <__aeabi_dmul+0x4d8>)
 8002338:	e683      	b.n	8002042 <__aeabi_dmul+0xd6>
 800233a:	9b01      	ldr	r3, [sp, #4]
 800233c:	0032      	movs	r2, r6
 800233e:	46a4      	mov	ip, r4
 8002340:	4658      	mov	r0, fp
 8002342:	e670      	b.n	8002026 <__aeabi_dmul+0xba>
 8002344:	46ac      	mov	ip, r5
 8002346:	e66e      	b.n	8002026 <__aeabi_dmul+0xba>
 8002348:	2780      	movs	r7, #128	; 0x80
 800234a:	9901      	ldr	r1, [sp, #4]
 800234c:	033f      	lsls	r7, r7, #12
 800234e:	4239      	tst	r1, r7
 8002350:	d02d      	beq.n	80023ae <__aeabi_dmul+0x442>
 8002352:	423b      	tst	r3, r7
 8002354:	d12b      	bne.n	80023ae <__aeabi_dmul+0x442>
 8002356:	431f      	orrs	r7, r3
 8002358:	033f      	lsls	r7, r7, #12
 800235a:	0b3f      	lsrs	r7, r7, #12
 800235c:	9500      	str	r5, [sp, #0]
 800235e:	0016      	movs	r6, r2
 8002360:	4b38      	ldr	r3, [pc, #224]	; (8002444 <__aeabi_dmul+0x4d8>)
 8002362:	e66e      	b.n	8002042 <__aeabi_dmul+0xd6>
 8002364:	2501      	movs	r5, #1
 8002366:	1b2d      	subs	r5, r5, r4
 8002368:	2d38      	cmp	r5, #56	; 0x38
 800236a:	dd00      	ble.n	800236e <__aeabi_dmul+0x402>
 800236c:	e666      	b.n	800203c <__aeabi_dmul+0xd0>
 800236e:	2d1f      	cmp	r5, #31
 8002370:	dc40      	bgt.n	80023f4 <__aeabi_dmul+0x488>
 8002372:	4835      	ldr	r0, [pc, #212]	; (8002448 <__aeabi_dmul+0x4dc>)
 8002374:	001c      	movs	r4, r3
 8002376:	4450      	add	r0, sl
 8002378:	0016      	movs	r6, r2
 800237a:	4082      	lsls	r2, r0
 800237c:	4084      	lsls	r4, r0
 800237e:	40ee      	lsrs	r6, r5
 8002380:	1e50      	subs	r0, r2, #1
 8002382:	4182      	sbcs	r2, r0
 8002384:	4334      	orrs	r4, r6
 8002386:	4314      	orrs	r4, r2
 8002388:	40eb      	lsrs	r3, r5
 800238a:	0762      	lsls	r2, r4, #29
 800238c:	d009      	beq.n	80023a2 <__aeabi_dmul+0x436>
 800238e:	220f      	movs	r2, #15
 8002390:	4022      	ands	r2, r4
 8002392:	2a04      	cmp	r2, #4
 8002394:	d005      	beq.n	80023a2 <__aeabi_dmul+0x436>
 8002396:	0022      	movs	r2, r4
 8002398:	1d14      	adds	r4, r2, #4
 800239a:	4294      	cmp	r4, r2
 800239c:	4180      	sbcs	r0, r0
 800239e:	4240      	negs	r0, r0
 80023a0:	181b      	adds	r3, r3, r0
 80023a2:	021a      	lsls	r2, r3, #8
 80023a4:	d53e      	bpl.n	8002424 <__aeabi_dmul+0x4b8>
 80023a6:	2301      	movs	r3, #1
 80023a8:	2700      	movs	r7, #0
 80023aa:	2600      	movs	r6, #0
 80023ac:	e649      	b.n	8002042 <__aeabi_dmul+0xd6>
 80023ae:	2780      	movs	r7, #128	; 0x80
 80023b0:	9b01      	ldr	r3, [sp, #4]
 80023b2:	033f      	lsls	r7, r7, #12
 80023b4:	431f      	orrs	r7, r3
 80023b6:	033f      	lsls	r7, r7, #12
 80023b8:	0b3f      	lsrs	r7, r7, #12
 80023ba:	9400      	str	r4, [sp, #0]
 80023bc:	4b21      	ldr	r3, [pc, #132]	; (8002444 <__aeabi_dmul+0x4d8>)
 80023be:	e640      	b.n	8002042 <__aeabi_dmul+0xd6>
 80023c0:	0003      	movs	r3, r0
 80023c2:	465a      	mov	r2, fp
 80023c4:	3b28      	subs	r3, #40	; 0x28
 80023c6:	409a      	lsls	r2, r3
 80023c8:	2600      	movs	r6, #0
 80023ca:	9201      	str	r2, [sp, #4]
 80023cc:	e66d      	b.n	80020aa <__aeabi_dmul+0x13e>
 80023ce:	4658      	mov	r0, fp
 80023d0:	f000 fcfe 	bl	8002dd0 <__clzsi2>
 80023d4:	3020      	adds	r0, #32
 80023d6:	e657      	b.n	8002088 <__aeabi_dmul+0x11c>
 80023d8:	0003      	movs	r3, r0
 80023da:	4652      	mov	r2, sl
 80023dc:	3b28      	subs	r3, #40	; 0x28
 80023de:	409a      	lsls	r2, r3
 80023e0:	0013      	movs	r3, r2
 80023e2:	2200      	movs	r2, #0
 80023e4:	e693      	b.n	800210e <__aeabi_dmul+0x1a2>
 80023e6:	4650      	mov	r0, sl
 80023e8:	f000 fcf2 	bl	8002dd0 <__clzsi2>
 80023ec:	3020      	adds	r0, #32
 80023ee:	e67b      	b.n	80020e8 <__aeabi_dmul+0x17c>
 80023f0:	46ca      	mov	sl, r9
 80023f2:	e750      	b.n	8002296 <__aeabi_dmul+0x32a>
 80023f4:	201f      	movs	r0, #31
 80023f6:	001e      	movs	r6, r3
 80023f8:	4240      	negs	r0, r0
 80023fa:	1b04      	subs	r4, r0, r4
 80023fc:	40e6      	lsrs	r6, r4
 80023fe:	2d20      	cmp	r5, #32
 8002400:	d003      	beq.n	800240a <__aeabi_dmul+0x49e>
 8002402:	4c12      	ldr	r4, [pc, #72]	; (800244c <__aeabi_dmul+0x4e0>)
 8002404:	4454      	add	r4, sl
 8002406:	40a3      	lsls	r3, r4
 8002408:	431a      	orrs	r2, r3
 800240a:	1e50      	subs	r0, r2, #1
 800240c:	4182      	sbcs	r2, r0
 800240e:	4332      	orrs	r2, r6
 8002410:	2607      	movs	r6, #7
 8002412:	2700      	movs	r7, #0
 8002414:	4016      	ands	r6, r2
 8002416:	d009      	beq.n	800242c <__aeabi_dmul+0x4c0>
 8002418:	200f      	movs	r0, #15
 800241a:	2300      	movs	r3, #0
 800241c:	4010      	ands	r0, r2
 800241e:	0014      	movs	r4, r2
 8002420:	2804      	cmp	r0, #4
 8002422:	d1b9      	bne.n	8002398 <__aeabi_dmul+0x42c>
 8002424:	0022      	movs	r2, r4
 8002426:	075e      	lsls	r6, r3, #29
 8002428:	025b      	lsls	r3, r3, #9
 800242a:	0b1f      	lsrs	r7, r3, #12
 800242c:	08d2      	lsrs	r2, r2, #3
 800242e:	4316      	orrs	r6, r2
 8002430:	2300      	movs	r3, #0
 8002432:	e606      	b.n	8002042 <__aeabi_dmul+0xd6>
 8002434:	2780      	movs	r7, #128	; 0x80
 8002436:	033f      	lsls	r7, r7, #12
 8002438:	431f      	orrs	r7, r3
 800243a:	033f      	lsls	r7, r7, #12
 800243c:	0b3f      	lsrs	r7, r7, #12
 800243e:	0016      	movs	r6, r2
 8002440:	4b00      	ldr	r3, [pc, #0]	; (8002444 <__aeabi_dmul+0x4d8>)
 8002442:	e5fe      	b.n	8002042 <__aeabi_dmul+0xd6>
 8002444:	000007ff 	.word	0x000007ff
 8002448:	0000041e 	.word	0x0000041e
 800244c:	0000043e 	.word	0x0000043e

08002450 <__aeabi_dsub>:
 8002450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002452:	4657      	mov	r7, sl
 8002454:	464e      	mov	r6, r9
 8002456:	4645      	mov	r5, r8
 8002458:	46de      	mov	lr, fp
 800245a:	000c      	movs	r4, r1
 800245c:	0309      	lsls	r1, r1, #12
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	0a49      	lsrs	r1, r1, #9
 8002462:	0f46      	lsrs	r6, r0, #29
 8002464:	005f      	lsls	r7, r3, #1
 8002466:	4331      	orrs	r1, r6
 8002468:	031e      	lsls	r6, r3, #12
 800246a:	0fdb      	lsrs	r3, r3, #31
 800246c:	0a76      	lsrs	r6, r6, #9
 800246e:	469b      	mov	fp, r3
 8002470:	0f53      	lsrs	r3, r2, #29
 8002472:	4333      	orrs	r3, r6
 8002474:	4ec8      	ldr	r6, [pc, #800]	; (8002798 <__aeabi_dsub+0x348>)
 8002476:	0065      	lsls	r5, r4, #1
 8002478:	00c0      	lsls	r0, r0, #3
 800247a:	0fe4      	lsrs	r4, r4, #31
 800247c:	00d2      	lsls	r2, r2, #3
 800247e:	0d6d      	lsrs	r5, r5, #21
 8002480:	46a2      	mov	sl, r4
 8002482:	4681      	mov	r9, r0
 8002484:	0d7f      	lsrs	r7, r7, #21
 8002486:	469c      	mov	ip, r3
 8002488:	4690      	mov	r8, r2
 800248a:	42b7      	cmp	r7, r6
 800248c:	d100      	bne.n	8002490 <__aeabi_dsub+0x40>
 800248e:	e0b9      	b.n	8002604 <__aeabi_dsub+0x1b4>
 8002490:	465b      	mov	r3, fp
 8002492:	2601      	movs	r6, #1
 8002494:	4073      	eors	r3, r6
 8002496:	469b      	mov	fp, r3
 8002498:	1bee      	subs	r6, r5, r7
 800249a:	45a3      	cmp	fp, r4
 800249c:	d100      	bne.n	80024a0 <__aeabi_dsub+0x50>
 800249e:	e083      	b.n	80025a8 <__aeabi_dsub+0x158>
 80024a0:	2e00      	cmp	r6, #0
 80024a2:	dd63      	ble.n	800256c <__aeabi_dsub+0x11c>
 80024a4:	2f00      	cmp	r7, #0
 80024a6:	d000      	beq.n	80024aa <__aeabi_dsub+0x5a>
 80024a8:	e0b1      	b.n	800260e <__aeabi_dsub+0x1be>
 80024aa:	4663      	mov	r3, ip
 80024ac:	4313      	orrs	r3, r2
 80024ae:	d100      	bne.n	80024b2 <__aeabi_dsub+0x62>
 80024b0:	e123      	b.n	80026fa <__aeabi_dsub+0x2aa>
 80024b2:	1e73      	subs	r3, r6, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d000      	beq.n	80024ba <__aeabi_dsub+0x6a>
 80024b8:	e1ba      	b.n	8002830 <__aeabi_dsub+0x3e0>
 80024ba:	1a86      	subs	r6, r0, r2
 80024bc:	4663      	mov	r3, ip
 80024be:	42b0      	cmp	r0, r6
 80024c0:	4180      	sbcs	r0, r0
 80024c2:	2501      	movs	r5, #1
 80024c4:	1ac9      	subs	r1, r1, r3
 80024c6:	4240      	negs	r0, r0
 80024c8:	1a09      	subs	r1, r1, r0
 80024ca:	020b      	lsls	r3, r1, #8
 80024cc:	d400      	bmi.n	80024d0 <__aeabi_dsub+0x80>
 80024ce:	e147      	b.n	8002760 <__aeabi_dsub+0x310>
 80024d0:	0249      	lsls	r1, r1, #9
 80024d2:	0a4b      	lsrs	r3, r1, #9
 80024d4:	4698      	mov	r8, r3
 80024d6:	4643      	mov	r3, r8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d100      	bne.n	80024de <__aeabi_dsub+0x8e>
 80024dc:	e189      	b.n	80027f2 <__aeabi_dsub+0x3a2>
 80024de:	4640      	mov	r0, r8
 80024e0:	f000 fc76 	bl	8002dd0 <__clzsi2>
 80024e4:	0003      	movs	r3, r0
 80024e6:	3b08      	subs	r3, #8
 80024e8:	2b1f      	cmp	r3, #31
 80024ea:	dd00      	ble.n	80024ee <__aeabi_dsub+0x9e>
 80024ec:	e17c      	b.n	80027e8 <__aeabi_dsub+0x398>
 80024ee:	2220      	movs	r2, #32
 80024f0:	0030      	movs	r0, r6
 80024f2:	1ad2      	subs	r2, r2, r3
 80024f4:	4641      	mov	r1, r8
 80024f6:	40d0      	lsrs	r0, r2
 80024f8:	4099      	lsls	r1, r3
 80024fa:	0002      	movs	r2, r0
 80024fc:	409e      	lsls	r6, r3
 80024fe:	430a      	orrs	r2, r1
 8002500:	429d      	cmp	r5, r3
 8002502:	dd00      	ble.n	8002506 <__aeabi_dsub+0xb6>
 8002504:	e16a      	b.n	80027dc <__aeabi_dsub+0x38c>
 8002506:	1b5d      	subs	r5, r3, r5
 8002508:	1c6b      	adds	r3, r5, #1
 800250a:	2b1f      	cmp	r3, #31
 800250c:	dd00      	ble.n	8002510 <__aeabi_dsub+0xc0>
 800250e:	e194      	b.n	800283a <__aeabi_dsub+0x3ea>
 8002510:	2120      	movs	r1, #32
 8002512:	0010      	movs	r0, r2
 8002514:	0035      	movs	r5, r6
 8002516:	1ac9      	subs	r1, r1, r3
 8002518:	408e      	lsls	r6, r1
 800251a:	40da      	lsrs	r2, r3
 800251c:	4088      	lsls	r0, r1
 800251e:	40dd      	lsrs	r5, r3
 8002520:	1e71      	subs	r1, r6, #1
 8002522:	418e      	sbcs	r6, r1
 8002524:	0011      	movs	r1, r2
 8002526:	2207      	movs	r2, #7
 8002528:	4328      	orrs	r0, r5
 800252a:	2500      	movs	r5, #0
 800252c:	4306      	orrs	r6, r0
 800252e:	4032      	ands	r2, r6
 8002530:	2a00      	cmp	r2, #0
 8002532:	d009      	beq.n	8002548 <__aeabi_dsub+0xf8>
 8002534:	230f      	movs	r3, #15
 8002536:	4033      	ands	r3, r6
 8002538:	2b04      	cmp	r3, #4
 800253a:	d005      	beq.n	8002548 <__aeabi_dsub+0xf8>
 800253c:	1d33      	adds	r3, r6, #4
 800253e:	42b3      	cmp	r3, r6
 8002540:	41b6      	sbcs	r6, r6
 8002542:	4276      	negs	r6, r6
 8002544:	1989      	adds	r1, r1, r6
 8002546:	001e      	movs	r6, r3
 8002548:	020b      	lsls	r3, r1, #8
 800254a:	d400      	bmi.n	800254e <__aeabi_dsub+0xfe>
 800254c:	e23d      	b.n	80029ca <__aeabi_dsub+0x57a>
 800254e:	1c6a      	adds	r2, r5, #1
 8002550:	4b91      	ldr	r3, [pc, #580]	; (8002798 <__aeabi_dsub+0x348>)
 8002552:	0555      	lsls	r5, r2, #21
 8002554:	0d6d      	lsrs	r5, r5, #21
 8002556:	429a      	cmp	r2, r3
 8002558:	d100      	bne.n	800255c <__aeabi_dsub+0x10c>
 800255a:	e119      	b.n	8002790 <__aeabi_dsub+0x340>
 800255c:	4a8f      	ldr	r2, [pc, #572]	; (800279c <__aeabi_dsub+0x34c>)
 800255e:	08f6      	lsrs	r6, r6, #3
 8002560:	400a      	ands	r2, r1
 8002562:	0757      	lsls	r7, r2, #29
 8002564:	0252      	lsls	r2, r2, #9
 8002566:	4337      	orrs	r7, r6
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	e09b      	b.n	80026a4 <__aeabi_dsub+0x254>
 800256c:	2e00      	cmp	r6, #0
 800256e:	d000      	beq.n	8002572 <__aeabi_dsub+0x122>
 8002570:	e0c5      	b.n	80026fe <__aeabi_dsub+0x2ae>
 8002572:	1c6e      	adds	r6, r5, #1
 8002574:	0576      	lsls	r6, r6, #21
 8002576:	0d76      	lsrs	r6, r6, #21
 8002578:	2e01      	cmp	r6, #1
 800257a:	dc00      	bgt.n	800257e <__aeabi_dsub+0x12e>
 800257c:	e148      	b.n	8002810 <__aeabi_dsub+0x3c0>
 800257e:	4667      	mov	r7, ip
 8002580:	1a86      	subs	r6, r0, r2
 8002582:	1bcb      	subs	r3, r1, r7
 8002584:	42b0      	cmp	r0, r6
 8002586:	41bf      	sbcs	r7, r7
 8002588:	427f      	negs	r7, r7
 800258a:	46b8      	mov	r8, r7
 800258c:	001f      	movs	r7, r3
 800258e:	4643      	mov	r3, r8
 8002590:	1aff      	subs	r7, r7, r3
 8002592:	003b      	movs	r3, r7
 8002594:	46b8      	mov	r8, r7
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	d500      	bpl.n	800259c <__aeabi_dsub+0x14c>
 800259a:	e15f      	b.n	800285c <__aeabi_dsub+0x40c>
 800259c:	4337      	orrs	r7, r6
 800259e:	d19a      	bne.n	80024d6 <__aeabi_dsub+0x86>
 80025a0:	2200      	movs	r2, #0
 80025a2:	2400      	movs	r4, #0
 80025a4:	2500      	movs	r5, #0
 80025a6:	e079      	b.n	800269c <__aeabi_dsub+0x24c>
 80025a8:	2e00      	cmp	r6, #0
 80025aa:	dc00      	bgt.n	80025ae <__aeabi_dsub+0x15e>
 80025ac:	e0fa      	b.n	80027a4 <__aeabi_dsub+0x354>
 80025ae:	2f00      	cmp	r7, #0
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x164>
 80025b2:	e08d      	b.n	80026d0 <__aeabi_dsub+0x280>
 80025b4:	4b78      	ldr	r3, [pc, #480]	; (8002798 <__aeabi_dsub+0x348>)
 80025b6:	429d      	cmp	r5, r3
 80025b8:	d067      	beq.n	800268a <__aeabi_dsub+0x23a>
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	4667      	mov	r7, ip
 80025be:	041b      	lsls	r3, r3, #16
 80025c0:	431f      	orrs	r7, r3
 80025c2:	46bc      	mov	ip, r7
 80025c4:	2e38      	cmp	r6, #56	; 0x38
 80025c6:	dc00      	bgt.n	80025ca <__aeabi_dsub+0x17a>
 80025c8:	e152      	b.n	8002870 <__aeabi_dsub+0x420>
 80025ca:	4663      	mov	r3, ip
 80025cc:	4313      	orrs	r3, r2
 80025ce:	1e5a      	subs	r2, r3, #1
 80025d0:	4193      	sbcs	r3, r2
 80025d2:	181e      	adds	r6, r3, r0
 80025d4:	4286      	cmp	r6, r0
 80025d6:	4180      	sbcs	r0, r0
 80025d8:	4240      	negs	r0, r0
 80025da:	1809      	adds	r1, r1, r0
 80025dc:	020b      	lsls	r3, r1, #8
 80025de:	d400      	bmi.n	80025e2 <__aeabi_dsub+0x192>
 80025e0:	e0be      	b.n	8002760 <__aeabi_dsub+0x310>
 80025e2:	4b6d      	ldr	r3, [pc, #436]	; (8002798 <__aeabi_dsub+0x348>)
 80025e4:	3501      	adds	r5, #1
 80025e6:	429d      	cmp	r5, r3
 80025e8:	d100      	bne.n	80025ec <__aeabi_dsub+0x19c>
 80025ea:	e0d2      	b.n	8002792 <__aeabi_dsub+0x342>
 80025ec:	4a6b      	ldr	r2, [pc, #428]	; (800279c <__aeabi_dsub+0x34c>)
 80025ee:	0873      	lsrs	r3, r6, #1
 80025f0:	400a      	ands	r2, r1
 80025f2:	2101      	movs	r1, #1
 80025f4:	400e      	ands	r6, r1
 80025f6:	431e      	orrs	r6, r3
 80025f8:	0851      	lsrs	r1, r2, #1
 80025fa:	07d3      	lsls	r3, r2, #31
 80025fc:	2207      	movs	r2, #7
 80025fe:	431e      	orrs	r6, r3
 8002600:	4032      	ands	r2, r6
 8002602:	e795      	b.n	8002530 <__aeabi_dsub+0xe0>
 8002604:	001e      	movs	r6, r3
 8002606:	4316      	orrs	r6, r2
 8002608:	d000      	beq.n	800260c <__aeabi_dsub+0x1bc>
 800260a:	e745      	b.n	8002498 <__aeabi_dsub+0x48>
 800260c:	e740      	b.n	8002490 <__aeabi_dsub+0x40>
 800260e:	4b62      	ldr	r3, [pc, #392]	; (8002798 <__aeabi_dsub+0x348>)
 8002610:	429d      	cmp	r5, r3
 8002612:	d03a      	beq.n	800268a <__aeabi_dsub+0x23a>
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	4667      	mov	r7, ip
 8002618:	041b      	lsls	r3, r3, #16
 800261a:	431f      	orrs	r7, r3
 800261c:	46bc      	mov	ip, r7
 800261e:	2e38      	cmp	r6, #56	; 0x38
 8002620:	dd00      	ble.n	8002624 <__aeabi_dsub+0x1d4>
 8002622:	e0eb      	b.n	80027fc <__aeabi_dsub+0x3ac>
 8002624:	2e1f      	cmp	r6, #31
 8002626:	dc00      	bgt.n	800262a <__aeabi_dsub+0x1da>
 8002628:	e13a      	b.n	80028a0 <__aeabi_dsub+0x450>
 800262a:	0033      	movs	r3, r6
 800262c:	4667      	mov	r7, ip
 800262e:	3b20      	subs	r3, #32
 8002630:	40df      	lsrs	r7, r3
 8002632:	003b      	movs	r3, r7
 8002634:	2e20      	cmp	r6, #32
 8002636:	d005      	beq.n	8002644 <__aeabi_dsub+0x1f4>
 8002638:	2740      	movs	r7, #64	; 0x40
 800263a:	1bbf      	subs	r7, r7, r6
 800263c:	4666      	mov	r6, ip
 800263e:	40be      	lsls	r6, r7
 8002640:	4332      	orrs	r2, r6
 8002642:	4690      	mov	r8, r2
 8002644:	4646      	mov	r6, r8
 8002646:	1e72      	subs	r2, r6, #1
 8002648:	4196      	sbcs	r6, r2
 800264a:	4333      	orrs	r3, r6
 800264c:	e0da      	b.n	8002804 <__aeabi_dsub+0x3b4>
 800264e:	2b00      	cmp	r3, #0
 8002650:	d100      	bne.n	8002654 <__aeabi_dsub+0x204>
 8002652:	e214      	b.n	8002a7e <__aeabi_dsub+0x62e>
 8002654:	4663      	mov	r3, ip
 8002656:	4313      	orrs	r3, r2
 8002658:	d100      	bne.n	800265c <__aeabi_dsub+0x20c>
 800265a:	e168      	b.n	800292e <__aeabi_dsub+0x4de>
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	074e      	lsls	r6, r1, #29
 8002660:	08c0      	lsrs	r0, r0, #3
 8002662:	08c9      	lsrs	r1, r1, #3
 8002664:	031b      	lsls	r3, r3, #12
 8002666:	4306      	orrs	r6, r0
 8002668:	4219      	tst	r1, r3
 800266a:	d008      	beq.n	800267e <__aeabi_dsub+0x22e>
 800266c:	4660      	mov	r0, ip
 800266e:	08c0      	lsrs	r0, r0, #3
 8002670:	4218      	tst	r0, r3
 8002672:	d104      	bne.n	800267e <__aeabi_dsub+0x22e>
 8002674:	4663      	mov	r3, ip
 8002676:	0001      	movs	r1, r0
 8002678:	08d2      	lsrs	r2, r2, #3
 800267a:	075e      	lsls	r6, r3, #29
 800267c:	4316      	orrs	r6, r2
 800267e:	00f3      	lsls	r3, r6, #3
 8002680:	4699      	mov	r9, r3
 8002682:	00c9      	lsls	r1, r1, #3
 8002684:	0f72      	lsrs	r2, r6, #29
 8002686:	4d44      	ldr	r5, [pc, #272]	; (8002798 <__aeabi_dsub+0x348>)
 8002688:	4311      	orrs	r1, r2
 800268a:	464b      	mov	r3, r9
 800268c:	08de      	lsrs	r6, r3, #3
 800268e:	4b42      	ldr	r3, [pc, #264]	; (8002798 <__aeabi_dsub+0x348>)
 8002690:	074f      	lsls	r7, r1, #29
 8002692:	4337      	orrs	r7, r6
 8002694:	08ca      	lsrs	r2, r1, #3
 8002696:	429d      	cmp	r5, r3
 8002698:	d100      	bne.n	800269c <__aeabi_dsub+0x24c>
 800269a:	e06e      	b.n	800277a <__aeabi_dsub+0x32a>
 800269c:	0312      	lsls	r2, r2, #12
 800269e:	056d      	lsls	r5, r5, #21
 80026a0:	0b12      	lsrs	r2, r2, #12
 80026a2:	0d6d      	lsrs	r5, r5, #21
 80026a4:	2100      	movs	r1, #0
 80026a6:	0312      	lsls	r2, r2, #12
 80026a8:	0b13      	lsrs	r3, r2, #12
 80026aa:	0d0a      	lsrs	r2, r1, #20
 80026ac:	0512      	lsls	r2, r2, #20
 80026ae:	431a      	orrs	r2, r3
 80026b0:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <__aeabi_dsub+0x350>)
 80026b2:	052d      	lsls	r5, r5, #20
 80026b4:	4013      	ands	r3, r2
 80026b6:	432b      	orrs	r3, r5
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	07e4      	lsls	r4, r4, #31
 80026bc:	085b      	lsrs	r3, r3, #1
 80026be:	4323      	orrs	r3, r4
 80026c0:	0038      	movs	r0, r7
 80026c2:	0019      	movs	r1, r3
 80026c4:	bc3c      	pop	{r2, r3, r4, r5}
 80026c6:	4690      	mov	r8, r2
 80026c8:	4699      	mov	r9, r3
 80026ca:	46a2      	mov	sl, r4
 80026cc:	46ab      	mov	fp, r5
 80026ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026d0:	4663      	mov	r3, ip
 80026d2:	4313      	orrs	r3, r2
 80026d4:	d011      	beq.n	80026fa <__aeabi_dsub+0x2aa>
 80026d6:	1e73      	subs	r3, r6, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d000      	beq.n	80026de <__aeabi_dsub+0x28e>
 80026dc:	e107      	b.n	80028ee <__aeabi_dsub+0x49e>
 80026de:	1886      	adds	r6, r0, r2
 80026e0:	4286      	cmp	r6, r0
 80026e2:	4180      	sbcs	r0, r0
 80026e4:	4461      	add	r1, ip
 80026e6:	4240      	negs	r0, r0
 80026e8:	1809      	adds	r1, r1, r0
 80026ea:	2501      	movs	r5, #1
 80026ec:	020b      	lsls	r3, r1, #8
 80026ee:	d537      	bpl.n	8002760 <__aeabi_dsub+0x310>
 80026f0:	2502      	movs	r5, #2
 80026f2:	e77b      	b.n	80025ec <__aeabi_dsub+0x19c>
 80026f4:	003e      	movs	r6, r7
 80026f6:	4661      	mov	r1, ip
 80026f8:	4691      	mov	r9, r2
 80026fa:	0035      	movs	r5, r6
 80026fc:	e7c5      	b.n	800268a <__aeabi_dsub+0x23a>
 80026fe:	465c      	mov	r4, fp
 8002700:	2d00      	cmp	r5, #0
 8002702:	d000      	beq.n	8002706 <__aeabi_dsub+0x2b6>
 8002704:	e0e1      	b.n	80028ca <__aeabi_dsub+0x47a>
 8002706:	000b      	movs	r3, r1
 8002708:	4303      	orrs	r3, r0
 800270a:	d0f3      	beq.n	80026f4 <__aeabi_dsub+0x2a4>
 800270c:	1c73      	adds	r3, r6, #1
 800270e:	d100      	bne.n	8002712 <__aeabi_dsub+0x2c2>
 8002710:	e1ac      	b.n	8002a6c <__aeabi_dsub+0x61c>
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <__aeabi_dsub+0x348>)
 8002714:	429f      	cmp	r7, r3
 8002716:	d100      	bne.n	800271a <__aeabi_dsub+0x2ca>
 8002718:	e13a      	b.n	8002990 <__aeabi_dsub+0x540>
 800271a:	43f3      	mvns	r3, r6
 800271c:	2b38      	cmp	r3, #56	; 0x38
 800271e:	dd00      	ble.n	8002722 <__aeabi_dsub+0x2d2>
 8002720:	e16f      	b.n	8002a02 <__aeabi_dsub+0x5b2>
 8002722:	2b1f      	cmp	r3, #31
 8002724:	dd00      	ble.n	8002728 <__aeabi_dsub+0x2d8>
 8002726:	e18c      	b.n	8002a42 <__aeabi_dsub+0x5f2>
 8002728:	2520      	movs	r5, #32
 800272a:	000e      	movs	r6, r1
 800272c:	1aed      	subs	r5, r5, r3
 800272e:	40ae      	lsls	r6, r5
 8002730:	46b0      	mov	r8, r6
 8002732:	0006      	movs	r6, r0
 8002734:	46aa      	mov	sl, r5
 8002736:	40de      	lsrs	r6, r3
 8002738:	4645      	mov	r5, r8
 800273a:	4335      	orrs	r5, r6
 800273c:	002e      	movs	r6, r5
 800273e:	4655      	mov	r5, sl
 8002740:	40d9      	lsrs	r1, r3
 8002742:	40a8      	lsls	r0, r5
 8002744:	4663      	mov	r3, ip
 8002746:	1e45      	subs	r5, r0, #1
 8002748:	41a8      	sbcs	r0, r5
 800274a:	1a5b      	subs	r3, r3, r1
 800274c:	469c      	mov	ip, r3
 800274e:	4330      	orrs	r0, r6
 8002750:	1a16      	subs	r6, r2, r0
 8002752:	42b2      	cmp	r2, r6
 8002754:	4192      	sbcs	r2, r2
 8002756:	4663      	mov	r3, ip
 8002758:	4252      	negs	r2, r2
 800275a:	1a99      	subs	r1, r3, r2
 800275c:	003d      	movs	r5, r7
 800275e:	e6b4      	b.n	80024ca <__aeabi_dsub+0x7a>
 8002760:	2207      	movs	r2, #7
 8002762:	4032      	ands	r2, r6
 8002764:	2a00      	cmp	r2, #0
 8002766:	d000      	beq.n	800276a <__aeabi_dsub+0x31a>
 8002768:	e6e4      	b.n	8002534 <__aeabi_dsub+0xe4>
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <__aeabi_dsub+0x348>)
 800276c:	08f6      	lsrs	r6, r6, #3
 800276e:	074f      	lsls	r7, r1, #29
 8002770:	4337      	orrs	r7, r6
 8002772:	08ca      	lsrs	r2, r1, #3
 8002774:	429d      	cmp	r5, r3
 8002776:	d000      	beq.n	800277a <__aeabi_dsub+0x32a>
 8002778:	e790      	b.n	800269c <__aeabi_dsub+0x24c>
 800277a:	003b      	movs	r3, r7
 800277c:	4313      	orrs	r3, r2
 800277e:	d100      	bne.n	8002782 <__aeabi_dsub+0x332>
 8002780:	e1a6      	b.n	8002ad0 <__aeabi_dsub+0x680>
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	031b      	lsls	r3, r3, #12
 8002786:	431a      	orrs	r2, r3
 8002788:	0312      	lsls	r2, r2, #12
 800278a:	0b12      	lsrs	r2, r2, #12
 800278c:	4d02      	ldr	r5, [pc, #8]	; (8002798 <__aeabi_dsub+0x348>)
 800278e:	e789      	b.n	80026a4 <__aeabi_dsub+0x254>
 8002790:	0015      	movs	r5, r2
 8002792:	2200      	movs	r2, #0
 8002794:	2700      	movs	r7, #0
 8002796:	e785      	b.n	80026a4 <__aeabi_dsub+0x254>
 8002798:	000007ff 	.word	0x000007ff
 800279c:	ff7fffff 	.word	0xff7fffff
 80027a0:	800fffff 	.word	0x800fffff
 80027a4:	2e00      	cmp	r6, #0
 80027a6:	d000      	beq.n	80027aa <__aeabi_dsub+0x35a>
 80027a8:	e0c7      	b.n	800293a <__aeabi_dsub+0x4ea>
 80027aa:	1c6b      	adds	r3, r5, #1
 80027ac:	055e      	lsls	r6, r3, #21
 80027ae:	0d76      	lsrs	r6, r6, #21
 80027b0:	2e01      	cmp	r6, #1
 80027b2:	dc00      	bgt.n	80027b6 <__aeabi_dsub+0x366>
 80027b4:	e0f0      	b.n	8002998 <__aeabi_dsub+0x548>
 80027b6:	4dc8      	ldr	r5, [pc, #800]	; (8002ad8 <__aeabi_dsub+0x688>)
 80027b8:	42ab      	cmp	r3, r5
 80027ba:	d100      	bne.n	80027be <__aeabi_dsub+0x36e>
 80027bc:	e0b9      	b.n	8002932 <__aeabi_dsub+0x4e2>
 80027be:	1885      	adds	r5, r0, r2
 80027c0:	000a      	movs	r2, r1
 80027c2:	4285      	cmp	r5, r0
 80027c4:	4189      	sbcs	r1, r1
 80027c6:	4462      	add	r2, ip
 80027c8:	4249      	negs	r1, r1
 80027ca:	1851      	adds	r1, r2, r1
 80027cc:	2207      	movs	r2, #7
 80027ce:	07ce      	lsls	r6, r1, #31
 80027d0:	086d      	lsrs	r5, r5, #1
 80027d2:	432e      	orrs	r6, r5
 80027d4:	0849      	lsrs	r1, r1, #1
 80027d6:	4032      	ands	r2, r6
 80027d8:	001d      	movs	r5, r3
 80027da:	e6a9      	b.n	8002530 <__aeabi_dsub+0xe0>
 80027dc:	49bf      	ldr	r1, [pc, #764]	; (8002adc <__aeabi_dsub+0x68c>)
 80027de:	1aed      	subs	r5, r5, r3
 80027e0:	4011      	ands	r1, r2
 80027e2:	2207      	movs	r2, #7
 80027e4:	4032      	ands	r2, r6
 80027e6:	e6a3      	b.n	8002530 <__aeabi_dsub+0xe0>
 80027e8:	0032      	movs	r2, r6
 80027ea:	3828      	subs	r0, #40	; 0x28
 80027ec:	4082      	lsls	r2, r0
 80027ee:	2600      	movs	r6, #0
 80027f0:	e686      	b.n	8002500 <__aeabi_dsub+0xb0>
 80027f2:	0030      	movs	r0, r6
 80027f4:	f000 faec 	bl	8002dd0 <__clzsi2>
 80027f8:	3020      	adds	r0, #32
 80027fa:	e673      	b.n	80024e4 <__aeabi_dsub+0x94>
 80027fc:	4663      	mov	r3, ip
 80027fe:	4313      	orrs	r3, r2
 8002800:	1e5a      	subs	r2, r3, #1
 8002802:	4193      	sbcs	r3, r2
 8002804:	1ac6      	subs	r6, r0, r3
 8002806:	42b0      	cmp	r0, r6
 8002808:	4180      	sbcs	r0, r0
 800280a:	4240      	negs	r0, r0
 800280c:	1a09      	subs	r1, r1, r0
 800280e:	e65c      	b.n	80024ca <__aeabi_dsub+0x7a>
 8002810:	000e      	movs	r6, r1
 8002812:	4667      	mov	r7, ip
 8002814:	4306      	orrs	r6, r0
 8002816:	4317      	orrs	r7, r2
 8002818:	2d00      	cmp	r5, #0
 800281a:	d15e      	bne.n	80028da <__aeabi_dsub+0x48a>
 800281c:	2e00      	cmp	r6, #0
 800281e:	d000      	beq.n	8002822 <__aeabi_dsub+0x3d2>
 8002820:	e0f3      	b.n	8002a0a <__aeabi_dsub+0x5ba>
 8002822:	2f00      	cmp	r7, #0
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x3d8>
 8002826:	e11e      	b.n	8002a66 <__aeabi_dsub+0x616>
 8002828:	465c      	mov	r4, fp
 800282a:	4661      	mov	r1, ip
 800282c:	4691      	mov	r9, r2
 800282e:	e72c      	b.n	800268a <__aeabi_dsub+0x23a>
 8002830:	4fa9      	ldr	r7, [pc, #676]	; (8002ad8 <__aeabi_dsub+0x688>)
 8002832:	42be      	cmp	r6, r7
 8002834:	d07b      	beq.n	800292e <__aeabi_dsub+0x4de>
 8002836:	001e      	movs	r6, r3
 8002838:	e6f1      	b.n	800261e <__aeabi_dsub+0x1ce>
 800283a:	0010      	movs	r0, r2
 800283c:	3d1f      	subs	r5, #31
 800283e:	40e8      	lsrs	r0, r5
 8002840:	2b20      	cmp	r3, #32
 8002842:	d003      	beq.n	800284c <__aeabi_dsub+0x3fc>
 8002844:	2140      	movs	r1, #64	; 0x40
 8002846:	1acb      	subs	r3, r1, r3
 8002848:	409a      	lsls	r2, r3
 800284a:	4316      	orrs	r6, r2
 800284c:	1e73      	subs	r3, r6, #1
 800284e:	419e      	sbcs	r6, r3
 8002850:	2207      	movs	r2, #7
 8002852:	4306      	orrs	r6, r0
 8002854:	4032      	ands	r2, r6
 8002856:	2100      	movs	r1, #0
 8002858:	2500      	movs	r5, #0
 800285a:	e783      	b.n	8002764 <__aeabi_dsub+0x314>
 800285c:	1a16      	subs	r6, r2, r0
 800285e:	4663      	mov	r3, ip
 8002860:	42b2      	cmp	r2, r6
 8002862:	4180      	sbcs	r0, r0
 8002864:	1a59      	subs	r1, r3, r1
 8002866:	4240      	negs	r0, r0
 8002868:	1a0b      	subs	r3, r1, r0
 800286a:	4698      	mov	r8, r3
 800286c:	465c      	mov	r4, fp
 800286e:	e632      	b.n	80024d6 <__aeabi_dsub+0x86>
 8002870:	2e1f      	cmp	r6, #31
 8002872:	dd00      	ble.n	8002876 <__aeabi_dsub+0x426>
 8002874:	e0ab      	b.n	80029ce <__aeabi_dsub+0x57e>
 8002876:	2720      	movs	r7, #32
 8002878:	1bbb      	subs	r3, r7, r6
 800287a:	469a      	mov	sl, r3
 800287c:	4663      	mov	r3, ip
 800287e:	4657      	mov	r7, sl
 8002880:	40bb      	lsls	r3, r7
 8002882:	4699      	mov	r9, r3
 8002884:	0013      	movs	r3, r2
 8002886:	464f      	mov	r7, r9
 8002888:	40f3      	lsrs	r3, r6
 800288a:	431f      	orrs	r7, r3
 800288c:	003b      	movs	r3, r7
 800288e:	4657      	mov	r7, sl
 8002890:	40ba      	lsls	r2, r7
 8002892:	1e57      	subs	r7, r2, #1
 8002894:	41ba      	sbcs	r2, r7
 8002896:	4313      	orrs	r3, r2
 8002898:	4662      	mov	r2, ip
 800289a:	40f2      	lsrs	r2, r6
 800289c:	1889      	adds	r1, r1, r2
 800289e:	e698      	b.n	80025d2 <__aeabi_dsub+0x182>
 80028a0:	2720      	movs	r7, #32
 80028a2:	1bbb      	subs	r3, r7, r6
 80028a4:	469a      	mov	sl, r3
 80028a6:	4663      	mov	r3, ip
 80028a8:	4657      	mov	r7, sl
 80028aa:	40bb      	lsls	r3, r7
 80028ac:	4699      	mov	r9, r3
 80028ae:	0013      	movs	r3, r2
 80028b0:	464f      	mov	r7, r9
 80028b2:	40f3      	lsrs	r3, r6
 80028b4:	431f      	orrs	r7, r3
 80028b6:	003b      	movs	r3, r7
 80028b8:	4657      	mov	r7, sl
 80028ba:	40ba      	lsls	r2, r7
 80028bc:	1e57      	subs	r7, r2, #1
 80028be:	41ba      	sbcs	r2, r7
 80028c0:	4313      	orrs	r3, r2
 80028c2:	4662      	mov	r2, ip
 80028c4:	40f2      	lsrs	r2, r6
 80028c6:	1a89      	subs	r1, r1, r2
 80028c8:	e79c      	b.n	8002804 <__aeabi_dsub+0x3b4>
 80028ca:	4b83      	ldr	r3, [pc, #524]	; (8002ad8 <__aeabi_dsub+0x688>)
 80028cc:	429f      	cmp	r7, r3
 80028ce:	d05f      	beq.n	8002990 <__aeabi_dsub+0x540>
 80028d0:	2580      	movs	r5, #128	; 0x80
 80028d2:	042d      	lsls	r5, r5, #16
 80028d4:	4273      	negs	r3, r6
 80028d6:	4329      	orrs	r1, r5
 80028d8:	e720      	b.n	800271c <__aeabi_dsub+0x2cc>
 80028da:	2e00      	cmp	r6, #0
 80028dc:	d10c      	bne.n	80028f8 <__aeabi_dsub+0x4a8>
 80028de:	2f00      	cmp	r7, #0
 80028e0:	d100      	bne.n	80028e4 <__aeabi_dsub+0x494>
 80028e2:	e0d0      	b.n	8002a86 <__aeabi_dsub+0x636>
 80028e4:	465c      	mov	r4, fp
 80028e6:	4661      	mov	r1, ip
 80028e8:	4691      	mov	r9, r2
 80028ea:	4d7b      	ldr	r5, [pc, #492]	; (8002ad8 <__aeabi_dsub+0x688>)
 80028ec:	e6cd      	b.n	800268a <__aeabi_dsub+0x23a>
 80028ee:	4f7a      	ldr	r7, [pc, #488]	; (8002ad8 <__aeabi_dsub+0x688>)
 80028f0:	42be      	cmp	r6, r7
 80028f2:	d01c      	beq.n	800292e <__aeabi_dsub+0x4de>
 80028f4:	001e      	movs	r6, r3
 80028f6:	e665      	b.n	80025c4 <__aeabi_dsub+0x174>
 80028f8:	2f00      	cmp	r7, #0
 80028fa:	d018      	beq.n	800292e <__aeabi_dsub+0x4de>
 80028fc:	08c0      	lsrs	r0, r0, #3
 80028fe:	074e      	lsls	r6, r1, #29
 8002900:	4306      	orrs	r6, r0
 8002902:	2080      	movs	r0, #128	; 0x80
 8002904:	08c9      	lsrs	r1, r1, #3
 8002906:	0300      	lsls	r0, r0, #12
 8002908:	4201      	tst	r1, r0
 800290a:	d008      	beq.n	800291e <__aeabi_dsub+0x4ce>
 800290c:	4663      	mov	r3, ip
 800290e:	08dc      	lsrs	r4, r3, #3
 8002910:	4204      	tst	r4, r0
 8002912:	d104      	bne.n	800291e <__aeabi_dsub+0x4ce>
 8002914:	0021      	movs	r1, r4
 8002916:	46da      	mov	sl, fp
 8002918:	08d2      	lsrs	r2, r2, #3
 800291a:	075e      	lsls	r6, r3, #29
 800291c:	4316      	orrs	r6, r2
 800291e:	00f3      	lsls	r3, r6, #3
 8002920:	4699      	mov	r9, r3
 8002922:	2401      	movs	r4, #1
 8002924:	4653      	mov	r3, sl
 8002926:	00c9      	lsls	r1, r1, #3
 8002928:	0f72      	lsrs	r2, r6, #29
 800292a:	4311      	orrs	r1, r2
 800292c:	401c      	ands	r4, r3
 800292e:	4d6a      	ldr	r5, [pc, #424]	; (8002ad8 <__aeabi_dsub+0x688>)
 8002930:	e6ab      	b.n	800268a <__aeabi_dsub+0x23a>
 8002932:	001d      	movs	r5, r3
 8002934:	2200      	movs	r2, #0
 8002936:	2700      	movs	r7, #0
 8002938:	e6b4      	b.n	80026a4 <__aeabi_dsub+0x254>
 800293a:	2d00      	cmp	r5, #0
 800293c:	d159      	bne.n	80029f2 <__aeabi_dsub+0x5a2>
 800293e:	000b      	movs	r3, r1
 8002940:	4303      	orrs	r3, r0
 8002942:	d100      	bne.n	8002946 <__aeabi_dsub+0x4f6>
 8002944:	e6d6      	b.n	80026f4 <__aeabi_dsub+0x2a4>
 8002946:	1c73      	adds	r3, r6, #1
 8002948:	d100      	bne.n	800294c <__aeabi_dsub+0x4fc>
 800294a:	e0b2      	b.n	8002ab2 <__aeabi_dsub+0x662>
 800294c:	4b62      	ldr	r3, [pc, #392]	; (8002ad8 <__aeabi_dsub+0x688>)
 800294e:	429f      	cmp	r7, r3
 8002950:	d01e      	beq.n	8002990 <__aeabi_dsub+0x540>
 8002952:	43f3      	mvns	r3, r6
 8002954:	2b38      	cmp	r3, #56	; 0x38
 8002956:	dc6f      	bgt.n	8002a38 <__aeabi_dsub+0x5e8>
 8002958:	2b1f      	cmp	r3, #31
 800295a:	dd00      	ble.n	800295e <__aeabi_dsub+0x50e>
 800295c:	e097      	b.n	8002a8e <__aeabi_dsub+0x63e>
 800295e:	2520      	movs	r5, #32
 8002960:	000e      	movs	r6, r1
 8002962:	1aed      	subs	r5, r5, r3
 8002964:	40ae      	lsls	r6, r5
 8002966:	46b0      	mov	r8, r6
 8002968:	0006      	movs	r6, r0
 800296a:	46aa      	mov	sl, r5
 800296c:	40de      	lsrs	r6, r3
 800296e:	4645      	mov	r5, r8
 8002970:	4335      	orrs	r5, r6
 8002972:	002e      	movs	r6, r5
 8002974:	4655      	mov	r5, sl
 8002976:	40a8      	lsls	r0, r5
 8002978:	40d9      	lsrs	r1, r3
 800297a:	1e45      	subs	r5, r0, #1
 800297c:	41a8      	sbcs	r0, r5
 800297e:	448c      	add	ip, r1
 8002980:	4306      	orrs	r6, r0
 8002982:	18b6      	adds	r6, r6, r2
 8002984:	4296      	cmp	r6, r2
 8002986:	4192      	sbcs	r2, r2
 8002988:	4251      	negs	r1, r2
 800298a:	4461      	add	r1, ip
 800298c:	003d      	movs	r5, r7
 800298e:	e625      	b.n	80025dc <__aeabi_dsub+0x18c>
 8002990:	003d      	movs	r5, r7
 8002992:	4661      	mov	r1, ip
 8002994:	4691      	mov	r9, r2
 8002996:	e678      	b.n	800268a <__aeabi_dsub+0x23a>
 8002998:	000b      	movs	r3, r1
 800299a:	4303      	orrs	r3, r0
 800299c:	2d00      	cmp	r5, #0
 800299e:	d000      	beq.n	80029a2 <__aeabi_dsub+0x552>
 80029a0:	e655      	b.n	800264e <__aeabi_dsub+0x1fe>
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f5      	beq.n	8002992 <__aeabi_dsub+0x542>
 80029a6:	4663      	mov	r3, ip
 80029a8:	4313      	orrs	r3, r2
 80029aa:	d100      	bne.n	80029ae <__aeabi_dsub+0x55e>
 80029ac:	e66d      	b.n	800268a <__aeabi_dsub+0x23a>
 80029ae:	1886      	adds	r6, r0, r2
 80029b0:	4286      	cmp	r6, r0
 80029b2:	4180      	sbcs	r0, r0
 80029b4:	4461      	add	r1, ip
 80029b6:	4240      	negs	r0, r0
 80029b8:	1809      	adds	r1, r1, r0
 80029ba:	2200      	movs	r2, #0
 80029bc:	020b      	lsls	r3, r1, #8
 80029be:	d400      	bmi.n	80029c2 <__aeabi_dsub+0x572>
 80029c0:	e6d0      	b.n	8002764 <__aeabi_dsub+0x314>
 80029c2:	4b46      	ldr	r3, [pc, #280]	; (8002adc <__aeabi_dsub+0x68c>)
 80029c4:	3501      	adds	r5, #1
 80029c6:	4019      	ands	r1, r3
 80029c8:	e5b2      	b.n	8002530 <__aeabi_dsub+0xe0>
 80029ca:	46b1      	mov	r9, r6
 80029cc:	e65d      	b.n	800268a <__aeabi_dsub+0x23a>
 80029ce:	0033      	movs	r3, r6
 80029d0:	4667      	mov	r7, ip
 80029d2:	3b20      	subs	r3, #32
 80029d4:	40df      	lsrs	r7, r3
 80029d6:	003b      	movs	r3, r7
 80029d8:	2e20      	cmp	r6, #32
 80029da:	d005      	beq.n	80029e8 <__aeabi_dsub+0x598>
 80029dc:	2740      	movs	r7, #64	; 0x40
 80029de:	1bbf      	subs	r7, r7, r6
 80029e0:	4666      	mov	r6, ip
 80029e2:	40be      	lsls	r6, r7
 80029e4:	4332      	orrs	r2, r6
 80029e6:	4690      	mov	r8, r2
 80029e8:	4646      	mov	r6, r8
 80029ea:	1e72      	subs	r2, r6, #1
 80029ec:	4196      	sbcs	r6, r2
 80029ee:	4333      	orrs	r3, r6
 80029f0:	e5ef      	b.n	80025d2 <__aeabi_dsub+0x182>
 80029f2:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <__aeabi_dsub+0x688>)
 80029f4:	429f      	cmp	r7, r3
 80029f6:	d0cb      	beq.n	8002990 <__aeabi_dsub+0x540>
 80029f8:	2580      	movs	r5, #128	; 0x80
 80029fa:	042d      	lsls	r5, r5, #16
 80029fc:	4273      	negs	r3, r6
 80029fe:	4329      	orrs	r1, r5
 8002a00:	e7a8      	b.n	8002954 <__aeabi_dsub+0x504>
 8002a02:	4308      	orrs	r0, r1
 8002a04:	1e41      	subs	r1, r0, #1
 8002a06:	4188      	sbcs	r0, r1
 8002a08:	e6a2      	b.n	8002750 <__aeabi_dsub+0x300>
 8002a0a:	2f00      	cmp	r7, #0
 8002a0c:	d100      	bne.n	8002a10 <__aeabi_dsub+0x5c0>
 8002a0e:	e63c      	b.n	800268a <__aeabi_dsub+0x23a>
 8002a10:	4663      	mov	r3, ip
 8002a12:	1a86      	subs	r6, r0, r2
 8002a14:	1acf      	subs	r7, r1, r3
 8002a16:	42b0      	cmp	r0, r6
 8002a18:	419b      	sbcs	r3, r3
 8002a1a:	425b      	negs	r3, r3
 8002a1c:	1afb      	subs	r3, r7, r3
 8002a1e:	4698      	mov	r8, r3
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	d54e      	bpl.n	8002ac2 <__aeabi_dsub+0x672>
 8002a24:	1a16      	subs	r6, r2, r0
 8002a26:	4663      	mov	r3, ip
 8002a28:	42b2      	cmp	r2, r6
 8002a2a:	4192      	sbcs	r2, r2
 8002a2c:	1a59      	subs	r1, r3, r1
 8002a2e:	4252      	negs	r2, r2
 8002a30:	1a89      	subs	r1, r1, r2
 8002a32:	465c      	mov	r4, fp
 8002a34:	2200      	movs	r2, #0
 8002a36:	e57b      	b.n	8002530 <__aeabi_dsub+0xe0>
 8002a38:	4301      	orrs	r1, r0
 8002a3a:	000e      	movs	r6, r1
 8002a3c:	1e71      	subs	r1, r6, #1
 8002a3e:	418e      	sbcs	r6, r1
 8002a40:	e79f      	b.n	8002982 <__aeabi_dsub+0x532>
 8002a42:	001d      	movs	r5, r3
 8002a44:	000e      	movs	r6, r1
 8002a46:	3d20      	subs	r5, #32
 8002a48:	40ee      	lsrs	r6, r5
 8002a4a:	46b0      	mov	r8, r6
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d004      	beq.n	8002a5a <__aeabi_dsub+0x60a>
 8002a50:	2540      	movs	r5, #64	; 0x40
 8002a52:	1aeb      	subs	r3, r5, r3
 8002a54:	4099      	lsls	r1, r3
 8002a56:	4308      	orrs	r0, r1
 8002a58:	4681      	mov	r9, r0
 8002a5a:	4648      	mov	r0, r9
 8002a5c:	4643      	mov	r3, r8
 8002a5e:	1e41      	subs	r1, r0, #1
 8002a60:	4188      	sbcs	r0, r1
 8002a62:	4318      	orrs	r0, r3
 8002a64:	e674      	b.n	8002750 <__aeabi_dsub+0x300>
 8002a66:	2200      	movs	r2, #0
 8002a68:	2400      	movs	r4, #0
 8002a6a:	e617      	b.n	800269c <__aeabi_dsub+0x24c>
 8002a6c:	1a16      	subs	r6, r2, r0
 8002a6e:	4663      	mov	r3, ip
 8002a70:	42b2      	cmp	r2, r6
 8002a72:	4192      	sbcs	r2, r2
 8002a74:	1a59      	subs	r1, r3, r1
 8002a76:	4252      	negs	r2, r2
 8002a78:	1a89      	subs	r1, r1, r2
 8002a7a:	003d      	movs	r5, r7
 8002a7c:	e525      	b.n	80024ca <__aeabi_dsub+0x7a>
 8002a7e:	4661      	mov	r1, ip
 8002a80:	4691      	mov	r9, r2
 8002a82:	4d15      	ldr	r5, [pc, #84]	; (8002ad8 <__aeabi_dsub+0x688>)
 8002a84:	e601      	b.n	800268a <__aeabi_dsub+0x23a>
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	2400      	movs	r4, #0
 8002a8a:	0312      	lsls	r2, r2, #12
 8002a8c:	e679      	b.n	8002782 <__aeabi_dsub+0x332>
 8002a8e:	001d      	movs	r5, r3
 8002a90:	000e      	movs	r6, r1
 8002a92:	3d20      	subs	r5, #32
 8002a94:	40ee      	lsrs	r6, r5
 8002a96:	46b0      	mov	r8, r6
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d004      	beq.n	8002aa6 <__aeabi_dsub+0x656>
 8002a9c:	2540      	movs	r5, #64	; 0x40
 8002a9e:	1aeb      	subs	r3, r5, r3
 8002aa0:	4099      	lsls	r1, r3
 8002aa2:	4308      	orrs	r0, r1
 8002aa4:	4681      	mov	r9, r0
 8002aa6:	464e      	mov	r6, r9
 8002aa8:	4643      	mov	r3, r8
 8002aaa:	1e71      	subs	r1, r6, #1
 8002aac:	418e      	sbcs	r6, r1
 8002aae:	431e      	orrs	r6, r3
 8002ab0:	e767      	b.n	8002982 <__aeabi_dsub+0x532>
 8002ab2:	1886      	adds	r6, r0, r2
 8002ab4:	4296      	cmp	r6, r2
 8002ab6:	419b      	sbcs	r3, r3
 8002ab8:	4461      	add	r1, ip
 8002aba:	425b      	negs	r3, r3
 8002abc:	18c9      	adds	r1, r1, r3
 8002abe:	003d      	movs	r5, r7
 8002ac0:	e58c      	b.n	80025dc <__aeabi_dsub+0x18c>
 8002ac2:	4647      	mov	r7, r8
 8002ac4:	4337      	orrs	r7, r6
 8002ac6:	d0ce      	beq.n	8002a66 <__aeabi_dsub+0x616>
 8002ac8:	2207      	movs	r2, #7
 8002aca:	4641      	mov	r1, r8
 8002acc:	4032      	ands	r2, r6
 8002ace:	e649      	b.n	8002764 <__aeabi_dsub+0x314>
 8002ad0:	2700      	movs	r7, #0
 8002ad2:	003a      	movs	r2, r7
 8002ad4:	e5e6      	b.n	80026a4 <__aeabi_dsub+0x254>
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	000007ff 	.word	0x000007ff
 8002adc:	ff7fffff 	.word	0xff7fffff

08002ae0 <__aeabi_d2iz>:
 8002ae0:	b530      	push	{r4, r5, lr}
 8002ae2:	4d14      	ldr	r5, [pc, #80]	; (8002b34 <__aeabi_d2iz+0x54>)
 8002ae4:	030a      	lsls	r2, r1, #12
 8002ae6:	004b      	lsls	r3, r1, #1
 8002ae8:	0b12      	lsrs	r2, r2, #12
 8002aea:	0d5b      	lsrs	r3, r3, #21
 8002aec:	0fc9      	lsrs	r1, r1, #31
 8002aee:	2400      	movs	r4, #0
 8002af0:	42ab      	cmp	r3, r5
 8002af2:	dd11      	ble.n	8002b18 <__aeabi_d2iz+0x38>
 8002af4:	4c10      	ldr	r4, [pc, #64]	; (8002b38 <__aeabi_d2iz+0x58>)
 8002af6:	42a3      	cmp	r3, r4
 8002af8:	dc10      	bgt.n	8002b1c <__aeabi_d2iz+0x3c>
 8002afa:	2480      	movs	r4, #128	; 0x80
 8002afc:	0364      	lsls	r4, r4, #13
 8002afe:	4322      	orrs	r2, r4
 8002b00:	4c0e      	ldr	r4, [pc, #56]	; (8002b3c <__aeabi_d2iz+0x5c>)
 8002b02:	1ae4      	subs	r4, r4, r3
 8002b04:	2c1f      	cmp	r4, #31
 8002b06:	dd0c      	ble.n	8002b22 <__aeabi_d2iz+0x42>
 8002b08:	480d      	ldr	r0, [pc, #52]	; (8002b40 <__aeabi_d2iz+0x60>)
 8002b0a:	1ac3      	subs	r3, r0, r3
 8002b0c:	40da      	lsrs	r2, r3
 8002b0e:	0013      	movs	r3, r2
 8002b10:	425c      	negs	r4, r3
 8002b12:	2900      	cmp	r1, #0
 8002b14:	d100      	bne.n	8002b18 <__aeabi_d2iz+0x38>
 8002b16:	001c      	movs	r4, r3
 8002b18:	0020      	movs	r0, r4
 8002b1a:	bd30      	pop	{r4, r5, pc}
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <__aeabi_d2iz+0x64>)
 8002b1e:	18cc      	adds	r4, r1, r3
 8002b20:	e7fa      	b.n	8002b18 <__aeabi_d2iz+0x38>
 8002b22:	4d09      	ldr	r5, [pc, #36]	; (8002b48 <__aeabi_d2iz+0x68>)
 8002b24:	40e0      	lsrs	r0, r4
 8002b26:	46ac      	mov	ip, r5
 8002b28:	4463      	add	r3, ip
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	4303      	orrs	r3, r0
 8002b30:	e7ee      	b.n	8002b10 <__aeabi_d2iz+0x30>
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	000003fe 	.word	0x000003fe
 8002b38:	0000041d 	.word	0x0000041d
 8002b3c:	00000433 	.word	0x00000433
 8002b40:	00000413 	.word	0x00000413
 8002b44:	7fffffff 	.word	0x7fffffff
 8002b48:	fffffbed 	.word	0xfffffbed

08002b4c <__aeabi_i2d>:
 8002b4c:	b570      	push	{r4, r5, r6, lr}
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	d02d      	beq.n	8002bae <__aeabi_i2d+0x62>
 8002b52:	17c3      	asrs	r3, r0, #31
 8002b54:	18c5      	adds	r5, r0, r3
 8002b56:	405d      	eors	r5, r3
 8002b58:	0fc4      	lsrs	r4, r0, #31
 8002b5a:	0028      	movs	r0, r5
 8002b5c:	f000 f938 	bl	8002dd0 <__clzsi2>
 8002b60:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <__aeabi_i2d+0x6c>)
 8002b62:	1a1b      	subs	r3, r3, r0
 8002b64:	055b      	lsls	r3, r3, #21
 8002b66:	0d5b      	lsrs	r3, r3, #21
 8002b68:	280a      	cmp	r0, #10
 8002b6a:	dd15      	ble.n	8002b98 <__aeabi_i2d+0x4c>
 8002b6c:	380b      	subs	r0, #11
 8002b6e:	4085      	lsls	r5, r0
 8002b70:	2200      	movs	r2, #0
 8002b72:	032d      	lsls	r5, r5, #12
 8002b74:	0b2d      	lsrs	r5, r5, #12
 8002b76:	2100      	movs	r1, #0
 8002b78:	0010      	movs	r0, r2
 8002b7a:	032d      	lsls	r5, r5, #12
 8002b7c:	0d0a      	lsrs	r2, r1, #20
 8002b7e:	0b2d      	lsrs	r5, r5, #12
 8002b80:	0512      	lsls	r2, r2, #20
 8002b82:	432a      	orrs	r2, r5
 8002b84:	4d0d      	ldr	r5, [pc, #52]	; (8002bbc <__aeabi_i2d+0x70>)
 8002b86:	051b      	lsls	r3, r3, #20
 8002b88:	402a      	ands	r2, r5
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	07e4      	lsls	r4, r4, #31
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	4323      	orrs	r3, r4
 8002b94:	0019      	movs	r1, r3
 8002b96:	bd70      	pop	{r4, r5, r6, pc}
 8002b98:	0002      	movs	r2, r0
 8002b9a:	0029      	movs	r1, r5
 8002b9c:	3215      	adds	r2, #21
 8002b9e:	4091      	lsls	r1, r2
 8002ba0:	000a      	movs	r2, r1
 8002ba2:	210b      	movs	r1, #11
 8002ba4:	1a08      	subs	r0, r1, r0
 8002ba6:	40c5      	lsrs	r5, r0
 8002ba8:	032d      	lsls	r5, r5, #12
 8002baa:	0b2d      	lsrs	r5, r5, #12
 8002bac:	e7e3      	b.n	8002b76 <__aeabi_i2d+0x2a>
 8002bae:	2400      	movs	r4, #0
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	2500      	movs	r5, #0
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	e7de      	b.n	8002b76 <__aeabi_i2d+0x2a>
 8002bb8:	0000041e 	.word	0x0000041e
 8002bbc:	800fffff 	.word	0x800fffff

08002bc0 <__aeabi_ui2d>:
 8002bc0:	b510      	push	{r4, lr}
 8002bc2:	1e04      	subs	r4, r0, #0
 8002bc4:	d025      	beq.n	8002c12 <__aeabi_ui2d+0x52>
 8002bc6:	f000 f903 	bl	8002dd0 <__clzsi2>
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <__aeabi_ui2d+0x5c>)
 8002bcc:	1a1b      	subs	r3, r3, r0
 8002bce:	055b      	lsls	r3, r3, #21
 8002bd0:	0d5b      	lsrs	r3, r3, #21
 8002bd2:	280a      	cmp	r0, #10
 8002bd4:	dd12      	ble.n	8002bfc <__aeabi_ui2d+0x3c>
 8002bd6:	380b      	subs	r0, #11
 8002bd8:	4084      	lsls	r4, r0
 8002bda:	2200      	movs	r2, #0
 8002bdc:	0324      	lsls	r4, r4, #12
 8002bde:	0b24      	lsrs	r4, r4, #12
 8002be0:	2100      	movs	r1, #0
 8002be2:	0010      	movs	r0, r2
 8002be4:	0324      	lsls	r4, r4, #12
 8002be6:	0d0a      	lsrs	r2, r1, #20
 8002be8:	0b24      	lsrs	r4, r4, #12
 8002bea:	0512      	lsls	r2, r2, #20
 8002bec:	4322      	orrs	r2, r4
 8002bee:	4c0c      	ldr	r4, [pc, #48]	; (8002c20 <__aeabi_ui2d+0x60>)
 8002bf0:	051b      	lsls	r3, r3, #20
 8002bf2:	4022      	ands	r2, r4
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	0859      	lsrs	r1, r3, #1
 8002bfa:	bd10      	pop	{r4, pc}
 8002bfc:	0002      	movs	r2, r0
 8002bfe:	0021      	movs	r1, r4
 8002c00:	3215      	adds	r2, #21
 8002c02:	4091      	lsls	r1, r2
 8002c04:	000a      	movs	r2, r1
 8002c06:	210b      	movs	r1, #11
 8002c08:	1a08      	subs	r0, r1, r0
 8002c0a:	40c4      	lsrs	r4, r0
 8002c0c:	0324      	lsls	r4, r4, #12
 8002c0e:	0b24      	lsrs	r4, r4, #12
 8002c10:	e7e6      	b.n	8002be0 <__aeabi_ui2d+0x20>
 8002c12:	2300      	movs	r3, #0
 8002c14:	2400      	movs	r4, #0
 8002c16:	2200      	movs	r2, #0
 8002c18:	e7e2      	b.n	8002be0 <__aeabi_ui2d+0x20>
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	0000041e 	.word	0x0000041e
 8002c20:	800fffff 	.word	0x800fffff

08002c24 <__aeabi_f2d>:
 8002c24:	0041      	lsls	r1, r0, #1
 8002c26:	0e09      	lsrs	r1, r1, #24
 8002c28:	1c4b      	adds	r3, r1, #1
 8002c2a:	b570      	push	{r4, r5, r6, lr}
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	0246      	lsls	r6, r0, #9
 8002c30:	0a75      	lsrs	r5, r6, #9
 8002c32:	0fc4      	lsrs	r4, r0, #31
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	dd14      	ble.n	8002c62 <__aeabi_f2d+0x3e>
 8002c38:	23e0      	movs	r3, #224	; 0xe0
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	076d      	lsls	r5, r5, #29
 8002c3e:	0b36      	lsrs	r6, r6, #12
 8002c40:	18cb      	adds	r3, r1, r3
 8002c42:	2100      	movs	r1, #0
 8002c44:	0d0a      	lsrs	r2, r1, #20
 8002c46:	0028      	movs	r0, r5
 8002c48:	0512      	lsls	r2, r2, #20
 8002c4a:	4d1c      	ldr	r5, [pc, #112]	; (8002cbc <__aeabi_f2d+0x98>)
 8002c4c:	4332      	orrs	r2, r6
 8002c4e:	055b      	lsls	r3, r3, #21
 8002c50:	402a      	ands	r2, r5
 8002c52:	085b      	lsrs	r3, r3, #1
 8002c54:	4313      	orrs	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	07e4      	lsls	r4, r4, #31
 8002c5a:	085b      	lsrs	r3, r3, #1
 8002c5c:	4323      	orrs	r3, r4
 8002c5e:	0019      	movs	r1, r3
 8002c60:	bd70      	pop	{r4, r5, r6, pc}
 8002c62:	2900      	cmp	r1, #0
 8002c64:	d114      	bne.n	8002c90 <__aeabi_f2d+0x6c>
 8002c66:	2d00      	cmp	r5, #0
 8002c68:	d01e      	beq.n	8002ca8 <__aeabi_f2d+0x84>
 8002c6a:	0028      	movs	r0, r5
 8002c6c:	f000 f8b0 	bl	8002dd0 <__clzsi2>
 8002c70:	280a      	cmp	r0, #10
 8002c72:	dc1c      	bgt.n	8002cae <__aeabi_f2d+0x8a>
 8002c74:	230b      	movs	r3, #11
 8002c76:	002a      	movs	r2, r5
 8002c78:	1a1b      	subs	r3, r3, r0
 8002c7a:	40da      	lsrs	r2, r3
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	3315      	adds	r3, #21
 8002c80:	409d      	lsls	r5, r3
 8002c82:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <__aeabi_f2d+0x9c>)
 8002c84:	0312      	lsls	r2, r2, #12
 8002c86:	1a1b      	subs	r3, r3, r0
 8002c88:	055b      	lsls	r3, r3, #21
 8002c8a:	0b16      	lsrs	r6, r2, #12
 8002c8c:	0d5b      	lsrs	r3, r3, #21
 8002c8e:	e7d8      	b.n	8002c42 <__aeabi_f2d+0x1e>
 8002c90:	2d00      	cmp	r5, #0
 8002c92:	d006      	beq.n	8002ca2 <__aeabi_f2d+0x7e>
 8002c94:	0b32      	lsrs	r2, r6, #12
 8002c96:	2680      	movs	r6, #128	; 0x80
 8002c98:	0336      	lsls	r6, r6, #12
 8002c9a:	076d      	lsls	r5, r5, #29
 8002c9c:	4316      	orrs	r6, r2
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <__aeabi_f2d+0xa0>)
 8002ca0:	e7cf      	b.n	8002c42 <__aeabi_f2d+0x1e>
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <__aeabi_f2d+0xa0>)
 8002ca4:	2600      	movs	r6, #0
 8002ca6:	e7cc      	b.n	8002c42 <__aeabi_f2d+0x1e>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2600      	movs	r6, #0
 8002cac:	e7c9      	b.n	8002c42 <__aeabi_f2d+0x1e>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	002a      	movs	r2, r5
 8002cb2:	3b0b      	subs	r3, #11
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	2500      	movs	r5, #0
 8002cb8:	e7e3      	b.n	8002c82 <__aeabi_f2d+0x5e>
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	800fffff 	.word	0x800fffff
 8002cc0:	00000389 	.word	0x00000389
 8002cc4:	000007ff 	.word	0x000007ff

08002cc8 <__aeabi_d2f>:
 8002cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cca:	004c      	lsls	r4, r1, #1
 8002ccc:	0d64      	lsrs	r4, r4, #21
 8002cce:	030b      	lsls	r3, r1, #12
 8002cd0:	1c62      	adds	r2, r4, #1
 8002cd2:	0a5b      	lsrs	r3, r3, #9
 8002cd4:	0f46      	lsrs	r6, r0, #29
 8002cd6:	0552      	lsls	r2, r2, #21
 8002cd8:	0fc9      	lsrs	r1, r1, #31
 8002cda:	431e      	orrs	r6, r3
 8002cdc:	00c5      	lsls	r5, r0, #3
 8002cde:	0d52      	lsrs	r2, r2, #21
 8002ce0:	2a01      	cmp	r2, #1
 8002ce2:	dd29      	ble.n	8002d38 <__aeabi_d2f+0x70>
 8002ce4:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <__aeabi_d2f+0xfc>)
 8002ce6:	18e7      	adds	r7, r4, r3
 8002ce8:	2ffe      	cmp	r7, #254	; 0xfe
 8002cea:	dc1c      	bgt.n	8002d26 <__aeabi_d2f+0x5e>
 8002cec:	2f00      	cmp	r7, #0
 8002cee:	dd3b      	ble.n	8002d68 <__aeabi_d2f+0xa0>
 8002cf0:	0180      	lsls	r0, r0, #6
 8002cf2:	1e43      	subs	r3, r0, #1
 8002cf4:	4198      	sbcs	r0, r3
 8002cf6:	2207      	movs	r2, #7
 8002cf8:	00f3      	lsls	r3, r6, #3
 8002cfa:	0f6d      	lsrs	r5, r5, #29
 8002cfc:	4303      	orrs	r3, r0
 8002cfe:	432b      	orrs	r3, r5
 8002d00:	401a      	ands	r2, r3
 8002d02:	2a00      	cmp	r2, #0
 8002d04:	d004      	beq.n	8002d10 <__aeabi_d2f+0x48>
 8002d06:	220f      	movs	r2, #15
 8002d08:	401a      	ands	r2, r3
 8002d0a:	2a04      	cmp	r2, #4
 8002d0c:	d000      	beq.n	8002d10 <__aeabi_d2f+0x48>
 8002d0e:	3304      	adds	r3, #4
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	04d2      	lsls	r2, r2, #19
 8002d14:	401a      	ands	r2, r3
 8002d16:	d024      	beq.n	8002d62 <__aeabi_d2f+0x9a>
 8002d18:	3701      	adds	r7, #1
 8002d1a:	b2fa      	uxtb	r2, r7
 8002d1c:	2fff      	cmp	r7, #255	; 0xff
 8002d1e:	d002      	beq.n	8002d26 <__aeabi_d2f+0x5e>
 8002d20:	019b      	lsls	r3, r3, #6
 8002d22:	0a58      	lsrs	r0, r3, #9
 8002d24:	e001      	b.n	8002d2a <__aeabi_d2f+0x62>
 8002d26:	22ff      	movs	r2, #255	; 0xff
 8002d28:	2000      	movs	r0, #0
 8002d2a:	0240      	lsls	r0, r0, #9
 8002d2c:	05d2      	lsls	r2, r2, #23
 8002d2e:	0a40      	lsrs	r0, r0, #9
 8002d30:	07c9      	lsls	r1, r1, #31
 8002d32:	4310      	orrs	r0, r2
 8002d34:	4308      	orrs	r0, r1
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	4335      	orrs	r5, r6
 8002d3a:	2c00      	cmp	r4, #0
 8002d3c:	d104      	bne.n	8002d48 <__aeabi_d2f+0x80>
 8002d3e:	2d00      	cmp	r5, #0
 8002d40:	d10a      	bne.n	8002d58 <__aeabi_d2f+0x90>
 8002d42:	2200      	movs	r2, #0
 8002d44:	2000      	movs	r0, #0
 8002d46:	e7f0      	b.n	8002d2a <__aeabi_d2f+0x62>
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	d0ec      	beq.n	8002d26 <__aeabi_d2f+0x5e>
 8002d4c:	2080      	movs	r0, #128	; 0x80
 8002d4e:	03c0      	lsls	r0, r0, #15
 8002d50:	4330      	orrs	r0, r6
 8002d52:	22ff      	movs	r2, #255	; 0xff
 8002d54:	e7e9      	b.n	8002d2a <__aeabi_d2f+0x62>
 8002d56:	2400      	movs	r4, #0
 8002d58:	2300      	movs	r3, #0
 8002d5a:	025b      	lsls	r3, r3, #9
 8002d5c:	0a58      	lsrs	r0, r3, #9
 8002d5e:	b2e2      	uxtb	r2, r4
 8002d60:	e7e3      	b.n	8002d2a <__aeabi_d2f+0x62>
 8002d62:	08db      	lsrs	r3, r3, #3
 8002d64:	003c      	movs	r4, r7
 8002d66:	e7f8      	b.n	8002d5a <__aeabi_d2f+0x92>
 8002d68:	003b      	movs	r3, r7
 8002d6a:	3317      	adds	r3, #23
 8002d6c:	dbf3      	blt.n	8002d56 <__aeabi_d2f+0x8e>
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	041b      	lsls	r3, r3, #16
 8002d72:	4333      	orrs	r3, r6
 8002d74:	261e      	movs	r6, #30
 8002d76:	1bf6      	subs	r6, r6, r7
 8002d78:	2e1f      	cmp	r6, #31
 8002d7a:	dd14      	ble.n	8002da6 <__aeabi_d2f+0xde>
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	4252      	negs	r2, r2
 8002d80:	1bd7      	subs	r7, r2, r7
 8002d82:	001a      	movs	r2, r3
 8002d84:	40fa      	lsrs	r2, r7
 8002d86:	0017      	movs	r7, r2
 8002d88:	2e20      	cmp	r6, #32
 8002d8a:	d004      	beq.n	8002d96 <__aeabi_d2f+0xce>
 8002d8c:	4a0e      	ldr	r2, [pc, #56]	; (8002dc8 <__aeabi_d2f+0x100>)
 8002d8e:	4694      	mov	ip, r2
 8002d90:	4464      	add	r4, ip
 8002d92:	40a3      	lsls	r3, r4
 8002d94:	431d      	orrs	r5, r3
 8002d96:	002b      	movs	r3, r5
 8002d98:	1e5d      	subs	r5, r3, #1
 8002d9a:	41ab      	sbcs	r3, r5
 8002d9c:	2207      	movs	r2, #7
 8002d9e:	433b      	orrs	r3, r7
 8002da0:	401a      	ands	r2, r3
 8002da2:	2700      	movs	r7, #0
 8002da4:	e7ad      	b.n	8002d02 <__aeabi_d2f+0x3a>
 8002da6:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <__aeabi_d2f+0x104>)
 8002da8:	0028      	movs	r0, r5
 8002daa:	18a2      	adds	r2, r4, r2
 8002dac:	4095      	lsls	r5, r2
 8002dae:	4093      	lsls	r3, r2
 8002db0:	1e6c      	subs	r4, r5, #1
 8002db2:	41a5      	sbcs	r5, r4
 8002db4:	40f0      	lsrs	r0, r6
 8002db6:	2207      	movs	r2, #7
 8002db8:	432b      	orrs	r3, r5
 8002dba:	4303      	orrs	r3, r0
 8002dbc:	401a      	ands	r2, r3
 8002dbe:	2700      	movs	r7, #0
 8002dc0:	e79f      	b.n	8002d02 <__aeabi_d2f+0x3a>
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	fffffc80 	.word	0xfffffc80
 8002dc8:	fffffca2 	.word	0xfffffca2
 8002dcc:	fffffc82 	.word	0xfffffc82

08002dd0 <__clzsi2>:
 8002dd0:	211c      	movs	r1, #28
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	041b      	lsls	r3, r3, #16
 8002dd6:	4298      	cmp	r0, r3
 8002dd8:	d301      	bcc.n	8002dde <__clzsi2+0xe>
 8002dda:	0c00      	lsrs	r0, r0, #16
 8002ddc:	3910      	subs	r1, #16
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	4298      	cmp	r0, r3
 8002de2:	d301      	bcc.n	8002de8 <__clzsi2+0x18>
 8002de4:	0a00      	lsrs	r0, r0, #8
 8002de6:	3908      	subs	r1, #8
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	4298      	cmp	r0, r3
 8002dec:	d301      	bcc.n	8002df2 <__clzsi2+0x22>
 8002dee:	0900      	lsrs	r0, r0, #4
 8002df0:	3904      	subs	r1, #4
 8002df2:	a202      	add	r2, pc, #8	; (adr r2, 8002dfc <__clzsi2+0x2c>)
 8002df4:	5c10      	ldrb	r0, [r2, r0]
 8002df6:	1840      	adds	r0, r0, r1
 8002df8:	4770      	bx	lr
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	02020304 	.word	0x02020304
 8002e00:	01010101 	.word	0x01010101
	...

08002e0c <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
static void LCD1602_EnablePulse(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <LCD1602_EnablePulse+0x38>)
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <LCD1602_EnablePulse+0x3c>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	f001 fb8e 	bl	800453c <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8002e20:	230a      	movs	r3, #10
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 f996 	bl	8003154 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <LCD1602_EnablePulse+0x38>)
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <LCD1602_EnablePulse+0x3c>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	2200      	movs	r2, #0
 8002e32:	0019      	movs	r1, r3
 8002e34:	f001 fb82 	bl	800453c <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 8002e38:	203c      	movs	r0, #60	; 0x3c
 8002e3a:	f000 f98b 	bl	8003154 <LCD1602_TIM_MicorSecDelay>
}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	200000b8 	.word	0x200000b8
 8002e48:	200000be 	.word	0x200000be

08002e4c <LCD1602_RS>:
//2) RS control
static void LCD1602_RS(bool state)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	0002      	movs	r2, r0
 8002e54:	1dfb      	adds	r3, r7, #7
 8002e56:	701a      	strb	r2, [r3, #0]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8002e58:	1dfb      	adds	r3, r7, #7
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <LCD1602_RS+0x26>
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <LCD1602_RS+0x40>)
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <LCD1602_RS+0x44>)
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	f001 fb66 	bl	800453c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8002e70:	e007      	b.n	8002e82 <LCD1602_RS+0x36>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <LCD1602_RS+0x40>)
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <LCD1602_RS+0x44>)
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	f001 fb5d 	bl	800453c <HAL_GPIO_WritePin>
}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b002      	add	sp, #8
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	200000b8 	.word	0x200000b8
 8002e90:	200000bc 	.word	0x200000bc

08002e94 <LCD1602_write>:

//3) Write Parallel interface
static void LCD1602_write(uint8_t byte)
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	1dfb      	adds	r3, r7, #7
 8002e9e:	701a      	strb	r2, [r3, #0]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8002ea0:	230f      	movs	r3, #15
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	1dfa      	adds	r2, r7, #7
 8002ea6:	7812      	ldrb	r2, [r2, #0]
 8002ea8:	210f      	movs	r1, #15
 8002eaa:	400a      	ands	r2, r1
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	230e      	movs	r3, #14
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	1dfa      	adds	r2, r7, #7
 8002eb4:	7812      	ldrb	r2, [r2, #0]
 8002eb6:	0912      	lsrs	r2, r2, #4
 8002eb8:	701a      	strb	r2, [r3, #0]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8002eba:	4b6b      	ldr	r3, [pc, #428]	; (8003068 <LCD1602_write+0x1d4>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d164      	bne.n	8002f8c <LCD1602_write+0xf8>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8002ec2:	4b6a      	ldr	r3, [pc, #424]	; (800306c <LCD1602_write+0x1d8>)
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <LCD1602_write+0x1dc>)
 8002ec8:	8819      	ldrh	r1, [r3, #0]
 8002eca:	240f      	movs	r4, #15
 8002ecc:	193b      	adds	r3, r7, r4
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	001a      	movs	r2, r3
 8002ed8:	f001 fb30 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8002edc:	4b63      	ldr	r3, [pc, #396]	; (800306c <LCD1602_write+0x1d8>)
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	4b64      	ldr	r3, [pc, #400]	; (8003074 <LCD1602_write+0x1e0>)
 8002ee2:	8819      	ldrh	r1, [r3, #0]
 8002ee4:	193b      	adds	r3, r7, r4
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	001a      	movs	r2, r3
 8002ef0:	f001 fb24 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8002ef4:	4b5d      	ldr	r3, [pc, #372]	; (800306c <LCD1602_write+0x1d8>)
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	4b5f      	ldr	r3, [pc, #380]	; (8003078 <LCD1602_write+0x1e4>)
 8002efa:	8819      	ldrh	r1, [r3, #0]
 8002efc:	193b      	adds	r3, r7, r4
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2204      	movs	r2, #4
 8002f02:	4013      	ands	r3, r2
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	001a      	movs	r2, r3
 8002f08:	f001 fb18 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8002f0c:	4b57      	ldr	r3, [pc, #348]	; (800306c <LCD1602_write+0x1d8>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	4b5a      	ldr	r3, [pc, #360]	; (800307c <LCD1602_write+0x1e8>)
 8002f12:	8819      	ldrh	r1, [r3, #0]
 8002f14:	193b      	adds	r3, r7, r4
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2208      	movs	r2, #8
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	001a      	movs	r2, r3
 8002f20:	f001 fb0c 	bl	800453c <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8002f24:	4b56      	ldr	r3, [pc, #344]	; (8003080 <LCD1602_write+0x1ec>)
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	4b56      	ldr	r3, [pc, #344]	; (8003084 <LCD1602_write+0x1f0>)
 8002f2a:	8819      	ldrh	r1, [r3, #0]
 8002f2c:	240e      	movs	r4, #14
 8002f2e:	193b      	adds	r3, r7, r4
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2201      	movs	r2, #1
 8002f34:	4013      	ands	r3, r2
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	001a      	movs	r2, r3
 8002f3a:	f001 faff 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8002f3e:	4b50      	ldr	r3, [pc, #320]	; (8003080 <LCD1602_write+0x1ec>)
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	4b51      	ldr	r3, [pc, #324]	; (8003088 <LCD1602_write+0x1f4>)
 8002f44:	8819      	ldrh	r1, [r3, #0]
 8002f46:	193b      	adds	r3, r7, r4
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	001a      	movs	r2, r3
 8002f52:	f001 faf3 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8002f56:	4b4a      	ldr	r3, [pc, #296]	; (8003080 <LCD1602_write+0x1ec>)
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	4b4c      	ldr	r3, [pc, #304]	; (800308c <LCD1602_write+0x1f8>)
 8002f5c:	8819      	ldrh	r1, [r3, #0]
 8002f5e:	193b      	adds	r3, r7, r4
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2204      	movs	r2, #4
 8002f64:	4013      	ands	r3, r2
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	001a      	movs	r2, r3
 8002f6a:	f001 fae7 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8002f6e:	4b44      	ldr	r3, [pc, #272]	; (8003080 <LCD1602_write+0x1ec>)
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	4b47      	ldr	r3, [pc, #284]	; (8003090 <LCD1602_write+0x1fc>)
 8002f74:	8819      	ldrh	r1, [r3, #0]
 8002f76:	193b      	adds	r3, r7, r4
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	001a      	movs	r2, r3
 8002f82:	f001 fadb 	bl	800453c <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 8002f86:	f7ff ff41 	bl	8002e0c <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 8002f8a:	e069      	b.n	8003060 <LCD1602_write+0x1cc>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8002f8c:	4b36      	ldr	r3, [pc, #216]	; (8003068 <LCD1602_write+0x1d4>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d165      	bne.n	8003060 <LCD1602_write+0x1cc>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8002f94:	4b3a      	ldr	r3, [pc, #232]	; (8003080 <LCD1602_write+0x1ec>)
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <LCD1602_write+0x1f0>)
 8002f9a:	8819      	ldrh	r1, [r3, #0]
 8002f9c:	240e      	movs	r4, #14
 8002f9e:	193b      	adds	r3, r7, r4
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	001a      	movs	r2, r3
 8002faa:	f001 fac7 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8002fae:	4b34      	ldr	r3, [pc, #208]	; (8003080 <LCD1602_write+0x1ec>)
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	4b35      	ldr	r3, [pc, #212]	; (8003088 <LCD1602_write+0x1f4>)
 8002fb4:	8819      	ldrh	r1, [r3, #0]
 8002fb6:	193b      	adds	r3, r7, r4
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	001a      	movs	r2, r3
 8002fc2:	f001 fabb 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8002fc6:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <LCD1602_write+0x1ec>)
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	4b30      	ldr	r3, [pc, #192]	; (800308c <LCD1602_write+0x1f8>)
 8002fcc:	8819      	ldrh	r1, [r3, #0]
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	001a      	movs	r2, r3
 8002fda:	f001 faaf 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8002fde:	4b28      	ldr	r3, [pc, #160]	; (8003080 <LCD1602_write+0x1ec>)
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <LCD1602_write+0x1fc>)
 8002fe4:	8819      	ldrh	r1, [r3, #0]
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2208      	movs	r2, #8
 8002fec:	4013      	ands	r3, r2
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	001a      	movs	r2, r3
 8002ff2:	f001 faa3 	bl	800453c <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8002ff6:	f7ff ff09 	bl	8002e0c <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <LCD1602_write+0x1ec>)
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	4b21      	ldr	r3, [pc, #132]	; (8003084 <LCD1602_write+0x1f0>)
 8003000:	8819      	ldrh	r1, [r3, #0]
 8003002:	240f      	movs	r4, #15
 8003004:	193b      	adds	r3, r7, r4
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2201      	movs	r2, #1
 800300a:	4013      	ands	r3, r2
 800300c:	b2db      	uxtb	r3, r3
 800300e:	001a      	movs	r2, r3
 8003010:	f001 fa94 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <LCD1602_write+0x1ec>)
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <LCD1602_write+0x1f4>)
 800301a:	8819      	ldrh	r1, [r3, #0]
 800301c:	193b      	adds	r3, r7, r4
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2202      	movs	r2, #2
 8003022:	4013      	ands	r3, r2
 8003024:	b2db      	uxtb	r3, r3
 8003026:	001a      	movs	r2, r3
 8003028:	f001 fa88 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <LCD1602_write+0x1ec>)
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <LCD1602_write+0x1f8>)
 8003032:	8819      	ldrh	r1, [r3, #0]
 8003034:	193b      	adds	r3, r7, r4
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2204      	movs	r2, #4
 800303a:	4013      	ands	r3, r2
 800303c:	b2db      	uxtb	r3, r3
 800303e:	001a      	movs	r2, r3
 8003040:	f001 fa7c 	bl	800453c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8003044:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <LCD1602_write+0x1ec>)
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <LCD1602_write+0x1fc>)
 800304a:	8819      	ldrh	r1, [r3, #0]
 800304c:	193b      	adds	r3, r7, r4
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2208      	movs	r2, #8
 8003052:	4013      	ands	r3, r2
 8003054:	b2db      	uxtb	r3, r3
 8003056:	001a      	movs	r2, r3
 8003058:	f001 fa70 	bl	800453c <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 800305c:	f7ff fed6 	bl	8002e0c <LCD1602_EnablePulse>
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b005      	add	sp, #20
 8003066:	bd90      	pop	{r4, r7, pc}
 8003068:	20000000 	.word	0x20000000
 800306c:	200000c0 	.word	0x200000c0
 8003070:	200000c4 	.word	0x200000c4
 8003074:	200000c6 	.word	0x200000c6
 8003078:	200000c8 	.word	0x200000c8
 800307c:	200000ca 	.word	0x200000ca
 8003080:	200000cc 	.word	0x200000cc
 8003084:	200000d0 	.word	0x200000d0
 8003088:	200000d2 	.word	0x200000d2
 800308c:	200000d4 	.word	0x200000d4
 8003090:	200000d6 	.word	0x200000d6

08003094 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
static void LCD1602_TIM_Config(void)
{
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 800309a:	003a      	movs	r2, r7
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	0011      	movs	r1, r2
 80030a0:	0018      	movs	r0, r3
 80030a2:	f001 ff8d 	bl	8004fc0 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 80030a6:	1d3b      	adds	r3, r7, #4
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d104      	bne.n	80030b8 <LCD1602_TIM_Config+0x24>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 80030ae:	f001 ff71 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 80030b2:	0003      	movs	r3, r0
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	e004      	b.n	80030c2 <LCD1602_TIM_Config+0x2e>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 80030b8:	f001 ff6c 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 80030bc:	0003      	movs	r3, r0
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	617b      	str	r3, [r7, #20]
	}
	clockSpeed *= 0.000001;
 80030c2:	6978      	ldr	r0, [r7, #20]
 80030c4:	f7ff fd7c 	bl	8002bc0 <__aeabi_ui2d>
 80030c8:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <LCD1602_TIM_Config+0xb0>)
 80030ca:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <LCD1602_TIM_Config+0xb4>)
 80030cc:	f7fe ff4e 	bl	8001f6c <__aeabi_dmul>
 80030d0:	0003      	movs	r3, r0
 80030d2:	000c      	movs	r4, r1
 80030d4:	0018      	movs	r0, r3
 80030d6:	0021      	movs	r1, r4
 80030d8:	f7fd f932 	bl	8000340 <__aeabi_d2uiz>
 80030dc:	0003      	movs	r3, r0
 80030de:	617b      	str	r3, [r7, #20]
	
	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 80030e0:	4b1a      	ldr	r3, [pc, #104]	; (800314c <LCD1602_TIM_Config+0xb8>)
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <LCD1602_TIM_Config+0xb8>)
 80030e6:	2102      	movs	r1, #2
 80030e8:	430a      	orrs	r2, r1
 80030ea:	61da      	str	r2, [r3, #28]
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 80030ec:	4b18      	ldr	r3, [pc, #96]	; (8003150 <LCD1602_TIM_Config+0xbc>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b17      	ldr	r3, [pc, #92]	; (8003150 <LCD1602_TIM_Config+0xbc>)
 80030f2:	2110      	movs	r1, #16
 80030f4:	438a      	bics	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 80030f8:	4b15      	ldr	r3, [pc, #84]	; (8003150 <LCD1602_TIM_Config+0xbc>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b14      	ldr	r3, [pc, #80]	; (8003150 <LCD1602_TIM_Config+0xbc>)
 80030fe:	2101      	movs	r1, #1
 8003100:	438a      	bics	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
	//Update request source 
	TIM3->CR1 &= ~(1UL << 2);
 8003104:	4b12      	ldr	r3, [pc, #72]	; (8003150 <LCD1602_TIM_Config+0xbc>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <LCD1602_TIM_Config+0xbc>)
 800310a:	2104      	movs	r1, #4
 800310c:	438a      	bics	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);				  
 8003110:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <LCD1602_TIM_Config+0xbc>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <LCD1602_TIM_Config+0xbc>)
 8003116:	2108      	movs	r1, #8
 8003118:	430a      	orrs	r2, r1
 800311a:	601a      	str	r2, [r3, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <LCD1602_TIM_Config+0xbc>)
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	3a01      	subs	r2, #1
 8003122:	629a      	str	r2, [r3, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <LCD1602_TIM_Config+0xbc>)
 8003126:	2209      	movs	r2, #9
 8003128:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <LCD1602_TIM_Config+0xbc>)
 800312c:	2201      	movs	r2, #1
 800312e:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <LCD1602_TIM_Config+0xbc>)
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <LCD1602_TIM_Config+0xbc>)
 8003136:	2101      	movs	r1, #1
 8003138:	438a      	bics	r2, r1
 800313a:	611a      	str	r2, [r3, #16]
}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b007      	add	sp, #28
 8003142:	bd90      	pop	{r4, r7, pc}
 8003144:	a0b5ed8d 	.word	0xa0b5ed8d
 8003148:	3eb0c6f7 	.word	0x3eb0c6f7
 800314c:	40021000 	.word	0x40021000
 8003150:	40000400 	.word	0x40000400

08003154 <LCD1602_TIM_MicorSecDelay>:
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 800315c:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <LCD1602_TIM_MicorSecDelay+0x40>)
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	3a01      	subs	r2, #1
 8003162:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <LCD1602_TIM_MicorSecDelay+0x40>)
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <LCD1602_TIM_MicorSecDelay+0x40>)
 800316a:	2101      	movs	r1, #1
 800316c:	438a      	bics	r2, r1
 800316e:	611a      	str	r2, [r3, #16]
	TIM3->CR1 |= 1UL;
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <LCD1602_TIM_MicorSecDelay+0x40>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b07      	ldr	r3, [pc, #28]	; (8003194 <LCD1602_TIM_MicorSecDelay+0x40>)
 8003176:	2101      	movs	r1, #1
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]
	while((TIM3->SR&0x0001) != 1);
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	4b05      	ldr	r3, [pc, #20]	; (8003194 <LCD1602_TIM_MicorSecDelay+0x40>)
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2201      	movs	r2, #1
 8003184:	4013      	ands	r3, r2
 8003186:	2b01      	cmp	r3, #1
 8003188:	d1f9      	bne.n	800317e <LCD1602_TIM_MicorSecDelay+0x2a>
}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	46bd      	mov	sp, r7
 800318e:	b002      	add	sp, #8
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	40000400 	.word	0x40000400

08003198 <LCD1602_writeCommand>:
//5) Write command
static void LCD1602_writeCommand(uint8_t command)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	0002      	movs	r2, r0
 80031a0:	1dfb      	adds	r3, r7, #7
 80031a2:	701a      	strb	r2, [r3, #0]
	//Set RS to 0
	LCD1602_RS(false);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7ff fe51 	bl	8002e4c <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 80031aa:	1dfb      	adds	r3, r7, #7
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7ff fe70 	bl	8002e94 <LCD1602_write>
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}

080031bc <LCD1602_writeData>:
//6) Write 8 bits data
static void LCD1602_writeData(uint8_t data)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	0002      	movs	r2, r0
 80031c4:	1dfb      	adds	r3, r7, #7
 80031c6:	701a      	strb	r2, [r3, #0]
	//Set RS to 1
	LCD1602_RS(true);
 80031c8:	2001      	movs	r0, #1
 80031ca:	f7ff fe3f 	bl	8002e4c <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(data);
 80031ce:	1dfb      	adds	r3, r7, #7
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	0018      	movs	r0, r3
 80031d4:	f7ff fe5e 	bl	8002e94 <LCD1602_write>
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}

080031e0 <LCD1602_write4bitCommand>:
//7) Write 4 bits command, *FOR 4 BITS MODE ONLY*
static void LCD1602_write4bitCommand(uint8_t nibble)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	0002      	movs	r2, r0
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	701a      	strb	r2, [r3, #0]
	uint8_t LSB_nibble = nibble&0xF;
 80031ec:	240f      	movs	r4, #15
 80031ee:	193b      	adds	r3, r7, r4
 80031f0:	1dfa      	adds	r2, r7, #7
 80031f2:	7812      	ldrb	r2, [r2, #0]
 80031f4:	210f      	movs	r1, #15
 80031f6:	400a      	ands	r2, r1
 80031f8:	701a      	strb	r2, [r3, #0]
	//Set RS to 0
	LCD1602_RS(false);
 80031fa:	2000      	movs	r0, #0
 80031fc:	f7ff fe26 	bl	8002e4c <LCD1602_RS>
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8003200:	4b1a      	ldr	r3, [pc, #104]	; (800326c <LCD1602_write4bitCommand+0x8c>)
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <LCD1602_write4bitCommand+0x90>)
 8003206:	8819      	ldrh	r1, [r3, #0]
 8003208:	193b      	adds	r3, r7, r4
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2201      	movs	r2, #1
 800320e:	4013      	ands	r3, r2
 8003210:	b2db      	uxtb	r3, r3
 8003212:	001a      	movs	r2, r3
 8003214:	f001 f992 	bl	800453c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <LCD1602_write4bitCommand+0x8c>)
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	4b15      	ldr	r3, [pc, #84]	; (8003274 <LCD1602_write4bitCommand+0x94>)
 800321e:	8819      	ldrh	r1, [r3, #0]
 8003220:	193b      	adds	r3, r7, r4
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2202      	movs	r2, #2
 8003226:	4013      	ands	r3, r2
 8003228:	b2db      	uxtb	r3, r3
 800322a:	001a      	movs	r2, r3
 800322c:	f001 f986 	bl	800453c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <LCD1602_write4bitCommand+0x8c>)
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	4b10      	ldr	r3, [pc, #64]	; (8003278 <LCD1602_write4bitCommand+0x98>)
 8003236:	8819      	ldrh	r1, [r3, #0]
 8003238:	193b      	adds	r3, r7, r4
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2204      	movs	r2, #4
 800323e:	4013      	ands	r3, r2
 8003240:	b2db      	uxtb	r3, r3
 8003242:	001a      	movs	r2, r3
 8003244:	f001 f97a 	bl	800453c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <LCD1602_write4bitCommand+0x8c>)
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <LCD1602_write4bitCommand+0x9c>)
 800324e:	8819      	ldrh	r1, [r3, #0]
 8003250:	193b      	adds	r3, r7, r4
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2208      	movs	r2, #8
 8003256:	4013      	ands	r3, r2
 8003258:	b2db      	uxtb	r3, r3
 800325a:	001a      	movs	r2, r3
 800325c:	f001 f96e 	bl	800453c <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
 8003260:	f7ff fdd4 	bl	8002e0c <LCD1602_EnablePulse>
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b005      	add	sp, #20
 800326a:	bd90      	pop	{r4, r7, pc}
 800326c:	200000cc 	.word	0x200000cc
 8003270:	200000d0 	.word	0x200000d0
 8003274:	200000d2 	.word	0x200000d2
 8003278:	200000d4 	.word	0x200000d4
 800327c:	200000d6 	.word	0x200000d6

08003280 <LCD1602_Begin4BIT>:
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}
//2) LCD begin 4 bits function
void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	0008      	movs	r0, r1
 800328a:	0011      	movs	r1, r2
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	240a      	movs	r4, #10
 8003290:	193b      	adds	r3, r7, r4
 8003292:	1c02      	adds	r2, r0, #0
 8003294:	801a      	strh	r2, [r3, #0]
 8003296:	2008      	movs	r0, #8
 8003298:	183b      	adds	r3, r7, r0
 800329a:	1c0a      	adds	r2, r1, #0
 800329c:	801a      	strh	r2, [r3, #0]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 800329e:	4b32      	ldr	r3, [pc, #200]	; (8003368 <LCD1602_Begin4BIT+0xe8>)
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	601a      	str	r2, [r3, #0]
	PIN_RS = RS;
 80032a4:	4b31      	ldr	r3, [pc, #196]	; (800336c <LCD1602_Begin4BIT+0xec>)
 80032a6:	193a      	adds	r2, r7, r4
 80032a8:	8812      	ldrh	r2, [r2, #0]
 80032aa:	801a      	strh	r2, [r3, #0]
	PIN_E = E;
 80032ac:	4b30      	ldr	r3, [pc, #192]	; (8003370 <LCD1602_Begin4BIT+0xf0>)
 80032ae:	183a      	adds	r2, r7, r0
 80032b0:	8812      	ldrh	r2, [r2, #0]
 80032b2:	801a      	strh	r2, [r3, #0]
	PORT_MSB = PORT_MSBs4to7;
 80032b4:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <LCD1602_Begin4BIT+0xf4>)
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	601a      	str	r2, [r3, #0]
	D4_PIN = D4;
 80032ba:	4b2f      	ldr	r3, [pc, #188]	; (8003378 <LCD1602_Begin4BIT+0xf8>)
 80032bc:	2218      	movs	r2, #24
 80032be:	2108      	movs	r1, #8
 80032c0:	468c      	mov	ip, r1
 80032c2:	44bc      	add	ip, r7
 80032c4:	4462      	add	r2, ip
 80032c6:	8812      	ldrh	r2, [r2, #0]
 80032c8:	801a      	strh	r2, [r3, #0]
	D5_PIN = D5;
 80032ca:	4b2c      	ldr	r3, [pc, #176]	; (800337c <LCD1602_Begin4BIT+0xfc>)
 80032cc:	221c      	movs	r2, #28
 80032ce:	2108      	movs	r1, #8
 80032d0:	468c      	mov	ip, r1
 80032d2:	44bc      	add	ip, r7
 80032d4:	4462      	add	r2, ip
 80032d6:	8812      	ldrh	r2, [r2, #0]
 80032d8:	801a      	strh	r2, [r3, #0]
	D6_PIN = D6;
 80032da:	4b29      	ldr	r3, [pc, #164]	; (8003380 <LCD1602_Begin4BIT+0x100>)
 80032dc:	2220      	movs	r2, #32
 80032de:	2108      	movs	r1, #8
 80032e0:	468c      	mov	ip, r1
 80032e2:	44bc      	add	ip, r7
 80032e4:	4462      	add	r2, ip
 80032e6:	8812      	ldrh	r2, [r2, #0]
 80032e8:	801a      	strh	r2, [r3, #0]
	D7_PIN = D7;
 80032ea:	4b26      	ldr	r3, [pc, #152]	; (8003384 <LCD1602_Begin4BIT+0x104>)
 80032ec:	2224      	movs	r2, #36	; 0x24
 80032ee:	2108      	movs	r1, #8
 80032f0:	468c      	mov	ip, r1
 80032f2:	44bc      	add	ip, r7
 80032f4:	4462      	add	r2, ip
 80032f6:	8812      	ldrh	r2, [r2, #0]
 80032f8:	801a      	strh	r2, [r3, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 80032fa:	f7ff fecb 	bl	8003094 <LCD1602_TIM_Config>
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 80032fe:	4b22      	ldr	r3, [pc, #136]	; (8003388 <LCD1602_Begin4BIT+0x108>)
 8003300:	2202      	movs	r2, #2
 8003302:	701a      	strb	r2, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 8003304:	4b21      	ldr	r3, [pc, #132]	; (800338c <LCD1602_Begin4BIT+0x10c>)
 8003306:	2228      	movs	r2, #40	; 0x28
 8003308:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 800330a:	2014      	movs	r0, #20
 800330c:	f000 fdcc 	bl	8003ea8 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 8003310:	2003      	movs	r0, #3
 8003312:	f7ff ff65 	bl	80031e0 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 8003316:	2005      	movs	r0, #5
 8003318:	f000 fdc6 	bl	8003ea8 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 800331c:	2003      	movs	r0, #3
 800331e:	f7ff ff5f 	bl	80031e0 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8003322:	2001      	movs	r0, #1
 8003324:	f000 fdc0 	bl	8003ea8 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8003328:	2003      	movs	r0, #3
 800332a:	f7ff ff59 	bl	80031e0 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 800332e:	2001      	movs	r0, #1
 8003330:	f000 fdba 	bl	8003ea8 <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 8003334:	2002      	movs	r0, #2
 8003336:	f7ff ff53 	bl	80031e0 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 800333a:	2001      	movs	r0, #1
 800333c:	f000 fdb4 	bl	8003ea8 <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8003340:	200f      	movs	r0, #15
 8003342:	f7ff ff29 	bl	8003198 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8003346:	2001      	movs	r0, #1
 8003348:	f7ff ff26 	bl	8003198 <LCD1602_writeCommand>
	HAL_Delay(3);
 800334c:	2003      	movs	r0, #3
 800334e:	f000 fdab 	bl	8003ea8 <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8003352:	2028      	movs	r0, #40	; 0x28
 8003354:	f7ff ff20 	bl	8003198 <LCD1602_writeCommand>
	HAL_Delay(3);
 8003358:	2003      	movs	r0, #3
 800335a:	f000 fda5 	bl	8003ea8 <HAL_Delay>
}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	46bd      	mov	sp, r7
 8003362:	b005      	add	sp, #20
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	200000b8 	.word	0x200000b8
 800336c:	200000bc 	.word	0x200000bc
 8003370:	200000be 	.word	0x200000be
 8003374:	200000cc 	.word	0x200000cc
 8003378:	200000d0 	.word	0x200000d0
 800337c:	200000d2 	.word	0x200000d2
 8003380:	200000d4 	.word	0x200000d4
 8003384:	200000d6 	.word	0x200000d6
 8003388:	20000000 	.word	0x20000000
 800338c:	20000001 	.word	0x20000001

08003390 <LCD1602_print>:
//3) LCD print string
void LCD1602_print(char string[])
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8003398:	230f      	movs	r3, #15
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e00d      	b.n	80033be <LCD1602_print+0x2e>
	{
		LCD1602_writeData((uint8_t)string[i]);
 80033a2:	240f      	movs	r4, #15
 80033a4:	193b      	adds	r3, r7, r4
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	18d3      	adds	r3, r2, r3
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f7ff ff04 	bl	80031bc <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 80033b4:	193b      	adds	r3, r7, r4
 80033b6:	781a      	ldrb	r2, [r3, #0]
 80033b8:	193b      	adds	r3, r7, r4
 80033ba:	3201      	adds	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	230f      	movs	r3, #15
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b0f      	cmp	r3, #15
 80033c6:	d807      	bhi.n	80033d8 <LCD1602_print+0x48>
 80033c8:	230f      	movs	r3, #15
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	18d3      	adds	r3, r2, r3
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e4      	bne.n	80033a2 <LCD1602_print+0x12>
	}
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b005      	add	sp, #20
 80033de:	bd90      	pop	{r4, r7, pc}

080033e0 <LCD1602_setCursor>:
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	0002      	movs	r2, r0
 80033e8:	1dfb      	adds	r3, r7, #7
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	1dbb      	adds	r3, r7, #6
 80033ee:	1c0a      	adds	r2, r1, #0
 80033f0:	701a      	strb	r2, [r3, #0]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 80033f2:	1dbb      	adds	r3, r7, #6
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	230f      	movs	r3, #15
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	210f      	movs	r1, #15
 8003400:	400a      	ands	r2, r1
 8003402:	701a      	strb	r2, [r3, #0]
	if(row==1)
 8003404:	1dfb      	adds	r3, r7, #7
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d10d      	bne.n	8003428 <LCD1602_setCursor+0x48>
	{
		maskData |= (0x80);
 800340c:	200f      	movs	r0, #15
 800340e:	183b      	adds	r3, r7, r0
 8003410:	183a      	adds	r2, r7, r0
 8003412:	7812      	ldrb	r2, [r2, #0]
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	4249      	negs	r1, r1
 8003418:	430a      	orrs	r2, r1
 800341a:	701a      	strb	r2, [r3, #0]
		LCD1602_writeCommand(maskData);
 800341c:	183b      	adds	r3, r7, r0
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	0018      	movs	r0, r3
 8003422:	f7ff feb9 	bl	8003198 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}	
 8003426:	e00c      	b.n	8003442 <LCD1602_setCursor+0x62>
		maskData |= (0xc0);
 8003428:	200f      	movs	r0, #15
 800342a:	183b      	adds	r3, r7, r0
 800342c:	183a      	adds	r2, r7, r0
 800342e:	7812      	ldrb	r2, [r2, #0]
 8003430:	2140      	movs	r1, #64	; 0x40
 8003432:	4249      	negs	r1, r1
 8003434:	430a      	orrs	r2, r1
 8003436:	701a      	strb	r2, [r3, #0]
		LCD1602_writeCommand(maskData);
 8003438:	183b      	adds	r3, r7, r0
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff feab 	bl	8003198 <LCD1602_writeCommand>
}	
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b004      	add	sp, #16
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800344c:	b590      	push	{r4, r7, lr}
 800344e:	b085      	sub	sp, #20
 8003450:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003452:	f000 fcc5 	bl	8003de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003456:	f000 f86d 	bl	8003534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800345a:	f000 f947 	bl	80036ec <MX_GPIO_Init>
  MX_DAC_Init();
 800345e:	f000 f8b5 	bl	80035cc <MX_DAC_Init>
  MX_TIM1_Init();
 8003462:	f000 f8eb 	bl	800363c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8003466:	4b2d      	ldr	r3, [pc, #180]	; (800351c <main+0xd0>)
 8003468:	2100      	movs	r1, #0
 800346a:	0018      	movs	r0, r3
 800346c:	f000 fea2 	bl	80041b4 <HAL_DAC_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 8003470:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <main+0xd4>)
 8003472:	0018      	movs	r0, r3
 8003474:	f001 fe1e 	bl	80050b4 <HAL_TIM_Base_Start_IT>

  //LCD1602_Begin8BIT(RS_GPIO_Port, RS_Pin, E_Pin, D0_GPIO_Port, D0_Pin, D1_Pin, D2_Pin, D3_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);

  LCD1602_Begin4BIT(RS_GPIO_Port, RS_Pin, E_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 8003478:	4c2a      	ldr	r4, [pc, #168]	; (8003524 <main+0xd8>)
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	011a      	lsls	r2, r3, #4
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	0159      	lsls	r1, r3, #5
 8003482:	2390      	movs	r3, #144	; 0x90
 8003484:	05d8      	lsls	r0, r3, #23
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	9303      	str	r3, [sp, #12]
 800348a:	2340      	movs	r3, #64	; 0x40
 800348c:	9302      	str	r3, [sp, #8]
 800348e:	2320      	movs	r3, #32
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	2310      	movs	r3, #16
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	0023      	movs	r3, r4
 8003498:	f7ff fef2 	bl	8003280 <LCD1602_Begin4BIT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	019b      	lsls	r3, r3, #6
 80034a0:	4821      	ldr	r0, [pc, #132]	; (8003528 <main+0xdc>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	0019      	movs	r1, r3
 80034a6:	f001 f849 	bl	800453c <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	01db      	lsls	r3, r3, #7
 80034ae:	481e      	ldr	r0, [pc, #120]	; (8003528 <main+0xdc>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	0019      	movs	r1, r3
 80034b4:	f001 f842 	bl	800453c <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	481a      	ldr	r0, [pc, #104]	; (8003528 <main+0xdc>)
 80034be:	2201      	movs	r2, #1
 80034c0:	0019      	movs	r1, r3
 80034c2:	f001 f83b 	bl	800453c <HAL_GPIO_WritePin>

	  LCD1602_setCursor(1, 1);
 80034c6:	2101      	movs	r1, #1
 80034c8:	2001      	movs	r0, #1
 80034ca:	f7ff ff89 	bl	80033e0 <LCD1602_setCursor>
	      LCD1602_print("BMS");
 80034ce:	4b17      	ldr	r3, [pc, #92]	; (800352c <main+0xe0>)
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7ff ff5d 	bl	8003390 <LCD1602_print>
	      LCD1602_setCursor(2, 1);
 80034d6:	2101      	movs	r1, #1
 80034d8:	2002      	movs	r0, #2
 80034da:	f7ff ff81 	bl	80033e0 <LCD1602_setCursor>
	      LCD1602_print("4.06.2021");
 80034de:	4b14      	ldr	r3, [pc, #80]	; (8003530 <main+0xe4>)
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7ff ff55 	bl	8003390 <LCD1602_print>

	      HAL_Delay(1000);
 80034e6:	23fa      	movs	r3, #250	; 0xfa
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 fcdc 	bl	8003ea8 <HAL_Delay>

	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	019b      	lsls	r3, r3, #6
 80034f4:	480c      	ldr	r0, [pc, #48]	; (8003528 <main+0xdc>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	0019      	movs	r1, r3
 80034fa:	f001 f81f 	bl	800453c <HAL_GPIO_WritePin>
	      	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	01db      	lsls	r3, r3, #7
 8003502:	4809      	ldr	r0, [pc, #36]	; (8003528 <main+0xdc>)
 8003504:	2200      	movs	r2, #0
 8003506:	0019      	movs	r1, r3
 8003508:	f001 f818 	bl	800453c <HAL_GPIO_WritePin>
	      	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	4805      	ldr	r0, [pc, #20]	; (8003528 <main+0xdc>)
 8003512:	2200      	movs	r2, #0
 8003514:	0019      	movs	r1, r3
 8003516:	f001 f811 	bl	800453c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800351a:	e7bf      	b.n	800349c <main+0x50>
 800351c:	200000e0 	.word	0x200000e0
 8003520:	200000f4 	.word	0x200000f4
 8003524:	48000400 	.word	0x48000400
 8003528:	48000800 	.word	0x48000800
 800352c:	08005cb0 	.word	0x08005cb0
 8003530:	08005cb4 	.word	0x08005cb4

08003534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b093      	sub	sp, #76	; 0x4c
 8003538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800353a:	2414      	movs	r4, #20
 800353c:	193b      	adds	r3, r7, r4
 800353e:	0018      	movs	r0, r3
 8003540:	2334      	movs	r3, #52	; 0x34
 8003542:	001a      	movs	r2, r3
 8003544:	2100      	movs	r1, #0
 8003546:	f002 f9b5 	bl	80058b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800354a:	1d3b      	adds	r3, r7, #4
 800354c:	0018      	movs	r0, r3
 800354e:	2310      	movs	r3, #16
 8003550:	001a      	movs	r2, r3
 8003552:	2100      	movs	r1, #0
 8003554:	f002 f9ae 	bl	80058b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003558:	0021      	movs	r1, r4
 800355a:	187b      	adds	r3, r7, r1
 800355c:	2202      	movs	r2, #2
 800355e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003560:	187b      	adds	r3, r7, r1
 8003562:	2201      	movs	r2, #1
 8003564:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003566:	187b      	adds	r3, r7, r1
 8003568:	2210      	movs	r2, #16
 800356a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800356c:	187b      	adds	r3, r7, r1
 800356e:	2202      	movs	r2, #2
 8003570:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003572:	187b      	adds	r3, r7, r1
 8003574:	2280      	movs	r2, #128	; 0x80
 8003576:	0212      	lsls	r2, r2, #8
 8003578:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800357a:	187b      	adds	r3, r7, r1
 800357c:	2280      	movs	r2, #128	; 0x80
 800357e:	0352      	lsls	r2, r2, #13
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003582:	187b      	adds	r3, r7, r1
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003588:	187b      	adds	r3, r7, r1
 800358a:	0018      	movs	r0, r3
 800358c:	f001 f81a 	bl	80045c4 <HAL_RCC_OscConfig>
 8003590:	1e03      	subs	r3, r0, #0
 8003592:	d001      	beq.n	8003598 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8003594:	f000 f95c 	bl	8003850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003598:	1d3b      	adds	r3, r7, #4
 800359a:	2207      	movs	r2, #7
 800359c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800359e:	1d3b      	adds	r3, r7, #4
 80035a0:	2202      	movs	r2, #2
 80035a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035a4:	1d3b      	adds	r3, r7, #4
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035aa:	1d3b      	adds	r3, r7, #4
 80035ac:	2200      	movs	r2, #0
 80035ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80035b0:	1d3b      	adds	r3, r7, #4
 80035b2:	2101      	movs	r1, #1
 80035b4:	0018      	movs	r0, r3
 80035b6:	f001 fb8b 	bl	8004cd0 <HAL_RCC_ClockConfig>
 80035ba:	1e03      	subs	r3, r0, #0
 80035bc:	d001      	beq.n	80035c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80035be:	f000 f947 	bl	8003850 <Error_Handler>
  }
}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b013      	add	sp, #76	; 0x4c
 80035c8:	bd90      	pop	{r4, r7, pc}
	...

080035cc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80035d2:	003b      	movs	r3, r7
 80035d4:	0018      	movs	r0, r3
 80035d6:	2308      	movs	r3, #8
 80035d8:	001a      	movs	r2, r3
 80035da:	2100      	movs	r1, #0
 80035dc:	f002 f96a 	bl	80058b4 <memset>
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80035e0:	4b14      	ldr	r3, [pc, #80]	; (8003634 <MX_DAC_Init+0x68>)
 80035e2:	4a15      	ldr	r2, [pc, #84]	; (8003638 <MX_DAC_Init+0x6c>)
 80035e4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <MX_DAC_Init+0x68>)
 80035e8:	0018      	movs	r0, r3
 80035ea:	f000 fd5d 	bl	80040a8 <HAL_DAC_Init>
 80035ee:	1e03      	subs	r3, r0, #0
 80035f0:	d001      	beq.n	80035f6 <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 80035f2:	f000 f92d 	bl	8003850 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80035f6:	003b      	movs	r3, r7
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80035fc:	003b      	movs	r3, r7
 80035fe:	2200      	movs	r2, #0
 8003600:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003602:	0039      	movs	r1, r7
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <MX_DAC_Init+0x68>)
 8003606:	2200      	movs	r2, #0
 8003608:	0018      	movs	r0, r3
 800360a:	f000 fd93 	bl	8004134 <HAL_DAC_ConfigChannel>
 800360e:	1e03      	subs	r3, r0, #0
 8003610:	d001      	beq.n	8003616 <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8003612:	f000 f91d 	bl	8003850 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003616:	0039      	movs	r1, r7
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <MX_DAC_Init+0x68>)
 800361a:	2210      	movs	r2, #16
 800361c:	0018      	movs	r0, r3
 800361e:	f000 fd89 	bl	8004134 <HAL_DAC_ConfigChannel>
 8003622:	1e03      	subs	r3, r0, #0
 8003624:	d001      	beq.n	800362a <MX_DAC_Init+0x5e>
  {
    Error_Handler();
 8003626:	f000 f913 	bl	8003850 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	b002      	add	sp, #8
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	200000e0 	.word	0x200000e0
 8003638:	40007400 	.word	0x40007400

0800363c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003642:	2308      	movs	r3, #8
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	0018      	movs	r0, r3
 8003648:	2310      	movs	r3, #16
 800364a:	001a      	movs	r2, r3
 800364c:	2100      	movs	r1, #0
 800364e:	f002 f931 	bl	80058b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003652:	003b      	movs	r3, r7
 8003654:	0018      	movs	r0, r3
 8003656:	2308      	movs	r3, #8
 8003658:	001a      	movs	r2, r3
 800365a:	2100      	movs	r1, #0
 800365c:	f002 f92a 	bl	80058b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003660:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <MX_TIM1_Init+0xa4>)
 8003662:	4a20      	ldr	r2, [pc, #128]	; (80036e4 <MX_TIM1_Init+0xa8>)
 8003664:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003666:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <MX_TIM1_Init+0xa4>)
 8003668:	2200      	movs	r2, #0
 800366a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800366c:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <MX_TIM1_Init+0xa4>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000-1;
 8003672:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <MX_TIM1_Init+0xa4>)
 8003674:	4a1c      	ldr	r2, [pc, #112]	; (80036e8 <MX_TIM1_Init+0xac>)
 8003676:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003678:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <MX_TIM1_Init+0xa4>)
 800367a:	2200      	movs	r2, #0
 800367c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800367e:	4b18      	ldr	r3, [pc, #96]	; (80036e0 <MX_TIM1_Init+0xa4>)
 8003680:	2200      	movs	r2, #0
 8003682:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003684:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <MX_TIM1_Init+0xa4>)
 8003686:	2200      	movs	r2, #0
 8003688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <MX_TIM1_Init+0xa4>)
 800368c:	0018      	movs	r0, r3
 800368e:	f001 fcc1 	bl	8005014 <HAL_TIM_Base_Init>
 8003692:	1e03      	subs	r3, r0, #0
 8003694:	d001      	beq.n	800369a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8003696:	f000 f8db 	bl	8003850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800369a:	2108      	movs	r1, #8
 800369c:	187b      	adds	r3, r7, r1
 800369e:	2280      	movs	r2, #128	; 0x80
 80036a0:	0152      	lsls	r2, r2, #5
 80036a2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036a4:	187a      	adds	r2, r7, r1
 80036a6:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <MX_TIM1_Init+0xa4>)
 80036a8:	0011      	movs	r1, r2
 80036aa:	0018      	movs	r0, r3
 80036ac:	f001 fe6a 	bl	8005384 <HAL_TIM_ConfigClockSource>
 80036b0:	1e03      	subs	r3, r0, #0
 80036b2:	d001      	beq.n	80036b8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80036b4:	f000 f8cc 	bl	8003850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036b8:	003b      	movs	r3, r7
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036be:	003b      	movs	r3, r7
 80036c0:	2200      	movs	r2, #0
 80036c2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036c4:	003a      	movs	r2, r7
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <MX_TIM1_Init+0xa4>)
 80036c8:	0011      	movs	r1, r2
 80036ca:	0018      	movs	r0, r3
 80036cc:	f002 f85a 	bl	8005784 <HAL_TIMEx_MasterConfigSynchronization>
 80036d0:	1e03      	subs	r3, r0, #0
 80036d2:	d001      	beq.n	80036d8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80036d4:	f000 f8bc 	bl	8003850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b006      	add	sp, #24
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	200000f4 	.word	0x200000f4
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	0000bb7f 	.word	0x0000bb7f

080036ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b089      	sub	sp, #36	; 0x24
 80036f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f2:	240c      	movs	r4, #12
 80036f4:	193b      	adds	r3, r7, r4
 80036f6:	0018      	movs	r0, r3
 80036f8:	2314      	movs	r3, #20
 80036fa:	001a      	movs	r2, r3
 80036fc:	2100      	movs	r1, #0
 80036fe:	f002 f8d9 	bl	80058b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003702:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <MX_GPIO_Init+0x148>)
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	4b4b      	ldr	r3, [pc, #300]	; (8003834 <MX_GPIO_Init+0x148>)
 8003708:	2180      	movs	r1, #128	; 0x80
 800370a:	0309      	lsls	r1, r1, #12
 800370c:	430a      	orrs	r2, r1
 800370e:	615a      	str	r2, [r3, #20]
 8003710:	4b48      	ldr	r3, [pc, #288]	; (8003834 <MX_GPIO_Init+0x148>)
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	031b      	lsls	r3, r3, #12
 8003718:	4013      	ands	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800371e:	4b45      	ldr	r3, [pc, #276]	; (8003834 <MX_GPIO_Init+0x148>)
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	4b44      	ldr	r3, [pc, #272]	; (8003834 <MX_GPIO_Init+0x148>)
 8003724:	2180      	movs	r1, #128	; 0x80
 8003726:	0289      	lsls	r1, r1, #10
 8003728:	430a      	orrs	r2, r1
 800372a:	615a      	str	r2, [r3, #20]
 800372c:	4b41      	ldr	r3, [pc, #260]	; (8003834 <MX_GPIO_Init+0x148>)
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	029b      	lsls	r3, r3, #10
 8003734:	4013      	ands	r3, r2
 8003736:	607b      	str	r3, [r7, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800373a:	4b3e      	ldr	r3, [pc, #248]	; (8003834 <MX_GPIO_Init+0x148>)
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	4b3d      	ldr	r3, [pc, #244]	; (8003834 <MX_GPIO_Init+0x148>)
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	02c9      	lsls	r1, r1, #11
 8003744:	430a      	orrs	r2, r1
 8003746:	615a      	str	r2, [r3, #20]
 8003748:	4b3a      	ldr	r3, [pc, #232]	; (8003834 <MX_GPIO_Init+0x148>)
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	02db      	lsls	r3, r3, #11
 8003750:	4013      	ands	r3, r2
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LD3_Pin
 8003756:	4938      	ldr	r1, [pc, #224]	; (8003838 <MX_GPIO_Init+0x14c>)
 8003758:	4b38      	ldr	r3, [pc, #224]	; (800383c <MX_GPIO_Init+0x150>)
 800375a:	2200      	movs	r2, #0
 800375c:	0018      	movs	r0, r3
 800375e:	f000 feed 	bl	800453c <HAL_GPIO_WritePin>
                          |LD6_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDX_Pin|E_Pin|RS_Pin, GPIO_PIN_RESET);
 8003762:	4937      	ldr	r1, [pc, #220]	; (8003840 <MX_GPIO_Init+0x154>)
 8003764:	2390      	movs	r3, #144	; 0x90
 8003766:	05db      	lsls	r3, r3, #23
 8003768:	2200      	movs	r2, #0
 800376a:	0018      	movs	r0, r3
 800376c:	f000 fee6 	bl	800453c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8003770:	4934      	ldr	r1, [pc, #208]	; (8003844 <MX_GPIO_Init+0x158>)
 8003772:	4b35      	ldr	r3, [pc, #212]	; (8003848 <MX_GPIO_Init+0x15c>)
 8003774:	2200      	movs	r2, #0
 8003776:	0018      	movs	r0, r3
 8003778:	f000 fee0 	bl	800453c <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LD3_Pin
                           LD6_Pin LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LD3_Pin
 800377c:	193b      	adds	r3, r7, r4
 800377e:	4a2e      	ldr	r2, [pc, #184]	; (8003838 <MX_GPIO_Init+0x14c>)
 8003780:	601a      	str	r2, [r3, #0]
                          |LD6_Pin|LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003782:	193b      	adds	r3, r7, r4
 8003784:	2201      	movs	r2, #1
 8003786:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	193b      	adds	r3, r7, r4
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378e:	193b      	adds	r3, r7, r4
 8003790:	2200      	movs	r2, #0
 8003792:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003794:	193b      	adds	r3, r7, r4
 8003796:	4a29      	ldr	r2, [pc, #164]	; (800383c <MX_GPIO_Init+0x150>)
 8003798:	0019      	movs	r1, r3
 800379a:	0010      	movs	r0, r2
 800379c:	f000 fd56 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80037a0:	193b      	adds	r3, r7, r4
 80037a2:	2207      	movs	r2, #7
 80037a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	4a28      	ldr	r2, [pc, #160]	; (800384c <MX_GPIO_Init+0x160>)
 80037aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	193b      	adds	r3, r7, r4
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	4a21      	ldr	r2, [pc, #132]	; (800383c <MX_GPIO_Init+0x150>)
 80037b6:	0019      	movs	r1, r3
 80037b8:	0010      	movs	r0, r2
 80037ba:	f000 fd47 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDX_Pin E_Pin RS_Pin */
  GPIO_InitStruct.Pin = LEDX_Pin|E_Pin|RS_Pin;
 80037be:	193b      	adds	r3, r7, r4
 80037c0:	4a1f      	ldr	r2, [pc, #124]	; (8003840 <MX_GPIO_Init+0x154>)
 80037c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c4:	193b      	adds	r3, r7, r4
 80037c6:	2201      	movs	r2, #1
 80037c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ca:	193b      	adds	r3, r7, r4
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d0:	193b      	adds	r3, r7, r4
 80037d2:	2200      	movs	r2, #0
 80037d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d6:	193a      	adds	r2, r7, r4
 80037d8:	2390      	movs	r3, #144	; 0x90
 80037da:	05db      	lsls	r3, r3, #23
 80037dc:	0011      	movs	r1, r2
 80037de:	0018      	movs	r0, r3
 80037e0:	f000 fd34 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80037e4:	0021      	movs	r1, r4
 80037e6:	187b      	adds	r3, r7, r1
 80037e8:	4a16      	ldr	r2, [pc, #88]	; (8003844 <MX_GPIO_Init+0x158>)
 80037ea:	601a      	str	r2, [r3, #0]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ec:	187b      	adds	r3, r7, r1
 80037ee:	2201      	movs	r2, #1
 80037f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f2:	187b      	adds	r3, r7, r1
 80037f4:	2200      	movs	r2, #0
 80037f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	2200      	movs	r2, #0
 80037fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037fe:	187b      	adds	r3, r7, r1
 8003800:	4a11      	ldr	r2, [pc, #68]	; (8003848 <MX_GPIO_Init+0x15c>)
 8003802:	0019      	movs	r1, r3
 8003804:	0010      	movs	r0, r2
 8003806:	f000 fd21 	bl	800424c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800380a:	2200      	movs	r2, #0
 800380c:	2100      	movs	r1, #0
 800380e:	2005      	movs	r0, #5
 8003810:	f000 fc18 	bl	8004044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003814:	2005      	movs	r0, #5
 8003816:	f000 fc2a 	bl	800406e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800381a:	2200      	movs	r2, #0
 800381c:	2100      	movs	r1, #0
 800381e:	2006      	movs	r0, #6
 8003820:	f000 fc10 	bl	8004044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003824:	2006      	movs	r0, #6
 8003826:	f000 fc22 	bl	800406e <HAL_NVIC_EnableIRQ>

}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b009      	add	sp, #36	; 0x24
 8003830:	bd90      	pop	{r4, r7, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	40021000 	.word	0x40021000
 8003838:	0000e3c0 	.word	0x0000e3c0
 800383c:	48000800 	.word	0x48000800
 8003840:	00001808 	.word	0x00001808
 8003844:	000004f7 	.word	0x000004f7
 8003848:	48000400 	.word	0x48000400
 800384c:	10110000 	.word	0x10110000

08003850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003854:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003856:	e7fe      	b.n	8003856 <Error_Handler+0x6>

08003858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <HAL_MspInit+0x44>)
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <HAL_MspInit+0x44>)
 8003864:	2101      	movs	r1, #1
 8003866:	430a      	orrs	r2, r1
 8003868:	619a      	str	r2, [r3, #24]
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <HAL_MspInit+0x44>)
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2201      	movs	r2, #1
 8003870:	4013      	ands	r3, r2
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <HAL_MspInit+0x44>)
 8003878:	69da      	ldr	r2, [r3, #28]
 800387a:	4b08      	ldr	r3, [pc, #32]	; (800389c <HAL_MspInit+0x44>)
 800387c:	2180      	movs	r1, #128	; 0x80
 800387e:	0549      	lsls	r1, r1, #21
 8003880:	430a      	orrs	r2, r1
 8003882:	61da      	str	r2, [r3, #28]
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_MspInit+0x44>)
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	055b      	lsls	r3, r3, #21
 800388c:	4013      	ands	r3, r2
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	b002      	add	sp, #8
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	40021000 	.word	0x40021000

080038a0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a8:	2314      	movs	r3, #20
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	0018      	movs	r0, r3
 80038ae:	2314      	movs	r3, #20
 80038b0:	001a      	movs	r2, r3
 80038b2:	2100      	movs	r1, #0
 80038b4:	f001 fffe 	bl	80058b4 <memset>
  if(hdac->Instance==DAC)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <HAL_DAC_MspInit+0x84>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d12c      	bne.n	800391c <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80038c2:	4b19      	ldr	r3, [pc, #100]	; (8003928 <HAL_DAC_MspInit+0x88>)
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <HAL_DAC_MspInit+0x88>)
 80038c8:	2180      	movs	r1, #128	; 0x80
 80038ca:	0589      	lsls	r1, r1, #22
 80038cc:	430a      	orrs	r2, r1
 80038ce:	61da      	str	r2, [r3, #28]
 80038d0:	4b15      	ldr	r3, [pc, #84]	; (8003928 <HAL_DAC_MspInit+0x88>)
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	059b      	lsls	r3, r3, #22
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_DAC_MspInit+0x88>)
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <HAL_DAC_MspInit+0x88>)
 80038e4:	2180      	movs	r1, #128	; 0x80
 80038e6:	0289      	lsls	r1, r1, #10
 80038e8:	430a      	orrs	r2, r1
 80038ea:	615a      	str	r2, [r3, #20]
 80038ec:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <HAL_DAC_MspInit+0x88>)
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	029b      	lsls	r3, r3, #10
 80038f4:	4013      	ands	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80038fa:	2114      	movs	r1, #20
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	2230      	movs	r2, #48	; 0x30
 8003900:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003902:	187b      	adds	r3, r7, r1
 8003904:	2203      	movs	r2, #3
 8003906:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003908:	187b      	adds	r3, r7, r1
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390e:	187a      	adds	r2, r7, r1
 8003910:	2390      	movs	r3, #144	; 0x90
 8003912:	05db      	lsls	r3, r3, #23
 8003914:	0011      	movs	r1, r2
 8003916:	0018      	movs	r0, r3
 8003918:	f000 fc98 	bl	800424c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b00a      	add	sp, #40	; 0x28
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40007400 	.word	0x40007400
 8003928:	40021000 	.word	0x40021000

0800392c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a12      	ldr	r2, [pc, #72]	; (8003984 <HAL_TIM_Base_MspInit+0x58>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d11d      	bne.n	800397a <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800393e:	4b12      	ldr	r3, [pc, #72]	; (8003988 <HAL_TIM_Base_MspInit+0x5c>)
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_TIM_Base_MspInit+0x5c>)
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	0109      	lsls	r1, r1, #4
 8003948:	430a      	orrs	r2, r1
 800394a:	619a      	str	r2, [r3, #24]
 800394c:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <HAL_TIM_Base_MspInit+0x5c>)
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	4013      	ands	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800395a:	2200      	movs	r2, #0
 800395c:	2100      	movs	r1, #0
 800395e:	200d      	movs	r0, #13
 8003960:	f000 fb70 	bl	8004044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003964:	200d      	movs	r0, #13
 8003966:	f000 fb82 	bl	800406e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800396a:	2200      	movs	r2, #0
 800396c:	2100      	movs	r1, #0
 800396e:	200e      	movs	r0, #14
 8003970:	f000 fb68 	bl	8004044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003974:	200e      	movs	r0, #14
 8003976:	f000 fb7a 	bl	800406e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	46bd      	mov	sp, r7
 800397e:	b004      	add	sp, #16
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40021000 	.word	0x40021000

0800398c <TIM1_BRK_UP_TRG_COM_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
	{
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */


		if(mode==1)
 8003990:	4bc0      	ldr	r3, [pc, #768]	; (8003c94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x308>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d000      	beq.n	800399a <TIM1_BRK_UP_TRG_COM_IRQHandler+0xe>
 8003998:	e160      	b.n	8003c5c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2d0>
		{
				   t=t+0.001f;
 800399a:	4bbf      	ldr	r3, [pc, #764]	; (8003c98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	49bf      	ldr	r1, [pc, #764]	; (8003c9c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x310>)
 80039a0:	1c18      	adds	r0, r3, #0
 80039a2:	f7fc fceb 	bl	800037c <__aeabi_fadd>
 80039a6:	1c03      	adds	r3, r0, #0
 80039a8:	1c1a      	adds	r2, r3, #0
 80039aa:	4bbb      	ldr	r3, [pc, #748]	; (8003c98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30c>)
 80039ac:	601a      	str	r2, [r3, #0]
					if(t>20.0f)
 80039ae:	4bba      	ldr	r3, [pc, #744]	; (8003c98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	49bb      	ldr	r1, [pc, #748]	; (8003ca0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x314>)
 80039b4:	1c18      	adds	r0, r3, #0
 80039b6:	f7fc fc97 	bl	80002e8 <__aeabi_fcmpgt>
 80039ba:	1e03      	subs	r3, r0, #0
 80039bc:	d002      	beq.n	80039c4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x38>
						t=0.0001;
 80039be:	4bb6      	ldr	r3, [pc, #728]	; (8003c98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30c>)
 80039c0:	4ab8      	ldr	r2, [pc, #736]	; (8003ca4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x318>)
 80039c2:	601a      	str	r2, [r3, #0]
					mex_hat= sbt1*(1-((t-10)*(t-10))*0.25f)*exp((-(t-10)*(t-10))*0.1730f);
 80039c4:	4bb4      	ldr	r3, [pc, #720]	; (8003c98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	49b7      	ldr	r1, [pc, #732]	; (8003ca8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x31c>)
 80039ca:	1c18      	adds	r0, r3, #0
 80039cc:	f7fd f97a 	bl	8000cc4 <__aeabi_fsub>
 80039d0:	1c03      	adds	r3, r0, #0
 80039d2:	1c1c      	adds	r4, r3, #0
 80039d4:	4bb0      	ldr	r3, [pc, #704]	; (8003c98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	49b3      	ldr	r1, [pc, #716]	; (8003ca8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x31c>)
 80039da:	1c18      	adds	r0, r3, #0
 80039dc:	f7fd f972 	bl	8000cc4 <__aeabi_fsub>
 80039e0:	1c03      	adds	r3, r0, #0
 80039e2:	1c19      	adds	r1, r3, #0
 80039e4:	1c20      	adds	r0, r4, #0
 80039e6:	f7fd f83b 	bl	8000a60 <__aeabi_fmul>
 80039ea:	1c03      	adds	r3, r0, #0
 80039ec:	21fa      	movs	r1, #250	; 0xfa
 80039ee:	0589      	lsls	r1, r1, #22
 80039f0:	1c18      	adds	r0, r3, #0
 80039f2:	f7fd f835 	bl	8000a60 <__aeabi_fmul>
 80039f6:	1c03      	adds	r3, r0, #0
 80039f8:	1c19      	adds	r1, r3, #0
 80039fa:	20fe      	movs	r0, #254	; 0xfe
 80039fc:	0580      	lsls	r0, r0, #22
 80039fe:	f7fd f961 	bl	8000cc4 <__aeabi_fsub>
 8003a02:	1c03      	adds	r3, r0, #0
 8003a04:	1c1a      	adds	r2, r3, #0
 8003a06:	4ba9      	ldr	r3, [pc, #676]	; (8003cac <TIM1_BRK_UP_TRG_COM_IRQHandler+0x320>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	1c19      	adds	r1, r3, #0
 8003a0c:	1c10      	adds	r0, r2, #0
 8003a0e:	f7fd f827 	bl	8000a60 <__aeabi_fmul>
 8003a12:	1c03      	adds	r3, r0, #0
 8003a14:	1c18      	adds	r0, r3, #0
 8003a16:	f7ff f905 	bl	8002c24 <__aeabi_f2d>
 8003a1a:	0005      	movs	r5, r0
 8003a1c:	000e      	movs	r6, r1
 8003a1e:	4b9e      	ldr	r3, [pc, #632]	; (8003c98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	49a1      	ldr	r1, [pc, #644]	; (8003ca8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x31c>)
 8003a24:	1c18      	adds	r0, r3, #0
 8003a26:	f7fd f94d 	bl	8000cc4 <__aeabi_fsub>
 8003a2a:	1c03      	adds	r3, r0, #0
 8003a2c:	1c1a      	adds	r2, r3, #0
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	061b      	lsls	r3, r3, #24
 8003a32:	4053      	eors	r3, r2
 8003a34:	001c      	movs	r4, r3
 8003a36:	4b98      	ldr	r3, [pc, #608]	; (8003c98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	499b      	ldr	r1, [pc, #620]	; (8003ca8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x31c>)
 8003a3c:	1c18      	adds	r0, r3, #0
 8003a3e:	f7fd f941 	bl	8000cc4 <__aeabi_fsub>
 8003a42:	1c03      	adds	r3, r0, #0
 8003a44:	1c19      	adds	r1, r3, #0
 8003a46:	1c20      	adds	r0, r4, #0
 8003a48:	f7fd f80a 	bl	8000a60 <__aeabi_fmul>
 8003a4c:	1c03      	adds	r3, r0, #0
 8003a4e:	4998      	ldr	r1, [pc, #608]	; (8003cb0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x324>)
 8003a50:	1c18      	adds	r0, r3, #0
 8003a52:	f7fd f805 	bl	8000a60 <__aeabi_fmul>
 8003a56:	1c03      	adds	r3, r0, #0
 8003a58:	1c18      	adds	r0, r3, #0
 8003a5a:	f7ff f8e3 	bl	8002c24 <__aeabi_f2d>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	000c      	movs	r4, r1
 8003a62:	0018      	movs	r0, r3
 8003a64:	0021      	movs	r1, r4
 8003a66:	f001 ff2d 	bl	80058c4 <exp>
 8003a6a:	0003      	movs	r3, r0
 8003a6c:	000c      	movs	r4, r1
 8003a6e:	001a      	movs	r2, r3
 8003a70:	0023      	movs	r3, r4
 8003a72:	0028      	movs	r0, r5
 8003a74:	0031      	movs	r1, r6
 8003a76:	f7fe fa79 	bl	8001f6c <__aeabi_dmul>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	000c      	movs	r4, r1
 8003a7e:	0018      	movs	r0, r3
 8003a80:	0021      	movs	r1, r4
 8003a82:	f7ff f921 	bl	8002cc8 <__aeabi_d2f>
 8003a86:	1c02      	adds	r2, r0, #0
 8003a88:	4b8a      	ldr	r3, [pc, #552]	; (8003cb4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x328>)
 8003a8a:	601a      	str	r2, [r3, #0]
					wind=mex_hat*3*ro+v_mean;
 8003a8c:	4b89      	ldr	r3, [pc, #548]	; (8003cb4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x328>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4989      	ldr	r1, [pc, #548]	; (8003cb8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x32c>)
 8003a92:	1c18      	adds	r0, r3, #0
 8003a94:	f7fc ffe4 	bl	8000a60 <__aeabi_fmul>
 8003a98:	1c03      	adds	r3, r0, #0
 8003a9a:	1c1a      	adds	r2, r3, #0
 8003a9c:	4b87      	ldr	r3, [pc, #540]	; (8003cbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x330>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	1c19      	adds	r1, r3, #0
 8003aa2:	1c10      	adds	r0, r2, #0
 8003aa4:	f7fc ffdc 	bl	8000a60 <__aeabi_fmul>
 8003aa8:	1c03      	adds	r3, r0, #0
 8003aaa:	1c1a      	adds	r2, r3, #0
 8003aac:	4b84      	ldr	r3, [pc, #528]	; (8003cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x334>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	1c19      	adds	r1, r3, #0
 8003ab2:	1c10      	adds	r0, r2, #0
 8003ab4:	f7fc fc62 	bl	800037c <__aeabi_fadd>
 8003ab8:	1c03      	adds	r3, r0, #0
 8003aba:	1c1a      	adds	r2, r3, #0
 8003abc:	4b81      	ldr	r3, [pc, #516]	; (8003cc4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x338>)
 8003abe:	601a      	str	r2, [r3, #0]
					lambda=wm * R / wind;
 8003ac0:	4b81      	ldr	r3, [pc, #516]	; (8003cc8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x33c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f7fd fae1 	bl	800108c <__aeabi_i2f>
 8003aca:	1c02      	adds	r2, r0, #0
 8003acc:	4b7f      	ldr	r3, [pc, #508]	; (8003ccc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x340>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	1c19      	adds	r1, r3, #0
 8003ad2:	1c10      	adds	r0, r2, #0
 8003ad4:	f7fc ffc4 	bl	8000a60 <__aeabi_fmul>
 8003ad8:	1c03      	adds	r3, r0, #0
 8003ada:	1c1a      	adds	r2, r3, #0
 8003adc:	4b79      	ldr	r3, [pc, #484]	; (8003cc4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x338>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	1c19      	adds	r1, r3, #0
 8003ae2:	1c10      	adds	r0, r2, #0
 8003ae4:	f7fc fde4 	bl	80006b0 <__aeabi_fdiv>
 8003ae8:	1c03      	adds	r3, r0, #0
 8003aea:	1c1a      	adds	r2, r3, #0
 8003aec:	4b78      	ldr	r3, [pc, #480]	; (8003cd0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x344>)
 8003aee:	601a      	str	r2, [r3, #0]
					lambda_i= lambda / (1 + 0.002f * lambda);
 8003af0:	4b77      	ldr	r3, [pc, #476]	; (8003cd0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x344>)
 8003af2:	681c      	ldr	r4, [r3, #0]
 8003af4:	4b76      	ldr	r3, [pc, #472]	; (8003cd0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x344>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4976      	ldr	r1, [pc, #472]	; (8003cd4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x348>)
 8003afa:	1c18      	adds	r0, r3, #0
 8003afc:	f7fc ffb0 	bl	8000a60 <__aeabi_fmul>
 8003b00:	1c03      	adds	r3, r0, #0
 8003b02:	21fe      	movs	r1, #254	; 0xfe
 8003b04:	0589      	lsls	r1, r1, #22
 8003b06:	1c18      	adds	r0, r3, #0
 8003b08:	f7fc fc38 	bl	800037c <__aeabi_fadd>
 8003b0c:	1c03      	adds	r3, r0, #0
 8003b0e:	1c19      	adds	r1, r3, #0
 8003b10:	1c20      	adds	r0, r4, #0
 8003b12:	f7fc fdcd 	bl	80006b0 <__aeabi_fdiv>
 8003b16:	1c03      	adds	r3, r0, #0
 8003b18:	1c1a      	adds	r2, r3, #0
 8003b1a:	4b6f      	ldr	r3, [pc, #444]	; (8003cd8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x34c>)
 8003b1c:	601a      	str	r2, [r3, #0]
					Cp= c1*((c2 / lambda_i)-c6) * exp(-c7 / lambda_i);
 8003b1e:	4b6f      	ldr	r3, [pc, #444]	; (8003cdc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x350>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	0018      	movs	r0, r3
 8003b24:	f7fd fab2 	bl	800108c <__aeabi_i2f>
 8003b28:	1c02      	adds	r2, r0, #0
 8003b2a:	4b6b      	ldr	r3, [pc, #428]	; (8003cd8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x34c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	1c19      	adds	r1, r3, #0
 8003b30:	1c10      	adds	r0, r2, #0
 8003b32:	f7fc fdbd 	bl	80006b0 <__aeabi_fdiv>
 8003b36:	1c03      	adds	r3, r0, #0
 8003b38:	1c1a      	adds	r2, r3, #0
 8003b3a:	4b69      	ldr	r3, [pc, #420]	; (8003ce0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x354>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	1c19      	adds	r1, r3, #0
 8003b40:	1c10      	adds	r0, r2, #0
 8003b42:	f7fd f8bf 	bl	8000cc4 <__aeabi_fsub>
 8003b46:	1c03      	adds	r3, r0, #0
 8003b48:	1c1a      	adds	r2, r3, #0
 8003b4a:	4b66      	ldr	r3, [pc, #408]	; (8003ce4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x358>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	1c19      	adds	r1, r3, #0
 8003b50:	1c10      	adds	r0, r2, #0
 8003b52:	f7fc ff85 	bl	8000a60 <__aeabi_fmul>
 8003b56:	1c03      	adds	r3, r0, #0
 8003b58:	1c18      	adds	r0, r3, #0
 8003b5a:	f7ff f863 	bl	8002c24 <__aeabi_f2d>
 8003b5e:	0004      	movs	r4, r0
 8003b60:	000d      	movs	r5, r1
 8003b62:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x35c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2280      	movs	r2, #128	; 0x80
 8003b68:	0612      	lsls	r2, r2, #24
 8003b6a:	405a      	eors	r2, r3
 8003b6c:	4b5a      	ldr	r3, [pc, #360]	; (8003cd8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x34c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	1c19      	adds	r1, r3, #0
 8003b72:	1c10      	adds	r0, r2, #0
 8003b74:	f7fc fd9c 	bl	80006b0 <__aeabi_fdiv>
 8003b78:	1c03      	adds	r3, r0, #0
 8003b7a:	1c18      	adds	r0, r3, #0
 8003b7c:	f7ff f852 	bl	8002c24 <__aeabi_f2d>
 8003b80:	0002      	movs	r2, r0
 8003b82:	000b      	movs	r3, r1
 8003b84:	0010      	movs	r0, r2
 8003b86:	0019      	movs	r1, r3
 8003b88:	f001 fe9c 	bl	80058c4 <exp>
 8003b8c:	0002      	movs	r2, r0
 8003b8e:	000b      	movs	r3, r1
 8003b90:	0020      	movs	r0, r4
 8003b92:	0029      	movs	r1, r5
 8003b94:	f7fe f9ea 	bl	8001f6c <__aeabi_dmul>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	000c      	movs	r4, r1
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	0021      	movs	r1, r4
 8003ba0:	f7ff f892 	bl	8002cc8 <__aeabi_d2f>
 8003ba4:	1c02      	adds	r2, r0, #0
 8003ba6:	4b51      	ldr	r3, [pc, #324]	; (8003cec <TIM1_BRK_UP_TRG_COM_IRQHandler+0x360>)
 8003ba8:	601a      	str	r2, [r3, #0]
					P=34.6361f*Cp*wind*wind*wind;
 8003baa:	4b50      	ldr	r3, [pc, #320]	; (8003cec <TIM1_BRK_UP_TRG_COM_IRQHandler+0x360>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4950      	ldr	r1, [pc, #320]	; (8003cf0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x364>)
 8003bb0:	1c18      	adds	r0, r3, #0
 8003bb2:	f7fc ff55 	bl	8000a60 <__aeabi_fmul>
 8003bb6:	1c03      	adds	r3, r0, #0
 8003bb8:	1c1a      	adds	r2, r3, #0
 8003bba:	4b42      	ldr	r3, [pc, #264]	; (8003cc4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x338>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	1c19      	adds	r1, r3, #0
 8003bc0:	1c10      	adds	r0, r2, #0
 8003bc2:	f7fc ff4d 	bl	8000a60 <__aeabi_fmul>
 8003bc6:	1c03      	adds	r3, r0, #0
 8003bc8:	1c1a      	adds	r2, r3, #0
 8003bca:	4b3e      	ldr	r3, [pc, #248]	; (8003cc4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x338>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	1c19      	adds	r1, r3, #0
 8003bd0:	1c10      	adds	r0, r2, #0
 8003bd2:	f7fc ff45 	bl	8000a60 <__aeabi_fmul>
 8003bd6:	1c03      	adds	r3, r0, #0
 8003bd8:	1c1a      	adds	r2, r3, #0
 8003bda:	4b3a      	ldr	r3, [pc, #232]	; (8003cc4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x338>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	1c19      	adds	r1, r3, #0
 8003be0:	1c10      	adds	r0, r2, #0
 8003be2:	f7fc ff3d 	bl	8000a60 <__aeabi_fmul>
 8003be6:	1c03      	adds	r3, r0, #0
 8003be8:	1c1a      	adds	r2, r3, #0
 8003bea:	4b42      	ldr	r3, [pc, #264]	; (8003cf4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x368>)
 8003bec:	601a      	str	r2, [r3, #0]
					T= P / wm ;
 8003bee:	4b41      	ldr	r3, [pc, #260]	; (8003cf4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x368>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x340>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	1c19      	adds	r1, r3, #0
 8003bf8:	1c10      	adds	r0, r2, #0
 8003bfa:	f7fc fd59 	bl	80006b0 <__aeabi_fdiv>
 8003bfe:	1c03      	adds	r3, r0, #0
 8003c00:	1c1a      	adds	r2, r3, #0
 8003c02:	4b3d      	ldr	r3, [pc, #244]	; (8003cf8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x36c>)
 8003c04:	601a      	str	r2, [r3, #0]
					val =T/160;
 8003c06:	4b3c      	ldr	r3, [pc, #240]	; (8003cf8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x36c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	493c      	ldr	r1, [pc, #240]	; (8003cfc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x370>)
 8003c0c:	1c18      	adds	r0, r3, #0
 8003c0e:	f7fc fd4f 	bl	80006b0 <__aeabi_fdiv>
 8003c12:	1c03      	adds	r3, r0, #0
 8003c14:	1c1a      	adds	r2, r3, #0
 8003c16:	4b3a      	ldr	r3, [pc, #232]	; (8003d00 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x374>)
 8003c18:	601a      	str	r2, [r3, #0]
					value = val*4096/3.0f*0.5f;
 8003c1a:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x374>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	218b      	movs	r1, #139	; 0x8b
 8003c20:	05c9      	lsls	r1, r1, #23
 8003c22:	1c18      	adds	r0, r3, #0
 8003c24:	f7fc ff1c 	bl	8000a60 <__aeabi_fmul>
 8003c28:	1c03      	adds	r3, r0, #0
 8003c2a:	4923      	ldr	r1, [pc, #140]	; (8003cb8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x32c>)
 8003c2c:	1c18      	adds	r0, r3, #0
 8003c2e:	f7fc fd3f 	bl	80006b0 <__aeabi_fdiv>
 8003c32:	1c03      	adds	r3, r0, #0
 8003c34:	21fc      	movs	r1, #252	; 0xfc
 8003c36:	0589      	lsls	r1, r1, #22
 8003c38:	1c18      	adds	r0, r3, #0
 8003c3a:	f7fc ff11 	bl	8000a60 <__aeabi_fmul>
 8003c3e:	1c03      	adds	r3, r0, #0
 8003c40:	1c18      	adds	r0, r3, #0
 8003c42:	f7fc fb65 	bl	8000310 <__aeabi_f2uiz>
 8003c46:	0003      	movs	r3, r0
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	4b2e      	ldr	r3, [pc, #184]	; (8003d04 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x378>)
 8003c4c:	801a      	strh	r2, [r3, #0]
					HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,value);
 8003c4e:	4b2d      	ldr	r3, [pc, #180]	; (8003d04 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x378>)
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	482d      	ldr	r0, [pc, #180]	; (8003d08 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x37c>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	2100      	movs	r1, #0
 8003c58:	f000 fa49 	bl	80040ee <HAL_DAC_SetValue>

		}
		if(t>19)
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	492a      	ldr	r1, [pc, #168]	; (8003d0c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x380>)
 8003c62:	1c18      	adds	r0, r3, #0
 8003c64:	f7fc fb40 	bl	80002e8 <__aeabi_fcmpgt>
 8003c68:	1e03      	subs	r3, r0, #0
 8003c6a:	d00b      	beq.n	8003c84 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2f8>
		{
			t=0;
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30c>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
			mode=0;
 8003c72:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x308>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,0);
 8003c78:	4823      	ldr	r0, [pc, #140]	; (8003d08 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x37c>)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2100      	movs	r1, #0
 8003c80:	f000 fa35 	bl	80040ee <HAL_DAC_SetValue>




	  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
	  HAL_TIM_IRQHandler(&htim1);
 8003c84:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x384>)
 8003c86:	0018      	movs	r0, r3
 8003c88:	f001 fa66 	bl	8005158 <HAL_TIM_IRQHandler>
	  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

	  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
	}
 8003c8c:	46c0      	nop			; (mov r8, r8)
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	200000dc 	.word	0x200000dc
 8003c98:	2000013c 	.word	0x2000013c
 8003c9c:	3a83126f 	.word	0x3a83126f
 8003ca0:	41a00000 	.word	0x41a00000
 8003ca4:	38d1b717 	.word	0x38d1b717
 8003ca8:	41200000 	.word	0x41200000
 8003cac:	20000020 	.word	0x20000020
 8003cb0:	3e3126e9 	.word	0x3e3126e9
 8003cb4:	20000144 	.word	0x20000144
 8003cb8:	40400000 	.word	0x40400000
 8003cbc:	20000004 	.word	0x20000004
 8003cc0:	20000008 	.word	0x20000008
 8003cc4:	20000150 	.word	0x20000150
 8003cc8:	2000001c 	.word	0x2000001c
 8003ccc:	20000024 	.word	0x20000024
 8003cd0:	20000148 	.word	0x20000148
 8003cd4:	3b03126f 	.word	0x3b03126f
 8003cd8:	2000014c 	.word	0x2000014c
 8003cdc:	20000010 	.word	0x20000010
 8003ce0:	20000014 	.word	0x20000014
 8003ce4:	2000000c 	.word	0x2000000c
 8003ce8:	20000018 	.word	0x20000018
 8003cec:	2000015c 	.word	0x2000015c
 8003cf0:	420a8b5e 	.word	0x420a8b5e
 8003cf4:	20000160 	.word	0x20000160
 8003cf8:	20000140 	.word	0x20000140
 8003cfc:	43200000 	.word	0x43200000
 8003d00:	200000d8 	.word	0x200000d8
 8003d04:	20000164 	.word	0x20000164
 8003d08:	200000e0 	.word	0x200000e0
 8003d0c:	41980000 	.word	0x41980000
 8003d10:	200000f4 	.word	0x200000f4

08003d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d18:	e7fe      	b.n	8003d18 <NMI_Handler+0x4>

08003d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d1e:	e7fe      	b.n	8003d1e <HardFault_Handler+0x4>

08003d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d38:	f000 f89a 	bl	8003e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003d46:	2001      	movs	r0, #1
 8003d48:	f000 fc16 	bl	8004578 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003d4c:	2002      	movs	r0, #2
 8003d4e:	f000 fc13 	bl	8004578 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003d5c:	2004      	movs	r0, #4
 8003d5e:	f000 fc0b 	bl	8004578 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d6c:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <TIM1_CC_IRQHandler+0x14>)
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f001 f9f2 	bl	8005158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	200000f4 	.word	0x200000f4

08003d80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d8c:	480d      	ldr	r0, [pc, #52]	; (8003dc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d90:	480d      	ldr	r0, [pc, #52]	; (8003dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d92:	490e      	ldr	r1, [pc, #56]	; (8003dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d94:	4a0e      	ldr	r2, [pc, #56]	; (8003dd0 <LoopForever+0xe>)
  movs r3, #0
 8003d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d98:	e002      	b.n	8003da0 <LoopCopyDataInit>

08003d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d9e:	3304      	adds	r3, #4

08003da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003da4:	d3f9      	bcc.n	8003d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003da6:	4a0b      	ldr	r2, [pc, #44]	; (8003dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003da8:	4c0b      	ldr	r4, [pc, #44]	; (8003dd8 <LoopForever+0x16>)
  movs r3, #0
 8003daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dac:	e001      	b.n	8003db2 <LoopFillZerobss>

08003dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003db0:	3204      	adds	r2, #4

08003db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003db4:	d3fb      	bcc.n	8003dae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003db6:	f7ff ffe3 	bl	8003d80 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003dba:	f001 fd57 	bl	800586c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003dbe:	f7ff fb45 	bl	800344c <main>

08003dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8003dc2:	e7fe      	b.n	8003dc2 <LoopForever>
  ldr   r0, =_estack
 8003dc4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dcc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8003dd0:	08005e78 	.word	0x08005e78
  ldr r2, =_sbss
 8003dd4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8003dd8:	2000016c 	.word	0x2000016c

08003ddc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ddc:	e7fe      	b.n	8003ddc <ADC1_COMP_IRQHandler>
	...

08003de0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003de4:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <HAL_Init+0x24>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_Init+0x24>)
 8003dea:	2110      	movs	r1, #16
 8003dec:	430a      	orrs	r2, r1
 8003dee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003df0:	2000      	movs	r0, #0
 8003df2:	f000 f809 	bl	8003e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003df6:	f7ff fd2f 	bl	8003858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	40022000 	.word	0x40022000

08003e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e10:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <HAL_InitTick+0x5c>)
 8003e12:	681c      	ldr	r4, [r3, #0]
 8003e14:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <HAL_InitTick+0x60>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	0019      	movs	r1, r3
 8003e1a:	23fa      	movs	r3, #250	; 0xfa
 8003e1c:	0098      	lsls	r0, r3, #2
 8003e1e:	f7fc f973 	bl	8000108 <__udivsi3>
 8003e22:	0003      	movs	r3, r0
 8003e24:	0019      	movs	r1, r3
 8003e26:	0020      	movs	r0, r4
 8003e28:	f7fc f96e 	bl	8000108 <__udivsi3>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f000 f92d 	bl	800408e <HAL_SYSTICK_Config>
 8003e34:	1e03      	subs	r3, r0, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e00f      	b.n	8003e5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d80b      	bhi.n	8003e5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	2301      	movs	r3, #1
 8003e46:	425b      	negs	r3, r3
 8003e48:	2200      	movs	r2, #0
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f000 f8fa 	bl	8004044 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <HAL_InitTick+0x64>)
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e000      	b.n	8003e5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
}
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b003      	add	sp, #12
 8003e62:	bd90      	pop	{r4, r7, pc}
 8003e64:	20000028 	.word	0x20000028
 8003e68:	20000030 	.word	0x20000030
 8003e6c:	2000002c 	.word	0x2000002c

08003e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_IncTick+0x1c>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	001a      	movs	r2, r3
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <HAL_IncTick+0x20>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	18d2      	adds	r2, r2, r3
 8003e80:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <HAL_IncTick+0x20>)
 8003e82:	601a      	str	r2, [r3, #0]
}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	20000030 	.word	0x20000030
 8003e90:	20000168 	.word	0x20000168

08003e94 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  return uwTick;
 8003e98:	4b02      	ldr	r3, [pc, #8]	; (8003ea4 <HAL_GetTick+0x10>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	20000168 	.word	0x20000168

08003ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003eb0:	f7ff fff0 	bl	8003e94 <HAL_GetTick>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	d005      	beq.n	8003ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <HAL_Delay+0x40>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	189b      	adds	r3, r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	f7ff ffe0 	bl	8003e94 <HAL_GetTick>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d8f7      	bhi.n	8003ed0 <HAL_Delay+0x28>
  {
  }
}
 8003ee0:	46c0      	nop			; (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b004      	add	sp, #16
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000030 	.word	0x20000030

08003eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	1dfb      	adds	r3, r7, #7
 8003ef6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b7f      	cmp	r3, #127	; 0x7f
 8003efe:	d809      	bhi.n	8003f14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f00:	1dfb      	adds	r3, r7, #7
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	001a      	movs	r2, r3
 8003f06:	231f      	movs	r3, #31
 8003f08:	401a      	ands	r2, r3
 8003f0a:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <__NVIC_EnableIRQ+0x30>)
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4091      	lsls	r1, r2
 8003f10:	000a      	movs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
  }
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b002      	add	sp, #8
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	e000e100 	.word	0xe000e100

08003f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f20:	b590      	push	{r4, r7, lr}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	0002      	movs	r2, r0
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f2e:	1dfb      	adds	r3, r7, #7
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b7f      	cmp	r3, #127	; 0x7f
 8003f34:	d828      	bhi.n	8003f88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f36:	4a2f      	ldr	r2, [pc, #188]	; (8003ff4 <__NVIC_SetPriority+0xd4>)
 8003f38:	1dfb      	adds	r3, r7, #7
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	b25b      	sxtb	r3, r3
 8003f3e:	089b      	lsrs	r3, r3, #2
 8003f40:	33c0      	adds	r3, #192	; 0xc0
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	589b      	ldr	r3, [r3, r2]
 8003f46:	1dfa      	adds	r2, r7, #7
 8003f48:	7812      	ldrb	r2, [r2, #0]
 8003f4a:	0011      	movs	r1, r2
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	400a      	ands	r2, r1
 8003f50:	00d2      	lsls	r2, r2, #3
 8003f52:	21ff      	movs	r1, #255	; 0xff
 8003f54:	4091      	lsls	r1, r2
 8003f56:	000a      	movs	r2, r1
 8003f58:	43d2      	mvns	r2, r2
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	019b      	lsls	r3, r3, #6
 8003f62:	22ff      	movs	r2, #255	; 0xff
 8003f64:	401a      	ands	r2, r3
 8003f66:	1dfb      	adds	r3, r7, #7
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	4003      	ands	r3, r0
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f74:	481f      	ldr	r0, [pc, #124]	; (8003ff4 <__NVIC_SetPriority+0xd4>)
 8003f76:	1dfb      	adds	r3, r7, #7
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	b25b      	sxtb	r3, r3
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	33c0      	adds	r3, #192	; 0xc0
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f86:	e031      	b.n	8003fec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f88:	4a1b      	ldr	r2, [pc, #108]	; (8003ff8 <__NVIC_SetPriority+0xd8>)
 8003f8a:	1dfb      	adds	r3, r7, #7
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	0019      	movs	r1, r3
 8003f90:	230f      	movs	r3, #15
 8003f92:	400b      	ands	r3, r1
 8003f94:	3b08      	subs	r3, #8
 8003f96:	089b      	lsrs	r3, r3, #2
 8003f98:	3306      	adds	r3, #6
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	18d3      	adds	r3, r2, r3
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	1dfa      	adds	r2, r7, #7
 8003fa4:	7812      	ldrb	r2, [r2, #0]
 8003fa6:	0011      	movs	r1, r2
 8003fa8:	2203      	movs	r2, #3
 8003faa:	400a      	ands	r2, r1
 8003fac:	00d2      	lsls	r2, r2, #3
 8003fae:	21ff      	movs	r1, #255	; 0xff
 8003fb0:	4091      	lsls	r1, r2
 8003fb2:	000a      	movs	r2, r1
 8003fb4:	43d2      	mvns	r2, r2
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	019b      	lsls	r3, r3, #6
 8003fbe:	22ff      	movs	r2, #255	; 0xff
 8003fc0:	401a      	ands	r2, r3
 8003fc2:	1dfb      	adds	r3, r7, #7
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	2303      	movs	r3, #3
 8003fca:	4003      	ands	r3, r0
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fd0:	4809      	ldr	r0, [pc, #36]	; (8003ff8 <__NVIC_SetPriority+0xd8>)
 8003fd2:	1dfb      	adds	r3, r7, #7
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	001c      	movs	r4, r3
 8003fd8:	230f      	movs	r3, #15
 8003fda:	4023      	ands	r3, r4
 8003fdc:	3b08      	subs	r3, #8
 8003fde:	089b      	lsrs	r3, r3, #2
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	3306      	adds	r3, #6
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	18c3      	adds	r3, r0, r3
 8003fe8:	3304      	adds	r3, #4
 8003fea:	601a      	str	r2, [r3, #0]
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b003      	add	sp, #12
 8003ff2:	bd90      	pop	{r4, r7, pc}
 8003ff4:	e000e100 	.word	0xe000e100
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	4a0c      	ldr	r2, [pc, #48]	; (800403c <SysTick_Config+0x40>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d901      	bls.n	8004012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800400e:	2301      	movs	r3, #1
 8004010:	e010      	b.n	8004034 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <SysTick_Config+0x44>)
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	3a01      	subs	r2, #1
 8004018:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800401a:	2301      	movs	r3, #1
 800401c:	425b      	negs	r3, r3
 800401e:	2103      	movs	r1, #3
 8004020:	0018      	movs	r0, r3
 8004022:	f7ff ff7d 	bl	8003f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <SysTick_Config+0x44>)
 8004028:	2200      	movs	r2, #0
 800402a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <SysTick_Config+0x44>)
 800402e:	2207      	movs	r2, #7
 8004030:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004032:	2300      	movs	r3, #0
}
 8004034:	0018      	movs	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	b002      	add	sp, #8
 800403a:	bd80      	pop	{r7, pc}
 800403c:	00ffffff 	.word	0x00ffffff
 8004040:	e000e010 	.word	0xe000e010

08004044 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	210f      	movs	r1, #15
 8004050:	187b      	adds	r3, r7, r1
 8004052:	1c02      	adds	r2, r0, #0
 8004054:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	187b      	adds	r3, r7, r1
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	b25b      	sxtb	r3, r3
 800405e:	0011      	movs	r1, r2
 8004060:	0018      	movs	r0, r3
 8004062:	f7ff ff5d 	bl	8003f20 <__NVIC_SetPriority>
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	0002      	movs	r2, r0
 8004076:	1dfb      	adds	r3, r7, #7
 8004078:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800407a:	1dfb      	adds	r3, r7, #7
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	b25b      	sxtb	r3, r3
 8004080:	0018      	movs	r0, r3
 8004082:	f7ff ff33 	bl	8003eec <__NVIC_EnableIRQ>
}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	46bd      	mov	sp, r7
 800408a:	b002      	add	sp, #8
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0018      	movs	r0, r3
 800409a:	f7ff ffaf 	bl	8003ffc <SysTick_Config>
 800409e:	0003      	movs	r3, r0
}
 80040a0:	0018      	movs	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b002      	add	sp, #8
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e015      	b.n	80040e6 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	791b      	ldrb	r3, [r3, #4]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7ff fbe7 	bl	80038a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2202      	movs	r2, #2
 80040d6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	0018      	movs	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b002      	add	sp, #8
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d105      	bne.n	8004118 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	18d3      	adds	r3, r2, r3
 8004112:	3308      	adds	r3, #8
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	e004      	b.n	8004122 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	18d3      	adds	r3, r2, r3
 800411e:	3314      	adds	r3, #20
 8004120:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	0018      	movs	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	b006      	add	sp, #24
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	795b      	ldrb	r3, [r3, #5]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_DAC_ConfigChannel+0x20>
 8004150:	2302      	movs	r3, #2
 8004152:	e029      	b.n	80041a8 <HAL_DAC_ConfigChannel+0x74>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2202      	movs	r2, #2
 800415e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8004168:	4a11      	ldr	r2, [pc, #68]	; (80041b0 <HAL_DAC_ConfigChannel+0x7c>)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	409a      	lsls	r2, r3
 800416e:	0013      	movs	r3, r2
 8004170:	43da      	mvns	r2, r3
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	4013      	ands	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	409a      	lsls	r2, r3
 800418a:	0013      	movs	r3, r2
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	0018      	movs	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b006      	add	sp, #24
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	00000ffe 	.word	0x00000ffe

080041b4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	795b      	ldrb	r3, [r3, #5]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_DAC_Start+0x16>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e03b      	b.n	8004242 <HAL_DAC_Start+0x8e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6819      	ldr	r1, [r3, #0]
 80041dc:	2201      	movs	r2, #1
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	409a      	lsls	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10f      	bne.n	8004210 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	223c      	movs	r2, #60	; 0x3c
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b3c      	cmp	r3, #60	; 0x3c
 80041fc:	d11a      	bne.n	8004234 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2101      	movs	r1, #1
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	e011      	b.n	8004234 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	23f0      	movs	r3, #240	; 0xf0
 8004218:	039b      	lsls	r3, r3, #14
 800421a:	401a      	ands	r2, r3
 800421c:	23f0      	movs	r3, #240	; 0xf0
 800421e:	039b      	lsls	r3, r3, #14
 8004220:	429a      	cmp	r2, r3
 8004222:	d107      	bne.n	8004234 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2102      	movs	r1, #2
 8004230:	430a      	orrs	r2, r1
 8004232:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	0018      	movs	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	b002      	add	sp, #8
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800425a:	e155      	b.n	8004508 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2101      	movs	r1, #1
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4091      	lsls	r1, r2
 8004266:	000a      	movs	r2, r1
 8004268:	4013      	ands	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d100      	bne.n	8004274 <HAL_GPIO_Init+0x28>
 8004272:	e146      	b.n	8004502 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d00b      	beq.n	8004294 <HAL_GPIO_Init+0x48>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d007      	beq.n	8004294 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004288:	2b11      	cmp	r3, #17
 800428a:	d003      	beq.n	8004294 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b12      	cmp	r3, #18
 8004292:	d130      	bne.n	80042f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	2203      	movs	r2, #3
 80042a0:	409a      	lsls	r2, r3
 80042a2:	0013      	movs	r3, r2
 80042a4:	43da      	mvns	r2, r3
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4013      	ands	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	409a      	lsls	r2, r3
 80042b6:	0013      	movs	r3, r2
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042ca:	2201      	movs	r2, #1
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	409a      	lsls	r2, r3
 80042d0:	0013      	movs	r3, r2
 80042d2:	43da      	mvns	r2, r3
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4013      	ands	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	091b      	lsrs	r3, r3, #4
 80042e0:	2201      	movs	r2, #1
 80042e2:	401a      	ands	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	409a      	lsls	r2, r3
 80042e8:	0013      	movs	r3, r2
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	2203      	movs	r2, #3
 8004302:	409a      	lsls	r2, r3
 8004304:	0013      	movs	r3, r2
 8004306:	43da      	mvns	r2, r3
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4013      	ands	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	409a      	lsls	r2, r3
 8004318:	0013      	movs	r3, r2
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0xea>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b12      	cmp	r3, #18
 8004334:	d123      	bne.n	800437e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	08da      	lsrs	r2, r3, #3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3208      	adds	r2, #8
 800433e:	0092      	lsls	r2, r2, #2
 8004340:	58d3      	ldr	r3, [r2, r3]
 8004342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2207      	movs	r2, #7
 8004348:	4013      	ands	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	220f      	movs	r2, #15
 800434e:	409a      	lsls	r2, r3
 8004350:	0013      	movs	r3, r2
 8004352:	43da      	mvns	r2, r3
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4013      	ands	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2107      	movs	r1, #7
 8004362:	400b      	ands	r3, r1
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	409a      	lsls	r2, r3
 8004368:	0013      	movs	r3, r2
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	08da      	lsrs	r2, r3, #3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3208      	adds	r2, #8
 8004378:	0092      	lsls	r2, r2, #2
 800437a:	6939      	ldr	r1, [r7, #16]
 800437c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	2203      	movs	r2, #3
 800438a:	409a      	lsls	r2, r3
 800438c:	0013      	movs	r3, r2
 800438e:	43da      	mvns	r2, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4013      	ands	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2203      	movs	r2, #3
 800439c:	401a      	ands	r2, r3
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	409a      	lsls	r2, r3
 80043a4:	0013      	movs	r3, r2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	055b      	lsls	r3, r3, #21
 80043ba:	4013      	ands	r3, r2
 80043bc:	d100      	bne.n	80043c0 <HAL_GPIO_Init+0x174>
 80043be:	e0a0      	b.n	8004502 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c0:	4b57      	ldr	r3, [pc, #348]	; (8004520 <HAL_GPIO_Init+0x2d4>)
 80043c2:	699a      	ldr	r2, [r3, #24]
 80043c4:	4b56      	ldr	r3, [pc, #344]	; (8004520 <HAL_GPIO_Init+0x2d4>)
 80043c6:	2101      	movs	r1, #1
 80043c8:	430a      	orrs	r2, r1
 80043ca:	619a      	str	r2, [r3, #24]
 80043cc:	4b54      	ldr	r3, [pc, #336]	; (8004520 <HAL_GPIO_Init+0x2d4>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2201      	movs	r2, #1
 80043d2:	4013      	ands	r3, r2
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043d8:	4a52      	ldr	r2, [pc, #328]	; (8004524 <HAL_GPIO_Init+0x2d8>)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	3302      	adds	r3, #2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	589b      	ldr	r3, [r3, r2]
 80043e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2203      	movs	r2, #3
 80043ea:	4013      	ands	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	220f      	movs	r2, #15
 80043f0:	409a      	lsls	r2, r3
 80043f2:	0013      	movs	r3, r2
 80043f4:	43da      	mvns	r2, r3
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4013      	ands	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	2390      	movs	r3, #144	; 0x90
 8004400:	05db      	lsls	r3, r3, #23
 8004402:	429a      	cmp	r2, r3
 8004404:	d019      	beq.n	800443a <HAL_GPIO_Init+0x1ee>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a47      	ldr	r2, [pc, #284]	; (8004528 <HAL_GPIO_Init+0x2dc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_GPIO_Init+0x1ea>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a46      	ldr	r2, [pc, #280]	; (800452c <HAL_GPIO_Init+0x2e0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00d      	beq.n	8004432 <HAL_GPIO_Init+0x1e6>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a45      	ldr	r2, [pc, #276]	; (8004530 <HAL_GPIO_Init+0x2e4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d007      	beq.n	800442e <HAL_GPIO_Init+0x1e2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a44      	ldr	r2, [pc, #272]	; (8004534 <HAL_GPIO_Init+0x2e8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <HAL_GPIO_Init+0x1de>
 8004426:	2304      	movs	r3, #4
 8004428:	e008      	b.n	800443c <HAL_GPIO_Init+0x1f0>
 800442a:	2305      	movs	r3, #5
 800442c:	e006      	b.n	800443c <HAL_GPIO_Init+0x1f0>
 800442e:	2303      	movs	r3, #3
 8004430:	e004      	b.n	800443c <HAL_GPIO_Init+0x1f0>
 8004432:	2302      	movs	r3, #2
 8004434:	e002      	b.n	800443c <HAL_GPIO_Init+0x1f0>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_GPIO_Init+0x1f0>
 800443a:	2300      	movs	r3, #0
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	2103      	movs	r1, #3
 8004440:	400a      	ands	r2, r1
 8004442:	0092      	lsls	r2, r2, #2
 8004444:	4093      	lsls	r3, r2
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800444c:	4935      	ldr	r1, [pc, #212]	; (8004524 <HAL_GPIO_Init+0x2d8>)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	089b      	lsrs	r3, r3, #2
 8004452:	3302      	adds	r3, #2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800445a:	4b37      	ldr	r3, [pc, #220]	; (8004538 <HAL_GPIO_Init+0x2ec>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	43da      	mvns	r2, r3
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4013      	ands	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	025b      	lsls	r3, r3, #9
 8004472:	4013      	ands	r3, r2
 8004474:	d003      	beq.n	800447e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800447e:	4b2e      	ldr	r3, [pc, #184]	; (8004538 <HAL_GPIO_Init+0x2ec>)
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004484:	4b2c      	ldr	r3, [pc, #176]	; (8004538 <HAL_GPIO_Init+0x2ec>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	43da      	mvns	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4013      	ands	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	2380      	movs	r3, #128	; 0x80
 800449a:	029b      	lsls	r3, r3, #10
 800449c:	4013      	ands	r3, r2
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80044a8:	4b23      	ldr	r3, [pc, #140]	; (8004538 <HAL_GPIO_Init+0x2ec>)
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044ae:	4b22      	ldr	r3, [pc, #136]	; (8004538 <HAL_GPIO_Init+0x2ec>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	43da      	mvns	r2, r3
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4013      	ands	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	2380      	movs	r3, #128	; 0x80
 80044c4:	035b      	lsls	r3, r3, #13
 80044c6:	4013      	ands	r3, r2
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80044d2:	4b19      	ldr	r3, [pc, #100]	; (8004538 <HAL_GPIO_Init+0x2ec>)
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80044d8:	4b17      	ldr	r3, [pc, #92]	; (8004538 <HAL_GPIO_Init+0x2ec>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	43da      	mvns	r2, r3
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	039b      	lsls	r3, r3, #14
 80044f0:	4013      	ands	r3, r2
 80044f2:	d003      	beq.n	80044fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80044fc:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <HAL_GPIO_Init+0x2ec>)
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	3301      	adds	r3, #1
 8004506:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	40da      	lsrs	r2, r3
 8004510:	1e13      	subs	r3, r2, #0
 8004512:	d000      	beq.n	8004516 <HAL_GPIO_Init+0x2ca>
 8004514:	e6a2      	b.n	800425c <HAL_GPIO_Init+0x10>
  } 
}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	46bd      	mov	sp, r7
 800451a:	b006      	add	sp, #24
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	40021000 	.word	0x40021000
 8004524:	40010000 	.word	0x40010000
 8004528:	48000400 	.word	0x48000400
 800452c:	48000800 	.word	0x48000800
 8004530:	48000c00 	.word	0x48000c00
 8004534:	48001000 	.word	0x48001000
 8004538:	40010400 	.word	0x40010400

0800453c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	0008      	movs	r0, r1
 8004546:	0011      	movs	r1, r2
 8004548:	1cbb      	adds	r3, r7, #2
 800454a:	1c02      	adds	r2, r0, #0
 800454c:	801a      	strh	r2, [r3, #0]
 800454e:	1c7b      	adds	r3, r7, #1
 8004550:	1c0a      	adds	r2, r1, #0
 8004552:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004554:	1c7b      	adds	r3, r7, #1
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800455c:	1cbb      	adds	r3, r7, #2
 800455e:	881a      	ldrh	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004564:	e003      	b.n	800456e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004566:	1cbb      	adds	r3, r7, #2
 8004568:	881a      	ldrh	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	46bd      	mov	sp, r7
 8004572:	b002      	add	sp, #8
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	0002      	movs	r2, r0
 8004580:	1dbb      	adds	r3, r7, #6
 8004582:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	1dba      	adds	r2, r7, #6
 800458a:	8812      	ldrh	r2, [r2, #0]
 800458c:	4013      	ands	r3, r2
 800458e:	d008      	beq.n	80045a2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004592:	1dba      	adds	r2, r7, #6
 8004594:	8812      	ldrh	r2, [r2, #0]
 8004596:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004598:	1dbb      	adds	r3, r7, #6
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	0018      	movs	r0, r3
 800459e:	f000 f807 	bl	80045b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b002      	add	sp, #8
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	40010400 	.word	0x40010400

080045b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	0002      	movs	r2, r0
 80045b8:	1dbb      	adds	r3, r7, #6
 80045ba:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b002      	add	sp, #8
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f000 fb76 	bl	8004cc4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2201      	movs	r2, #1
 80045de:	4013      	ands	r3, r2
 80045e0:	d100      	bne.n	80045e4 <HAL_RCC_OscConfig+0x20>
 80045e2:	e08e      	b.n	8004702 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80045e4:	4bc5      	ldr	r3, [pc, #788]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	220c      	movs	r2, #12
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d00e      	beq.n	800460e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045f0:	4bc2      	ldr	r3, [pc, #776]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	220c      	movs	r2, #12
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d117      	bne.n	800462c <HAL_RCC_OscConfig+0x68>
 80045fc:	4bbf      	ldr	r3, [pc, #764]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	23c0      	movs	r3, #192	; 0xc0
 8004602:	025b      	lsls	r3, r3, #9
 8004604:	401a      	ands	r2, r3
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	025b      	lsls	r3, r3, #9
 800460a:	429a      	cmp	r2, r3
 800460c:	d10e      	bne.n	800462c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460e:	4bbb      	ldr	r3, [pc, #748]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	2380      	movs	r3, #128	; 0x80
 8004614:	029b      	lsls	r3, r3, #10
 8004616:	4013      	ands	r3, r2
 8004618:	d100      	bne.n	800461c <HAL_RCC_OscConfig+0x58>
 800461a:	e071      	b.n	8004700 <HAL_RCC_OscConfig+0x13c>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d000      	beq.n	8004626 <HAL_RCC_OscConfig+0x62>
 8004624:	e06c      	b.n	8004700 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	f000 fb4c 	bl	8004cc4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d107      	bne.n	8004644 <HAL_RCC_OscConfig+0x80>
 8004634:	4bb1      	ldr	r3, [pc, #708]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4bb0      	ldr	r3, [pc, #704]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 800463a:	2180      	movs	r1, #128	; 0x80
 800463c:	0249      	lsls	r1, r1, #9
 800463e:	430a      	orrs	r2, r1
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	e02f      	b.n	80046a4 <HAL_RCC_OscConfig+0xe0>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10c      	bne.n	8004666 <HAL_RCC_OscConfig+0xa2>
 800464c:	4bab      	ldr	r3, [pc, #684]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4baa      	ldr	r3, [pc, #680]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004652:	49ab      	ldr	r1, [pc, #684]	; (8004900 <HAL_RCC_OscConfig+0x33c>)
 8004654:	400a      	ands	r2, r1
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	4ba8      	ldr	r3, [pc, #672]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4ba7      	ldr	r3, [pc, #668]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 800465e:	49a9      	ldr	r1, [pc, #676]	; (8004904 <HAL_RCC_OscConfig+0x340>)
 8004660:	400a      	ands	r2, r1
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	e01e      	b.n	80046a4 <HAL_RCC_OscConfig+0xe0>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b05      	cmp	r3, #5
 800466c:	d10e      	bne.n	800468c <HAL_RCC_OscConfig+0xc8>
 800466e:	4ba3      	ldr	r3, [pc, #652]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	4ba2      	ldr	r3, [pc, #648]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004674:	2180      	movs	r1, #128	; 0x80
 8004676:	02c9      	lsls	r1, r1, #11
 8004678:	430a      	orrs	r2, r1
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	4b9f      	ldr	r3, [pc, #636]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4b9e      	ldr	r3, [pc, #632]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004682:	2180      	movs	r1, #128	; 0x80
 8004684:	0249      	lsls	r1, r1, #9
 8004686:	430a      	orrs	r2, r1
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e00b      	b.n	80046a4 <HAL_RCC_OscConfig+0xe0>
 800468c:	4b9b      	ldr	r3, [pc, #620]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b9a      	ldr	r3, [pc, #616]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004692:	499b      	ldr	r1, [pc, #620]	; (8004900 <HAL_RCC_OscConfig+0x33c>)
 8004694:	400a      	ands	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	4b98      	ldr	r3, [pc, #608]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4b97      	ldr	r3, [pc, #604]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 800469e:	4999      	ldr	r1, [pc, #612]	; (8004904 <HAL_RCC_OscConfig+0x340>)
 80046a0:	400a      	ands	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d014      	beq.n	80046d6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7ff fbf2 	bl	8003e94 <HAL_GetTick>
 80046b0:	0003      	movs	r3, r0
 80046b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b6:	f7ff fbed 	bl	8003e94 <HAL_GetTick>
 80046ba:	0002      	movs	r2, r0
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b64      	cmp	r3, #100	; 0x64
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e2fd      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c8:	4b8c      	ldr	r3, [pc, #560]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	029b      	lsls	r3, r3, #10
 80046d0:	4013      	ands	r3, r2
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0xf2>
 80046d4:	e015      	b.n	8004702 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d6:	f7ff fbdd 	bl	8003e94 <HAL_GetTick>
 80046da:	0003      	movs	r3, r0
 80046dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046e0:	f7ff fbd8 	bl	8003e94 <HAL_GetTick>
 80046e4:	0002      	movs	r2, r0
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b64      	cmp	r3, #100	; 0x64
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e2e8      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f2:	4b82      	ldr	r3, [pc, #520]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	029b      	lsls	r3, r3, #10
 80046fa:	4013      	ands	r3, r2
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x11c>
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004700:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2202      	movs	r2, #2
 8004708:	4013      	ands	r3, r2
 800470a:	d100      	bne.n	800470e <HAL_RCC_OscConfig+0x14a>
 800470c:	e06c      	b.n	80047e8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800470e:	4b7b      	ldr	r3, [pc, #492]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	220c      	movs	r2, #12
 8004714:	4013      	ands	r3, r2
 8004716:	d00e      	beq.n	8004736 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004718:	4b78      	ldr	r3, [pc, #480]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	220c      	movs	r2, #12
 800471e:	4013      	ands	r3, r2
 8004720:	2b08      	cmp	r3, #8
 8004722:	d11f      	bne.n	8004764 <HAL_RCC_OscConfig+0x1a0>
 8004724:	4b75      	ldr	r3, [pc, #468]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	23c0      	movs	r3, #192	; 0xc0
 800472a:	025b      	lsls	r3, r3, #9
 800472c:	401a      	ands	r2, r3
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	429a      	cmp	r2, r3
 8004734:	d116      	bne.n	8004764 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004736:	4b71      	ldr	r3, [pc, #452]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2202      	movs	r2, #2
 800473c:	4013      	ands	r3, r2
 800473e:	d005      	beq.n	800474c <HAL_RCC_OscConfig+0x188>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d001      	beq.n	800474c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e2bb      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474c:	4b6b      	ldr	r3, [pc, #428]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	22f8      	movs	r2, #248	; 0xf8
 8004752:	4393      	bics	r3, r2
 8004754:	0019      	movs	r1, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	00da      	lsls	r2, r3, #3
 800475c:	4b67      	ldr	r3, [pc, #412]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 800475e:	430a      	orrs	r2, r1
 8004760:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004762:	e041      	b.n	80047e8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d024      	beq.n	80047b6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800476c:	4b63      	ldr	r3, [pc, #396]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b62      	ldr	r3, [pc, #392]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004772:	2101      	movs	r1, #1
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7ff fb8c 	bl	8003e94 <HAL_GetTick>
 800477c:	0003      	movs	r3, r0
 800477e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004782:	f7ff fb87 	bl	8003e94 <HAL_GetTick>
 8004786:	0002      	movs	r2, r0
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e297      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004794:	4b59      	ldr	r3, [pc, #356]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2202      	movs	r2, #2
 800479a:	4013      	ands	r3, r2
 800479c:	d0f1      	beq.n	8004782 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479e:	4b57      	ldr	r3, [pc, #348]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	22f8      	movs	r2, #248	; 0xf8
 80047a4:	4393      	bics	r3, r2
 80047a6:	0019      	movs	r1, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	00da      	lsls	r2, r3, #3
 80047ae:	4b53      	ldr	r3, [pc, #332]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 80047b0:	430a      	orrs	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e018      	b.n	80047e8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047b6:	4b51      	ldr	r3, [pc, #324]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4b50      	ldr	r3, [pc, #320]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 80047bc:	2101      	movs	r1, #1
 80047be:	438a      	bics	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c2:	f7ff fb67 	bl	8003e94 <HAL_GetTick>
 80047c6:	0003      	movs	r3, r0
 80047c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047cc:	f7ff fb62 	bl	8003e94 <HAL_GetTick>
 80047d0:	0002      	movs	r2, r0
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e272      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047de:	4b47      	ldr	r3, [pc, #284]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2202      	movs	r2, #2
 80047e4:	4013      	ands	r3, r2
 80047e6:	d1f1      	bne.n	80047cc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2208      	movs	r2, #8
 80047ee:	4013      	ands	r3, r2
 80047f0:	d036      	beq.n	8004860 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d019      	beq.n	800482e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047fa:	4b40      	ldr	r3, [pc, #256]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 80047fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047fe:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004800:	2101      	movs	r1, #1
 8004802:	430a      	orrs	r2, r1
 8004804:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004806:	f7ff fb45 	bl	8003e94 <HAL_GetTick>
 800480a:	0003      	movs	r3, r0
 800480c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004810:	f7ff fb40 	bl	8003e94 <HAL_GetTick>
 8004814:	0002      	movs	r2, r0
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e250      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004822:	4b36      	ldr	r3, [pc, #216]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	2202      	movs	r2, #2
 8004828:	4013      	ands	r3, r2
 800482a:	d0f1      	beq.n	8004810 <HAL_RCC_OscConfig+0x24c>
 800482c:	e018      	b.n	8004860 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800482e:	4b33      	ldr	r3, [pc, #204]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004832:	4b32      	ldr	r3, [pc, #200]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004834:	2101      	movs	r1, #1
 8004836:	438a      	bics	r2, r1
 8004838:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483a:	f7ff fb2b 	bl	8003e94 <HAL_GetTick>
 800483e:	0003      	movs	r3, r0
 8004840:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004844:	f7ff fb26 	bl	8003e94 <HAL_GetTick>
 8004848:	0002      	movs	r2, r0
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e236      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004856:	4b29      	ldr	r3, [pc, #164]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	2202      	movs	r2, #2
 800485c:	4013      	ands	r3, r2
 800485e:	d1f1      	bne.n	8004844 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2204      	movs	r2, #4
 8004866:	4013      	ands	r3, r2
 8004868:	d100      	bne.n	800486c <HAL_RCC_OscConfig+0x2a8>
 800486a:	e0b5      	b.n	80049d8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800486c:	231f      	movs	r3, #31
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004874:	4b21      	ldr	r3, [pc, #132]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	2380      	movs	r3, #128	; 0x80
 800487a:	055b      	lsls	r3, r3, #21
 800487c:	4013      	ands	r3, r2
 800487e:	d111      	bne.n	80048a4 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004880:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	4b1d      	ldr	r3, [pc, #116]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004886:	2180      	movs	r1, #128	; 0x80
 8004888:	0549      	lsls	r1, r1, #21
 800488a:	430a      	orrs	r2, r1
 800488c:	61da      	str	r2, [r3, #28]
 800488e:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 8004890:	69da      	ldr	r2, [r3, #28]
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	055b      	lsls	r3, r3, #21
 8004896:	4013      	ands	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800489c:	231f      	movs	r3, #31
 800489e:	18fb      	adds	r3, r7, r3
 80048a0:	2201      	movs	r2, #1
 80048a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a4:	4b18      	ldr	r3, [pc, #96]	; (8004908 <HAL_RCC_OscConfig+0x344>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	2380      	movs	r3, #128	; 0x80
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	4013      	ands	r3, r2
 80048ae:	d11a      	bne.n	80048e6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048b0:	4b15      	ldr	r3, [pc, #84]	; (8004908 <HAL_RCC_OscConfig+0x344>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b14      	ldr	r3, [pc, #80]	; (8004908 <HAL_RCC_OscConfig+0x344>)
 80048b6:	2180      	movs	r1, #128	; 0x80
 80048b8:	0049      	lsls	r1, r1, #1
 80048ba:	430a      	orrs	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048be:	f7ff fae9 	bl	8003e94 <HAL_GetTick>
 80048c2:	0003      	movs	r3, r0
 80048c4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c8:	f7ff fae4 	bl	8003e94 <HAL_GetTick>
 80048cc:	0002      	movs	r2, r0
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	; 0x64
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e1f4      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_RCC_OscConfig+0x344>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	4013      	ands	r3, r2
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d10e      	bne.n	800490c <HAL_RCC_OscConfig+0x348>
 80048ee:	4b03      	ldr	r3, [pc, #12]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 80048f0:	6a1a      	ldr	r2, [r3, #32]
 80048f2:	4b02      	ldr	r3, [pc, #8]	; (80048fc <HAL_RCC_OscConfig+0x338>)
 80048f4:	2101      	movs	r1, #1
 80048f6:	430a      	orrs	r2, r1
 80048f8:	621a      	str	r2, [r3, #32]
 80048fa:	e035      	b.n	8004968 <HAL_RCC_OscConfig+0x3a4>
 80048fc:	40021000 	.word	0x40021000
 8004900:	fffeffff 	.word	0xfffeffff
 8004904:	fffbffff 	.word	0xfffbffff
 8004908:	40007000 	.word	0x40007000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10c      	bne.n	800492e <HAL_RCC_OscConfig+0x36a>
 8004914:	4bca      	ldr	r3, [pc, #808]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004916:	6a1a      	ldr	r2, [r3, #32]
 8004918:	4bc9      	ldr	r3, [pc, #804]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 800491a:	2101      	movs	r1, #1
 800491c:	438a      	bics	r2, r1
 800491e:	621a      	str	r2, [r3, #32]
 8004920:	4bc7      	ldr	r3, [pc, #796]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004922:	6a1a      	ldr	r2, [r3, #32]
 8004924:	4bc6      	ldr	r3, [pc, #792]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004926:	2104      	movs	r1, #4
 8004928:	438a      	bics	r2, r1
 800492a:	621a      	str	r2, [r3, #32]
 800492c:	e01c      	b.n	8004968 <HAL_RCC_OscConfig+0x3a4>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b05      	cmp	r3, #5
 8004934:	d10c      	bne.n	8004950 <HAL_RCC_OscConfig+0x38c>
 8004936:	4bc2      	ldr	r3, [pc, #776]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004938:	6a1a      	ldr	r2, [r3, #32]
 800493a:	4bc1      	ldr	r3, [pc, #772]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 800493c:	2104      	movs	r1, #4
 800493e:	430a      	orrs	r2, r1
 8004940:	621a      	str	r2, [r3, #32]
 8004942:	4bbf      	ldr	r3, [pc, #764]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004944:	6a1a      	ldr	r2, [r3, #32]
 8004946:	4bbe      	ldr	r3, [pc, #760]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004948:	2101      	movs	r1, #1
 800494a:	430a      	orrs	r2, r1
 800494c:	621a      	str	r2, [r3, #32]
 800494e:	e00b      	b.n	8004968 <HAL_RCC_OscConfig+0x3a4>
 8004950:	4bbb      	ldr	r3, [pc, #748]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004952:	6a1a      	ldr	r2, [r3, #32]
 8004954:	4bba      	ldr	r3, [pc, #744]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004956:	2101      	movs	r1, #1
 8004958:	438a      	bics	r2, r1
 800495a:	621a      	str	r2, [r3, #32]
 800495c:	4bb8      	ldr	r3, [pc, #736]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 800495e:	6a1a      	ldr	r2, [r3, #32]
 8004960:	4bb7      	ldr	r3, [pc, #732]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004962:	2104      	movs	r1, #4
 8004964:	438a      	bics	r2, r1
 8004966:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d014      	beq.n	800499a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004970:	f7ff fa90 	bl	8003e94 <HAL_GetTick>
 8004974:	0003      	movs	r3, r0
 8004976:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004978:	e009      	b.n	800498e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800497a:	f7ff fa8b 	bl	8003e94 <HAL_GetTick>
 800497e:	0002      	movs	r2, r0
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	4aaf      	ldr	r2, [pc, #700]	; (8004c44 <HAL_RCC_OscConfig+0x680>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e19a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498e:	4bac      	ldr	r3, [pc, #688]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	2202      	movs	r2, #2
 8004994:	4013      	ands	r3, r2
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x3b6>
 8004998:	e013      	b.n	80049c2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499a:	f7ff fa7b 	bl	8003e94 <HAL_GetTick>
 800499e:	0003      	movs	r3, r0
 80049a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a2:	e009      	b.n	80049b8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a4:	f7ff fa76 	bl	8003e94 <HAL_GetTick>
 80049a8:	0002      	movs	r2, r0
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	4aa5      	ldr	r2, [pc, #660]	; (8004c44 <HAL_RCC_OscConfig+0x680>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e185      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b8:	4ba1      	ldr	r3, [pc, #644]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	2202      	movs	r2, #2
 80049be:	4013      	ands	r3, r2
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049c2:	231f      	movs	r3, #31
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d105      	bne.n	80049d8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049cc:	4b9c      	ldr	r3, [pc, #624]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 80049ce:	69da      	ldr	r2, [r3, #28]
 80049d0:	4b9b      	ldr	r3, [pc, #620]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 80049d2:	499d      	ldr	r1, [pc, #628]	; (8004c48 <HAL_RCC_OscConfig+0x684>)
 80049d4:	400a      	ands	r2, r1
 80049d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2210      	movs	r2, #16
 80049de:	4013      	ands	r3, r2
 80049e0:	d063      	beq.n	8004aaa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d12a      	bne.n	8004a40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80049ea:	4b95      	ldr	r3, [pc, #596]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 80049ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ee:	4b94      	ldr	r3, [pc, #592]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 80049f0:	2104      	movs	r1, #4
 80049f2:	430a      	orrs	r2, r1
 80049f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80049f6:	4b92      	ldr	r3, [pc, #584]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 80049f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049fa:	4b91      	ldr	r3, [pc, #580]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 80049fc:	2101      	movs	r1, #1
 80049fe:	430a      	orrs	r2, r1
 8004a00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a02:	f7ff fa47 	bl	8003e94 <HAL_GetTick>
 8004a06:	0003      	movs	r3, r0
 8004a08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004a0c:	f7ff fa42 	bl	8003e94 <HAL_GetTick>
 8004a10:	0002      	movs	r2, r0
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e152      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a1e:	4b88      	ldr	r3, [pc, #544]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a22:	2202      	movs	r2, #2
 8004a24:	4013      	ands	r3, r2
 8004a26:	d0f1      	beq.n	8004a0c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004a28:	4b85      	ldr	r3, [pc, #532]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2c:	22f8      	movs	r2, #248	; 0xf8
 8004a2e:	4393      	bics	r3, r2
 8004a30:	0019      	movs	r1, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	00da      	lsls	r2, r3, #3
 8004a38:	4b81      	ldr	r3, [pc, #516]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8004a3e:	e034      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	3305      	adds	r3, #5
 8004a46:	d111      	bne.n	8004a6c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004a48:	4b7d      	ldr	r3, [pc, #500]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a4c:	4b7c      	ldr	r3, [pc, #496]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004a4e:	2104      	movs	r1, #4
 8004a50:	438a      	bics	r2, r1
 8004a52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004a54:	4b7a      	ldr	r3, [pc, #488]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a58:	22f8      	movs	r2, #248	; 0xf8
 8004a5a:	4393      	bics	r3, r2
 8004a5c:	0019      	movs	r1, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	00da      	lsls	r2, r3, #3
 8004a64:	4b76      	ldr	r3, [pc, #472]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004a66:	430a      	orrs	r2, r1
 8004a68:	635a      	str	r2, [r3, #52]	; 0x34
 8004a6a:	e01e      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a6c:	4b74      	ldr	r3, [pc, #464]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a70:	4b73      	ldr	r3, [pc, #460]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004a72:	2104      	movs	r1, #4
 8004a74:	430a      	orrs	r2, r1
 8004a76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004a78:	4b71      	ldr	r3, [pc, #452]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a7c:	4b70      	ldr	r3, [pc, #448]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004a7e:	2101      	movs	r1, #1
 8004a80:	438a      	bics	r2, r1
 8004a82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a84:	f7ff fa06 	bl	8003e94 <HAL_GetTick>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004a8e:	f7ff fa01 	bl	8003e94 <HAL_GetTick>
 8004a92:	0002      	movs	r2, r0
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e111      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004aa0:	4b67      	ldr	r3, [pc, #412]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d1f1      	bne.n	8004a8e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d05c      	beq.n	8004b6e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004ab4:	4b62      	ldr	r3, [pc, #392]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	220c      	movs	r2, #12
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	d00e      	beq.n	8004ade <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004ac0:	4b5f      	ldr	r3, [pc, #380]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	220c      	movs	r2, #12
 8004ac6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d114      	bne.n	8004af6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004acc:	4b5c      	ldr	r3, [pc, #368]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	23c0      	movs	r3, #192	; 0xc0
 8004ad2:	025b      	lsls	r3, r3, #9
 8004ad4:	401a      	ands	r2, r3
 8004ad6:	23c0      	movs	r3, #192	; 0xc0
 8004ad8:	025b      	lsls	r3, r3, #9
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d10b      	bne.n	8004af6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004ade:	4b58      	ldr	r3, [pc, #352]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae2:	2380      	movs	r3, #128	; 0x80
 8004ae4:	025b      	lsls	r3, r3, #9
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d040      	beq.n	8004b6c <HAL_RCC_OscConfig+0x5a8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d03c      	beq.n	8004b6c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e0e6      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01b      	beq.n	8004b36 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004afe:	4b50      	ldr	r3, [pc, #320]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b02:	4b4f      	ldr	r3, [pc, #316]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004b04:	2180      	movs	r1, #128	; 0x80
 8004b06:	0249      	lsls	r1, r1, #9
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0c:	f7ff f9c2 	bl	8003e94 <HAL_GetTick>
 8004b10:	0003      	movs	r3, r0
 8004b12:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b16:	f7ff f9bd 	bl	8003e94 <HAL_GetTick>
 8004b1a:	0002      	movs	r2, r0
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e0cd      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004b28:	4b45      	ldr	r3, [pc, #276]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2c:	2380      	movs	r3, #128	; 0x80
 8004b2e:	025b      	lsls	r3, r3, #9
 8004b30:	4013      	ands	r3, r2
 8004b32:	d0f0      	beq.n	8004b16 <HAL_RCC_OscConfig+0x552>
 8004b34:	e01b      	b.n	8004b6e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004b36:	4b42      	ldr	r3, [pc, #264]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b3a:	4b41      	ldr	r3, [pc, #260]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004b3c:	4943      	ldr	r1, [pc, #268]	; (8004c4c <HAL_RCC_OscConfig+0x688>)
 8004b3e:	400a      	ands	r2, r1
 8004b40:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b42:	f7ff f9a7 	bl	8003e94 <HAL_GetTick>
 8004b46:	0003      	movs	r3, r0
 8004b48:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b4c:	f7ff f9a2 	bl	8003e94 <HAL_GetTick>
 8004b50:	0002      	movs	r2, r0
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e0b2      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004b5e:	4b38      	ldr	r3, [pc, #224]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b62:	2380      	movs	r3, #128	; 0x80
 8004b64:	025b      	lsls	r3, r3, #9
 8004b66:	4013      	ands	r3, r2
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x588>
 8004b6a:	e000      	b.n	8004b6e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004b6c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d100      	bne.n	8004b78 <HAL_RCC_OscConfig+0x5b4>
 8004b76:	e0a4      	b.n	8004cc2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b78:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	220c      	movs	r2, #12
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d100      	bne.n	8004b86 <HAL_RCC_OscConfig+0x5c2>
 8004b84:	e078      	b.n	8004c78 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d14c      	bne.n	8004c28 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8e:	4b2c      	ldr	r3, [pc, #176]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004b94:	492e      	ldr	r1, [pc, #184]	; (8004c50 <HAL_RCC_OscConfig+0x68c>)
 8004b96:	400a      	ands	r2, r1
 8004b98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9a:	f7ff f97b 	bl	8003e94 <HAL_GetTick>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7ff f976 	bl	8003e94 <HAL_GetTick>
 8004ba8:	0002      	movs	r2, r0
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e086      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bb6:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	049b      	lsls	r3, r3, #18
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bc2:	4b1f      	ldr	r3, [pc, #124]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	220f      	movs	r2, #15
 8004bc8:	4393      	bics	r3, r2
 8004bca:	0019      	movs	r1, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bd6:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <HAL_RCC_OscConfig+0x690>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	0019      	movs	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	431a      	orrs	r2, r3
 8004bea:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bf0:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004bf6:	2180      	movs	r1, #128	; 0x80
 8004bf8:	0449      	lsls	r1, r1, #17
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfe:	f7ff f949 	bl	8003e94 <HAL_GetTick>
 8004c02:	0003      	movs	r3, r0
 8004c04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c08:	f7ff f944 	bl	8003e94 <HAL_GetTick>
 8004c0c:	0002      	movs	r2, r0
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e054      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c1a:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	049b      	lsls	r3, r3, #18
 8004c22:	4013      	ands	r3, r2
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0x644>
 8004c26:	e04c      	b.n	8004cc2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <HAL_RCC_OscConfig+0x67c>)
 8004c2e:	4908      	ldr	r1, [pc, #32]	; (8004c50 <HAL_RCC_OscConfig+0x68c>)
 8004c30:	400a      	ands	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7ff f92e 	bl	8003e94 <HAL_GetTick>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c3c:	e015      	b.n	8004c6a <HAL_RCC_OscConfig+0x6a6>
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	40021000 	.word	0x40021000
 8004c44:	00001388 	.word	0x00001388
 8004c48:	efffffff 	.word	0xefffffff
 8004c4c:	fffeffff 	.word	0xfffeffff
 8004c50:	feffffff 	.word	0xfeffffff
 8004c54:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c58:	f7ff f91c 	bl	8003e94 <HAL_GetTick>
 8004c5c:	0002      	movs	r2, r0
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e02c      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c6a:	4b18      	ldr	r3, [pc, #96]	; (8004ccc <HAL_RCC_OscConfig+0x708>)
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	2380      	movs	r3, #128	; 0x80
 8004c70:	049b      	lsls	r3, r3, #18
 8004c72:	4013      	ands	r3, r2
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x694>
 8004c76:	e024      	b.n	8004cc2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e01f      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004c84:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <HAL_RCC_OscConfig+0x708>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004c8a:	4b10      	ldr	r3, [pc, #64]	; (8004ccc <HAL_RCC_OscConfig+0x708>)
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	23c0      	movs	r3, #192	; 0xc0
 8004c94:	025b      	lsls	r3, r3, #9
 8004c96:	401a      	ands	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d10e      	bne.n	8004cbe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	220f      	movs	r2, #15
 8004ca4:	401a      	ands	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	23f0      	movs	r3, #240	; 0xf0
 8004cb2:	039b      	lsls	r3, r3, #14
 8004cb4:	401a      	ands	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d001      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b008      	add	sp, #32
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40021000 	.word	0x40021000

08004cd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0bf      	b.n	8004e64 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce4:	4b61      	ldr	r3, [pc, #388]	; (8004e6c <HAL_RCC_ClockConfig+0x19c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	4013      	ands	r3, r2
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d911      	bls.n	8004d16 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf2:	4b5e      	ldr	r3, [pc, #376]	; (8004e6c <HAL_RCC_ClockConfig+0x19c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	4393      	bics	r3, r2
 8004cfa:	0019      	movs	r1, r3
 8004cfc:	4b5b      	ldr	r3, [pc, #364]	; (8004e6c <HAL_RCC_ClockConfig+0x19c>)
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d04:	4b59      	ldr	r3, [pc, #356]	; (8004e6c <HAL_RCC_ClockConfig+0x19c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d001      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e0a6      	b.n	8004e64 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d015      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2204      	movs	r2, #4
 8004d26:	4013      	ands	r3, r2
 8004d28:	d006      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004d2a:	4b51      	ldr	r3, [pc, #324]	; (8004e70 <HAL_RCC_ClockConfig+0x1a0>)
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	4b50      	ldr	r3, [pc, #320]	; (8004e70 <HAL_RCC_ClockConfig+0x1a0>)
 8004d30:	21e0      	movs	r1, #224	; 0xe0
 8004d32:	00c9      	lsls	r1, r1, #3
 8004d34:	430a      	orrs	r2, r1
 8004d36:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d38:	4b4d      	ldr	r3, [pc, #308]	; (8004e70 <HAL_RCC_ClockConfig+0x1a0>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	22f0      	movs	r2, #240	; 0xf0
 8004d3e:	4393      	bics	r3, r2
 8004d40:	0019      	movs	r1, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	4b4a      	ldr	r3, [pc, #296]	; (8004e70 <HAL_RCC_ClockConfig+0x1a0>)
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2201      	movs	r2, #1
 8004d52:	4013      	ands	r3, r2
 8004d54:	d04c      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d107      	bne.n	8004d6e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	4b44      	ldr	r3, [pc, #272]	; (8004e70 <HAL_RCC_ClockConfig+0x1a0>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	2380      	movs	r3, #128	; 0x80
 8004d64:	029b      	lsls	r3, r3, #10
 8004d66:	4013      	ands	r3, r2
 8004d68:	d120      	bne.n	8004dac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e07a      	b.n	8004e64 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d107      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d76:	4b3e      	ldr	r3, [pc, #248]	; (8004e70 <HAL_RCC_ClockConfig+0x1a0>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	2380      	movs	r3, #128	; 0x80
 8004d7c:	049b      	lsls	r3, r3, #18
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d114      	bne.n	8004dac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e06e      	b.n	8004e64 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004d8e:	4b38      	ldr	r3, [pc, #224]	; (8004e70 <HAL_RCC_ClockConfig+0x1a0>)
 8004d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d92:	2380      	movs	r3, #128	; 0x80
 8004d94:	025b      	lsls	r3, r3, #9
 8004d96:	4013      	ands	r3, r2
 8004d98:	d108      	bne.n	8004dac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e062      	b.n	8004e64 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9e:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <HAL_RCC_ClockConfig+0x1a0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2202      	movs	r2, #2
 8004da4:	4013      	ands	r3, r2
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e05b      	b.n	8004e64 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dac:	4b30      	ldr	r3, [pc, #192]	; (8004e70 <HAL_RCC_ClockConfig+0x1a0>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2203      	movs	r2, #3
 8004db2:	4393      	bics	r3, r2
 8004db4:	0019      	movs	r1, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	4b2d      	ldr	r3, [pc, #180]	; (8004e70 <HAL_RCC_ClockConfig+0x1a0>)
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dc0:	f7ff f868 	bl	8003e94 <HAL_GetTick>
 8004dc4:	0003      	movs	r3, r0
 8004dc6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc8:	e009      	b.n	8004dde <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dca:	f7ff f863 	bl	8003e94 <HAL_GetTick>
 8004dce:	0002      	movs	r2, r0
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	4a27      	ldr	r2, [pc, #156]	; (8004e74 <HAL_RCC_ClockConfig+0x1a4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e042      	b.n	8004e64 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dde:	4b24      	ldr	r3, [pc, #144]	; (8004e70 <HAL_RCC_ClockConfig+0x1a0>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	220c      	movs	r2, #12
 8004de4:	401a      	ands	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d1ec      	bne.n	8004dca <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004df0:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <HAL_RCC_ClockConfig+0x19c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2201      	movs	r2, #1
 8004df6:	4013      	ands	r3, r2
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d211      	bcs.n	8004e22 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfe:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <HAL_RCC_ClockConfig+0x19c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2201      	movs	r2, #1
 8004e04:	4393      	bics	r3, r2
 8004e06:	0019      	movs	r1, r3
 8004e08:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <HAL_RCC_ClockConfig+0x19c>)
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e10:	4b16      	ldr	r3, [pc, #88]	; (8004e6c <HAL_RCC_ClockConfig+0x19c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2201      	movs	r2, #1
 8004e16:	4013      	ands	r3, r2
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d001      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e020      	b.n	8004e64 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2204      	movs	r2, #4
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d009      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004e2c:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <HAL_RCC_ClockConfig+0x1a0>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	4a11      	ldr	r2, [pc, #68]	; (8004e78 <HAL_RCC_ClockConfig+0x1a8>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	0019      	movs	r1, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <HAL_RCC_ClockConfig+0x1a0>)
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e40:	f000 f820 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004e44:	0001      	movs	r1, r0
 8004e46:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <HAL_RCC_ClockConfig+0x1a0>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	091b      	lsrs	r3, r3, #4
 8004e4c:	220f      	movs	r2, #15
 8004e4e:	4013      	ands	r3, r2
 8004e50:	4a0a      	ldr	r2, [pc, #40]	; (8004e7c <HAL_RCC_ClockConfig+0x1ac>)
 8004e52:	5cd3      	ldrb	r3, [r2, r3]
 8004e54:	000a      	movs	r2, r1
 8004e56:	40da      	lsrs	r2, r3
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <HAL_RCC_ClockConfig+0x1b0>)
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f7fe ffd3 	bl	8003e08 <HAL_InitTick>
  
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	0018      	movs	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b004      	add	sp, #16
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40022000 	.word	0x40022000
 8004e70:	40021000 	.word	0x40021000
 8004e74:	00001388 	.word	0x00001388
 8004e78:	fffff8ff 	.word	0xfffff8ff
 8004e7c:	08005e20 	.word	0x08005e20
 8004e80:	20000028 	.word	0x20000028

08004e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	b590      	push	{r4, r7, lr}
 8004e86:	b08f      	sub	sp, #60	; 0x3c
 8004e88:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004e8a:	2314      	movs	r3, #20
 8004e8c:	18fb      	adds	r3, r7, r3
 8004e8e:	4a37      	ldr	r2, [pc, #220]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xe8>)
 8004e90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004e92:	c313      	stmia	r3!, {r0, r1, r4}
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004e98:	1d3b      	adds	r3, r7, #4
 8004e9a:	4a35      	ldr	r2, [pc, #212]	; (8004f70 <HAL_RCC_GetSysClockFreq+0xec>)
 8004e9c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004e9e:	c313      	stmia	r3!, {r0, r1, r4}
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eac:	2300      	movs	r3, #0
 8004eae:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004eb8:	4b2e      	ldr	r3, [pc, #184]	; (8004f74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	220c      	movs	r2, #12
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d006      	beq.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x52>
 8004ec8:	2b0c      	cmp	r3, #12
 8004eca:	d043      	beq.n	8004f54 <HAL_RCC_GetSysClockFreq+0xd0>
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d144      	bne.n	8004f5a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ed0:	4b29      	ldr	r3, [pc, #164]	; (8004f78 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004ed2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ed4:	e044      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	0c9b      	lsrs	r3, r3, #18
 8004eda:	220f      	movs	r2, #15
 8004edc:	4013      	ands	r3, r2
 8004ede:	2214      	movs	r2, #20
 8004ee0:	18ba      	adds	r2, r7, r2
 8004ee2:	5cd3      	ldrb	r3, [r2, r3]
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004ee6:	4b23      	ldr	r3, [pc, #140]	; (8004f74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	220f      	movs	r2, #15
 8004eec:	4013      	ands	r3, r2
 8004eee:	1d3a      	adds	r2, r7, #4
 8004ef0:	5cd3      	ldrb	r3, [r2, r3]
 8004ef2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ef6:	23c0      	movs	r3, #192	; 0xc0
 8004ef8:	025b      	lsls	r3, r3, #9
 8004efa:	401a      	ands	r2, r3
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	025b      	lsls	r3, r3, #9
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d109      	bne.n	8004f18 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f06:	481c      	ldr	r0, [pc, #112]	; (8004f78 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004f08:	f7fb f8fe 	bl	8000108 <__udivsi3>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	001a      	movs	r2, r3
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	4353      	muls	r3, r2
 8004f14:	637b      	str	r3, [r7, #52]	; 0x34
 8004f16:	e01a      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1a:	23c0      	movs	r3, #192	; 0xc0
 8004f1c:	025b      	lsls	r3, r3, #9
 8004f1e:	401a      	ands	r2, r3
 8004f20:	23c0      	movs	r3, #192	; 0xc0
 8004f22:	025b      	lsls	r3, r3, #9
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d109      	bne.n	8004f3c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f2a:	4814      	ldr	r0, [pc, #80]	; (8004f7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f2c:	f7fb f8ec 	bl	8000108 <__udivsi3>
 8004f30:	0003      	movs	r3, r0
 8004f32:	001a      	movs	r2, r3
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	4353      	muls	r3, r2
 8004f38:	637b      	str	r3, [r7, #52]	; 0x34
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f3e:	480e      	ldr	r0, [pc, #56]	; (8004f78 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004f40:	f7fb f8e2 	bl	8000108 <__udivsi3>
 8004f44:	0003      	movs	r3, r0
 8004f46:	001a      	movs	r2, r3
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	4353      	muls	r3, r2
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f50:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f52:	e005      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004f54:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f58:	e002      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f5a:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004f5c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f5e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004f62:	0018      	movs	r0, r3
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b00f      	add	sp, #60	; 0x3c
 8004f68:	bd90      	pop	{r4, r7, pc}
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	08005cc0 	.word	0x08005cc0
 8004f70:	08005cd0 	.word	0x08005cd0
 8004f74:	40021000 	.word	0x40021000
 8004f78:	007a1200 	.word	0x007a1200
 8004f7c:	02dc6c00 	.word	0x02dc6c00

08004f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f84:	4b02      	ldr	r3, [pc, #8]	; (8004f90 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f86:	681b      	ldr	r3, [r3, #0]
}
 8004f88:	0018      	movs	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	20000028 	.word	0x20000028

08004f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004f98:	f7ff fff2 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 8004f9c:	0001      	movs	r1, r0
 8004f9e:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	0a1b      	lsrs	r3, r3, #8
 8004fa4:	2207      	movs	r2, #7
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	4a04      	ldr	r2, [pc, #16]	; (8004fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004faa:	5cd3      	ldrb	r3, [r2, r3]
 8004fac:	40d9      	lsrs	r1, r3
 8004fae:	000b      	movs	r3, r1
}    
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	08005e30 	.word	0x08005e30

08004fc0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2207      	movs	r2, #7
 8004fce:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fd0:	4b0e      	ldr	r3, [pc, #56]	; (800500c <HAL_RCC_GetClockConfig+0x4c>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	401a      	ands	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <HAL_RCC_GetClockConfig+0x4c>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	22f0      	movs	r2, #240	; 0xf0
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <HAL_RCC_GetClockConfig+0x4c>)
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	23e0      	movs	r3, #224	; 0xe0
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	401a      	ands	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_RCC_GetClockConfig+0x50>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	401a      	ands	r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	601a      	str	r2, [r3, #0]
}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	b002      	add	sp, #8
 8005008:	bd80      	pop	{r7, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	40021000 	.word	0x40021000
 8005010:	40022000 	.word	0x40022000

08005014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e042      	b.n	80050ac <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	223d      	movs	r2, #61	; 0x3d
 800502a:	5c9b      	ldrb	r3, [r3, r2]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d107      	bne.n	8005042 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	223c      	movs	r2, #60	; 0x3c
 8005036:	2100      	movs	r1, #0
 8005038:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0018      	movs	r0, r3
 800503e:	f7fe fc75 	bl	800392c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	223d      	movs	r2, #61	; 0x3d
 8005046:	2102      	movs	r1, #2
 8005048:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3304      	adds	r3, #4
 8005052:	0019      	movs	r1, r3
 8005054:	0010      	movs	r0, r2
 8005056:	f000 fa7b 	bl	8005550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2246      	movs	r2, #70	; 0x46
 800505e:	2101      	movs	r1, #1
 8005060:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	223e      	movs	r2, #62	; 0x3e
 8005066:	2101      	movs	r1, #1
 8005068:	5499      	strb	r1, [r3, r2]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	223f      	movs	r2, #63	; 0x3f
 800506e:	2101      	movs	r1, #1
 8005070:	5499      	strb	r1, [r3, r2]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2240      	movs	r2, #64	; 0x40
 8005076:	2101      	movs	r1, #1
 8005078:	5499      	strb	r1, [r3, r2]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2241      	movs	r2, #65	; 0x41
 800507e:	2101      	movs	r1, #1
 8005080:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2242      	movs	r2, #66	; 0x42
 8005086:	2101      	movs	r1, #1
 8005088:	5499      	strb	r1, [r3, r2]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2243      	movs	r2, #67	; 0x43
 800508e:	2101      	movs	r1, #1
 8005090:	5499      	strb	r1, [r3, r2]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2244      	movs	r2, #68	; 0x44
 8005096:	2101      	movs	r1, #1
 8005098:	5499      	strb	r1, [r3, r2]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2245      	movs	r2, #69	; 0x45
 800509e:	2101      	movs	r1, #1
 80050a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	223d      	movs	r2, #61	; 0x3d
 80050a6:	2101      	movs	r1, #1
 80050a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	0018      	movs	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b002      	add	sp, #8
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	223d      	movs	r2, #61	; 0x3d
 80050c0:	5c9b      	ldrb	r3, [r3, r2]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d001      	beq.n	80050cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e03b      	b.n	8005144 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	223d      	movs	r2, #61	; 0x3d
 80050d0:	2102      	movs	r1, #2
 80050d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2101      	movs	r1, #1
 80050e0:	430a      	orrs	r2, r1
 80050e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a18      	ldr	r2, [pc, #96]	; (800514c <HAL_TIM_Base_Start_IT+0x98>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00f      	beq.n	800510e <HAL_TIM_Base_Start_IT+0x5a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	2380      	movs	r3, #128	; 0x80
 80050f4:	05db      	lsls	r3, r3, #23
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d009      	beq.n	800510e <HAL_TIM_Base_Start_IT+0x5a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a14      	ldr	r2, [pc, #80]	; (8005150 <HAL_TIM_Base_Start_IT+0x9c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d004      	beq.n	800510e <HAL_TIM_Base_Start_IT+0x5a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a12      	ldr	r2, [pc, #72]	; (8005154 <HAL_TIM_Base_Start_IT+0xa0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d111      	bne.n	8005132 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2207      	movs	r2, #7
 8005116:	4013      	ands	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b06      	cmp	r3, #6
 800511e:	d010      	beq.n	8005142 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2101      	movs	r1, #1
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005130:	e007      	b.n	8005142 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2101      	movs	r1, #1
 800513e:	430a      	orrs	r2, r1
 8005140:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	0018      	movs	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	b004      	add	sp, #16
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40000400 	.word	0x40000400
 8005154:	40014000 	.word	0x40014000

08005158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2202      	movs	r2, #2
 8005168:	4013      	ands	r3, r2
 800516a:	2b02      	cmp	r3, #2
 800516c:	d124      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2202      	movs	r2, #2
 8005176:	4013      	ands	r3, r2
 8005178:	2b02      	cmp	r3, #2
 800517a:	d11d      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2203      	movs	r2, #3
 8005182:	4252      	negs	r2, r2
 8005184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	2203      	movs	r2, #3
 8005194:	4013      	ands	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	0018      	movs	r0, r3
 800519c:	f000 f9c0 	bl	8005520 <HAL_TIM_IC_CaptureCallback>
 80051a0:	e007      	b.n	80051b2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	0018      	movs	r0, r3
 80051a6:	f000 f9b3 	bl	8005510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 f9bf 	bl	8005530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2204      	movs	r2, #4
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d125      	bne.n	8005212 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	2204      	movs	r2, #4
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d11e      	bne.n	8005212 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2205      	movs	r2, #5
 80051da:	4252      	negs	r2, r2
 80051dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	23c0      	movs	r3, #192	; 0xc0
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4013      	ands	r3, r2
 80051f0:	d004      	beq.n	80051fc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	0018      	movs	r0, r3
 80051f6:	f000 f993 	bl	8005520 <HAL_TIM_IC_CaptureCallback>
 80051fa:	e007      	b.n	800520c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	0018      	movs	r0, r3
 8005200:	f000 f986 	bl	8005510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	0018      	movs	r0, r3
 8005208:	f000 f992 	bl	8005530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2208      	movs	r2, #8
 800521a:	4013      	ands	r3, r2
 800521c:	2b08      	cmp	r3, #8
 800521e:	d124      	bne.n	800526a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	2208      	movs	r2, #8
 8005228:	4013      	ands	r3, r2
 800522a:	2b08      	cmp	r3, #8
 800522c:	d11d      	bne.n	800526a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2209      	movs	r2, #9
 8005234:	4252      	negs	r2, r2
 8005236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2204      	movs	r2, #4
 800523c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	2203      	movs	r2, #3
 8005246:	4013      	ands	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	0018      	movs	r0, r3
 800524e:	f000 f967 	bl	8005520 <HAL_TIM_IC_CaptureCallback>
 8005252:	e007      	b.n	8005264 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	0018      	movs	r0, r3
 8005258:	f000 f95a 	bl	8005510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	0018      	movs	r0, r3
 8005260:	f000 f966 	bl	8005530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	2210      	movs	r2, #16
 8005272:	4013      	ands	r3, r2
 8005274:	2b10      	cmp	r3, #16
 8005276:	d125      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	2210      	movs	r2, #16
 8005280:	4013      	ands	r3, r2
 8005282:	2b10      	cmp	r3, #16
 8005284:	d11e      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2211      	movs	r2, #17
 800528c:	4252      	negs	r2, r2
 800528e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2208      	movs	r2, #8
 8005294:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	23c0      	movs	r3, #192	; 0xc0
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4013      	ands	r3, r2
 80052a2:	d004      	beq.n	80052ae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	0018      	movs	r0, r3
 80052a8:	f000 f93a 	bl	8005520 <HAL_TIM_IC_CaptureCallback>
 80052ac:	e007      	b.n	80052be <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	0018      	movs	r0, r3
 80052b2:	f000 f92d 	bl	8005510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	0018      	movs	r0, r3
 80052ba:	f000 f939 	bl	8005530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2201      	movs	r2, #1
 80052cc:	4013      	ands	r3, r2
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d10f      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	4013      	ands	r3, r2
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d108      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2202      	movs	r2, #2
 80052e6:	4252      	negs	r2, r2
 80052e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f000 f907 	bl	8005500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2280      	movs	r2, #128	; 0x80
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b80      	cmp	r3, #128	; 0x80
 80052fe:	d10f      	bne.n	8005320 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2280      	movs	r2, #128	; 0x80
 8005308:	4013      	ands	r3, r2
 800530a:	2b80      	cmp	r3, #128	; 0x80
 800530c:	d108      	bne.n	8005320 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2281      	movs	r2, #129	; 0x81
 8005314:	4252      	negs	r2, r2
 8005316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	0018      	movs	r0, r3
 800531c:	f000 fa98 	bl	8005850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2240      	movs	r2, #64	; 0x40
 8005328:	4013      	ands	r3, r2
 800532a:	2b40      	cmp	r3, #64	; 0x40
 800532c:	d10f      	bne.n	800534e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	2240      	movs	r2, #64	; 0x40
 8005336:	4013      	ands	r3, r2
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d108      	bne.n	800534e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2241      	movs	r2, #65	; 0x41
 8005342:	4252      	negs	r2, r2
 8005344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	0018      	movs	r0, r3
 800534a:	f000 f8f9 	bl	8005540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2220      	movs	r2, #32
 8005356:	4013      	ands	r3, r2
 8005358:	2b20      	cmp	r3, #32
 800535a:	d10f      	bne.n	800537c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	4013      	ands	r3, r2
 8005366:	2b20      	cmp	r3, #32
 8005368:	d108      	bne.n	800537c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2221      	movs	r2, #33	; 0x21
 8005370:	4252      	negs	r2, r2
 8005372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	0018      	movs	r0, r3
 8005378:	f000 fa62 	bl	8005840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800537c:	46c0      	nop			; (mov r8, r8)
 800537e:	46bd      	mov	sp, r7
 8005380:	b002      	add	sp, #8
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	223c      	movs	r2, #60	; 0x3c
 8005392:	5c9b      	ldrb	r3, [r3, r2]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_TIM_ConfigClockSource+0x18>
 8005398:	2302      	movs	r3, #2
 800539a:	e0ab      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x170>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	223c      	movs	r2, #60	; 0x3c
 80053a0:	2101      	movs	r1, #1
 80053a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	223d      	movs	r2, #61	; 0x3d
 80053a8:	2102      	movs	r1, #2
 80053aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2277      	movs	r2, #119	; 0x77
 80053b8:	4393      	bics	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4a4f      	ldr	r2, [pc, #316]	; (80054fc <HAL_TIM_ConfigClockSource+0x178>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d100      	bne.n	80053d6 <HAL_TIM_ConfigClockSource+0x52>
 80053d4:	e06b      	b.n	80054ae <HAL_TIM_ConfigClockSource+0x12a>
 80053d6:	d80e      	bhi.n	80053f6 <HAL_TIM_ConfigClockSource+0x72>
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d100      	bne.n	80053de <HAL_TIM_ConfigClockSource+0x5a>
 80053dc:	e077      	b.n	80054ce <HAL_TIM_ConfigClockSource+0x14a>
 80053de:	d803      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x64>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d100      	bne.n	80053e6 <HAL_TIM_ConfigClockSource+0x62>
 80053e4:	e073      	b.n	80054ce <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80053e6:	e07c      	b.n	80054e2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d100      	bne.n	80053ee <HAL_TIM_ConfigClockSource+0x6a>
 80053ec:	e06f      	b.n	80054ce <HAL_TIM_ConfigClockSource+0x14a>
 80053ee:	2b30      	cmp	r3, #48	; 0x30
 80053f0:	d100      	bne.n	80053f4 <HAL_TIM_ConfigClockSource+0x70>
 80053f2:	e06c      	b.n	80054ce <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80053f4:	e075      	b.n	80054e2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80053f6:	2b70      	cmp	r3, #112	; 0x70
 80053f8:	d00e      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0x94>
 80053fa:	d804      	bhi.n	8005406 <HAL_TIM_ConfigClockSource+0x82>
 80053fc:	2b50      	cmp	r3, #80	; 0x50
 80053fe:	d036      	beq.n	800546e <HAL_TIM_ConfigClockSource+0xea>
 8005400:	2b60      	cmp	r3, #96	; 0x60
 8005402:	d044      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8005404:	e06d      	b.n	80054e2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005406:	2280      	movs	r2, #128	; 0x80
 8005408:	0152      	lsls	r2, r2, #5
 800540a:	4293      	cmp	r3, r2
 800540c:	d068      	beq.n	80054e0 <HAL_TIM_ConfigClockSource+0x15c>
 800540e:	2280      	movs	r2, #128	; 0x80
 8005410:	0192      	lsls	r2, r2, #6
 8005412:	4293      	cmp	r3, r2
 8005414:	d017      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8005416:	e064      	b.n	80054e2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	6899      	ldr	r1, [r3, #8]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f000 f98c 	bl	8005744 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2277      	movs	r2, #119	; 0x77
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	609a      	str	r2, [r3, #8]
      break;
 8005444:	e04d      	b.n	80054e2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6899      	ldr	r1, [r3, #8]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f000 f975 	bl	8005744 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2180      	movs	r1, #128	; 0x80
 8005466:	01c9      	lsls	r1, r1, #7
 8005468:	430a      	orrs	r2, r1
 800546a:	609a      	str	r2, [r3, #8]
      break;
 800546c:	e039      	b.n	80054e2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	001a      	movs	r2, r3
 800547c:	f000 f8e8 	bl	8005650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2150      	movs	r1, #80	; 0x50
 8005486:	0018      	movs	r0, r3
 8005488:	f000 f942 	bl	8005710 <TIM_ITRx_SetConfig>
      break;
 800548c:	e029      	b.n	80054e2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	001a      	movs	r2, r3
 800549c:	f000 f906 	bl	80056ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2160      	movs	r1, #96	; 0x60
 80054a6:	0018      	movs	r0, r3
 80054a8:	f000 f932 	bl	8005710 <TIM_ITRx_SetConfig>
      break;
 80054ac:	e019      	b.n	80054e2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6859      	ldr	r1, [r3, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	001a      	movs	r2, r3
 80054bc:	f000 f8c8 	bl	8005650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2140      	movs	r1, #64	; 0x40
 80054c6:	0018      	movs	r0, r3
 80054c8:	f000 f922 	bl	8005710 <TIM_ITRx_SetConfig>
      break;
 80054cc:	e009      	b.n	80054e2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	0019      	movs	r1, r3
 80054d8:	0010      	movs	r0, r2
 80054da:	f000 f919 	bl	8005710 <TIM_ITRx_SetConfig>
        break;
 80054de:	e000      	b.n	80054e2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80054e0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	223d      	movs	r2, #61	; 0x3d
 80054e6:	2101      	movs	r1, #1
 80054e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	223c      	movs	r2, #60	; 0x3c
 80054ee:	2100      	movs	r1, #0
 80054f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	0018      	movs	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	b004      	add	sp, #16
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	ffff00ff 	.word	0xffff00ff

08005500 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005508:	46c0      	nop			; (mov r8, r8)
 800550a:	46bd      	mov	sp, r7
 800550c:	b002      	add	sp, #8
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005518:	46c0      	nop			; (mov r8, r8)
 800551a:	46bd      	mov	sp, r7
 800551c:	b002      	add	sp, #8
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005528:	46c0      	nop			; (mov r8, r8)
 800552a:	46bd      	mov	sp, r7
 800552c:	b002      	add	sp, #8
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005538:	46c0      	nop			; (mov r8, r8)
 800553a:	46bd      	mov	sp, r7
 800553c:	b002      	add	sp, #8
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005548:	46c0      	nop			; (mov r8, r8)
 800554a:	46bd      	mov	sp, r7
 800554c:	b002      	add	sp, #8
 800554e:	bd80      	pop	{r7, pc}

08005550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a34      	ldr	r2, [pc, #208]	; (8005634 <TIM_Base_SetConfig+0xe4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d008      	beq.n	800557a <TIM_Base_SetConfig+0x2a>
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	2380      	movs	r3, #128	; 0x80
 800556c:	05db      	lsls	r3, r3, #23
 800556e:	429a      	cmp	r2, r3
 8005570:	d003      	beq.n	800557a <TIM_Base_SetConfig+0x2a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a30      	ldr	r2, [pc, #192]	; (8005638 <TIM_Base_SetConfig+0xe8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d108      	bne.n	800558c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2270      	movs	r2, #112	; 0x70
 800557e:	4393      	bics	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a29      	ldr	r2, [pc, #164]	; (8005634 <TIM_Base_SetConfig+0xe4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d018      	beq.n	80055c6 <TIM_Base_SetConfig+0x76>
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	05db      	lsls	r3, r3, #23
 800559a:	429a      	cmp	r2, r3
 800559c:	d013      	beq.n	80055c6 <TIM_Base_SetConfig+0x76>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a25      	ldr	r2, [pc, #148]	; (8005638 <TIM_Base_SetConfig+0xe8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <TIM_Base_SetConfig+0x76>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a24      	ldr	r2, [pc, #144]	; (800563c <TIM_Base_SetConfig+0xec>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_Base_SetConfig+0x76>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a23      	ldr	r2, [pc, #140]	; (8005640 <TIM_Base_SetConfig+0xf0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_Base_SetConfig+0x76>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a22      	ldr	r2, [pc, #136]	; (8005644 <TIM_Base_SetConfig+0xf4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_Base_SetConfig+0x76>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a21      	ldr	r2, [pc, #132]	; (8005648 <TIM_Base_SetConfig+0xf8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d108      	bne.n	80055d8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4a20      	ldr	r2, [pc, #128]	; (800564c <TIM_Base_SetConfig+0xfc>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2280      	movs	r2, #128	; 0x80
 80055dc:	4393      	bics	r3, r2
 80055de:	001a      	movs	r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a0c      	ldr	r2, [pc, #48]	; (8005634 <TIM_Base_SetConfig+0xe4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00b      	beq.n	800561e <TIM_Base_SetConfig+0xce>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a0d      	ldr	r2, [pc, #52]	; (8005640 <TIM_Base_SetConfig+0xf0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d007      	beq.n	800561e <TIM_Base_SetConfig+0xce>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a0c      	ldr	r2, [pc, #48]	; (8005644 <TIM_Base_SetConfig+0xf4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_Base_SetConfig+0xce>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a0b      	ldr	r2, [pc, #44]	; (8005648 <TIM_Base_SetConfig+0xf8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d103      	bne.n	8005626 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	615a      	str	r2, [r3, #20]
}
 800562c:	46c0      	nop			; (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	b004      	add	sp, #16
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40000400 	.word	0x40000400
 800563c:	40002000 	.word	0x40002000
 8005640:	40014000 	.word	0x40014000
 8005644:	40014400 	.word	0x40014400
 8005648:	40014800 	.word	0x40014800
 800564c:	fffffcff 	.word	0xfffffcff

08005650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	2201      	movs	r2, #1
 8005668:	4393      	bics	r3, r2
 800566a:	001a      	movs	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	22f0      	movs	r2, #240	; 0xf0
 800567a:	4393      	bics	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	220a      	movs	r2, #10
 800568c:	4393      	bics	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	621a      	str	r2, [r3, #32]
}
 80056a4:	46c0      	nop			; (mov r8, r8)
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b006      	add	sp, #24
 80056aa:	bd80      	pop	{r7, pc}

080056ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	2210      	movs	r2, #16
 80056be:	4393      	bics	r3, r2
 80056c0:	001a      	movs	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	4a0d      	ldr	r2, [pc, #52]	; (800570c <TIM_TI2_ConfigInputStage+0x60>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	031b      	lsls	r3, r3, #12
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	22a0      	movs	r2, #160	; 0xa0
 80056e8:	4393      	bics	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	46bd      	mov	sp, r7
 8005706:	b006      	add	sp, #24
 8005708:	bd80      	pop	{r7, pc}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	ffff0fff 	.word	0xffff0fff

08005710 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2270      	movs	r2, #112	; 0x70
 8005724:	4393      	bics	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	2207      	movs	r2, #7
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	609a      	str	r2, [r3, #8]
}
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	46bd      	mov	sp, r7
 800573e:	b004      	add	sp, #16
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	4a09      	ldr	r2, [pc, #36]	; (8005780 <TIM_ETR_SetConfig+0x3c>)
 800575c:	4013      	ands	r3, r2
 800575e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	021a      	lsls	r2, r3, #8
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	431a      	orrs	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4313      	orrs	r3, r2
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	609a      	str	r2, [r3, #8]
}
 8005778:	46c0      	nop			; (mov r8, r8)
 800577a:	46bd      	mov	sp, r7
 800577c:	b006      	add	sp, #24
 800577e:	bd80      	pop	{r7, pc}
 8005780:	ffff00ff 	.word	0xffff00ff

08005784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	223c      	movs	r2, #60	; 0x3c
 8005792:	5c9b      	ldrb	r3, [r3, r2]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005798:	2302      	movs	r3, #2
 800579a:	e047      	b.n	800582c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	223c      	movs	r2, #60	; 0x3c
 80057a0:	2101      	movs	r1, #1
 80057a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	223d      	movs	r2, #61	; 0x3d
 80057a8:	2102      	movs	r1, #2
 80057aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2270      	movs	r2, #112	; 0x70
 80057c0:	4393      	bics	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a16      	ldr	r2, [pc, #88]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00f      	beq.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	2380      	movs	r3, #128	; 0x80
 80057e6:	05db      	lsls	r3, r3, #23
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d009      	beq.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a11      	ldr	r2, [pc, #68]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d004      	beq.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a10      	ldr	r2, [pc, #64]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d10c      	bne.n	800581a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2280      	movs	r2, #128	; 0x80
 8005804:	4393      	bics	r3, r2
 8005806:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	4313      	orrs	r3, r2
 8005810:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	223d      	movs	r2, #61	; 0x3d
 800581e:	2101      	movs	r1, #1
 8005820:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	223c      	movs	r2, #60	; 0x3c
 8005826:	2100      	movs	r1, #0
 8005828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	0018      	movs	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	b004      	add	sp, #16
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40000400 	.word	0x40000400
 800583c:	40014000 	.word	0x40014000

08005840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005848:	46c0      	nop			; (mov r8, r8)
 800584a:	46bd      	mov	sp, r7
 800584c:	b002      	add	sp, #8
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005858:	46c0      	nop			; (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	b002      	add	sp, #8
 800585e:	bd80      	pop	{r7, pc}

08005860 <__errno>:
 8005860:	4b01      	ldr	r3, [pc, #4]	; (8005868 <__errno+0x8>)
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	4770      	bx	lr
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	20000034 	.word	0x20000034

0800586c <__libc_init_array>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	2600      	movs	r6, #0
 8005870:	4d0c      	ldr	r5, [pc, #48]	; (80058a4 <__libc_init_array+0x38>)
 8005872:	4c0d      	ldr	r4, [pc, #52]	; (80058a8 <__libc_init_array+0x3c>)
 8005874:	1b64      	subs	r4, r4, r5
 8005876:	10a4      	asrs	r4, r4, #2
 8005878:	42a6      	cmp	r6, r4
 800587a:	d109      	bne.n	8005890 <__libc_init_array+0x24>
 800587c:	2600      	movs	r6, #0
 800587e:	f000 fa0b 	bl	8005c98 <_init>
 8005882:	4d0a      	ldr	r5, [pc, #40]	; (80058ac <__libc_init_array+0x40>)
 8005884:	4c0a      	ldr	r4, [pc, #40]	; (80058b0 <__libc_init_array+0x44>)
 8005886:	1b64      	subs	r4, r4, r5
 8005888:	10a4      	asrs	r4, r4, #2
 800588a:	42a6      	cmp	r6, r4
 800588c:	d105      	bne.n	800589a <__libc_init_array+0x2e>
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	00b3      	lsls	r3, r6, #2
 8005892:	58eb      	ldr	r3, [r5, r3]
 8005894:	4798      	blx	r3
 8005896:	3601      	adds	r6, #1
 8005898:	e7ee      	b.n	8005878 <__libc_init_array+0xc>
 800589a:	00b3      	lsls	r3, r6, #2
 800589c:	58eb      	ldr	r3, [r5, r3]
 800589e:	4798      	blx	r3
 80058a0:	3601      	adds	r6, #1
 80058a2:	e7f2      	b.n	800588a <__libc_init_array+0x1e>
 80058a4:	08005e70 	.word	0x08005e70
 80058a8:	08005e70 	.word	0x08005e70
 80058ac:	08005e70 	.word	0x08005e70
 80058b0:	08005e74 	.word	0x08005e74

080058b4 <memset>:
 80058b4:	0003      	movs	r3, r0
 80058b6:	1812      	adds	r2, r2, r0
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d100      	bne.n	80058be <memset+0xa>
 80058bc:	4770      	bx	lr
 80058be:	7019      	strb	r1, [r3, #0]
 80058c0:	3301      	adds	r3, #1
 80058c2:	e7f9      	b.n	80058b8 <memset+0x4>

080058c4 <exp>:
 80058c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058c6:	b08d      	sub	sp, #52	; 0x34
 80058c8:	0004      	movs	r4, r0
 80058ca:	000d      	movs	r5, r1
 80058cc:	f000 f874 	bl	80059b8 <__ieee754_exp>
 80058d0:	4b31      	ldr	r3, [pc, #196]	; (8005998 <exp+0xd4>)
 80058d2:	0006      	movs	r6, r0
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	000f      	movs	r7, r1
 80058d8:	b25b      	sxtb	r3, r3
 80058da:	3301      	adds	r3, #1
 80058dc:	d032      	beq.n	8005944 <exp+0x80>
 80058de:	0020      	movs	r0, r4
 80058e0:	0029      	movs	r1, r5
 80058e2:	f000 f9cf 	bl	8005c84 <finite>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d02c      	beq.n	8005944 <exp+0x80>
 80058ea:	4a2c      	ldr	r2, [pc, #176]	; (800599c <exp+0xd8>)
 80058ec:	4b2c      	ldr	r3, [pc, #176]	; (80059a0 <exp+0xdc>)
 80058ee:	0020      	movs	r0, r4
 80058f0:	0029      	movs	r1, r5
 80058f2:	f7fa fcbf 	bl	8000274 <__aeabi_dcmpgt>
 80058f6:	9001      	str	r0, [sp, #4]
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d032      	beq.n	8005962 <exp+0x9e>
 80058fc:	2303      	movs	r3, #3
 80058fe:	9302      	str	r3, [sp, #8]
 8005900:	4b28      	ldr	r3, [pc, #160]	; (80059a4 <exp+0xe0>)
 8005902:	9406      	str	r4, [sp, #24]
 8005904:	9507      	str	r5, [sp, #28]
 8005906:	9303      	str	r3, [sp, #12]
 8005908:	2300      	movs	r3, #0
 800590a:	930a      	str	r3, [sp, #40]	; 0x28
 800590c:	4b22      	ldr	r3, [pc, #136]	; (8005998 <exp+0xd4>)
 800590e:	9404      	str	r4, [sp, #16]
 8005910:	9505      	str	r5, [sp, #20]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	b25b      	sxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d118      	bne.n	800594c <exp+0x88>
 800591a:	22e0      	movs	r2, #224	; 0xe0
 800591c:	4b22      	ldr	r3, [pc, #136]	; (80059a8 <exp+0xe4>)
 800591e:	0612      	lsls	r2, r2, #24
 8005920:	9208      	str	r2, [sp, #32]
 8005922:	9309      	str	r3, [sp, #36]	; 0x24
 8005924:	a802      	add	r0, sp, #8
 8005926:	f000 f9b5 	bl	8005c94 <matherr>
 800592a:	2800      	cmp	r0, #0
 800592c:	d014      	beq.n	8005958 <exp+0x94>
 800592e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d004      	beq.n	8005940 <exp+0x7c>
 8005936:	f7ff ff93 	bl	8005860 <__errno>
 800593a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	6003      	str	r3, [r0, #0]
 8005940:	9e08      	ldr	r6, [sp, #32]
 8005942:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005944:	0030      	movs	r0, r6
 8005946:	0039      	movs	r1, r7
 8005948:	b00d      	add	sp, #52	; 0x34
 800594a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800594c:	2000      	movs	r0, #0
 800594e:	4917      	ldr	r1, [pc, #92]	; (80059ac <exp+0xe8>)
 8005950:	9008      	str	r0, [sp, #32]
 8005952:	9109      	str	r1, [sp, #36]	; 0x24
 8005954:	2b02      	cmp	r3, #2
 8005956:	d1e5      	bne.n	8005924 <exp+0x60>
 8005958:	f7ff ff82 	bl	8005860 <__errno>
 800595c:	2322      	movs	r3, #34	; 0x22
 800595e:	6003      	str	r3, [r0, #0]
 8005960:	e7e5      	b.n	800592e <exp+0x6a>
 8005962:	4a13      	ldr	r2, [pc, #76]	; (80059b0 <exp+0xec>)
 8005964:	4b13      	ldr	r3, [pc, #76]	; (80059b4 <exp+0xf0>)
 8005966:	0020      	movs	r0, r4
 8005968:	0029      	movs	r1, r5
 800596a:	f7fa fc6f 	bl	800024c <__aeabi_dcmplt>
 800596e:	2800      	cmp	r0, #0
 8005970:	d0e8      	beq.n	8005944 <exp+0x80>
 8005972:	2304      	movs	r3, #4
 8005974:	9302      	str	r3, [sp, #8]
 8005976:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <exp+0xe0>)
 8005978:	2200      	movs	r2, #0
 800597a:	9303      	str	r3, [sp, #12]
 800597c:	9b01      	ldr	r3, [sp, #4]
 800597e:	9406      	str	r4, [sp, #24]
 8005980:	9507      	str	r5, [sp, #28]
 8005982:	930a      	str	r3, [sp, #40]	; 0x28
 8005984:	2300      	movs	r3, #0
 8005986:	9208      	str	r2, [sp, #32]
 8005988:	9309      	str	r3, [sp, #36]	; 0x24
 800598a:	4b03      	ldr	r3, [pc, #12]	; (8005998 <exp+0xd4>)
 800598c:	9404      	str	r4, [sp, #16]
 800598e:	9505      	str	r5, [sp, #20]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	b25b      	sxtb	r3, r3
 8005994:	e7de      	b.n	8005954 <exp+0x90>
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	20000098 	.word	0x20000098
 800599c:	fefa39ef 	.word	0xfefa39ef
 80059a0:	40862e42 	.word	0x40862e42
 80059a4:	08005e38 	.word	0x08005e38
 80059a8:	47efffff 	.word	0x47efffff
 80059ac:	7ff00000 	.word	0x7ff00000
 80059b0:	d52d3051 	.word	0xd52d3051
 80059b4:	c0874910 	.word	0xc0874910

080059b8 <__ieee754_exp>:
 80059b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ba:	004a      	lsls	r2, r1, #1
 80059bc:	0857      	lsrs	r7, r2, #1
 80059be:	4a91      	ldr	r2, [pc, #580]	; (8005c04 <__ieee754_exp+0x24c>)
 80059c0:	b089      	sub	sp, #36	; 0x24
 80059c2:	0005      	movs	r5, r0
 80059c4:	000c      	movs	r4, r1
 80059c6:	0fce      	lsrs	r6, r1, #31
 80059c8:	4297      	cmp	r7, r2
 80059ca:	d92d      	bls.n	8005a28 <__ieee754_exp+0x70>
 80059cc:	4a8e      	ldr	r2, [pc, #568]	; (8005c08 <__ieee754_exp+0x250>)
 80059ce:	4297      	cmp	r7, r2
 80059d0:	d912      	bls.n	80059f8 <__ieee754_exp+0x40>
 80059d2:	030b      	lsls	r3, r1, #12
 80059d4:	0b1b      	lsrs	r3, r3, #12
 80059d6:	4303      	orrs	r3, r0
 80059d8:	d008      	beq.n	80059ec <__ieee754_exp+0x34>
 80059da:	0002      	movs	r2, r0
 80059dc:	000b      	movs	r3, r1
 80059de:	0028      	movs	r0, r5
 80059e0:	0021      	movs	r1, r4
 80059e2:	f7fb fb9d 	bl	8001120 <__aeabi_dadd>
 80059e6:	0005      	movs	r5, r0
 80059e8:	000c      	movs	r4, r1
 80059ea:	e001      	b.n	80059f0 <__ieee754_exp+0x38>
 80059ec:	2e00      	cmp	r6, #0
 80059ee:	d118      	bne.n	8005a22 <__ieee754_exp+0x6a>
 80059f0:	0028      	movs	r0, r5
 80059f2:	0021      	movs	r1, r4
 80059f4:	b009      	add	sp, #36	; 0x24
 80059f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059f8:	4a84      	ldr	r2, [pc, #528]	; (8005c0c <__ieee754_exp+0x254>)
 80059fa:	4b85      	ldr	r3, [pc, #532]	; (8005c10 <__ieee754_exp+0x258>)
 80059fc:	f7fa fc3a 	bl	8000274 <__aeabi_dcmpgt>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d006      	beq.n	8005a12 <__ieee754_exp+0x5a>
 8005a04:	4a83      	ldr	r2, [pc, #524]	; (8005c14 <__ieee754_exp+0x25c>)
 8005a06:	4b84      	ldr	r3, [pc, #528]	; (8005c18 <__ieee754_exp+0x260>)
 8005a08:	0010      	movs	r0, r2
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	f7fc faae 	bl	8001f6c <__aeabi_dmul>
 8005a10:	e7e9      	b.n	80059e6 <__ieee754_exp+0x2e>
 8005a12:	4a82      	ldr	r2, [pc, #520]	; (8005c1c <__ieee754_exp+0x264>)
 8005a14:	4b82      	ldr	r3, [pc, #520]	; (8005c20 <__ieee754_exp+0x268>)
 8005a16:	0028      	movs	r0, r5
 8005a18:	0021      	movs	r1, r4
 8005a1a:	f7fa fc17 	bl	800024c <__aeabi_dcmplt>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d006      	beq.n	8005a30 <__ieee754_exp+0x78>
 8005a22:	2500      	movs	r5, #0
 8005a24:	002c      	movs	r4, r5
 8005a26:	e7e3      	b.n	80059f0 <__ieee754_exp+0x38>
 8005a28:	4b7e      	ldr	r3, [pc, #504]	; (8005c24 <__ieee754_exp+0x26c>)
 8005a2a:	429f      	cmp	r7, r3
 8005a2c:	d800      	bhi.n	8005a30 <__ieee754_exp+0x78>
 8005a2e:	e0a1      	b.n	8005b74 <__ieee754_exp+0x1bc>
 8005a30:	4b7d      	ldr	r3, [pc, #500]	; (8005c28 <__ieee754_exp+0x270>)
 8005a32:	00f2      	lsls	r2, r6, #3
 8005a34:	9201      	str	r2, [sp, #4]
 8005a36:	429f      	cmp	r7, r3
 8005a38:	d873      	bhi.n	8005b22 <__ieee754_exp+0x16a>
 8005a3a:	4b7c      	ldr	r3, [pc, #496]	; (8005c2c <__ieee754_exp+0x274>)
 8005a3c:	0028      	movs	r0, r5
 8005a3e:	189b      	adds	r3, r3, r2
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	0021      	movs	r1, r4
 8005a46:	f7fc fd03 	bl	8002450 <__aeabi_dsub>
 8005a4a:	2501      	movs	r5, #1
 8005a4c:	4b78      	ldr	r3, [pc, #480]	; (8005c30 <__ieee754_exp+0x278>)
 8005a4e:	00f2      	lsls	r2, r6, #3
 8005a50:	189b      	adds	r3, r3, r2
 8005a52:	1bad      	subs	r5, r5, r6
 8005a54:	9002      	str	r0, [sp, #8]
 8005a56:	9103      	str	r1, [sp, #12]
 8005a58:	685c      	ldr	r4, [r3, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	9304      	str	r3, [sp, #16]
 8005a5e:	9405      	str	r4, [sp, #20]
 8005a60:	1bab      	subs	r3, r5, r6
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	9a04      	ldr	r2, [sp, #16]
 8005a66:	9b05      	ldr	r3, [sp, #20]
 8005a68:	9802      	ldr	r0, [sp, #8]
 8005a6a:	9903      	ldr	r1, [sp, #12]
 8005a6c:	f7fc fcf0 	bl	8002450 <__aeabi_dsub>
 8005a70:	0005      	movs	r5, r0
 8005a72:	000c      	movs	r4, r1
 8005a74:	002a      	movs	r2, r5
 8005a76:	0023      	movs	r3, r4
 8005a78:	0028      	movs	r0, r5
 8005a7a:	0021      	movs	r1, r4
 8005a7c:	f7fc fa76 	bl	8001f6c <__aeabi_dmul>
 8005a80:	0006      	movs	r6, r0
 8005a82:	000f      	movs	r7, r1
 8005a84:	4a6b      	ldr	r2, [pc, #428]	; (8005c34 <__ieee754_exp+0x27c>)
 8005a86:	4b6c      	ldr	r3, [pc, #432]	; (8005c38 <__ieee754_exp+0x280>)
 8005a88:	f7fc fa70 	bl	8001f6c <__aeabi_dmul>
 8005a8c:	4a6b      	ldr	r2, [pc, #428]	; (8005c3c <__ieee754_exp+0x284>)
 8005a8e:	4b6c      	ldr	r3, [pc, #432]	; (8005c40 <__ieee754_exp+0x288>)
 8005a90:	f7fc fcde 	bl	8002450 <__aeabi_dsub>
 8005a94:	0032      	movs	r2, r6
 8005a96:	003b      	movs	r3, r7
 8005a98:	f7fc fa68 	bl	8001f6c <__aeabi_dmul>
 8005a9c:	4a69      	ldr	r2, [pc, #420]	; (8005c44 <__ieee754_exp+0x28c>)
 8005a9e:	4b6a      	ldr	r3, [pc, #424]	; (8005c48 <__ieee754_exp+0x290>)
 8005aa0:	f7fb fb3e 	bl	8001120 <__aeabi_dadd>
 8005aa4:	0032      	movs	r2, r6
 8005aa6:	003b      	movs	r3, r7
 8005aa8:	f7fc fa60 	bl	8001f6c <__aeabi_dmul>
 8005aac:	4a67      	ldr	r2, [pc, #412]	; (8005c4c <__ieee754_exp+0x294>)
 8005aae:	4b68      	ldr	r3, [pc, #416]	; (8005c50 <__ieee754_exp+0x298>)
 8005ab0:	f7fc fcce 	bl	8002450 <__aeabi_dsub>
 8005ab4:	0032      	movs	r2, r6
 8005ab6:	003b      	movs	r3, r7
 8005ab8:	f7fc fa58 	bl	8001f6c <__aeabi_dmul>
 8005abc:	4a65      	ldr	r2, [pc, #404]	; (8005c54 <__ieee754_exp+0x29c>)
 8005abe:	4b66      	ldr	r3, [pc, #408]	; (8005c58 <__ieee754_exp+0x2a0>)
 8005ac0:	f7fb fb2e 	bl	8001120 <__aeabi_dadd>
 8005ac4:	0032      	movs	r2, r6
 8005ac6:	003b      	movs	r3, r7
 8005ac8:	f7fc fa50 	bl	8001f6c <__aeabi_dmul>
 8005acc:	0002      	movs	r2, r0
 8005ace:	000b      	movs	r3, r1
 8005ad0:	0028      	movs	r0, r5
 8005ad2:	0021      	movs	r1, r4
 8005ad4:	f7fc fcbc 	bl	8002450 <__aeabi_dsub>
 8005ad8:	000b      	movs	r3, r1
 8005ada:	0002      	movs	r2, r0
 8005adc:	0006      	movs	r6, r0
 8005ade:	000f      	movs	r7, r1
 8005ae0:	0028      	movs	r0, r5
 8005ae2:	0021      	movs	r1, r4
 8005ae4:	f7fc fa42 	bl	8001f6c <__aeabi_dmul>
 8005ae8:	9b01      	ldr	r3, [sp, #4]
 8005aea:	9006      	str	r0, [sp, #24]
 8005aec:	9107      	str	r1, [sp, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d155      	bne.n	8005b9e <__ieee754_exp+0x1e6>
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	2200      	movs	r2, #0
 8005af6:	05db      	lsls	r3, r3, #23
 8005af8:	0030      	movs	r0, r6
 8005afa:	0039      	movs	r1, r7
 8005afc:	f7fc fca8 	bl	8002450 <__aeabi_dsub>
 8005b00:	0002      	movs	r2, r0
 8005b02:	000b      	movs	r3, r1
 8005b04:	9806      	ldr	r0, [sp, #24]
 8005b06:	9907      	ldr	r1, [sp, #28]
 8005b08:	f7fb fe26 	bl	8001758 <__aeabi_ddiv>
 8005b0c:	002a      	movs	r2, r5
 8005b0e:	0023      	movs	r3, r4
 8005b10:	f7fc fc9e 	bl	8002450 <__aeabi_dsub>
 8005b14:	0002      	movs	r2, r0
 8005b16:	000b      	movs	r3, r1
 8005b18:	2000      	movs	r0, #0
 8005b1a:	4950      	ldr	r1, [pc, #320]	; (8005c5c <__ieee754_exp+0x2a4>)
 8005b1c:	f7fc fc98 	bl	8002450 <__aeabi_dsub>
 8005b20:	e761      	b.n	80059e6 <__ieee754_exp+0x2e>
 8005b22:	9b01      	ldr	r3, [sp, #4]
 8005b24:	4f4e      	ldr	r7, [pc, #312]	; (8005c60 <__ieee754_exp+0x2a8>)
 8005b26:	4a4f      	ldr	r2, [pc, #316]	; (8005c64 <__ieee754_exp+0x2ac>)
 8005b28:	18ff      	adds	r7, r7, r3
 8005b2a:	0028      	movs	r0, r5
 8005b2c:	4b4e      	ldr	r3, [pc, #312]	; (8005c68 <__ieee754_exp+0x2b0>)
 8005b2e:	0021      	movs	r1, r4
 8005b30:	f7fc fa1c 	bl	8001f6c <__aeabi_dmul>
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f7fb faf2 	bl	8001120 <__aeabi_dadd>
 8005b3c:	f7fc ffd0 	bl	8002ae0 <__aeabi_d2iz>
 8005b40:	9001      	str	r0, [sp, #4]
 8005b42:	f7fd f803 	bl	8002b4c <__aeabi_i2d>
 8005b46:	4a49      	ldr	r2, [pc, #292]	; (8005c6c <__ieee754_exp+0x2b4>)
 8005b48:	4b49      	ldr	r3, [pc, #292]	; (8005c70 <__ieee754_exp+0x2b8>)
 8005b4a:	0006      	movs	r6, r0
 8005b4c:	000f      	movs	r7, r1
 8005b4e:	f7fc fa0d 	bl	8001f6c <__aeabi_dmul>
 8005b52:	0002      	movs	r2, r0
 8005b54:	000b      	movs	r3, r1
 8005b56:	0028      	movs	r0, r5
 8005b58:	0021      	movs	r1, r4
 8005b5a:	f7fc fc79 	bl	8002450 <__aeabi_dsub>
 8005b5e:	4a45      	ldr	r2, [pc, #276]	; (8005c74 <__ieee754_exp+0x2bc>)
 8005b60:	9002      	str	r0, [sp, #8]
 8005b62:	9103      	str	r1, [sp, #12]
 8005b64:	4b44      	ldr	r3, [pc, #272]	; (8005c78 <__ieee754_exp+0x2c0>)
 8005b66:	0030      	movs	r0, r6
 8005b68:	0039      	movs	r1, r7
 8005b6a:	f7fc f9ff 	bl	8001f6c <__aeabi_dmul>
 8005b6e:	9004      	str	r0, [sp, #16]
 8005b70:	9105      	str	r1, [sp, #20]
 8005b72:	e777      	b.n	8005a64 <__ieee754_exp+0xac>
 8005b74:	4b41      	ldr	r3, [pc, #260]	; (8005c7c <__ieee754_exp+0x2c4>)
 8005b76:	429f      	cmp	r7, r3
 8005b78:	d80c      	bhi.n	8005b94 <__ieee754_exp+0x1dc>
 8005b7a:	4a26      	ldr	r2, [pc, #152]	; (8005c14 <__ieee754_exp+0x25c>)
 8005b7c:	4b26      	ldr	r3, [pc, #152]	; (8005c18 <__ieee754_exp+0x260>)
 8005b7e:	f7fb facf 	bl	8001120 <__aeabi_dadd>
 8005b82:	2200      	movs	r2, #0
 8005b84:	4b35      	ldr	r3, [pc, #212]	; (8005c5c <__ieee754_exp+0x2a4>)
 8005b86:	f7fa fb75 	bl	8000274 <__aeabi_dcmpgt>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d005      	beq.n	8005b9a <__ieee754_exp+0x1e2>
 8005b8e:	2200      	movs	r2, #0
 8005b90:	4b32      	ldr	r3, [pc, #200]	; (8005c5c <__ieee754_exp+0x2a4>)
 8005b92:	e724      	b.n	80059de <__ieee754_exp+0x26>
 8005b94:	2300      	movs	r3, #0
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	e76c      	b.n	8005a74 <__ieee754_exp+0xbc>
 8005b9a:	9001      	str	r0, [sp, #4]
 8005b9c:	e76a      	b.n	8005a74 <__ieee754_exp+0xbc>
 8005b9e:	2180      	movs	r1, #128	; 0x80
 8005ba0:	0032      	movs	r2, r6
 8005ba2:	003b      	movs	r3, r7
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	05c9      	lsls	r1, r1, #23
 8005ba8:	f7fc fc52 	bl	8002450 <__aeabi_dsub>
 8005bac:	0002      	movs	r2, r0
 8005bae:	000b      	movs	r3, r1
 8005bb0:	9806      	ldr	r0, [sp, #24]
 8005bb2:	9907      	ldr	r1, [sp, #28]
 8005bb4:	f7fb fdd0 	bl	8001758 <__aeabi_ddiv>
 8005bb8:	0002      	movs	r2, r0
 8005bba:	000b      	movs	r3, r1
 8005bbc:	9804      	ldr	r0, [sp, #16]
 8005bbe:	9905      	ldr	r1, [sp, #20]
 8005bc0:	f7fc fc46 	bl	8002450 <__aeabi_dsub>
 8005bc4:	9a02      	ldr	r2, [sp, #8]
 8005bc6:	9b03      	ldr	r3, [sp, #12]
 8005bc8:	f7fc fc42 	bl	8002450 <__aeabi_dsub>
 8005bcc:	0002      	movs	r2, r0
 8005bce:	000b      	movs	r3, r1
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	4922      	ldr	r1, [pc, #136]	; (8005c5c <__ieee754_exp+0x2a4>)
 8005bd4:	f7fc fc3c 	bl	8002450 <__aeabi_dsub>
 8005bd8:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <__ieee754_exp+0x2c8>)
 8005bda:	9a01      	ldr	r2, [sp, #4]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	db05      	blt.n	8005bec <__ieee754_exp+0x234>
 8005be0:	9c01      	ldr	r4, [sp, #4]
 8005be2:	0005      	movs	r5, r0
 8005be4:	0526      	lsls	r6, r4, #20
 8005be6:	1873      	adds	r3, r6, r1
 8005be8:	001c      	movs	r4, r3
 8005bea:	e701      	b.n	80059f0 <__ieee754_exp+0x38>
 8005bec:	25fa      	movs	r5, #250	; 0xfa
 8005bee:	00ad      	lsls	r5, r5, #2
 8005bf0:	46ac      	mov	ip, r5
 8005bf2:	9c01      	ldr	r4, [sp, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	4464      	add	r4, ip
 8005bf8:	0526      	lsls	r6, r4, #20
 8005bfa:	1873      	adds	r3, r6, r1
 8005bfc:	0019      	movs	r1, r3
 8005bfe:	23b8      	movs	r3, #184	; 0xb8
 8005c00:	045b      	lsls	r3, r3, #17
 8005c02:	e703      	b.n	8005a0c <__ieee754_exp+0x54>
 8005c04:	40862e41 	.word	0x40862e41
 8005c08:	7fefffff 	.word	0x7fefffff
 8005c0c:	fefa39ef 	.word	0xfefa39ef
 8005c10:	40862e42 	.word	0x40862e42
 8005c14:	8800759c 	.word	0x8800759c
 8005c18:	7e37e43c 	.word	0x7e37e43c
 8005c1c:	d52d3051 	.word	0xd52d3051
 8005c20:	c0874910 	.word	0xc0874910
 8005c24:	3fd62e42 	.word	0x3fd62e42
 8005c28:	3ff0a2b1 	.word	0x3ff0a2b1
 8005c2c:	08005e50 	.word	0x08005e50
 8005c30:	08005e60 	.word	0x08005e60
 8005c34:	72bea4d0 	.word	0x72bea4d0
 8005c38:	3e663769 	.word	0x3e663769
 8005c3c:	c5d26bf1 	.word	0xc5d26bf1
 8005c40:	3ebbbd41 	.word	0x3ebbbd41
 8005c44:	af25de2c 	.word	0xaf25de2c
 8005c48:	3f11566a 	.word	0x3f11566a
 8005c4c:	16bebd93 	.word	0x16bebd93
 8005c50:	3f66c16c 	.word	0x3f66c16c
 8005c54:	5555553e 	.word	0x5555553e
 8005c58:	3fc55555 	.word	0x3fc55555
 8005c5c:	3ff00000 	.word	0x3ff00000
 8005c60:	08005e40 	.word	0x08005e40
 8005c64:	652b82fe 	.word	0x652b82fe
 8005c68:	3ff71547 	.word	0x3ff71547
 8005c6c:	fee00000 	.word	0xfee00000
 8005c70:	3fe62e42 	.word	0x3fe62e42
 8005c74:	35793c76 	.word	0x35793c76
 8005c78:	3dea39ef 	.word	0x3dea39ef
 8005c7c:	3e2fffff 	.word	0x3e2fffff
 8005c80:	fffffc03 	.word	0xfffffc03

08005c84 <finite>:
 8005c84:	0048      	lsls	r0, r1, #1
 8005c86:	4b02      	ldr	r3, [pc, #8]	; (8005c90 <finite+0xc>)
 8005c88:	0840      	lsrs	r0, r0, #1
 8005c8a:	18c0      	adds	r0, r0, r3
 8005c8c:	0fc0      	lsrs	r0, r0, #31
 8005c8e:	4770      	bx	lr
 8005c90:	80100000 	.word	0x80100000

08005c94 <matherr>:
 8005c94:	2000      	movs	r0, #0
 8005c96:	4770      	bx	lr

08005c98 <_init>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	46c0      	nop			; (mov r8, r8)
 8005c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9e:	bc08      	pop	{r3}
 8005ca0:	469e      	mov	lr, r3
 8005ca2:	4770      	bx	lr

08005ca4 <_fini>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005caa:	bc08      	pop	{r3}
 8005cac:	469e      	mov	lr, r3
 8005cae:	4770      	bx	lr
