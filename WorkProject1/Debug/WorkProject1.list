
WorkProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000467c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b0  080048b0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080048b0  080048b0  000148b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048b8  080048b8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048bc  080048bc  000148bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080048c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000090  08004950  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004950  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008196  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000176d  00000000  00000000  00028256  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000650  00000000  00000000  000299c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000588  00000000  00000000  0002a018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020ccc  00000000  00000000  0002a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000666f  00000000  00000000  0004b26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c47ed  00000000  00000000  000518db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001160c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc0  00000000  00000000  00116144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047f4 	.word	0x080047f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080047f4 	.word	0x080047f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <writeSPI>:
uint32_t  phaseVal=0;  // Phase Tuning Value
uint8_t WKNOWN=0;      // Flag Variable
// -------------------------------- Functions --------------------------------

// ------------------------------------------------ Software SPI Function
void writeSPI(uint16_t word) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 16 ; i++) {
 8000da6:	2300      	movs	r3, #0
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	e020      	b.n	8000dee <writeSPI+0x52>
          if(word & 0x8000) HAL_GPIO_WritePin(AD9833PORT,AD9833DATA,GPIO_PIN_SET);   //bit=1, Set High
 8000dac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	da05      	bge.n	8000dc0 <writeSPI+0x24>
 8000db4:	2201      	movs	r2, #1
 8000db6:	2140      	movs	r1, #64	; 0x40
 8000db8:	4813      	ldr	r0, [pc, #76]	; (8000e08 <writeSPI+0x6c>)
 8000dba:	f002 fc4b 	bl	8003654 <HAL_GPIO_WritePin>
 8000dbe:	e004      	b.n	8000dca <writeSPI+0x2e>
		else HAL_GPIO_WritePin(AD9833PORT,AD9833DATA,GPIO_PIN_RESET);        //bit=0, Set Low
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2140      	movs	r1, #64	; 0x40
 8000dc4:	4810      	ldr	r0, [pc, #64]	; (8000e08 <writeSPI+0x6c>)
 8000dc6:	f002 fc45 	bl	8003654 <HAL_GPIO_WritePin>
		ASM_NOP();
 8000dca:	bf00      	nop
		HAL_GPIO_WritePin(AD9833PORT,AD9833SCK,GPIO_PIN_RESET);             //Data is valid on falling edge
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2120      	movs	r1, #32
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <writeSPI+0x6c>)
 8000dd2:	f002 fc3f 	bl	8003654 <HAL_GPIO_WritePin>
		ASM_NOP();
 8000dd6:	bf00      	nop
		HAL_GPIO_WritePin(AD9833PORT,AD9833SCK,GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2120      	movs	r1, #32
 8000ddc:	480a      	ldr	r0, [pc, #40]	; (8000e08 <writeSPI+0x6c>)
 8000dde:	f002 fc39 	bl	8003654 <HAL_GPIO_WritePin>
		word = word<<1; //Shift left by 1 bit
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 16 ; i++) {
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	3301      	adds	r3, #1
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d9db      	bls.n	8000dac <writeSPI+0x10>
        }
	HAL_GPIO_WritePin(AD9833PORT,AD9833DATA,GPIO_PIN_RESET);                    //Idle low
 8000df4:	2200      	movs	r2, #0
 8000df6:	2140      	movs	r1, #64	; 0x40
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <writeSPI+0x6c>)
 8000dfa:	f002 fc2b 	bl	8003654 <HAL_GPIO_WritePin>
	ASM_NOP();
 8000dfe:	bf00      	nop
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40020000 	.word	0x40020000

08000e0c <AD9833_SetWave>:

// ------------------------------------------------ Sets Output Wave Type
void AD9833_SetWave(uint16_t Wave){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	80fb      	strh	r3, [r7, #6]

  switch(Wave){
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d016      	beq.n	8000e4a <AD9833_SetWave+0x3e>
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d026      	beq.n	8000e6e <AD9833_SetWave+0x62>
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d000      	beq.n	8000e26 <AD9833_SetWave+0x1a>
    writeSPI(0x2002); // Value for Triangle Wave
    HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET);
    WKNOWN=2;
    break;
  default:
    break;
 8000e24:	e035      	b.n	8000e92 <AD9833_SetWave+0x86>
  HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	481c      	ldr	r0, [pc, #112]	; (8000e9c <AD9833_SetWave+0x90>)
 8000e2c:	f002 fc12 	bl	8003654 <HAL_GPIO_WritePin>
    writeSPI(0x2000); // Value for Sinusoidal Wave
 8000e30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e34:	f7ff ffb2 	bl	8000d9c <writeSPI>
    HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2180      	movs	r1, #128	; 0x80
 8000e3c:	4817      	ldr	r0, [pc, #92]	; (8000e9c <AD9833_SetWave+0x90>)
 8000e3e:	f002 fc09 	bl	8003654 <HAL_GPIO_WritePin>
    WKNOWN=0;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <AD9833_SetWave+0x94>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
    break;
 8000e48:	e023      	b.n	8000e92 <AD9833_SetWave+0x86>
     HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	4813      	ldr	r0, [pc, #76]	; (8000e9c <AD9833_SetWave+0x90>)
 8000e50:	f002 fc00 	bl	8003654 <HAL_GPIO_WritePin>
    writeSPI(0x2028); // Value for Square Wave
 8000e54:	f242 0028 	movw	r0, #8232	; 0x2028
 8000e58:	f7ff ffa0 	bl	8000d9c <writeSPI>
    HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	480e      	ldr	r0, [pc, #56]	; (8000e9c <AD9833_SetWave+0x90>)
 8000e62:	f002 fbf7 	bl	8003654 <HAL_GPIO_WritePin>
    WKNOWN=1;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <AD9833_SetWave+0x94>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
    break;
 8000e6c:	e011      	b.n	8000e92 <AD9833_SetWave+0x86>
        HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2180      	movs	r1, #128	; 0x80
 8000e72:	480a      	ldr	r0, [pc, #40]	; (8000e9c <AD9833_SetWave+0x90>)
 8000e74:	f002 fbee 	bl	8003654 <HAL_GPIO_WritePin>
    writeSPI(0x2002); // Value for Triangle Wave
 8000e78:	f242 0002 	movw	r0, #8194	; 0x2002
 8000e7c:	f7ff ff8e 	bl	8000d9c <writeSPI>
    HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <AD9833_SetWave+0x90>)
 8000e86:	f002 fbe5 	bl	8003654 <HAL_GPIO_WritePin>
    WKNOWN=2;
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <AD9833_SetWave+0x94>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	701a      	strb	r2, [r3, #0]
    break;
 8000e90:	bf00      	nop
  }
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	200000b4 	.word	0x200000b4
 8000ea4:	00000000 	.word	0x00000000

08000ea8 <AD9833_SetWaveData>:

// ------------------------------------------------ Sets Wave Frequency & Phase (In Degree) In PHASE0 & FREQ0 Registers
void AD9833_SetWaveData(float Frequency,float Phase){
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eb2:	edc7 0a00 	vstr	s1, [r7]
ASM_NOP();
 8000eb6:	bf00      	nop

 // ---------- Tuning Word for Phase ( 0 - 360 Degree )
 if(Phase<0)Phase=0; // Changing Phase Value to Positive
 8000eb8:	edd7 7a00 	vldr	s15, [r7]
 8000ebc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec4:	d502      	bpl.n	8000ecc <AD9833_SetWaveData+0x24>
 8000ec6:	f04f 0300 	mov.w	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
 if(Phase>360)Phase=360; // Maximum value For Phase (In Degree)
 8000ecc:	edd7 7a00 	vldr	s15, [r7]
 8000ed0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001008 <AD9833_SetWaveData+0x160>
 8000ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	dd01      	ble.n	8000ee2 <AD9833_SetWaveData+0x3a>
 8000ede:	4b4b      	ldr	r3, [pc, #300]	; (800100c <AD9833_SetWaveData+0x164>)
 8000ee0:	603b      	str	r3, [r7, #0]
 phaseVal  = ((int)(Phase*(4096/360)))|0XC000;  // 4096/360 = 11.37 change per Degree for Register And using 0xC000 which is Phase 0 Register Address
 8000ee2:	edd7 7a00 	vldr	s15, [r7]
 8000ee6:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8000eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ef2:	ee17 3a90 	vmov	r3, s15
 8000ef6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b44      	ldr	r3, [pc, #272]	; (8001010 <AD9833_SetWaveData+0x168>)
 8000efe:	601a      	str	r2, [r3, #0]
 
 // ---------- Tuning word for Frequency      
long freq=0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
freq=(int)(((Frequency*pow(2,28))/FMCLK)+1); // Tuning Word
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff fb17 	bl	8000538 <__aeabi_f2d>
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	4b41      	ldr	r3, [pc, #260]	; (8001014 <AD9833_SetWaveData+0x16c>)
 8000f10:	f7ff fb6a 	bl	80005e8 <__aeabi_dmul>
 8000f14:	4603      	mov	r3, r0
 8000f16:	460c      	mov	r4, r1
 8000f18:	4618      	mov	r0, r3
 8000f1a:	4621      	mov	r1, r4
 8000f1c:	a338      	add	r3, pc, #224	; (adr r3, 8001000 <AD9833_SetWaveData+0x158>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fc8b 	bl	800083c <__aeabi_ddiv>
 8000f26:	4603      	mov	r3, r0
 8000f28:	460c      	mov	r4, r1
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	4b39      	ldr	r3, [pc, #228]	; (8001018 <AD9833_SetWaveData+0x170>)
 8000f34:	f7ff f9a2 	bl	800027c <__adddf3>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	460c      	mov	r4, r1
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	4621      	mov	r1, r4
 8000f40:	f7ff fd64 	bl	8000a0c <__aeabi_d2iz>
 8000f44:	4603      	mov	r3, r0
 8000f46:	60fb      	str	r3, [r7, #12]
FRQHW=(int)((freq & 0xFFFC000) >> 14); // FREQ MSB
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	139b      	asrs	r3, r3, #14
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	4b31      	ldr	r3, [pc, #196]	; (800101c <AD9833_SetWaveData+0x174>)
 8000f56:	801a      	strh	r2, [r3, #0]
FRQLW=(int)(freq & 0x3FFF);  // FREQ LSB 
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <AD9833_SetWaveData+0x178>)
 8000f64:	801a      	strh	r2, [r3, #0]
FRQLW |= 0x4000;
 8000f66:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <AD9833_SetWaveData+0x178>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <AD9833_SetWaveData+0x178>)
 8000f72:	801a      	strh	r2, [r3, #0]
FRQHW |= 0x4000; 
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <AD9833_SetWaveData+0x174>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b27      	ldr	r3, [pc, #156]	; (800101c <AD9833_SetWaveData+0x174>)
 8000f80:	801a      	strh	r2, [r3, #0]
 // ------------------------------------------------ Writing DATA
 HAL_GPIO_WritePin(AD9833PORT,AD9833DATA,GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2140      	movs	r1, #64	; 0x40
 8000f86:	4827      	ldr	r0, [pc, #156]	; (8001024 <AD9833_SetWaveData+0x17c>)
 8000f88:	f002 fb64 	bl	8003654 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(AD9833PORT,AD9833SCK,GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4824      	ldr	r0, [pc, #144]	; (8001024 <AD9833_SetWaveData+0x17c>)
 8000f92:	f002 fb5f 	bl	8003654 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET);  
 8000f96:	2201      	movs	r2, #1
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	4822      	ldr	r0, [pc, #136]	; (8001024 <AD9833_SetWaveData+0x17c>)
 8000f9c:	f002 fb5a 	bl	8003654 <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_RESET); //low = selected
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	481f      	ldr	r0, [pc, #124]	; (8001024 <AD9833_SetWaveData+0x17c>)
 8000fa6:	f002 fb55 	bl	8003654 <HAL_GPIO_WritePin>
	ASM_NOP();
 8000faa:	bf00      	nop
	writeSPI(0x2100); // enable 16bit words and set reset bit
 8000fac:	f44f 5004 	mov.w	r0, #8448	; 0x2100
 8000fb0:	f7ff fef4 	bl	8000d9c <writeSPI>
	writeSPI(FRQLW);
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <AD9833_SetWaveData+0x178>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff feef 	bl	8000d9c <writeSPI>
	writeSPI(FRQHW);
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <AD9833_SetWaveData+0x174>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff feea 	bl	8000d9c <writeSPI>
        writeSPI(phaseVal);
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <AD9833_SetWaveData+0x168>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fee4 	bl	8000d9c <writeSPI>
	writeSPI(0x2000); // clear reset bit 
 8000fd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fd8:	f7ff fee0 	bl	8000d9c <writeSPI>
	ASM_NOP();
 8000fdc:	bf00      	nop
	HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET); //high = deselected 
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	4810      	ldr	r0, [pc, #64]	; (8001024 <AD9833_SetWaveData+0x17c>)
 8000fe4:	f002 fb36 	bl	8003654 <HAL_GPIO_WritePin>
AD9833_SetWave(WKNOWN);
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <AD9833_SetWaveData+0x180>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff0c 	bl	8000e0c <AD9833_SetWave>
ASM_NOP();
 8000ff4:	bf00      	nop
return;
 8000ff6:	bf00      	nop
}
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	00000000 	.word	0x00000000
 8001004:	4177d784 	.word	0x4177d784
 8001008:	43b40000 	.word	0x43b40000
 800100c:	43b40000 	.word	0x43b40000
 8001010:	200000b0 	.word	0x200000b0
 8001014:	41b00000 	.word	0x41b00000
 8001018:	3ff00000 	.word	0x3ff00000
 800101c:	200000ae 	.word	0x200000ae
 8001020:	200000ac 	.word	0x200000ac
 8001024:	40020000 	.word	0x40020000
 8001028:	200000b4 	.word	0x200000b4

0800102c <AD9833_Init>:

// ------------------------------------------------ Initializing AD9833
void AD9833_Init(uint16_t WaveType,float FRQ,float Phase){
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	ed87 0a02 	vstr	s0, [r7, #8]
 8001038:	edc7 0a01 	vstr	s1, [r7, #4]
 800103c:	81fb      	strh	r3, [r7, #14]

HAL_GPIO_WritePin(AD9833PORT,AD9833DATA,GPIO_PIN_SET); // Set All SPI pings to High
 800103e:	2201      	movs	r2, #1
 8001040:	2140      	movs	r1, #64	; 0x40
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <AD9833_Init+0x4c>)
 8001044:	f002 fb06 	bl	8003654 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(AD9833PORT,AD9833SCK,GPIO_PIN_SET);  // Set All SPI pings to High
 8001048:	2201      	movs	r2, #1
 800104a:	2120      	movs	r1, #32
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <AD9833_Init+0x4c>)
 800104e:	f002 fb01 	bl	8003654 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET);   // Set All SPI pings to High
 8001052:	2201      	movs	r2, #1
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	4808      	ldr	r0, [pc, #32]	; (8001078 <AD9833_Init+0x4c>)
 8001058:	f002 fafc 	bl	8003654 <HAL_GPIO_WritePin>
AD9833_SetWave(WaveType);                              // Type Of Wave 
 800105c:	89fb      	ldrh	r3, [r7, #14]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fed4 	bl	8000e0c <AD9833_SetWave>
AD9833_SetWaveData(FRQ,Phase);                         // Frequency & Phase Set
 8001064:	edd7 0a01 	vldr	s1, [r7, #4]
 8001068:	ed97 0a02 	vldr	s0, [r7, #8]
 800106c:	f7ff ff1c 	bl	8000ea8 <AD9833_SetWaveData>

return;
 8001070:	bf00      	nop
}
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40020000 	.word	0x40020000

0800107c <AD9833_Reset>:

void AD9833_Reset(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <AD9833_Reset+0x28>)
 8001086:	f002 fae5 	bl	8003654 <HAL_GPIO_WritePin>
	    writeSPI(0x00C0); //
 800108a:	20c0      	movs	r0, #192	; 0xc0
 800108c:	f7ff fe86 	bl	8000d9c <writeSPI>
	    HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <AD9833_Reset+0x28>)
 8001096:	f002 fadd 	bl	8003654 <HAL_GPIO_WritePin>
	    WKNOWN=0;
 800109a:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <AD9833_Reset+0x2c>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40020000 	.word	0x40020000
 80010a8:	200000b4 	.word	0x200000b4

080010ac <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
static void LCD1602_EnablePulse(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <LCD1602_EnablePulse+0x38>)
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <LCD1602_EnablePulse+0x3c>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	2201      	movs	r2, #1
 80010ba:	4619      	mov	r1, r3
 80010bc:	f002 faca 	bl	8003654 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 80010c0:	230a      	movs	r3, #10
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f97c 	bl	80013c0 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <LCD1602_EnablePulse+0x38>)
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <LCD1602_EnablePulse+0x3c>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	4619      	mov	r1, r3
 80010d4:	f002 fabe 	bl	8003654 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 80010d8:	203c      	movs	r0, #60	; 0x3c
 80010da:	f000 f971 	bl	80013c0 <LCD1602_TIM_MicorSecDelay>
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000b8 	.word	0x200000b8
 80010e8:	200000be 	.word	0x200000be

080010ec <LCD1602_RS>:
//2) RS control
static void LCD1602_RS(bool state)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d008      	beq.n	800110e <LCD1602_RS+0x22>
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <LCD1602_RS+0x3c>)
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <LCD1602_RS+0x40>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	f002 faa4 	bl	8003654 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 800110c:	e007      	b.n	800111e <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <LCD1602_RS+0x3c>)
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <LCD1602_RS+0x40>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	f002 fa9b 	bl	8003654 <HAL_GPIO_WritePin>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200000b8 	.word	0x200000b8
 800112c:	200000bc 	.word	0x200000bc

08001130 <LCD1602_write>:

//3) Write Parallel interface
static void LCD1602_write(uint8_t byte)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8001148:	4b61      	ldr	r3, [pc, #388]	; (80012d0 <LCD1602_write+0x1a0>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d15a      	bne.n	8001206 <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001150:	4b60      	ldr	r3, [pc, #384]	; (80012d4 <LCD1602_write+0x1a4>)
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <LCD1602_write+0x1a8>)
 8001156:	8819      	ldrh	r1, [r3, #0]
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	f002 fa77 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001166:	4b5b      	ldr	r3, [pc, #364]	; (80012d4 <LCD1602_write+0x1a4>)
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	4b5c      	ldr	r3, [pc, #368]	; (80012dc <LCD1602_write+0x1ac>)
 800116c:	8819      	ldrh	r1, [r3, #0]
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	b2db      	uxtb	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	f002 fa6c 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800117c:	4b55      	ldr	r3, [pc, #340]	; (80012d4 <LCD1602_write+0x1a4>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	4b57      	ldr	r3, [pc, #348]	; (80012e0 <LCD1602_write+0x1b0>)
 8001182:	8819      	ldrh	r1, [r3, #0]
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	b2db      	uxtb	r3, r3
 800118c:	461a      	mov	r2, r3
 800118e:	f002 fa61 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001192:	4b50      	ldr	r3, [pc, #320]	; (80012d4 <LCD1602_write+0x1a4>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <LCD1602_write+0x1b4>)
 8001198:	8819      	ldrh	r1, [r3, #0]
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	f002 fa56 	bl	8003654 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80011a8:	4b4f      	ldr	r3, [pc, #316]	; (80012e8 <LCD1602_write+0x1b8>)
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	4b4f      	ldr	r3, [pc, #316]	; (80012ec <LCD1602_write+0x1bc>)
 80011ae:	8819      	ldrh	r1, [r3, #0]
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	f002 fa4b 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80011be:	4b4a      	ldr	r3, [pc, #296]	; (80012e8 <LCD1602_write+0x1b8>)
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	4b4b      	ldr	r3, [pc, #300]	; (80012f0 <LCD1602_write+0x1c0>)
 80011c4:	8819      	ldrh	r1, [r3, #0]
 80011c6:	7bbb      	ldrb	r3, [r7, #14]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	f002 fa40 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80011d4:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <LCD1602_write+0x1b8>)
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	4b46      	ldr	r3, [pc, #280]	; (80012f4 <LCD1602_write+0x1c4>)
 80011da:	8819      	ldrh	r1, [r3, #0]
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	f002 fa35 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80011ea:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <LCD1602_write+0x1b8>)
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <LCD1602_write+0x1c8>)
 80011f0:	8819      	ldrh	r1, [r3, #0]
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	f002 fa2a 	bl	8003654 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 8001200:	f7ff ff54 	bl	80010ac <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 8001204:	e05f      	b.n	80012c6 <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <LCD1602_write+0x1a0>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d15b      	bne.n	80012c6 <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <LCD1602_write+0x1b8>)
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	4b36      	ldr	r3, [pc, #216]	; (80012ec <LCD1602_write+0x1bc>)
 8001214:	8819      	ldrh	r1, [r3, #0]
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	461a      	mov	r2, r3
 8001220:	f002 fa18 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001224:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <LCD1602_write+0x1b8>)
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <LCD1602_write+0x1c0>)
 800122a:	8819      	ldrh	r1, [r3, #0]
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	f002 fa0d 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800123a:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <LCD1602_write+0x1b8>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <LCD1602_write+0x1c4>)
 8001240:	8819      	ldrh	r1, [r3, #0]
 8001242:	7bbb      	ldrb	r3, [r7, #14]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	f002 fa02 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <LCD1602_write+0x1b8>)
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <LCD1602_write+0x1c8>)
 8001256:	8819      	ldrh	r1, [r3, #0]
 8001258:	7bbb      	ldrb	r3, [r7, #14]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	f002 f9f7 	bl	8003654 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8001266:	f7ff ff21 	bl	80010ac <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <LCD1602_write+0x1b8>)
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <LCD1602_write+0x1bc>)
 8001270:	8819      	ldrh	r1, [r3, #0]
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	f002 f9ea 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <LCD1602_write+0x1b8>)
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <LCD1602_write+0x1c0>)
 8001286:	8819      	ldrh	r1, [r3, #0]
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	f002 f9df 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <LCD1602_write+0x1b8>)
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <LCD1602_write+0x1c4>)
 800129c:	8819      	ldrh	r1, [r3, #0]
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	f002 f9d4 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <LCD1602_write+0x1b8>)
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <LCD1602_write+0x1c8>)
 80012b2:	8819      	ldrh	r1, [r3, #0]
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	f002 f9c9 	bl	8003654 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 80012c2:	f7ff fef3 	bl	80010ac <LCD1602_EnablePulse>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000000 	.word	0x20000000
 80012d4:	200000c0 	.word	0x200000c0
 80012d8:	200000c4 	.word	0x200000c4
 80012dc:	200000c6 	.word	0x200000c6
 80012e0:	200000c8 	.word	0x200000c8
 80012e4:	200000ca 	.word	0x200000ca
 80012e8:	200000cc 	.word	0x200000cc
 80012ec:	200000d0 	.word	0x200000d0
 80012f0:	200000d2 	.word	0x200000d2
 80012f4:	200000d4 	.word	0x200000d4
 80012f8:	200000d6 	.word	0x200000d6
 80012fc:	00000000 	.word	0x00000000

08001300 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
static void LCD1602_TIM_Config(void)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 8001306:	1d3a      	adds	r2, r7, #4
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f002 fe06 	bl	8003f20 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d103      	bne.n	8001322 <LCD1602_TIM_Config+0x22>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 800131a:	f002 fded 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
 800131e:	61f8      	str	r0, [r7, #28]
 8001320:	e004      	b.n	800132c <LCD1602_TIM_Config+0x2c>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 8001322:	f002 fde9 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
 8001326:	4603      	mov	r3, r0
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
	}
	clockSpeed *= 0.000001;
 800132c:	69f8      	ldr	r0, [r7, #28]
 800132e:	f7ff f8e1 	bl	80004f4 <__aeabi_ui2d>
 8001332:	a321      	add	r3, pc, #132	; (adr r3, 80013b8 <LCD1602_TIM_Config+0xb8>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	f7ff f956 	bl	80005e8 <__aeabi_dmul>
 800133c:	4603      	mov	r3, r0
 800133e:	460c      	mov	r4, r1
 8001340:	4618      	mov	r0, r3
 8001342:	4621      	mov	r1, r4
 8001344:	f7ff fb8a 	bl	8000a5c <__aeabi_d2uiz>
 8001348:	4603      	mov	r3, r0
 800134a:	61fb      	str	r3, [r7, #28]
	
	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <LCD1602_TIM_Config+0xb0>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <LCD1602_TIM_Config+0xb0>)
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	6413      	str	r3, [r2, #64]	; 0x40
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <LCD1602_TIM_Config+0xb4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <LCD1602_TIM_Config+0xb4>)
 800135e:	f023 0310 	bic.w	r3, r3, #16
 8001362:	6013      	str	r3, [r2, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <LCD1602_TIM_Config+0xb4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <LCD1602_TIM_Config+0xb4>)
 800136a:	f023 0301 	bic.w	r3, r3, #1
 800136e:	6013      	str	r3, [r2, #0]
	//Update request source 
	TIM3->CR1 &= ~(1UL << 2);
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <LCD1602_TIM_Config+0xb4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <LCD1602_TIM_Config+0xb4>)
 8001376:	f023 0304 	bic.w	r3, r3, #4
 800137a:	6013      	str	r3, [r2, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);				  
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <LCD1602_TIM_Config+0xb4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <LCD1602_TIM_Config+0xb4>)
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	6013      	str	r3, [r2, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <LCD1602_TIM_Config+0xb4>)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3b01      	subs	r3, #1
 800138e:	6293      	str	r3, [r2, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <LCD1602_TIM_Config+0xb4>)
 8001392:	2209      	movs	r2, #9
 8001394:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <LCD1602_TIM_Config+0xb4>)
 8001398:	2201      	movs	r2, #1
 800139a:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <LCD1602_TIM_Config+0xb4>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <LCD1602_TIM_Config+0xb4>)
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	6113      	str	r3, [r2, #16]
}
 80013a8:	bf00      	nop
 80013aa:	3724      	adds	r7, #36	; 0x24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40000400 	.word	0x40000400
 80013b8:	a0b5ed8d 	.word	0xa0b5ed8d
 80013bc:	3eb0c6f7 	.word	0x3eb0c6f7

080013c0 <LCD1602_TIM_MicorSecDelay>:
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <LCD1602_TIM_MicorSecDelay+0x44>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <LCD1602_TIM_MicorSecDelay+0x44>)
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <LCD1602_TIM_MicorSecDelay+0x44>)
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1UL;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <LCD1602_TIM_MicorSecDelay+0x44>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a08      	ldr	r2, [pc, #32]	; (8001404 <LCD1602_TIM_MicorSecDelay+0x44>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 80013e8:	bf00      	nop
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <LCD1602_TIM_MicorSecDelay+0x44>)
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d1f9      	bne.n	80013ea <LCD1602_TIM_MicorSecDelay+0x2a>
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40000400 	.word	0x40000400

08001408 <LCD1602_writeCommand>:
//5) Write command
static void LCD1602_writeCommand(uint8_t command)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	//Set RS to 0
	LCD1602_RS(false);
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff fe6a 	bl	80010ec <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fe88 	bl	8001130 <LCD1602_write>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <LCD1602_writeData>:
//6) Write 8 bits data
void LCD1602_writeData(uint8_t data)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	//Set RS to 1
	LCD1602_RS(true);
 8001432:	2001      	movs	r0, #1
 8001434:	f7ff fe5a 	bl	80010ec <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(data);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fe78 	bl	8001130 <LCD1602_write>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <LCD1602_Begin8BIT>:
}

//Public functions
//1) LCD begin 8 bits function
void LCD1602_Begin8BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_LSBs0to3, uint16_t D0, uint16_t D1, uint16_t D2, uint16_t D3, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	460b      	mov	r3, r1
 8001454:	817b      	strh	r3, [r7, #10]
 8001456:	4613      	mov	r3, r2
 8001458:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 800145a:	4a51      	ldr	r2, [pc, #324]	; (80015a0 <LCD1602_Begin8BIT+0x158>)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 8001460:	4a50      	ldr	r2, [pc, #320]	; (80015a4 <LCD1602_Begin8BIT+0x15c>)
 8001462:	897b      	ldrh	r3, [r7, #10]
 8001464:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 8001466:	4a50      	ldr	r2, [pc, #320]	; (80015a8 <LCD1602_Begin8BIT+0x160>)
 8001468:	893b      	ldrh	r3, [r7, #8]
 800146a:	8013      	strh	r3, [r2, #0]
	PORT_LSB = PORT_LSBs0to3;
 800146c:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <LCD1602_Begin8BIT+0x164>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
	D0_PIN = D0;
 8001472:	4a4f      	ldr	r2, [pc, #316]	; (80015b0 <LCD1602_Begin8BIT+0x168>)
 8001474:	8b3b      	ldrh	r3, [r7, #24]
 8001476:	8013      	strh	r3, [r2, #0]
	D1_PIN = D1;
 8001478:	4a4e      	ldr	r2, [pc, #312]	; (80015b4 <LCD1602_Begin8BIT+0x16c>)
 800147a:	8bbb      	ldrh	r3, [r7, #28]
 800147c:	8013      	strh	r3, [r2, #0]
	D2_PIN = D2;
 800147e:	4a4e      	ldr	r2, [pc, #312]	; (80015b8 <LCD1602_Begin8BIT+0x170>)
 8001480:	8c3b      	ldrh	r3, [r7, #32]
 8001482:	8013      	strh	r3, [r2, #0]
	D3_PIN = D3;
 8001484:	4a4d      	ldr	r2, [pc, #308]	; (80015bc <LCD1602_Begin8BIT+0x174>)
 8001486:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001488:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 800148a:	4a4d      	ldr	r2, [pc, #308]	; (80015c0 <LCD1602_Begin8BIT+0x178>)
 800148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148e:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 8001490:	4a4c      	ldr	r2, [pc, #304]	; (80015c4 <LCD1602_Begin8BIT+0x17c>)
 8001492:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001494:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 8001496:	4a4c      	ldr	r2, [pc, #304]	; (80015c8 <LCD1602_Begin8BIT+0x180>)
 8001498:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800149a:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 800149c:	4a4b      	ldr	r2, [pc, #300]	; (80015cc <LCD1602_Begin8BIT+0x184>)
 800149e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80014a0:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 80014a2:	4a4b      	ldr	r2, [pc, #300]	; (80015d0 <LCD1602_Begin8BIT+0x188>)
 80014a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80014a6:	8013      	strh	r3, [r2, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 80014a8:	f7ff ff2a 	bl	8001300 <LCD1602_TIM_Config>
	//Set the mode to 8 bits
	mode_8_4_I2C = 1;
 80014ac:	4b49      	ldr	r3, [pc, #292]	; (80015d4 <LCD1602_Begin8BIT+0x18c>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
	//Function set variable to 8 bits mode
	FunctionSet = 0x38;
 80014b2:	4b49      	ldr	r3, [pc, #292]	; (80015d8 <LCD1602_Begin8BIT+0x190>)
 80014b4:	2238      	movs	r2, #56	; 0x38
 80014b6:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 80014b8:	2014      	movs	r0, #20
 80014ba:	f001 fa11 	bl	80028e0 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_writeCommand(0x30);
 80014be:	2030      	movs	r0, #48	; 0x30
 80014c0:	f7ff ffa2 	bl	8001408 <LCD1602_writeCommand>
	HAL_Delay(5);
 80014c4:	2005      	movs	r0, #5
 80014c6:	f001 fa0b 	bl	80028e0 <HAL_Delay>
	LCD1602_writeCommand(0x30);
 80014ca:	2030      	movs	r0, #48	; 0x30
 80014cc:	f7ff ff9c 	bl	8001408 <LCD1602_writeCommand>
	HAL_Delay(1);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f001 fa05 	bl	80028e0 <HAL_Delay>
	LCD1602_writeCommand(0x30);
 80014d6:	2030      	movs	r0, #48	; 0x30
 80014d8:	f7ff ff96 	bl	8001408 <LCD1602_writeCommand>
	HAL_Delay(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f001 f9ff 	bl	80028e0 <HAL_Delay>
	//3. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N | LCD_FUNCTION_DL);
 80014e2:	2038      	movs	r0, #56	; 0x38
 80014e4:	f7ff ff90 	bl	8001408 <LCD1602_writeCommand>
	//4. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80014e8:	200f      	movs	r0, #15
 80014ea:	f7ff ff8d 	bl	8001408 <LCD1602_writeCommand>
	//5. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f7ff ff8a 	bl	8001408 <LCD1602_writeCommand>
	HAL_Delay(2);
 80014f4:	2002      	movs	r0, #2
 80014f6:	f001 f9f3 	bl	80028e0 <HAL_Delay>

	/////////////////////////////////////
	// CUSTOM CHAR
	//////////////////////////////////////

	LCD1602_writeCommand(LCD_SETCGRAMADDR + 1);
 80014fa:	2041      	movs	r0, #65	; 0x41
 80014fc:	f7ff ff84 	bl	8001408 <LCD1602_writeCommand>
	j=0;
 8001500:	4b36      	ldr	r3, [pc, #216]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
	while(j!=8)
 8001506:	e00b      	b.n	8001520 <LCD1602_Begin8BIT+0xd8>
	{
		LCD1602_writeData(backslashData[j]);
 8001508:	4b34      	ldr	r3, [pc, #208]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a34      	ldr	r2, [pc, #208]	; (80015e0 <LCD1602_Begin8BIT+0x198>)
 800150e:	5cd3      	ldrb	r3, [r2, r3]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff89 	bl	8001428 <LCD1602_writeData>
		j++;
 8001516:	4b31      	ldr	r3, [pc, #196]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	4a2f      	ldr	r2, [pc, #188]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 800151e:	6013      	str	r3, [r2, #0]
	while(j!=8)
 8001520:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b08      	cmp	r3, #8
 8001526:	d1ef      	bne.n	8001508 <LCD1602_Begin8BIT+0xc0>
	}
	HAL_Delay(2);
 8001528:	2002      	movs	r0, #2
 800152a:	f001 f9d9 	bl	80028e0 <HAL_Delay>

	LCD1602_writeCommand(LCD_SETCGRAMADDR + 8);
 800152e:	2048      	movs	r0, #72	; 0x48
 8001530:	f7ff ff6a 	bl	8001408 <LCD1602_writeCommand>
	j=0;
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
	while(j!=8)
 800153a:	e00b      	b.n	8001554 <LCD1602_Begin8BIT+0x10c>
	{
		LCD1602_writeData(upsineData[j]);
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a28      	ldr	r2, [pc, #160]	; (80015e4 <LCD1602_Begin8BIT+0x19c>)
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff6f 	bl	8001428 <LCD1602_writeData>
		j++;
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	4a22      	ldr	r2, [pc, #136]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 8001552:	6013      	str	r3, [r2, #0]
	while(j!=8)
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b08      	cmp	r3, #8
 800155a:	d1ef      	bne.n	800153c <LCD1602_Begin8BIT+0xf4>
	}
	HAL_Delay(2);
 800155c:	2002      	movs	r0, #2
 800155e:	f001 f9bf 	bl	80028e0 <HAL_Delay>


	LCD1602_writeCommand(LCD_SETCGRAMADDR + 16);
 8001562:	2050      	movs	r0, #80	; 0x50
 8001564:	f7ff ff50 	bl	8001408 <LCD1602_writeCommand>
	j=0;
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
	while(j!=8)
 800156e:	e00b      	b.n	8001588 <LCD1602_Begin8BIT+0x140>
	{
		LCD1602_writeData(downsineData[j]);
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <LCD1602_Begin8BIT+0x1a0>)
 8001576:	5cd3      	ldrb	r3, [r2, r3]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff55 	bl	8001428 <LCD1602_writeData>
		j++;
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	4a15      	ldr	r2, [pc, #84]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 8001586:	6013      	str	r3, [r2, #0]
	while(j!=8)
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <LCD1602_Begin8BIT+0x194>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b08      	cmp	r3, #8
 800158e:	d1ef      	bne.n	8001570 <LCD1602_Begin8BIT+0x128>
	}
	HAL_Delay(2);
 8001590:	2002      	movs	r0, #2
 8001592:	f001 f9a5 	bl	80028e0 <HAL_Delay>

}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200000b8 	.word	0x200000b8
 80015a4:	200000bc 	.word	0x200000bc
 80015a8:	200000be 	.word	0x200000be
 80015ac:	200000c0 	.word	0x200000c0
 80015b0:	200000c4 	.word	0x200000c4
 80015b4:	200000c6 	.word	0x200000c6
 80015b8:	200000c8 	.word	0x200000c8
 80015bc:	200000ca 	.word	0x200000ca
 80015c0:	200000cc 	.word	0x200000cc
 80015c4:	200000d0 	.word	0x200000d0
 80015c8:	200000d2 	.word	0x200000d2
 80015cc:	200000d4 	.word	0x200000d4
 80015d0:	200000d6 	.word	0x200000d6
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000002 	.word	0x20000002
 80015dc:	20000118 	.word	0x20000118
 80015e0:	20000004 	.word	0x20000004
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	20000014 	.word	0x20000014

080015ec <LCD1602_print>:
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
	HAL_Delay(3);
}
//3) LCD print string
void LCD1602_print(char string[])
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e009      	b.n	800160e <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff10 	bl	8001428 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	3301      	adds	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d805      	bhi.n	8001620 <LCD1602_print+0x34>
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1ec      	bne.n	80015fa <LCD1602_print+0xe>
	}
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <LCD1602_setCursor>:
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	4613      	mov	r3, r2
 8001636:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 8001638:	79bb      	ldrb	r3, [r7, #6]
 800163a:	3b01      	subs	r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d108      	bne.n	800165c <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001650:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fed7 	bl	8001408 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}	
 800165a:	e007      	b.n	800166c <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001662:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fece 	bl	8001408 <LCD1602_writeCommand>
}	
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <LCD1602_noBlink>:
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
	HAL_Delay(3);
}
//8) Blinking cursor
void LCD1602_noBlink(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x01);
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <LCD1602_noBlink+0x20>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <LCD1602_noBlink+0x20>)
 8001684:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 8001686:	4b03      	ldr	r3, [pc, #12]	; (8001694 <LCD1602_noBlink+0x20>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff febc 	bl	8001408 <LCD1602_writeCommand>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000001 	.word	0x20000001

08001698 <LCD1602_PrintInt>:

//********** Print numbers to LCD **********//
//1. Integer

void LCD1602_PrintInt(int number)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	char numStr[16];
	sprintf(numStr,"%d", number);
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4906      	ldr	r1, [pc, #24]	; (80016c0 <LCD1602_PrintInt+0x28>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fc9d 	bl	8003fe8 <siprintf>
	LCD1602_print(numStr);
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff9a 	bl	80015ec <LCD1602_print>
}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	0800480c 	.word	0x0800480c

080016c4 <Read_ADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t Read_ADC()
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <Read_ADC+0x38>)
 80016ca:	f001 f96f 	bl	80029ac <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 100000) == HAL_OK)
 80016ce:	490c      	ldr	r1, [pc, #48]	; (8001700 <Read_ADC+0x3c>)
 80016d0:	480a      	ldr	r0, [pc, #40]	; (80016fc <Read_ADC+0x38>)
 80016d2:	f001 fa64 	bl	8002b9e <HAL_ADC_PollForConversion>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d106      	bne.n	80016ea <Read_ADC+0x26>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 80016dc:	4807      	ldr	r0, [pc, #28]	; (80016fc <Read_ADC+0x38>)
 80016de:	f001 fae2 	bl	8002ca6 <HAL_ADC_GetValue>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <Read_ADC+0x40>)
 80016e8:	801a      	strh	r2, [r3, #0]
	}
	HAL_ADC_Stop(&hadc1);
 80016ea:	4804      	ldr	r0, [pc, #16]	; (80016fc <Read_ADC+0x38>)
 80016ec:	f001 fa24 	bl	8002b38 <HAL_ADC_Stop>
	return adc_value;
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <Read_ADC+0x40>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b2db      	uxtb	r3, r3
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000120 	.word	0x20000120
 8001700:	000186a0 	.word	0x000186a0
 8001704:	200000d8 	.word	0x200000d8

08001708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08c      	sub	sp, #48	; 0x30
 800170c:	af0a      	add	r7, sp, #40	; 0x28
int main(void)
 800170e:	f107 0310 	add.w	r3, r7, #16
 8001712:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001714:	f001 f872 	bl	80027fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001718:	f000 fdb4 	bl	8002284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800171c:	f000 fe62 	bl	80023e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001720:	f000 fe0e 	bl	8002340 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	AD9833_Init(0,0,0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff fc7f 	bl	800102c <AD9833_Init>

	LCD1602_Begin8BIT(RS_GPIO_Port, RS_Pin, E_Pin, D0_GPIO_Port, D0_Pin, D1_Pin, D2_Pin, D3_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 800172e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001732:	9308      	str	r3, [sp, #32]
 8001734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001738:	9307      	str	r3, [sp, #28]
 800173a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800173e:	9306      	str	r3, [sp, #24]
 8001740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001744:	9305      	str	r3, [sp, #20]
 8001746:	4ba4      	ldr	r3, [pc, #656]	; (80019d8 <main+0x2d0>)
 8001748:	9304      	str	r3, [sp, #16]
 800174a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800174e:	9303      	str	r3, [sp, #12]
 8001750:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001754:	9302      	str	r3, [sp, #8]
 8001756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	4b9e      	ldr	r3, [pc, #632]	; (80019dc <main+0x2d4>)
 8001764:	2210      	movs	r2, #16
 8001766:	2120      	movs	r1, #32
 8001768:	489d      	ldr	r0, [pc, #628]	; (80019e0 <main+0x2d8>)
 800176a:	f7ff fe6d 	bl	8001448 <LCD1602_Begin8BIT>


	LCD1602_setCursor(1,3);
 800176e:	2103      	movs	r1, #3
 8001770:	2001      	movs	r0, #1
 8001772:	f7ff ff59 	bl	8001628 <LCD1602_setCursor>
	LCD1602_print("f=");
 8001776:	489b      	ldr	r0, [pc, #620]	; (80019e4 <main+0x2dc>)
 8001778:	f7ff ff38 	bl	80015ec <LCD1602_print>
	LCD1602_setCursor(1,11);
 800177c:	210b      	movs	r1, #11
 800177e:	2001      	movs	r0, #1
 8001780:	f7ff ff52 	bl	8001628 <LCD1602_setCursor>
	LCD1602_print("Hz");
 8001784:	4898      	ldr	r0, [pc, #608]	; (80019e8 <main+0x2e0>)
 8001786:	f7ff ff31 	bl	80015ec <LCD1602_print>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		adc_value = Read_ADC();
 800178a:	f7ff ff9b 	bl	80016c4 <Read_ADC>
 800178e:	4603      	mov	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	4b96      	ldr	r3, [pc, #600]	; (80019ec <main+0x2e4>)
 8001794:	801a      	strh	r2, [r3, #0]

		// 0 sine 1 sq 3 tri

		if(waveValue==2)
 8001796:	4b96      	ldr	r3, [pc, #600]	; (80019f0 <main+0x2e8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d103      	bne.n	80017a6 <main+0x9e>
					{
						waveChar='S';
 800179e:	4b95      	ldr	r3, [pc, #596]	; (80019f4 <main+0x2ec>)
 80017a0:	2253      	movs	r2, #83	; 0x53
 80017a2:	701a      	strb	r2, [r3, #0]
 80017a4:	e01e      	b.n	80017e4 <main+0xdc>
					}
					else if(waveValue==3)
 80017a6:	4b92      	ldr	r3, [pc, #584]	; (80019f0 <main+0x2e8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d103      	bne.n	80017b6 <main+0xae>
					{
						waveChar='K';
 80017ae:	4b91      	ldr	r3, [pc, #580]	; (80019f4 <main+0x2ec>)
 80017b0:	224b      	movs	r2, #75	; 0x4b
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e016      	b.n	80017e4 <main+0xdc>
					}
					else if(waveValue==4)
 80017b6:	4b8e      	ldr	r3, [pc, #568]	; (80019f0 <main+0x2e8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d103      	bne.n	80017c6 <main+0xbe>
								{
						waveChar='T';
 80017be:	4b8d      	ldr	r3, [pc, #564]	; (80019f4 <main+0x2ec>)
 80017c0:	2254      	movs	r2, #84	; 0x54
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	e00e      	b.n	80017e4 <main+0xdc>
								}
					else if(waveValue<2 || waveValue>4 || waveValue==0)
 80017c6:	4b8a      	ldr	r3, [pc, #552]	; (80019f0 <main+0x2e8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	dd07      	ble.n	80017de <main+0xd6>
 80017ce:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <main+0x2e8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	dc03      	bgt.n	80017de <main+0xd6>
 80017d6:	4b86      	ldr	r3, [pc, #536]	; (80019f0 <main+0x2e8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <main+0xdc>
								{
						waveChar='X';
 80017de:	4b85      	ldr	r3, [pc, #532]	; (80019f4 <main+0x2ec>)
 80017e0:	2258      	movs	r2, #88	; 0x58
 80017e2:	701a      	strb	r2, [r3, #0]
								}


		if(extTest==1)
 80017e4:	4b84      	ldr	r3, [pc, #528]	; (80019f8 <main+0x2f0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d121      	bne.n	8001830 <main+0x128>
		{

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);	// MENU 3 KOMUTLARI
 80017ec:	2201      	movs	r2, #1
 80017ee:	2110      	movs	r1, #16
 80017f0:	487a      	ldr	r0, [pc, #488]	; (80019dc <main+0x2d4>)
 80017f2:	f001 ff2f 	bl	8003654 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // BUZZER
 80017f6:	2201      	movs	r2, #1
 80017f8:	2140      	movs	r1, #64	; 0x40
 80017fa:	4878      	ldr	r0, [pc, #480]	; (80019dc <main+0x2d4>)
 80017fc:	f001 ff2a 	bl	8003654 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001800:	2064      	movs	r0, #100	; 0x64
 8001802:	f001 f86d 	bl	80028e0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // BUZZER
 8001806:	2200      	movs	r2, #0
 8001808:	2140      	movs	r1, #64	; 0x40
 800180a:	4874      	ldr	r0, [pc, #464]	; (80019dc <main+0x2d4>)
 800180c:	f001 ff22 	bl	8003654 <HAL_GPIO_WritePin>

			// START

			selectedFreq = frekansValue;
 8001810:	4b7a      	ldr	r3, [pc, #488]	; (80019fc <main+0x2f4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a7a      	ldr	r2, [pc, #488]	; (8001a00 <main+0x2f8>)
 8001816:	6013      	str	r3, [r2, #0]
			selectedWaveForm = waveValue; // 1 sine , 2 kare , 3 ücgen, 4 nosignal
 8001818:	4b75      	ldr	r3, [pc, #468]	; (80019f0 <main+0x2e8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a79      	ldr	r2, [pc, #484]	; (8001a04 <main+0x2fc>)
 800181e:	6013      	str	r3, [r2, #0]

			// KAYIT EDİLDİ
			checkLed++;
 8001820:	4b79      	ldr	r3, [pc, #484]	; (8001a08 <main+0x300>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	4a78      	ldr	r2, [pc, #480]	; (8001a08 <main+0x300>)
 8001828:	6013      	str	r3, [r2, #0]
			extTest=0;
 800182a:	4b73      	ldr	r3, [pc, #460]	; (80019f8 <main+0x2f0>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
		}

		if(selectedFreq!=frekansValue && checkLed==1)
 8001830:	4b73      	ldr	r3, [pc, #460]	; (8001a00 <main+0x2f8>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b71      	ldr	r3, [pc, #452]	; (80019fc <main+0x2f4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d04d      	beq.n	80018d8 <main+0x1d0>
 800183c:	4b72      	ldr	r3, [pc, #456]	; (8001a08 <main+0x300>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d149      	bne.n	80018d8 <main+0x1d0>
		{

			if(selectedWaveForm==2)
 8001844:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <main+0x2fc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d103      	bne.n	8001854 <main+0x14c>
			{
				waveChar='S';
 800184c:	4b69      	ldr	r3, [pc, #420]	; (80019f4 <main+0x2ec>)
 800184e:	2253      	movs	r2, #83	; 0x53
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e01a      	b.n	800188a <main+0x182>
			}
			else if(selectedWaveForm==3)
 8001854:	4b6b      	ldr	r3, [pc, #428]	; (8001a04 <main+0x2fc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d103      	bne.n	8001864 <main+0x15c>
			{
				waveChar='K';
 800185c:	4b65      	ldr	r3, [pc, #404]	; (80019f4 <main+0x2ec>)
 800185e:	224b      	movs	r2, #75	; 0x4b
 8001860:	701a      	strb	r2, [r3, #0]
 8001862:	e012      	b.n	800188a <main+0x182>
			}
			else if(selectedWaveForm==4)
 8001864:	4b67      	ldr	r3, [pc, #412]	; (8001a04 <main+0x2fc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b04      	cmp	r3, #4
 800186a:	d103      	bne.n	8001874 <main+0x16c>
						{
				waveChar='T';
 800186c:	4b61      	ldr	r3, [pc, #388]	; (80019f4 <main+0x2ec>)
 800186e:	2254      	movs	r2, #84	; 0x54
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	e00a      	b.n	800188a <main+0x182>
						}
			else if(selectedWaveForm<2 || selectedWaveForm>4 )
 8001874:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <main+0x2fc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	dd03      	ble.n	8001884 <main+0x17c>
 800187c:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <main+0x2fc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b04      	cmp	r3, #4
 8001882:	dd02      	ble.n	800188a <main+0x182>
						{
				waveChar='X';
 8001884:	4b5b      	ldr	r3, [pc, #364]	; (80019f4 <main+0x2ec>)
 8001886:	2258      	movs	r2, #88	; 0x58
 8001888:	701a      	strb	r2, [r3, #0]
						}

			LCD1602_setCursor(1,5);
 800188a:	2105      	movs	r1, #5
 800188c:	2001      	movs	r0, #1
 800188e:	f7ff fecb 	bl	8001628 <LCD1602_setCursor>
			LCD1602_PrintInt(selectedFreq);
 8001892:	4b5b      	ldr	r3, [pc, #364]	; (8001a00 <main+0x2f8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fefe 	bl	8001698 <LCD1602_PrintInt>

			LCD1602_setCursor(1,1);
 800189c:	2101      	movs	r1, #1
 800189e:	2001      	movs	r0, #1
 80018a0:	f7ff fec2 	bl	8001628 <LCD1602_setCursor>
			LCD1602_print("  ");
 80018a4:	4859      	ldr	r0, [pc, #356]	; (8001a0c <main+0x304>)
 80018a6:	f7ff fea1 	bl	80015ec <LCD1602_print>
			LCD1602_setCursor(1,1);
 80018aa:	2101      	movs	r1, #1
 80018ac:	2001      	movs	r0, #1
 80018ae:	f7ff febb 	bl	8001628 <LCD1602_setCursor>
			LCD1602_writeData(waveChar);
 80018b2:	4b50      	ldr	r3, [pc, #320]	; (80019f4 <main+0x2ec>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fdb6 	bl	8001428 <LCD1602_writeData>

			LCD1602_setCursor(2,1);
 80018bc:	2101      	movs	r1, #1
 80018be:	2002      	movs	r0, #2
 80018c0:	f7ff feb2 	bl	8001628 <LCD1602_setCursor>
			LCD1602_print("              ");
 80018c4:	4852      	ldr	r0, [pc, #328]	; (8001a10 <main+0x308>)
 80018c6:	f7ff fe91 	bl	80015ec <LCD1602_print>
			LCD1602_setCursor(2,16);
 80018ca:	2110      	movs	r1, #16
 80018cc:	2002      	movs	r0, #2
 80018ce:	f7ff feab 	bl	8001628 <LCD1602_setCursor>
			LCD1602_print(" ");
 80018d2:	4850      	ldr	r0, [pc, #320]	; (8001a14 <main+0x30c>)
 80018d4:	f7ff fe8a 	bl	80015ec <LCD1602_print>
		}

			if(selectedWaveForm==2 && checkLed==1 && selectedFreq != 0) // SINE ANIMASYON
 80018d8:	4b4a      	ldr	r3, [pc, #296]	; (8001a04 <main+0x2fc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d12b      	bne.n	8001938 <main+0x230>
 80018e0:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <main+0x300>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d127      	bne.n	8001938 <main+0x230>
 80018e8:	4b45      	ldr	r3, [pc, #276]	; (8001a00 <main+0x2f8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d023      	beq.n	8001938 <main+0x230>
			{
				for(i=0;i<15;i++)
 80018f0:	4b49      	ldr	r3, [pc, #292]	; (8001a18 <main+0x310>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e01a      	b.n	800192e <main+0x226>
								{
									LCD1602_setCursor(2,i);
 80018f8:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <main+0x310>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	2002      	movs	r0, #2
 8001900:	f7ff fe92 	bl	8001628 <LCD1602_setCursor>
									if(i%2==0)
 8001904:	4b44      	ldr	r3, [pc, #272]	; (8001a18 <main+0x310>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d103      	bne.n	8001918 <main+0x210>
									{

										LCD1602_writeData(1);
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff fd89 	bl	8001428 <LCD1602_writeData>
 8001916:	e002      	b.n	800191e <main+0x216>
									}
									else
									{

										LCD1602_writeData(2);
 8001918:	2002      	movs	r0, #2
 800191a:	f7ff fd85 	bl	8001428 <LCD1602_writeData>
									}
									HAL_Delay(100);
 800191e:	2064      	movs	r0, #100	; 0x64
 8001920:	f000 ffde 	bl	80028e0 <HAL_Delay>
				for(i=0;i<15;i++)
 8001924:	4b3c      	ldr	r3, [pc, #240]	; (8001a18 <main+0x310>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	4a3b      	ldr	r2, [pc, #236]	; (8001a18 <main+0x310>)
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <main+0x310>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b0e      	cmp	r3, #14
 8001934:	dde0      	ble.n	80018f8 <main+0x1f0>
			if(selectedWaveForm==2 && checkLed==1 && selectedFreq != 0) // SINE ANIMASYON
 8001936:	e0c2      	b.n	8001abe <main+0x3b6>
								}
			}
			else if(selectedWaveForm==4 && checkLed==1 && selectedFreq != 0) // TRG ANIMASYON
 8001938:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <main+0x2fc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b04      	cmp	r3, #4
 800193e:	d12b      	bne.n	8001998 <main+0x290>
 8001940:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <main+0x300>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d127      	bne.n	8001998 <main+0x290>
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <main+0x2f8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d023      	beq.n	8001998 <main+0x290>
			{

				for(i=0;i<15;i++)
 8001950:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <main+0x310>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e01a      	b.n	800198e <main+0x286>
				{
					LCD1602_setCursor(2,i);
 8001958:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <main+0x310>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	2002      	movs	r0, #2
 8001960:	f7ff fe62 	bl	8001628 <LCD1602_setCursor>
					if(i%2==0)
 8001964:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <main+0x310>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d103      	bne.n	8001978 <main+0x270>
					{

						LCD1602_print("/");
 8001970:	482a      	ldr	r0, [pc, #168]	; (8001a1c <main+0x314>)
 8001972:	f7ff fe3b 	bl	80015ec <LCD1602_print>
 8001976:	e002      	b.n	800197e <main+0x276>
					}
					else
					{

						LCD1602_writeData(0);
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff fd55 	bl	8001428 <LCD1602_writeData>
					}
					HAL_Delay(100);
 800197e:	2064      	movs	r0, #100	; 0x64
 8001980:	f000 ffae 	bl	80028e0 <HAL_Delay>
				for(i=0;i<15;i++)
 8001984:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <main+0x310>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3301      	adds	r3, #1
 800198a:	4a23      	ldr	r2, [pc, #140]	; (8001a18 <main+0x310>)
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <main+0x310>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b0e      	cmp	r3, #14
 8001994:	dde0      	ble.n	8001958 <main+0x250>
			else if(selectedWaveForm==4 && checkLed==1 && selectedFreq != 0) // TRG ANIMASYON
 8001996:	e092      	b.n	8001abe <main+0x3b6>
				}

			}

			else if(selectedWaveForm==3 && checkLed==1 && selectedFreq != 0) // SQR ANIMASYON
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <main+0x2fc>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d151      	bne.n	8001a44 <main+0x33c>
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <main+0x300>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d14d      	bne.n	8001a44 <main+0x33c>
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <main+0x2f8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d049      	beq.n	8001a44 <main+0x33c>
			{
				for(i=0;i<15;i++)
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <main+0x310>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e040      	b.n	8001a3a <main+0x332>
								{
									LCD1602_setCursor(2,i);
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <main+0x310>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	2002      	movs	r0, #2
 80019c0:	f7ff fe32 	bl	8001628 <LCD1602_setCursor>
									if(i%2==0)
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <main+0x310>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d129      	bne.n	8001a24 <main+0x31c>
									{

										LCD1602_print("_");
 80019d0:	4813      	ldr	r0, [pc, #76]	; (8001a20 <main+0x318>)
 80019d2:	f7ff fe0b 	bl	80015ec <LCD1602_print>
 80019d6:	e028      	b.n	8001a2a <main+0x322>
 80019d8:	40020c00 	.word	0x40020c00
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08004810 	.word	0x08004810
 80019e8:	08004814 	.word	0x08004814
 80019ec:	200000d8 	.word	0x200000d8
 80019f0:	200000ec 	.word	0x200000ec
 80019f4:	2000001c 	.word	0x2000001c
 80019f8:	20000108 	.word	0x20000108
 80019fc:	200000e8 	.word	0x200000e8
 8001a00:	20000168 	.word	0x20000168
 8001a04:	2000011c 	.word	0x2000011c
 8001a08:	200000f0 	.word	0x200000f0
 8001a0c:	08004818 	.word	0x08004818
 8001a10:	0800481c 	.word	0x0800481c
 8001a14:	0800482c 	.word	0x0800482c
 8001a18:	20000104 	.word	0x20000104
 8001a1c:	08004830 	.word	0x08004830
 8001a20:	08004834 	.word	0x08004834
									}
									else
									{

										LCD1602_print("-");
 8001a24:	488c      	ldr	r0, [pc, #560]	; (8001c58 <main+0x550>)
 8001a26:	f7ff fde1 	bl	80015ec <LCD1602_print>
									}
									HAL_Delay(100);
 8001a2a:	2064      	movs	r0, #100	; 0x64
 8001a2c:	f000 ff58 	bl	80028e0 <HAL_Delay>
				for(i=0;i<15;i++)
 8001a30:	4b8a      	ldr	r3, [pc, #552]	; (8001c5c <main+0x554>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	4a89      	ldr	r2, [pc, #548]	; (8001c5c <main+0x554>)
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <main+0x554>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b0e      	cmp	r3, #14
 8001a40:	ddba      	ble.n	80019b8 <main+0x2b0>
			else if(selectedWaveForm==3 && checkLed==1 && selectedFreq != 0) // SQR ANIMASYON
 8001a42:	e03c      	b.n	8001abe <main+0x3b6>
								}
			}
			else if(checkLed!=1)
 8001a44:	4b86      	ldr	r3, [pc, #536]	; (8001c60 <main+0x558>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d007      	beq.n	8001a5c <main+0x354>
			{
				LCD1602_setCursor(2,16);
 8001a4c:	2110      	movs	r1, #16
 8001a4e:	2002      	movs	r0, #2
 8001a50:	f7ff fdea 	bl	8001628 <LCD1602_setCursor>
				LCD1602_print("                ");
 8001a54:	4883      	ldr	r0, [pc, #524]	; (8001c64 <main+0x55c>)
 8001a56:	f7ff fdc9 	bl	80015ec <LCD1602_print>
 8001a5a:	e030      	b.n	8001abe <main+0x3b6>
			}
			else
			{
				if(errorFlag==1)
 8001a5c:	4b82      	ldr	r3, [pc, #520]	; (8001c68 <main+0x560>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d12c      	bne.n	8001abe <main+0x3b6>
				{
					LCD1602_noBlink();
 8001a64:	f7ff fe06 	bl	8001674 <LCD1602_noBlink>
											for(i=0; i<=5;i++)
 8001a68:	4b7c      	ldr	r3, [pc, #496]	; (8001c5c <main+0x554>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e022      	b.n	8001ab6 <main+0x3ae>
											{
												LCD1602_setCursor(2,1);
 8001a70:	2101      	movs	r1, #1
 8001a72:	2002      	movs	r0, #2
 8001a74:	f7ff fdd8 	bl	8001628 <LCD1602_setCursor>
												LCD1602_print("                ");
 8001a78:	487a      	ldr	r0, [pc, #488]	; (8001c64 <main+0x55c>)
 8001a7a:	f7ff fdb7 	bl	80015ec <LCD1602_print>
												HAL_Delay(15);
 8001a7e:	200f      	movs	r0, #15
 8001a80:	f000 ff2e 	bl	80028e0 <HAL_Delay>

												LCD1602_setCursor(2,6);
 8001a84:	2106      	movs	r1, #6
 8001a86:	2002      	movs	r0, #2
 8001a88:	f7ff fdce 	bl	8001628 <LCD1602_setCursor>
												LCD1602_print("ERROR");
 8001a8c:	4877      	ldr	r0, [pc, #476]	; (8001c6c <main+0x564>)
 8001a8e:	f7ff fdad 	bl	80015ec <LCD1602_print>
												HAL_Delay(100);
 8001a92:	2064      	movs	r0, #100	; 0x64
 8001a94:	f000 ff24 	bl	80028e0 <HAL_Delay>
												LCD1602_setCursor(2,6);
 8001a98:	2106      	movs	r1, #6
 8001a9a:	2002      	movs	r0, #2
 8001a9c:	f7ff fdc4 	bl	8001628 <LCD1602_setCursor>
												LCD1602_print("     ");
 8001aa0:	4873      	ldr	r0, [pc, #460]	; (8001c70 <main+0x568>)
 8001aa2:	f7ff fda3 	bl	80015ec <LCD1602_print>
												HAL_Delay(100);
 8001aa6:	2064      	movs	r0, #100	; 0x64
 8001aa8:	f000 ff1a 	bl	80028e0 <HAL_Delay>
											for(i=0; i<=5;i++)
 8001aac:	4b6b      	ldr	r3, [pc, #428]	; (8001c5c <main+0x554>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	4a6a      	ldr	r2, [pc, #424]	; (8001c5c <main+0x554>)
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b69      	ldr	r3, [pc, #420]	; (8001c5c <main+0x554>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	ddd8      	ble.n	8001a70 <main+0x368>

					}



		if(selectedFreq==0 && selectedWaveForm==0 && checkLed==1)
 8001abe:	4b6d      	ldr	r3, [pc, #436]	; (8001c74 <main+0x56c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10b      	bne.n	8001ade <main+0x3d6>
 8001ac6:	4b6c      	ldr	r3, [pc, #432]	; (8001c78 <main+0x570>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <main+0x3d6>
 8001ace:	4b64      	ldr	r3, [pc, #400]	; (8001c60 <main+0x558>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d103      	bne.n	8001ade <main+0x3d6>
		{
			errorFlag=1;
 8001ad6:	4b64      	ldr	r3, [pc, #400]	; (8001c68 <main+0x560>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e01a      	b.n	8001b14 <main+0x40c>
		}
		else if(selectedFreq==0 && checkLed==1)
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <main+0x56c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d107      	bne.n	8001af6 <main+0x3ee>
 8001ae6:	4b5e      	ldr	r3, [pc, #376]	; (8001c60 <main+0x558>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d103      	bne.n	8001af6 <main+0x3ee>
		{
			errorFlag=1;
 8001aee:	4b5e      	ldr	r3, [pc, #376]	; (8001c68 <main+0x560>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e00e      	b.n	8001b14 <main+0x40c>
		}
		else if(selectedWaveForm==0 && checkLed==1)
 8001af6:	4b60      	ldr	r3, [pc, #384]	; (8001c78 <main+0x570>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d107      	bne.n	8001b0e <main+0x406>
 8001afe:	4b58      	ldr	r3, [pc, #352]	; (8001c60 <main+0x558>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d103      	bne.n	8001b0e <main+0x406>
		{
			errorFlag=1;
 8001b06:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <main+0x560>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e002      	b.n	8001b14 <main+0x40c>
		}
		else
		{
			errorFlag=0;
 8001b0e:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <main+0x560>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
		}


		if(menuItem<0)
 8001b14:	4b59      	ldr	r3, [pc, #356]	; (8001c7c <main+0x574>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	da10      	bge.n	8001b3e <main+0x436>
		{
			menuItem=1;
 8001b1c:	4b57      	ldr	r3, [pc, #348]	; (8001c7c <main+0x574>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
			LCD1602_setCursor(1,1);
 8001b22:	2101      	movs	r1, #1
 8001b24:	2001      	movs	r0, #1
 8001b26:	f7ff fd7f 	bl	8001628 <LCD1602_setCursor>
			LCD1602_setCursor(1,1);
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f7ff fd7b 	bl	8001628 <LCD1602_setCursor>
			LCD1602_writeData(waveChar);
 8001b32:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <main+0x578>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fc76 	bl	8001428 <LCD1602_writeData>
 8001b3c:	e021      	b.n	8001b82 <main+0x47a>
		}

		else if((selectedWaveForm!=waveValue ||selectedFreq!=frekansValue) && checkLed!=1)
 8001b3e:	4b4e      	ldr	r3, [pc, #312]	; (8001c78 <main+0x570>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <main+0x57c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d105      	bne.n	8001b56 <main+0x44e>
 8001b4a:	4b4a      	ldr	r3, [pc, #296]	; (8001c74 <main+0x56c>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b4e      	ldr	r3, [pc, #312]	; (8001c88 <main+0x580>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d015      	beq.n	8001b82 <main+0x47a>
 8001b56:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <main+0x558>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d011      	beq.n	8001b82 <main+0x47a>
		{
			LCD1602_setCursor(1,5);
 8001b5e:	2105      	movs	r1, #5
 8001b60:	2001      	movs	r0, #1
 8001b62:	f7ff fd61 	bl	8001628 <LCD1602_setCursor>
			LCD1602_PrintInt(frekansValue);
 8001b66:	4b48      	ldr	r3, [pc, #288]	; (8001c88 <main+0x580>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fd94 	bl	8001698 <LCD1602_PrintInt>


			LCD1602_setCursor(1,1);
 8001b70:	2101      	movs	r1, #1
 8001b72:	2001      	movs	r0, #1
 8001b74:	f7ff fd58 	bl	8001628 <LCD1602_setCursor>
			LCD1602_writeData(waveChar);
 8001b78:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <main+0x578>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fc53 	bl	8001428 <LCD1602_writeData>
		}


		// BUTON İ�?LEMLERİ //

		if(adcDummy>5 || adcDummy<-5)
 8001b82:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <main+0x584>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	dc05      	bgt.n	8001b96 <main+0x48e>
 8001b8a:	4b40      	ldr	r3, [pc, #256]	; (8001c8c <main+0x584>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f113 0f05 	cmn.w	r3, #5
 8001b92:	f280 828b 	bge.w	80020ac <main+0x9a4>
		{


			if(adc_value>=180 && adc_value<200)
 8001b96:	4b3e      	ldr	r3, [pc, #248]	; (8001c90 <main+0x588>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	2bb3      	cmp	r3, #179	; 0xb3
 8001b9c:	d97c      	bls.n	8001c98 <main+0x590>
 8001b9e:	4b3c      	ldr	r3, [pc, #240]	; (8001c90 <main+0x588>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	2bc7      	cmp	r3, #199	; 0xc7
 8001ba4:	d878      	bhi.n	8001c98 <main+0x590>
			{
				if(checkLed!=1)
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <main+0x558>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d00e      	beq.n	8001bcc <main+0x4c4>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2110      	movs	r1, #16
 8001bb2:	4838      	ldr	r0, [pc, #224]	; (8001c94 <main+0x58c>)
 8001bb4:	f001 fd4e 	bl	8003654 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);	// MENU 1 KOMUTLARI
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2110      	movs	r1, #16
 8001bbc:	4835      	ldr	r0, [pc, #212]	; (8001c94 <main+0x58c>)
 8001bbe:	f001 fd49 	bl	8003654 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // BUZZER
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	2140      	movs	r1, #64	; 0x40
 8001bc6:	4833      	ldr	r0, [pc, #204]	; (8001c94 <main+0x58c>)
 8001bc8:	f001 fd44 	bl	8003654 <HAL_GPIO_WritePin>
				}


				HAL_Delay(250); // HEMEN ARKA ARKAYA BASILAMASIN
 8001bcc:	20fa      	movs	r0, #250	; 0xfa
 8001bce:	f000 fe87 	bl	80028e0 <HAL_Delay>

				// SINYAL FORM
				menuItem++;
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <main+0x574>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a28      	ldr	r2, [pc, #160]	; (8001c7c <main+0x574>)
 8001bda:	6013      	str	r3, [r2, #0]
				if(menuItem==1 && checkLed!=1)
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <main+0x574>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d107      	bne.n	8001bf4 <main+0x4ec>
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <main+0x558>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d003      	beq.n	8001bf4 <main+0x4ec>
				{
					// SINE


					waveValue=2; // Sine dalga seçildi
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <main+0x57c>)
 8001bee:	2202      	movs	r2, #2
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e02f      	b.n	8001c54 <main+0x54c>
				}
				else if(menuItem==2 && checkLed!=1)
 8001bf4:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <main+0x574>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d107      	bne.n	8001c0c <main+0x504>
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <main+0x558>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d003      	beq.n	8001c0c <main+0x504>
				{

					// KARE
					waveValue=3; // Kare dalga seçildi
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <main+0x57c>)
 8001c06:	2203      	movs	r2, #3
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e023      	b.n	8001c54 <main+0x54c>
				}
				else if(menuItem==3 && checkLed!=1)
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <main+0x574>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d107      	bne.n	8001c24 <main+0x51c>
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <main+0x558>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d003      	beq.n	8001c24 <main+0x51c>
				{
					// ÜÇGEN

					waveValue=4; // Üçgen dalga seçildi
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <main+0x57c>)
 8001c1e:	2204      	movs	r2, #4
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e017      	b.n	8001c54 <main+0x54c>
				}
				else if(menuItem>3 || menuItem<0)
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <main+0x574>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	dc03      	bgt.n	8001c34 <main+0x52c>
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <main+0x574>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	da03      	bge.n	8001c3c <main+0x534>
				{
					menuItem=0;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <main+0x574>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e00b      	b.n	8001c54 <main+0x54c>
				}
				else if(checkLed!=1)
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <main+0x558>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	f000 822e 	beq.w	80020a2 <main+0x99a>
				{
					menuItem=0;
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <main+0x574>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

					waveValue=4; // Sinyal yok
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <main+0x57c>)
 8001c4e:	2204      	movs	r2, #4
 8001c50:	601a      	str	r2, [r3, #0]
				if(menuItem==1 && checkLed!=1)
 8001c52:	e226      	b.n	80020a2 <main+0x99a>
 8001c54:	e225      	b.n	80020a2 <main+0x99a>
 8001c56:	bf00      	nop
 8001c58:	08004838 	.word	0x08004838
 8001c5c:	20000104 	.word	0x20000104
 8001c60:	200000f0 	.word	0x200000f0
 8001c64:	0800483c 	.word	0x0800483c
 8001c68:	20000100 	.word	0x20000100
 8001c6c:	08004850 	.word	0x08004850
 8001c70:	08004858 	.word	0x08004858
 8001c74:	20000168 	.word	0x20000168
 8001c78:	2000011c 	.word	0x2000011c
 8001c7c:	200000e0 	.word	0x200000e0
 8001c80:	2000001c 	.word	0x2000001c
 8001c84:	200000ec 	.word	0x200000ec
 8001c88:	200000e8 	.word	0x200000e8
 8001c8c:	2000016c 	.word	0x2000016c
 8001c90:	200000d8 	.word	0x200000d8
 8001c94:	40020400 	.word	0x40020400
				}

			}
			else if(adc_value>= 200 && adc_value<210)
 8001c98:	4bb7      	ldr	r3, [pc, #732]	; (8001f78 <main+0x870>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	2bc7      	cmp	r3, #199	; 0xc7
 8001c9e:	f240 80e5 	bls.w	8001e6c <main+0x764>
 8001ca2:	4bb5      	ldr	r3, [pc, #724]	; (8001f78 <main+0x870>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	2bd1      	cmp	r3, #209	; 0xd1
 8001ca8:	f200 80e0 	bhi.w	8001e6c <main+0x764>
			{
				if(checkLed!=1)
 8001cac:	4bb3      	ldr	r3, [pc, #716]	; (8001f7c <main+0x874>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d00e      	beq.n	8001cd2 <main+0x5ca>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // MENU 2 KOMUTLARI
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2110      	movs	r1, #16
 8001cb8:	48b1      	ldr	r0, [pc, #708]	; (8001f80 <main+0x878>)
 8001cba:	f001 fccb 	bl	8003654 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2120      	movs	r1, #32
 8001cc2:	48af      	ldr	r0, [pc, #700]	; (8001f80 <main+0x878>)
 8001cc4:	f001 fcc6 	bl	8003654 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // BUZZER
 8001cc8:	2201      	movs	r2, #1
 8001cca:	2140      	movs	r1, #64	; 0x40
 8001ccc:	48ac      	ldr	r0, [pc, #688]	; (8001f80 <main+0x878>)
 8001cce:	f001 fcc1 	bl	8003654 <HAL_GPIO_WritePin>
				}

				HAL_Delay(250); // HEMEN ARKA ARKAYA BASILAMASIN
 8001cd2:	20fa      	movs	r0, #250	; 0xfa
 8001cd4:	f000 fe04 	bl	80028e0 <HAL_Delay>



				// Frekans ++
				LCD1602_setCursor(1,5);
 8001cd8:	2105      	movs	r1, #5
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f7ff fca4 	bl	8001628 <LCD1602_setCursor>
				LCD1602_print("     ");
 8001ce0:	48a8      	ldr	r0, [pc, #672]	; (8001f84 <main+0x87c>)
 8001ce2:	f7ff fc83 	bl	80015ec <LCD1602_print>
				frekansItem++;
 8001ce6:	4ba8      	ldr	r3, [pc, #672]	; (8001f88 <main+0x880>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	4aa6      	ldr	r2, [pc, #664]	; (8001f88 <main+0x880>)
 8001cee:	6013      	str	r3, [r2, #0]



				switch(frekansItem)
 8001cf0:	4ba5      	ldr	r3, [pc, #660]	; (8001f88 <main+0x880>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	2b16      	cmp	r3, #22
 8001cf8:	f200 80a4 	bhi.w	8001e44 <main+0x73c>
 8001cfc:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <main+0x5fc>)
 8001cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d02:	bf00      	nop
 8001d04:	08001d61 	.word	0x08001d61
 8001d08:	08001d69 	.word	0x08001d69
 8001d0c:	08001d73 	.word	0x08001d73
 8001d10:	08001d7d 	.word	0x08001d7d
 8001d14:	08001d87 	.word	0x08001d87
 8001d18:	08001d91 	.word	0x08001d91
 8001d1c:	08001d9b 	.word	0x08001d9b
 8001d20:	08001da5 	.word	0x08001da5
 8001d24:	08001daf 	.word	0x08001daf
 8001d28:	08001db9 	.word	0x08001db9
 8001d2c:	08001dc3 	.word	0x08001dc3
 8001d30:	08001dcd 	.word	0x08001dcd
 8001d34:	08001dd7 	.word	0x08001dd7
 8001d38:	08001de1 	.word	0x08001de1
 8001d3c:	08001deb 	.word	0x08001deb
 8001d40:	08001df5 	.word	0x08001df5
 8001d44:	08001dff 	.word	0x08001dff
 8001d48:	08001e09 	.word	0x08001e09
 8001d4c:	08001e13 	.word	0x08001e13
 8001d50:	08001e1d 	.word	0x08001e1d
 8001d54:	08001e27 	.word	0x08001e27
 8001d58:	08001e31 	.word	0x08001e31
 8001d5c:	08001e3b 	.word	0x08001e3b
				{
				case 1 :
					// FOSFOR Dİ�?
					frekansValue=79;
 8001d60:	4b8a      	ldr	r3, [pc, #552]	; (8001f8c <main+0x884>)
 8001d62:	224f      	movs	r2, #79	; 0x4f
 8001d64:	601a      	str	r2, [r3, #0]
					break;
 8001d66:	e074      	b.n	8001e52 <main+0x74a>
				case 2 :
					// BO�?LUK
					frekansValue=700;
 8001d68:	4b88      	ldr	r3, [pc, #544]	; (8001f8c <main+0x884>)
 8001d6a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001d6e:	601a      	str	r2, [r3, #0]
					break;
 8001d70:	e06f      	b.n	8001e52 <main+0x74a>
				case 3 :
					// ALTIN-14
					frekansValue=4830;
 8001d72:	4b86      	ldr	r3, [pc, #536]	; (8001f8c <main+0x884>)
 8001d74:	f241 22de 	movw	r2, #4830	; 0x12de
 8001d78:	601a      	str	r2, [r3, #0]
					break;
 8001d7a:	e06a      	b.n	8001e52 <main+0x74a>
				case 4 :
					// ALTIN-1

					frekansValue=4900;
 8001d7c:	4b83      	ldr	r3, [pc, #524]	; (8001f8c <main+0x884>)
 8001d7e:	f241 3224 	movw	r2, #4900	; 0x1324
 8001d82:	601a      	str	r2, [r3, #0]
					break;
 8001d84:	e065      	b.n	8001e52 <main+0x74a>
				case 5 :
					// ALTIN-2

					frekansValue=5000;
 8001d86:	4b81      	ldr	r3, [pc, #516]	; (8001f8c <main+0x884>)
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	601a      	str	r2, [r3, #0]
					break;
 8001d8e:	e060      	b.n	8001e52 <main+0x74a>
				case 6 :
					// ALTIN-3

					frekansValue=5100;
 8001d90:	4b7e      	ldr	r3, [pc, #504]	; (8001f8c <main+0x884>)
 8001d92:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8001d96:	601a      	str	r2, [r3, #0]
					break;
 8001d98:	e05b      	b.n	8001e52 <main+0x74a>
				case 7 :
					// ALTIN-4

					frekansValue=5200;
 8001d9a:	4b7c      	ldr	r3, [pc, #496]	; (8001f8c <main+0x884>)
 8001d9c:	f241 4250 	movw	r2, #5200	; 0x1450
 8001da0:	601a      	str	r2, [r3, #0]
					break;
 8001da2:	e056      	b.n	8001e52 <main+0x74a>
				case 8 :
					// ALTIN-5

					frekansValue=5252;
 8001da4:	4b79      	ldr	r3, [pc, #484]	; (8001f8c <main+0x884>)
 8001da6:	f241 4284 	movw	r2, #5252	; 0x1484
 8001daa:	601a      	str	r2, [r3, #0]
					break;
 8001dac:	e051      	b.n	8001e52 <main+0x74a>
				case 9 :
					// ALTIN-6

					frekansValue=5300;
 8001dae:	4b77      	ldr	r3, [pc, #476]	; (8001f8c <main+0x884>)
 8001db0:	f241 42b4 	movw	r2, #5300	; 0x14b4
 8001db4:	601a      	str	r2, [r3, #0]
					break;
 8001db6:	e04c      	b.n	8001e52 <main+0x74a>
				case 10 :
					// MÜCEHVER-1

					frekansValue=5400;
 8001db8:	4b74      	ldr	r3, [pc, #464]	; (8001f8c <main+0x884>)
 8001dba:	f241 5218 	movw	r2, #5400	; 0x1518
 8001dbe:	601a      	str	r2, [r3, #0]
					break;
 8001dc0:	e047      	b.n	8001e52 <main+0x74a>
				case 11 :
					// ALTIN-7

					frekansValue=5621;
 8001dc2:	4b72      	ldr	r3, [pc, #456]	; (8001f8c <main+0x884>)
 8001dc4:	f241 52f5 	movw	r2, #5621	; 0x15f5
 8001dc8:	601a      	str	r2, [r3, #0]
					break;
 8001dca:	e042      	b.n	8001e52 <main+0x74a>
				case 12 :
					// FOSFOR KEMİK

					frekansValue=7000;
 8001dcc:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <main+0x884>)
 8001dce:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001dd2:	601a      	str	r2, [r3, #0]
					break;
 8001dd4:	e03d      	b.n	8001e52 <main+0x74a>
				case 13 :
					// ALIMINYUM-2

					frekansValue=7097;
 8001dd6:	4b6d      	ldr	r3, [pc, #436]	; (8001f8c <main+0x884>)
 8001dd8:	f641 32b9 	movw	r2, #7097	; 0x1bb9
 8001ddc:	601a      	str	r2, [r3, #0]
					break;
 8001dde:	e038      	b.n	8001e52 <main+0x74a>
				case 14 :
					// GÜMÜ�?-1

					frekansValue=8700;
 8001de0:	4b6a      	ldr	r3, [pc, #424]	; (8001f8c <main+0x884>)
 8001de2:	f242 12fc 	movw	r2, #8700	; 0x21fc
 8001de6:	601a      	str	r2, [r3, #0]
					break;
 8001de8:	e033      	b.n	8001e52 <main+0x74a>
				case 15 :
					// GÜMÜ�?-2

					frekansValue=8950;
 8001dea:	4b68      	ldr	r3, [pc, #416]	; (8001f8c <main+0x884>)
 8001dec:	f242 22f6 	movw	r2, #8950	; 0x22f6
 8001df0:	601a      	str	r2, [r3, #0]
					break;
 8001df2:	e02e      	b.n	8001e52 <main+0x74a>
				case 16 :
					// SU

					frekansValue=10000;
 8001df4:	4b65      	ldr	r3, [pc, #404]	; (8001f8c <main+0x884>)
 8001df6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001dfa:	601a      	str	r2, [r3, #0]
					break;
 8001dfc:	e029      	b.n	8001e52 <main+0x74a>
				case 17 :
					// BRONZ-1

					frekansValue=11311;
 8001dfe:	4b63      	ldr	r3, [pc, #396]	; (8001f8c <main+0x884>)
 8001e00:	f642 422f 	movw	r2, #11311	; 0x2c2f
 8001e04:	601a      	str	r2, [r3, #0]
					break;
 8001e06:	e024      	b.n	8001e52 <main+0x74a>
				case 18 :
					// BRONZ-2

					frekansValue=11700;
 8001e08:	4b60      	ldr	r3, [pc, #384]	; (8001f8c <main+0x884>)
 8001e0a:	f642 52b4 	movw	r2, #11700	; 0x2db4
 8001e0e:	601a      	str	r2, [r3, #0]
					break;
 8001e10:	e01f      	b.n	8001e52 <main+0x74a>
				case 19 :
					// BAKIR

					frekansValue=11947;
 8001e12:	4b5e      	ldr	r3, [pc, #376]	; (8001f8c <main+0x884>)
 8001e14:	f642 62ab 	movw	r2, #11947	; 0x2eab
 8001e18:	601a      	str	r2, [r3, #0]
					break;
 8001e1a:	e01a      	b.n	8001e52 <main+0x74a>
				case 20 :
					// ELMAS

					frekansValue=12700;
 8001e1c:	4b5b      	ldr	r3, [pc, #364]	; (8001f8c <main+0x884>)
 8001e1e:	f243 129c 	movw	r2, #12700	; 0x319c
 8001e22:	601a      	str	r2, [r3, #0]
					break;
 8001e24:	e015      	b.n	8001e52 <main+0x74a>
				case 21 :
					// KUR�?UN 1

					frekansValue=14000;
 8001e26:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <main+0x884>)
 8001e28:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001e2c:	601a      	str	r2, [r3, #0]
					break;
 8001e2e:	e010      	b.n	8001e52 <main+0x74a>
				case 22 :
					// KUR�?UN2

					frekansValue=24250;
 8001e30:	4b56      	ldr	r3, [pc, #344]	; (8001f8c <main+0x884>)
 8001e32:	f645 62ba 	movw	r2, #24250	; 0x5eba
 8001e36:	601a      	str	r2, [r3, #0]
					break;
 8001e38:	e00b      	b.n	8001e52 <main+0x74a>
				case 23 :
					// GENEL 1

					frekansValue=55000;
 8001e3a:	4b54      	ldr	r3, [pc, #336]	; (8001f8c <main+0x884>)
 8001e3c:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 8001e40:	601a      	str	r2, [r3, #0]
					break;
 8001e42:	e006      	b.n	8001e52 <main+0x74a>

				default :

					frekansItem = 0;
 8001e44:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <main+0x880>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
					frekansValue=0;
 8001e4a:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <main+0x884>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
					break;
 8001e50:	bf00      	nop
				}

				if(menuItem>3 || menuItem<0)
 8001e52:	4b4f      	ldr	r3, [pc, #316]	; (8001f90 <main+0x888>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	dc04      	bgt.n	8001e64 <main+0x75c>
 8001e5a:	4b4d      	ldr	r3, [pc, #308]	; (8001f90 <main+0x888>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f280 8121 	bge.w	80020a6 <main+0x99e>
				{
					menuItem=0;
 8001e64:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <main+0x888>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
				if(menuItem>3 || menuItem<0)
 8001e6a:	e11c      	b.n	80020a6 <main+0x99e>
				}

			}
			else if(adc_value>= 210 && adc_value<254 && adc_value!=225)
 8001e6c:	4b42      	ldr	r3, [pc, #264]	; (8001f78 <main+0x870>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	2bd1      	cmp	r3, #209	; 0xd1
 8001e72:	f240 80f7 	bls.w	8002064 <main+0x95c>
 8001e76:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <main+0x870>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	2bfd      	cmp	r3, #253	; 0xfd
 8001e7c:	f200 80f2 	bhi.w	8002064 <main+0x95c>
 8001e80:	4b3d      	ldr	r3, [pc, #244]	; (8001f78 <main+0x870>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	2be1      	cmp	r3, #225	; 0xe1
 8001e86:	f000 80ed 	beq.w	8002064 <main+0x95c>
			{

				if(checkLed!=1)
 8001e8a:	4b3c      	ldr	r3, [pc, #240]	; (8001f7c <main+0x874>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d00e      	beq.n	8001eb0 <main+0x7a8>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // MENU 2 KOMUTLARI
 8001e92:	2200      	movs	r2, #0
 8001e94:	2110      	movs	r1, #16
 8001e96:	483a      	ldr	r0, [pc, #232]	; (8001f80 <main+0x878>)
 8001e98:	f001 fbdc 	bl	8003654 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	2120      	movs	r1, #32
 8001ea0:	4837      	ldr	r0, [pc, #220]	; (8001f80 <main+0x878>)
 8001ea2:	f001 fbd7 	bl	8003654 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // BUZZER
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2140      	movs	r1, #64	; 0x40
 8001eaa:	4835      	ldr	r0, [pc, #212]	; (8001f80 <main+0x878>)
 8001eac:	f001 fbd2 	bl	8003654 <HAL_GPIO_WritePin>
				}

				HAL_Delay(250); // HEMEN ARKA ARKAYA BASILAMASIN
 8001eb0:	20fa      	movs	r0, #250	; 0xfa
 8001eb2:	f000 fd15 	bl	80028e0 <HAL_Delay>



				// Frekans --
				LCD1602_setCursor(1,5);
 8001eb6:	2105      	movs	r1, #5
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f7ff fbb5 	bl	8001628 <LCD1602_setCursor>
				LCD1602_print("     ");
 8001ebe:	4831      	ldr	r0, [pc, #196]	; (8001f84 <main+0x87c>)
 8001ec0:	f7ff fb94 	bl	80015ec <LCD1602_print>
				frekansItem--;
 8001ec4:	4b30      	ldr	r3, [pc, #192]	; (8001f88 <main+0x880>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	4a2f      	ldr	r2, [pc, #188]	; (8001f88 <main+0x880>)
 8001ecc:	6013      	str	r3, [r2, #0]



				switch(frekansItem)
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <main+0x880>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	2b16      	cmp	r3, #22
 8001ed6:	f200 80b2 	bhi.w	800203e <main+0x936>
 8001eda:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <main+0x7d8>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001f3d 	.word	0x08001f3d
 8001ee4:	08001f45 	.word	0x08001f45
 8001ee8:	08001f4f 	.word	0x08001f4f
 8001eec:	08001f59 	.word	0x08001f59
 8001ef0:	08001f63 	.word	0x08001f63
 8001ef4:	08001f6d 	.word	0x08001f6d
 8001ef8:	08001f95 	.word	0x08001f95
 8001efc:	08001f9f 	.word	0x08001f9f
 8001f00:	08001fa9 	.word	0x08001fa9
 8001f04:	08001fb3 	.word	0x08001fb3
 8001f08:	08001fbd 	.word	0x08001fbd
 8001f0c:	08001fc7 	.word	0x08001fc7
 8001f10:	08001fd1 	.word	0x08001fd1
 8001f14:	08001fdb 	.word	0x08001fdb
 8001f18:	08001fe5 	.word	0x08001fe5
 8001f1c:	08001fef 	.word	0x08001fef
 8001f20:	08001ff9 	.word	0x08001ff9
 8001f24:	08002003 	.word	0x08002003
 8001f28:	0800200d 	.word	0x0800200d
 8001f2c:	08002017 	.word	0x08002017
 8001f30:	08002021 	.word	0x08002021
 8001f34:	0800202b 	.word	0x0800202b
 8001f38:	08002035 	.word	0x08002035
				{
				case 1 :
					// FOSFOR Dİ�?

					frekansValue=79;
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <main+0x884>)
 8001f3e:	224f      	movs	r2, #79	; 0x4f
 8001f40:	601a      	str	r2, [r3, #0]
					break;
 8001f42:	e083      	b.n	800204c <main+0x944>
				case 2 :
					// BO�?LUK

					frekansValue=700;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <main+0x884>)
 8001f46:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001f4a:	601a      	str	r2, [r3, #0]
					break;
 8001f4c:	e07e      	b.n	800204c <main+0x944>
				case 3 :
					// ALTIN-14

					frekansValue=4830;
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <main+0x884>)
 8001f50:	f241 22de 	movw	r2, #4830	; 0x12de
 8001f54:	601a      	str	r2, [r3, #0]
					break;
 8001f56:	e079      	b.n	800204c <main+0x944>
				case 4 :
					// ALTIN-1

					frekansValue=4900;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <main+0x884>)
 8001f5a:	f241 3224 	movw	r2, #4900	; 0x1324
 8001f5e:	601a      	str	r2, [r3, #0]
					break;
 8001f60:	e074      	b.n	800204c <main+0x944>
				case 5 :
					// ALTIN-2

					frekansValue=5000;
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <main+0x884>)
 8001f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f68:	601a      	str	r2, [r3, #0]
					break;
 8001f6a:	e06f      	b.n	800204c <main+0x944>
				case 6 :
					// ALTIN-3

					frekansValue=5100;
 8001f6c:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <main+0x884>)
 8001f6e:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8001f72:	601a      	str	r2, [r3, #0]
					break;
 8001f74:	e06a      	b.n	800204c <main+0x944>
 8001f76:	bf00      	nop
 8001f78:	200000d8 	.word	0x200000d8
 8001f7c:	200000f0 	.word	0x200000f0
 8001f80:	40020400 	.word	0x40020400
 8001f84:	08004858 	.word	0x08004858
 8001f88:	200000e4 	.word	0x200000e4
 8001f8c:	200000e8 	.word	0x200000e8
 8001f90:	200000e0 	.word	0x200000e0
				case 7 :
					// ALTIN-4

					frekansValue=5200;
 8001f94:	4ba8      	ldr	r3, [pc, #672]	; (8002238 <main+0xb30>)
 8001f96:	f241 4250 	movw	r2, #5200	; 0x1450
 8001f9a:	601a      	str	r2, [r3, #0]
					break;
 8001f9c:	e056      	b.n	800204c <main+0x944>
				case 8 :
					// ALTIN-5

					frekansValue=5252;
 8001f9e:	4ba6      	ldr	r3, [pc, #664]	; (8002238 <main+0xb30>)
 8001fa0:	f241 4284 	movw	r2, #5252	; 0x1484
 8001fa4:	601a      	str	r2, [r3, #0]
					break;
 8001fa6:	e051      	b.n	800204c <main+0x944>
				case 9 :
					// ALTIN-6

					frekansValue=5300;
 8001fa8:	4ba3      	ldr	r3, [pc, #652]	; (8002238 <main+0xb30>)
 8001faa:	f241 42b4 	movw	r2, #5300	; 0x14b4
 8001fae:	601a      	str	r2, [r3, #0]
					break;
 8001fb0:	e04c      	b.n	800204c <main+0x944>
				case 10 :
					// MÜCEHVER-1
					frekansValue=5400;
 8001fb2:	4ba1      	ldr	r3, [pc, #644]	; (8002238 <main+0xb30>)
 8001fb4:	f241 5218 	movw	r2, #5400	; 0x1518
 8001fb8:	601a      	str	r2, [r3, #0]
					break;
 8001fba:	e047      	b.n	800204c <main+0x944>
				case 11 :
					// ALTIN-7

					frekansValue=5621;
 8001fbc:	4b9e      	ldr	r3, [pc, #632]	; (8002238 <main+0xb30>)
 8001fbe:	f241 52f5 	movw	r2, #5621	; 0x15f5
 8001fc2:	601a      	str	r2, [r3, #0]
					break;
 8001fc4:	e042      	b.n	800204c <main+0x944>
				case 12 :
					// FOSFOR KEMİK

					frekansValue=7000;
 8001fc6:	4b9c      	ldr	r3, [pc, #624]	; (8002238 <main+0xb30>)
 8001fc8:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001fcc:	601a      	str	r2, [r3, #0]
					break;
 8001fce:	e03d      	b.n	800204c <main+0x944>
				case 13 :
					// ALIMINYUM-2

					frekansValue=7097;
 8001fd0:	4b99      	ldr	r3, [pc, #612]	; (8002238 <main+0xb30>)
 8001fd2:	f641 32b9 	movw	r2, #7097	; 0x1bb9
 8001fd6:	601a      	str	r2, [r3, #0]
					break;
 8001fd8:	e038      	b.n	800204c <main+0x944>
				case 14 :
					// GÜMÜ�?-1
					frekansValue=8700;
 8001fda:	4b97      	ldr	r3, [pc, #604]	; (8002238 <main+0xb30>)
 8001fdc:	f242 12fc 	movw	r2, #8700	; 0x21fc
 8001fe0:	601a      	str	r2, [r3, #0]
					break;
 8001fe2:	e033      	b.n	800204c <main+0x944>
				case 15 :
					// GÜMÜ�?-2

					frekansValue=8950;
 8001fe4:	4b94      	ldr	r3, [pc, #592]	; (8002238 <main+0xb30>)
 8001fe6:	f242 22f6 	movw	r2, #8950	; 0x22f6
 8001fea:	601a      	str	r2, [r3, #0]
					break;
 8001fec:	e02e      	b.n	800204c <main+0x944>
				case 16 :
					// SU

					frekansValue=10000;
 8001fee:	4b92      	ldr	r3, [pc, #584]	; (8002238 <main+0xb30>)
 8001ff0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ff4:	601a      	str	r2, [r3, #0]
					break;
 8001ff6:	e029      	b.n	800204c <main+0x944>
				case 17 :
					// BRONZ-1

					frekansValue=11311;
 8001ff8:	4b8f      	ldr	r3, [pc, #572]	; (8002238 <main+0xb30>)
 8001ffa:	f642 422f 	movw	r2, #11311	; 0x2c2f
 8001ffe:	601a      	str	r2, [r3, #0]
					break;
 8002000:	e024      	b.n	800204c <main+0x944>
				case 18 :
					// BRONZ-2

					frekansValue=11700;
 8002002:	4b8d      	ldr	r3, [pc, #564]	; (8002238 <main+0xb30>)
 8002004:	f642 52b4 	movw	r2, #11700	; 0x2db4
 8002008:	601a      	str	r2, [r3, #0]
					break;
 800200a:	e01f      	b.n	800204c <main+0x944>
				case 19 :
					// BAKIR

					frekansValue=11947;
 800200c:	4b8a      	ldr	r3, [pc, #552]	; (8002238 <main+0xb30>)
 800200e:	f642 62ab 	movw	r2, #11947	; 0x2eab
 8002012:	601a      	str	r2, [r3, #0]
					break;
 8002014:	e01a      	b.n	800204c <main+0x944>
				case 20 :
					// ELMAS

					frekansValue=12700;
 8002016:	4b88      	ldr	r3, [pc, #544]	; (8002238 <main+0xb30>)
 8002018:	f243 129c 	movw	r2, #12700	; 0x319c
 800201c:	601a      	str	r2, [r3, #0]
					break;
 800201e:	e015      	b.n	800204c <main+0x944>
				case 21 :
					// KUR�?UN 1

					frekansValue=14000;
 8002020:	4b85      	ldr	r3, [pc, #532]	; (8002238 <main+0xb30>)
 8002022:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8002026:	601a      	str	r2, [r3, #0]
					break;
 8002028:	e010      	b.n	800204c <main+0x944>
				case 22 :
					// KUR�?UN2

					frekansValue=24250;
 800202a:	4b83      	ldr	r3, [pc, #524]	; (8002238 <main+0xb30>)
 800202c:	f645 62ba 	movw	r2, #24250	; 0x5eba
 8002030:	601a      	str	r2, [r3, #0]
					break;
 8002032:	e00b      	b.n	800204c <main+0x944>
				case 23 :
					// GENEL 1

					frekansValue=55000;
 8002034:	4b80      	ldr	r3, [pc, #512]	; (8002238 <main+0xb30>)
 8002036:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 800203a:	601a      	str	r2, [r3, #0]
					break;
 800203c:	e006      	b.n	800204c <main+0x944>

				default :

					frekansItem = 0;
 800203e:	4b7f      	ldr	r3, [pc, #508]	; (800223c <main+0xb34>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
					frekansValue=0;
 8002044:	4b7c      	ldr	r3, [pc, #496]	; (8002238 <main+0xb30>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
					break;
 800204a:	bf00      	nop
				}
				if(menuItem>3 || menuItem<0)
 800204c:	4b7c      	ldr	r3, [pc, #496]	; (8002240 <main+0xb38>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b03      	cmp	r3, #3
 8002052:	dc03      	bgt.n	800205c <main+0x954>
 8002054:	4b7a      	ldr	r3, [pc, #488]	; (8002240 <main+0xb38>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	da26      	bge.n	80020aa <main+0x9a2>
				{
					menuItem=0;
 800205c:	4b78      	ldr	r3, [pc, #480]	; (8002240 <main+0xb38>)
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
				if(menuItem>3 || menuItem<0)
 8002062:	e022      	b.n	80020aa <main+0x9a2>
				}


			}
			else if(adc_value>= 255)
 8002064:	4b77      	ldr	r3, [pc, #476]	; (8002244 <main+0xb3c>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	2bfe      	cmp	r3, #254	; 0xfe
 800206a:	d905      	bls.n	8002078 <main+0x970>
			{
				// MENU 3 KOMUTLARI

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // BUZZER
 800206c:	2201      	movs	r2, #1
 800206e:	2140      	movs	r1, #64	; 0x40
 8002070:	4875      	ldr	r0, [pc, #468]	; (8002248 <main+0xb40>)
 8002072:	f001 faef 	bl	8003654 <HAL_GPIO_WritePin>
 8002076:	e019      	b.n	80020ac <main+0x9a4>

				// BUTON HATA ERROR
			}
			else
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	// BUTONA BASILMADI�?I ZAMAN
 8002078:	2200      	movs	r2, #0
 800207a:	2110      	movs	r1, #16
 800207c:	4872      	ldr	r0, [pc, #456]	; (8002248 <main+0xb40>)
 800207e:	f001 fae9 	bl	8003654 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	2120      	movs	r1, #32
 8002086:	4870      	ldr	r0, [pc, #448]	; (8002248 <main+0xb40>)
 8002088:	f001 fae4 	bl	8003654 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	2140      	movs	r1, #64	; 0x40
 8002090:	486d      	ldr	r0, [pc, #436]	; (8002248 <main+0xb40>)
 8002092:	f001 fadf 	bl	8003654 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	486b      	ldr	r0, [pc, #428]	; (8002248 <main+0xb40>)
 800209c:	f001 fada 	bl	8003654 <HAL_GPIO_WritePin>
 80020a0:	e004      	b.n	80020ac <main+0x9a4>
				if(menuItem==1 && checkLed!=1)
 80020a2:	bf00      	nop
 80020a4:	e002      	b.n	80020ac <main+0x9a4>
				if(menuItem>3 || menuItem<0)
 80020a6:	bf00      	nop
 80020a8:	e000      	b.n	80020ac <main+0x9a4>
				if(menuItem>3 || menuItem<0)
 80020aa:	bf00      	nop
			}

		}
		adcDummy = adc_value - adc_value_last;
 80020ac:	4b65      	ldr	r3, [pc, #404]	; (8002244 <main+0xb3c>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b66      	ldr	r3, [pc, #408]	; (800224c <main+0xb44>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	4a65      	ldr	r2, [pc, #404]	; (8002250 <main+0xb48>)
 80020ba:	6013      	str	r3, [r2, #0]
		adc_value_last = adc_value;
 80020bc:	4b61      	ldr	r3, [pc, #388]	; (8002244 <main+0xb3c>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b62      	ldr	r3, [pc, #392]	; (800224c <main+0xb44>)
 80020c4:	601a      	str	r2, [r3, #0]


		// ÇIKI�? LEDİ

		if(checkLed == 1 )
 80020c6:	4b63      	ldr	r3, [pc, #396]	; (8002254 <main+0xb4c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d11a      	bne.n	8002104 <main+0x9fc>
		{
			// SİSTEM AYARLARI KAYDEDİLDİ

			nextStep++;
 80020ce:	4b62      	ldr	r3, [pc, #392]	; (8002258 <main+0xb50>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	4a60      	ldr	r2, [pc, #384]	; (8002258 <main+0xb50>)
 80020d6:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80020d8:	2201      	movs	r2, #1
 80020da:	2180      	movs	r1, #128	; 0x80
 80020dc:	485a      	ldr	r0, [pc, #360]	; (8002248 <main+0xb40>)
 80020de:	f001 fab9 	bl	8003654 <HAL_GPIO_WritePin>
			LCD1602_setCursor(1,15);
 80020e2:	210f      	movs	r1, #15
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7ff fa9f 	bl	8001628 <LCD1602_setCursor>
			LCD1602_print("+");
 80020ea:	485c      	ldr	r0, [pc, #368]	; (800225c <main+0xb54>)
 80020ec:	f7ff fa7e 	bl	80015ec <LCD1602_print>

			frekansItem=0;
 80020f0:	4b52      	ldr	r3, [pc, #328]	; (800223c <main+0xb34>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
			frekansValue=0;
 80020f6:	4b50      	ldr	r3, [pc, #320]	; (8002238 <main+0xb30>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
			waveValue=0;
 80020fc:	4b58      	ldr	r3, [pc, #352]	; (8002260 <main+0xb58>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e032      	b.n	800216a <main+0xa62>


		}
		else
		{
			LCD1602_setCursor(1,15);
 8002104:	210f      	movs	r1, #15
 8002106:	2001      	movs	r0, #1
 8002108:	f7ff fa8e 	bl	8001628 <LCD1602_setCursor>
			LCD1602_print("-");
 800210c:	4855      	ldr	r0, [pc, #340]	; (8002264 <main+0xb5c>)
 800210e:	f7ff fa6d 	bl	80015ec <LCD1602_print>
				if(nextStep!=0)
 8002112:	4b51      	ldr	r3, [pc, #324]	; (8002258 <main+0xb50>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01f      	beq.n	800215a <main+0xa52>
				{
					LCD1602_setCursor(1,1);
 800211a:	2101      	movs	r1, #1
 800211c:	2001      	movs	r0, #1
 800211e:	f7ff fa83 	bl	8001628 <LCD1602_setCursor>
					LCD1602_writeData(waveChar);
 8002122:	4b51      	ldr	r3, [pc, #324]	; (8002268 <main+0xb60>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff f97e 	bl	8001428 <LCD1602_writeData>
					LCD1602_setCursor(1,6);
 800212c:	2106      	movs	r1, #6
 800212e:	2001      	movs	r0, #1
 8002130:	f7ff fa7a 	bl	8001628 <LCD1602_setCursor>
					LCD1602_print("     ");
 8002134:	484d      	ldr	r0, [pc, #308]	; (800226c <main+0xb64>)
 8002136:	f7ff fa59 	bl	80015ec <LCD1602_print>
					LCD1602_setCursor(1,5);
 800213a:	2105      	movs	r1, #5
 800213c:	2001      	movs	r0, #1
 800213e:	f7ff fa73 	bl	8001628 <LCD1602_setCursor>
					LCD1602_PrintInt(frekansValue);
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <main+0xb30>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff faa6 	bl	8001698 <LCD1602_PrintInt>
					LCD1602_setCursor(2,1);
 800214c:	2101      	movs	r1, #1
 800214e:	2002      	movs	r0, #2
 8002150:	f7ff fa6a 	bl	8001628 <LCD1602_setCursor>
					LCD1602_print("                ");
 8002154:	4846      	ldr	r0, [pc, #280]	; (8002270 <main+0xb68>)
 8002156:	f7ff fa49 	bl	80015ec <LCD1602_print>

				}


			// SİSTEM AYARLARI SIFIRLANDI.
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	483a      	ldr	r0, [pc, #232]	; (8002248 <main+0xb40>)
 8002160:	f001 fa78 	bl	8003654 <HAL_GPIO_WritePin>
			checkLed=0;
 8002164:	4b3b      	ldr	r3, [pc, #236]	; (8002254 <main+0xb4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
		}


		if(selectedWaveForm==2)
 800216a:	4b42      	ldr	r3, [pc, #264]	; (8002274 <main+0xb6c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d115      	bne.n	800219e <main+0xa96>
		{
			// SINE
			if(setSignal==0)
 8002172:	4b41      	ldr	r3, [pc, #260]	; (8002278 <main+0xb70>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f47f ab07 	bne.w	800178a <main+0x82>
			{
				AD9833_SetWave(0);
 800217c:	2000      	movs	r0, #0
 800217e:	f7fe fe45 	bl	8000e0c <AD9833_SetWave>
				AD9833_SetWaveData(selectedFreq,0);
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <main+0xb74>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fe8d 	bl	8000ea8 <AD9833_SetWaveData>
				setSignal=1;
 800218e:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <main+0xb70>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]
				resetDummy=0;
 8002194:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <main+0xb78>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	f7ff baf6 	b.w	800178a <main+0x82>
			}
		}
		else if(selectedWaveForm==3)
 800219e:	4b35      	ldr	r3, [pc, #212]	; (8002274 <main+0xb6c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d115      	bne.n	80021d2 <main+0xaca>
		{
			// KARE
			if(setSignal==0)
 80021a6:	4b34      	ldr	r3, [pc, #208]	; (8002278 <main+0xb70>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f47f aaed 	bne.w	800178a <main+0x82>
			{
				AD9833_SetWave(1);
 80021b0:	2001      	movs	r0, #1
 80021b2:	f7fe fe2b 	bl	8000e0c <AD9833_SetWave>
				AD9833_SetWaveData(selectedFreq,0);
 80021b6:	4b31      	ldr	r3, [pc, #196]	; (800227c <main+0xb74>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fe73 	bl	8000ea8 <AD9833_SetWaveData>
				setSignal=1;
 80021c2:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <main+0xb70>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
				resetDummy=0;
 80021c8:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <main+0xb78>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	f7ff badc 	b.w	800178a <main+0x82>
			}
		}
		else if(selectedWaveForm==4)
 80021d2:	4b28      	ldr	r3, [pc, #160]	; (8002274 <main+0xb6c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d115      	bne.n	8002206 <main+0xafe>
		{
			// UCGEN
			if(setSignal==0)
 80021da:	4b27      	ldr	r3, [pc, #156]	; (8002278 <main+0xb70>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f47f aad3 	bne.w	800178a <main+0x82>
			{
				AD9833_SetWave(2);
 80021e4:	2002      	movs	r0, #2
 80021e6:	f7fe fe11 	bl	8000e0c <AD9833_SetWave>
				AD9833_SetWaveData(selectedFreq,0);
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <main+0xb74>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fe59 	bl	8000ea8 <AD9833_SetWaveData>
				setSignal=1;
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <main+0xb70>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
				resetDummy=0;
 80021fc:	4b20      	ldr	r3, [pc, #128]	; (8002280 <main+0xb78>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	f7ff bac2 	b.w	800178a <main+0x82>
			}


		}
		else if(selectedWaveForm==0 || selectedWaveForm>4 && resetDummy!=1)
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <main+0xb6c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <main+0xb1a>
 800220e:	4b19      	ldr	r3, [pc, #100]	; (8002274 <main+0xb6c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b04      	cmp	r3, #4
 8002214:	f77f aab9 	ble.w	800178a <main+0x82>
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <main+0xb78>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	f43f aab4 	beq.w	800178a <main+0x82>
		{
			setSignal=0;
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <main+0xb70>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
			AD9833_Reset();
 8002228:	f7fe ff28 	bl	800107c <AD9833_Reset>
			resetDummy=1;
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <main+0xb78>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]
		adc_value = Read_ADC();
 8002232:	f7ff baaa 	b.w	800178a <main+0x82>
 8002236:	bf00      	nop
 8002238:	200000e8 	.word	0x200000e8
 800223c:	200000e4 	.word	0x200000e4
 8002240:	200000e0 	.word	0x200000e0
 8002244:	200000d8 	.word	0x200000d8
 8002248:	40020400 	.word	0x40020400
 800224c:	200000dc 	.word	0x200000dc
 8002250:	2000016c 	.word	0x2000016c
 8002254:	200000f0 	.word	0x200000f0
 8002258:	200000fc 	.word	0x200000fc
 800225c:	08004860 	.word	0x08004860
 8002260:	200000ec 	.word	0x200000ec
 8002264:	08004838 	.word	0x08004838
 8002268:	2000001c 	.word	0x2000001c
 800226c:	08004858 	.word	0x08004858
 8002270:	0800483c 	.word	0x0800483c
 8002274:	2000011c 	.word	0x2000011c
 8002278:	200000f4 	.word	0x200000f4
 800227c:	20000168 	.word	0x20000168
 8002280:	200000f8 	.word	0x200000f8

08002284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b094      	sub	sp, #80	; 0x50
 8002288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800228a:	f107 0320 	add.w	r3, r7, #32
 800228e:	2230      	movs	r2, #48	; 0x30
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f001 fea0 	bl	8003fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	4b22      	ldr	r3, [pc, #136]	; (8002338 <SystemClock_Config+0xb4>)
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	4a21      	ldr	r2, [pc, #132]	; (8002338 <SystemClock_Config+0xb4>)
 80022b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b6:	6413      	str	r3, [r2, #64]	; 0x40
 80022b8:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <SystemClock_Config+0xb4>)
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c4:	2300      	movs	r3, #0
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	4b1c      	ldr	r3, [pc, #112]	; (800233c <SystemClock_Config+0xb8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1b      	ldr	r2, [pc, #108]	; (800233c <SystemClock_Config+0xb8>)
 80022ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <SystemClock_Config+0xb8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022e0:	2302      	movs	r3, #2
 80022e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e4:	2301      	movs	r3, #1
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022e8:	2310      	movs	r3, #16
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f0:	f107 0320 	add.w	r3, r7, #32
 80022f4:	4618      	mov	r0, r3
 80022f6:	f001 f9eb 	bl	80036d0 <HAL_RCC_OscConfig>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002300:	f000 f958 	bl	80025b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002304:	230f      	movs	r3, #15
 8002306:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002310:	2300      	movs	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f001 fc46 	bl	8003bb0 <HAL_RCC_ClockConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800232a:	f000 f943 	bl	80025b4 <Error_Handler>
  }
}
 800232e:	bf00      	nop
 8002330:	3750      	adds	r7, #80	; 0x50
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40007000 	.word	0x40007000

08002340 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002346:	463b      	mov	r3, r7
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002352:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <MX_ADC1_Init+0x98>)
 8002354:	4a21      	ldr	r2, [pc, #132]	; (80023dc <MX_ADC1_Init+0x9c>)
 8002356:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002358:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <MX_ADC1_Init+0x98>)
 800235a:	2200      	movs	r2, #0
 800235c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800235e:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <MX_ADC1_Init+0x98>)
 8002360:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002364:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <MX_ADC1_Init+0x98>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <MX_ADC1_Init+0x98>)
 800236e:	2200      	movs	r2, #0
 8002370:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <MX_ADC1_Init+0x98>)
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800237a:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <MX_ADC1_Init+0x98>)
 800237c:	2200      	movs	r2, #0
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002380:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <MX_ADC1_Init+0x98>)
 8002382:	4a17      	ldr	r2, [pc, #92]	; (80023e0 <MX_ADC1_Init+0xa0>)
 8002384:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002386:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <MX_ADC1_Init+0x98>)
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <MX_ADC1_Init+0x98>)
 800238e:	2201      	movs	r2, #1
 8002390:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_ADC1_Init+0x98>)
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <MX_ADC1_Init+0x98>)
 800239c:	2201      	movs	r2, #1
 800239e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023a0:	480d      	ldr	r0, [pc, #52]	; (80023d8 <MX_ADC1_Init+0x98>)
 80023a2:	f000 fabf 	bl	8002924 <HAL_ADC_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80023ac:	f000 f902 	bl	80025b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80023b4:	2301      	movs	r3, #1
 80023b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023bc:	463b      	mov	r3, r7
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_ADC1_Init+0x98>)
 80023c2:	f000 fc7d 	bl	8002cc0 <HAL_ADC_ConfigChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80023cc:	f000 f8f2 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000120 	.word	0x20000120
 80023dc:	40012000 	.word	0x40012000
 80023e0:	0f000001 	.word	0x0f000001

080023e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08c      	sub	sp, #48	; 0x30
 80023e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	60da      	str	r2, [r3, #12]
 80023f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	4b66      	ldr	r3, [pc, #408]	; (8002598 <MX_GPIO_Init+0x1b4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a65      	ldr	r2, [pc, #404]	; (8002598 <MX_GPIO_Init+0x1b4>)
 8002404:	f043 0310 	orr.w	r3, r3, #16
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b63      	ldr	r3, [pc, #396]	; (8002598 <MX_GPIO_Init+0x1b4>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	4b5f      	ldr	r3, [pc, #380]	; (8002598 <MX_GPIO_Init+0x1b4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a5e      	ldr	r2, [pc, #376]	; (8002598 <MX_GPIO_Init+0x1b4>)
 8002420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <MX_GPIO_Init+0x1b4>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	4b58      	ldr	r3, [pc, #352]	; (8002598 <MX_GPIO_Init+0x1b4>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a57      	ldr	r2, [pc, #348]	; (8002598 <MX_GPIO_Init+0x1b4>)
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b55      	ldr	r3, [pc, #340]	; (8002598 <MX_GPIO_Init+0x1b4>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b51      	ldr	r3, [pc, #324]	; (8002598 <MX_GPIO_Init+0x1b4>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a50      	ldr	r2, [pc, #320]	; (8002598 <MX_GPIO_Init+0x1b4>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b4e      	ldr	r3, [pc, #312]	; (8002598 <MX_GPIO_Init+0x1b4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	4b4a      	ldr	r3, [pc, #296]	; (8002598 <MX_GPIO_Init+0x1b4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a49      	ldr	r2, [pc, #292]	; (8002598 <MX_GPIO_Init+0x1b4>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <MX_GPIO_Init+0x1b4>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	4b43      	ldr	r3, [pc, #268]	; (8002598 <MX_GPIO_Init+0x1b4>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a42      	ldr	r2, [pc, #264]	; (8002598 <MX_GPIO_Init+0x1b4>)
 8002490:	f043 0308 	orr.w	r3, r3, #8
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b40      	ldr	r3, [pc, #256]	; (8002598 <MX_GPIO_Init+0x1b4>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, E_Pin|RS_Pin, GPIO_PIN_RESET);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2130      	movs	r1, #48	; 0x30
 80024a6:	483d      	ldr	r0, [pc, #244]	; (800259c <MX_GPIO_Init+0x1b8>)
 80024a8:	f001 f8d4 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80024ac:	2200      	movs	r2, #0
 80024ae:	210e      	movs	r1, #14
 80024b0:	483b      	ldr	r0, [pc, #236]	; (80025a0 <MX_GPIO_Init+0x1bc>)
 80024b2:	f001 f8cf 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD9833SCK_Pin|AD9833DATA_Pin|AD9833SS_Pin, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	21e0      	movs	r1, #224	; 0xe0
 80024ba:	483a      	ldr	r0, [pc, #232]	; (80025a4 <MX_GPIO_Init+0x1c0>)
 80024bc:	f001 f8ca 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D0_Pin|D1_Pin|D2_Pin|D3_Pin, GPIO_PIN_RESET);
 80024c0:	2200      	movs	r2, #0
 80024c2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80024c6:	4838      	ldr	r0, [pc, #224]	; (80025a8 <MX_GPIO_Init+0x1c4>)
 80024c8:	f001 f8c4 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 80024cc:	2200      	movs	r2, #0
 80024ce:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80024d2:	4836      	ldr	r0, [pc, #216]	; (80025ac <MX_GPIO_Init+0x1c8>)
 80024d4:	f001 f8be 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 80024d8:	230f      	movs	r3, #15
 80024da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024dc:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <MX_GPIO_Init+0x1cc>)
 80024de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024e4:	f107 031c 	add.w	r3, r7, #28
 80024e8:	4619      	mov	r1, r3
 80024ea:	482c      	ldr	r0, [pc, #176]	; (800259c <MX_GPIO_Init+0x1b8>)
 80024ec:	f000 ff18 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Pin RS_Pin */
  GPIO_InitStruct.Pin = E_Pin|RS_Pin;
 80024f0:	2330      	movs	r3, #48	; 0x30
 80024f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f4:	2301      	movs	r3, #1
 80024f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002500:	f107 031c 	add.w	r3, r7, #28
 8002504:	4619      	mov	r1, r3
 8002506:	4825      	ldr	r0, [pc, #148]	; (800259c <MX_GPIO_Init+0x1b8>)
 8002508:	f000 ff0a 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800250c:	230e      	movs	r3, #14
 800250e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002510:	2301      	movs	r3, #1
 8002512:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002518:	2300      	movs	r3, #0
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	4619      	mov	r1, r3
 8002522:	481f      	ldr	r0, [pc, #124]	; (80025a0 <MX_GPIO_Init+0x1bc>)
 8002524:	f000 fefc 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833SCK_Pin AD9833DATA_Pin AD9833SS_Pin */
  GPIO_InitStruct.Pin = AD9833SCK_Pin|AD9833DATA_Pin|AD9833SS_Pin;
 8002528:	23e0      	movs	r3, #224	; 0xe0
 800252a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252c:	2301      	movs	r3, #1
 800252e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	4619      	mov	r1, r3
 800253e:	4819      	ldr	r0, [pc, #100]	; (80025a4 <MX_GPIO_Init+0x1c0>)
 8002540:	f000 feee 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin;
 8002544:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254a:	2301      	movs	r3, #1
 800254c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002556:	f107 031c 	add.w	r3, r7, #28
 800255a:	4619      	mov	r1, r3
 800255c:	4812      	ldr	r0, [pc, #72]	; (80025a8 <MX_GPIO_Init+0x1c4>)
 800255e:	f000 fedf 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8002562:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002568:	2301      	movs	r3, #1
 800256a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002574:	f107 031c 	add.w	r3, r7, #28
 8002578:	4619      	mov	r1, r3
 800257a:	480c      	ldr	r0, [pc, #48]	; (80025ac <MX_GPIO_Init+0x1c8>)
 800257c:	f000 fed0 	bl	8003320 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	2007      	movs	r0, #7
 8002586:	f000 fe94 	bl	80032b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800258a:	2007      	movs	r0, #7
 800258c:	f000 fead 	bl	80032ea <HAL_NVIC_EnableIRQ>

}
 8002590:	bf00      	nop
 8002592:	3730      	adds	r7, #48	; 0x30
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800
 800259c:	40021000 	.word	0x40021000
 80025a0:	40020800 	.word	0x40020800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020400 	.word	0x40020400
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	10110000 	.word	0x10110000

080025b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_MspInit+0x4c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	4a0f      	ldr	r2, [pc, #60]	; (8002610 <HAL_MspInit+0x4c>)
 80025d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d8:	6453      	str	r3, [r2, #68]	; 0x44
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <HAL_MspInit+0x4c>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_MspInit+0x4c>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	4a08      	ldr	r2, [pc, #32]	; (8002610 <HAL_MspInit+0x4c>)
 80025f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f4:	6413      	str	r3, [r2, #64]	; 0x40
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_MspInit+0x4c>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800

08002614 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a17      	ldr	r2, [pc, #92]	; (8002690 <HAL_ADC_MspInit+0x7c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d127      	bne.n	8002686 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	4b16      	ldr	r3, [pc, #88]	; (8002694 <HAL_ADC_MspInit+0x80>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a15      	ldr	r2, [pc, #84]	; (8002694 <HAL_ADC_MspInit+0x80>)
 8002640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <HAL_ADC_MspInit+0x80>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <HAL_ADC_MspInit+0x80>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a0e      	ldr	r2, [pc, #56]	; (8002694 <HAL_ADC_MspInit+0x80>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <HAL_ADC_MspInit+0x80>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800266e:	2301      	movs	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002672:	2303      	movs	r3, #3
 8002674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4619      	mov	r1, r3
 8002680:	4805      	ldr	r0, [pc, #20]	; (8002698 <HAL_ADC_MspInit+0x84>)
 8002682:	f000 fe4d 	bl	8003320 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002686:	bf00      	nop
 8002688:	3728      	adds	r7, #40	; 0x28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40012000 	.word	0x40012000
 8002694:	40023800 	.word	0x40023800
 8002698:	40020000 	.word	0x40020000

0800269c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ae:	e7fe      	b.n	80026ae <HardFault_Handler+0x4>

080026b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b4:	e7fe      	b.n	80026b4 <MemManage_Handler+0x4>

080026b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ba:	e7fe      	b.n	80026ba <BusFault_Handler+0x4>

080026bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c0:	e7fe      	b.n	80026c0 <UsageFault_Handler+0x4>

080026c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f0:	f000 f8d6 	bl	80028a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
		extTest=1;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <EXTI1_IRQHandler+0x14>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002702:	2002      	movs	r0, #2
 8002704:	f000 ffc0 	bl	8003688 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */



  /* USER CODE END EXTI1_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000108 	.word	0x20000108

08002710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002718:	4a14      	ldr	r2, [pc, #80]	; (800276c <_sbrk+0x5c>)
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <_sbrk+0x60>)
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <_sbrk+0x64>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <_sbrk+0x64>)
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <_sbrk+0x68>)
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <_sbrk+0x64>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	429a      	cmp	r2, r3
 800273e:	d207      	bcs.n	8002750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002740:	f001 fc20 	bl	8003f84 <__errno>
 8002744:	4602      	mov	r2, r0
 8002746:	230c      	movs	r3, #12
 8002748:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	e009      	b.n	8002764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <_sbrk+0x64>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002756:	4b07      	ldr	r3, [pc, #28]	; (8002774 <_sbrk+0x64>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	4a05      	ldr	r2, [pc, #20]	; (8002774 <_sbrk+0x64>)
 8002760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002762:	68fb      	ldr	r3, [r7, #12]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20020000 	.word	0x20020000
 8002770:	00000400 	.word	0x00000400
 8002774:	2000010c 	.word	0x2000010c
 8002778:	20000180 	.word	0x20000180

0800277c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <SystemInit+0x28>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	4a07      	ldr	r2, [pc, #28]	; (80027a4 <SystemInit+0x28>)
 8002788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800278c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <SystemInit+0x28>)
 8002792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002796:	609a      	str	r2, [r3, #8]
#endif
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027ae:	e003      	b.n	80027b8 <LoopCopyDataInit>

080027b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027b6:	3104      	adds	r1, #4

080027b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027b8:	480b      	ldr	r0, [pc, #44]	; (80027e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027c0:	d3f6      	bcc.n	80027b0 <CopyDataInit>
  ldr  r2, =_sbss
 80027c2:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027c4:	e002      	b.n	80027cc <LoopFillZerobss>

080027c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027c8:	f842 3b04 	str.w	r3, [r2], #4

080027cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027d0:	d3f9      	bcc.n	80027c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027d2:	f7ff ffd3 	bl	800277c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027d6:	f001 fbdb 	bl	8003f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027da:	f7fe ff95 	bl	8001708 <main>
  bx  lr    
 80027de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80027e4:	080048c0 	.word	0x080048c0
  ldr  r0, =_sdata
 80027e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027ec:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80027f0:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80027f4:	2000017c 	.word	0x2000017c

080027f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027f8:	e7fe      	b.n	80027f8 <ADC_IRQHandler>
	...

080027fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <HAL_Init+0x40>)
 8002806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_Init+0x40>)
 8002812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_Init+0x40>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <HAL_Init+0x40>)
 800281e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002824:	2003      	movs	r0, #3
 8002826:	f000 fd39 	bl	800329c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f808 	bl	8002840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002830:	f7ff fec8 	bl	80025c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023c00 	.word	0x40023c00

08002840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_InitTick+0x54>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_InitTick+0x58>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002856:	fbb3 f3f1 	udiv	r3, r3, r1
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f000 fd51 	bl	8003306 <HAL_SYSTICK_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00e      	b.n	800288c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d80a      	bhi.n	800288a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002874:	2200      	movs	r2, #0
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f000 fd19 	bl	80032b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <HAL_InitTick+0x5c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000020 	.word	0x20000020
 8002898:	20000028 	.word	0x20000028
 800289c:	20000024 	.word	0x20000024

080028a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_IncTick+0x20>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_IncTick+0x24>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <HAL_IncTick+0x24>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000028 	.word	0x20000028
 80028c4:	20000174 	.word	0x20000174

080028c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return uwTick;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_GetTick+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000174 	.word	0x20000174

080028e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff ffee 	bl	80028c8 <HAL_GetTick>
 80028ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d005      	beq.n	8002906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_Delay+0x40>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002906:	bf00      	nop
 8002908:	f7ff ffde 	bl	80028c8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	429a      	cmp	r2, r3
 8002916:	d8f7      	bhi.n	8002908 <HAL_Delay+0x28>
  {
  }
}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000028 	.word	0x20000028

08002924 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e033      	b.n	80029a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff fe66 	bl	8002614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	d118      	bne.n	8002994 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800296a:	f023 0302 	bic.w	r3, r3, #2
 800296e:	f043 0202 	orr.w	r2, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fac4 	bl	8002f04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
 8002992:	e001      	b.n	8002998 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_Start+0x1a>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e0a5      	b.n	8002b12 <HAL_ADC_Start+0x166>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d018      	beq.n	8002a0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029ec:	4b4c      	ldr	r3, [pc, #304]	; (8002b20 <HAL_ADC_Start+0x174>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a4c      	ldr	r2, [pc, #304]	; (8002b24 <HAL_ADC_Start+0x178>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0c9a      	lsrs	r2, r3, #18
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a00:	e002      	b.n	8002a08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f9      	bne.n	8002a02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d179      	bne.n	8002b10 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5a:	d106      	bne.n	8002a6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	f023 0206 	bic.w	r2, r3, #6
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	645a      	str	r2, [r3, #68]	; 0x44
 8002a68:	e002      	b.n	8002a70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_ADC_Start+0x17c>)
 8002a7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d12a      	bne.n	8002ae8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a25      	ldr	r2, [pc, #148]	; (8002b2c <HAL_ADC_Start+0x180>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d015      	beq.n	8002ac8 <HAL_ADC_Start+0x11c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a23      	ldr	r2, [pc, #140]	; (8002b30 <HAL_ADC_Start+0x184>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d105      	bne.n	8002ab2 <HAL_ADC_Start+0x106>
 8002aa6:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_ADC_Start+0x17c>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <HAL_ADC_Start+0x188>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d129      	bne.n	8002b10 <HAL_ADC_Start+0x164>
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_ADC_Start+0x17c>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d823      	bhi.n	8002b10 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d11c      	bne.n	8002b10 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	e013      	b.n	8002b10 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <HAL_ADC_Start+0x180>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10e      	bne.n	8002b10 <HAL_ADC_Start+0x164>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d107      	bne.n	8002b10 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b0e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000020 	.word	0x20000020
 8002b24:	431bde83 	.word	0x431bde83
 8002b28:	40012300 	.word	0x40012300
 8002b2c:	40012000 	.word	0x40012000
 8002b30:	40012100 	.word	0x40012100
 8002b34:	40012200 	.word	0x40012200

08002b38 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_Stop+0x16>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e021      	b.n	8002b92 <HAL_ADC_Stop+0x5a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d109      	bne.n	8002b88 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	f043 0201 	orr.w	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bba:	d113      	bne.n	8002be4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bca:	d10b      	bne.n	8002be4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f043 0220 	orr.w	r2, r3, #32
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e05c      	b.n	8002c9e <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002be4:	f7ff fe70 	bl	80028c8 <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bea:	e01a      	b.n	8002c22 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d016      	beq.n	8002c22 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d007      	beq.n	8002c0a <HAL_ADC_PollForConversion+0x6c>
 8002bfa:	f7ff fe65 	bl	80028c8 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d20b      	bcs.n	8002c22 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f043 0204 	orr.w	r2, r3, #4
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e03d      	b.n	8002c9e <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d1dd      	bne.n	8002bec <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0212 	mvn.w	r2, #18
 8002c38:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d123      	bne.n	8002c9c <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d11f      	bne.n	8002c9c <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d111      	bne.n	8002c9c <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f043 0201 	orr.w	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x1c>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e105      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x228>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b09      	cmp	r3, #9
 8002cea:	d925      	bls.n	8002d38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68d9      	ldr	r1, [r3, #12]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b1e      	subs	r3, #30
 8002d02:	2207      	movs	r2, #7
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	400a      	ands	r2, r1
 8002d10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68d9      	ldr	r1, [r3, #12]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	4618      	mov	r0, r3
 8002d24:	4603      	mov	r3, r0
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4403      	add	r3, r0
 8002d2a:	3b1e      	subs	r3, #30
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	e022      	b.n	8002d7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6919      	ldr	r1, [r3, #16]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	400a      	ands	r2, r1
 8002d5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6919      	ldr	r1, [r3, #16]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4403      	add	r3, r0
 8002d74:	409a      	lsls	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d824      	bhi.n	8002dd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	3b05      	subs	r3, #5
 8002d98:	221f      	movs	r2, #31
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	400a      	ands	r2, r1
 8002da6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4618      	mov	r0, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b05      	subs	r3, #5
 8002dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8002dce:	e04c      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d824      	bhi.n	8002e22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	3b23      	subs	r3, #35	; 0x23
 8002dea:	221f      	movs	r2, #31
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43da      	mvns	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	400a      	ands	r2, r1
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	4618      	mov	r0, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	3b23      	subs	r3, #35	; 0x23
 8002e14:	fa00 f203 	lsl.w	r2, r0, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e20:	e023      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	3b41      	subs	r3, #65	; 0x41
 8002e34:	221f      	movs	r2, #31
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	400a      	ands	r2, r1
 8002e42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	4618      	mov	r0, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3b41      	subs	r3, #65	; 0x41
 8002e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e6a:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <HAL_ADC_ConfigChannel+0x234>)
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a21      	ldr	r2, [pc, #132]	; (8002ef8 <HAL_ADC_ConfigChannel+0x238>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d109      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x1cc>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b12      	cmp	r3, #18
 8002e7e:	d105      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a19      	ldr	r2, [pc, #100]	; (8002ef8 <HAL_ADC_ConfigChannel+0x238>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d123      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x21e>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b10      	cmp	r3, #16
 8002e9c:	d003      	beq.n	8002ea6 <HAL_ADC_ConfigChannel+0x1e6>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b11      	cmp	r3, #17
 8002ea4:	d11b      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b10      	cmp	r3, #16
 8002eb8:	d111      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_ADC_ConfigChannel+0x23c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a10      	ldr	r2, [pc, #64]	; (8002f00 <HAL_ADC_ConfigChannel+0x240>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	0c9a      	lsrs	r2, r3, #18
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ed0:	e002      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f9      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	40012300 	.word	0x40012300
 8002ef8:	40012000 	.word	0x40012000
 8002efc:	20000020 	.word	0x20000020
 8002f00:	431bde83 	.word	0x431bde83

08002f04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f0c:	4b79      	ldr	r3, [pc, #484]	; (80030f4 <ADC_Init+0x1f0>)
 8002f0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	021a      	lsls	r2, r3, #8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6899      	ldr	r1, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <ADC_Init+0x1f4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d022      	beq.n	8002fe2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002faa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6899      	ldr	r1, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6899      	ldr	r1, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	e00f      	b.n	8003002 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003000:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0202 	bic.w	r2, r2, #2
 8003010:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	7e1b      	ldrb	r3, [r3, #24]
 800301c:	005a      	lsls	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01b      	beq.n	8003068 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800304e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	3b01      	subs	r3, #1
 800305c:	035a      	lsls	r2, r3, #13
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	e007      	b.n	8003078 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003076:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003086:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	3b01      	subs	r3, #1
 8003094:	051a      	lsls	r2, r3, #20
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6899      	ldr	r1, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ba:	025a      	lsls	r2, r3, #9
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6899      	ldr	r1, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	029a      	lsls	r2, r3, #10
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	609a      	str	r2, [r3, #8]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40012300 	.word	0x40012300
 80030f8:	0f000001 	.word	0x0f000001

080030fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003118:	4013      	ands	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312e:	4a04      	ldr	r2, [pc, #16]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	60d3      	str	r3, [r2, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <__NVIC_GetPriorityGrouping+0x18>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 0307 	and.w	r3, r3, #7
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	2b00      	cmp	r3, #0
 8003170:	db0b      	blt.n	800318a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	4907      	ldr	r1, [pc, #28]	; (8003198 <__NVIC_EnableIRQ+0x38>)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2001      	movs	r0, #1
 8003182:	fa00 f202 	lsl.w	r2, r0, r2
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000e100 	.word	0xe000e100

0800319c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	db0a      	blt.n	80031c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	490c      	ldr	r1, [pc, #48]	; (80031e8 <__NVIC_SetPriority+0x4c>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	440b      	add	r3, r1
 80031c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c4:	e00a      	b.n	80031dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4908      	ldr	r1, [pc, #32]	; (80031ec <__NVIC_SetPriority+0x50>)
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	3b04      	subs	r3, #4
 80031d4:	0112      	lsls	r2, r2, #4
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	440b      	add	r3, r1
 80031da:	761a      	strb	r2, [r3, #24]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000e100 	.word	0xe000e100
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f1c3 0307 	rsb	r3, r3, #7
 800320a:	2b04      	cmp	r3, #4
 800320c:	bf28      	it	cs
 800320e:	2304      	movcs	r3, #4
 8003210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3304      	adds	r3, #4
 8003216:	2b06      	cmp	r3, #6
 8003218:	d902      	bls.n	8003220 <NVIC_EncodePriority+0x30>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3b03      	subs	r3, #3
 800321e:	e000      	b.n	8003222 <NVIC_EncodePriority+0x32>
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	401a      	ands	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003238:	f04f 31ff 	mov.w	r1, #4294967295
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	43d9      	mvns	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003248:	4313      	orrs	r3, r2
         );
}
 800324a:	4618      	mov	r0, r3
 800324c:	3724      	adds	r7, #36	; 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003268:	d301      	bcc.n	800326e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800326a:	2301      	movs	r3, #1
 800326c:	e00f      	b.n	800328e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <SysTick_Config+0x40>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003276:	210f      	movs	r1, #15
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f7ff ff8e 	bl	800319c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <SysTick_Config+0x40>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003286:	4b04      	ldr	r3, [pc, #16]	; (8003298 <SysTick_Config+0x40>)
 8003288:	2207      	movs	r2, #7
 800328a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	e000e010 	.word	0xe000e010

0800329c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff29 	bl	80030fc <__NVIC_SetPriorityGrouping>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c4:	f7ff ff3e 	bl	8003144 <__NVIC_GetPriorityGrouping>
 80032c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ff8e 	bl	80031f0 <NVIC_EncodePriority>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff5d 	bl	800319c <__NVIC_SetPriority>
}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff31 	bl	8003160 <__NVIC_EnableIRQ>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffa2 	bl	8003258 <SysTick_Config>
 8003314:	4603      	mov	r3, r0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	; 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	e16b      	b.n	8003614 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800333c:	2201      	movs	r2, #1
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	429a      	cmp	r2, r3
 8003356:	f040 815a 	bne.w	800360e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d00b      	beq.n	800337a <HAL_GPIO_Init+0x5a>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d007      	beq.n	800337a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800336e:	2b11      	cmp	r3, #17
 8003370:	d003      	beq.n	800337a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b12      	cmp	r3, #18
 8003378:	d130      	bne.n	80033dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	2203      	movs	r2, #3
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033b0:	2201      	movs	r2, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	f003 0201 	and.w	r2, r3, #1
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0xfc>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b12      	cmp	r3, #18
 800341a:	d123      	bne.n	8003464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	08da      	lsrs	r2, r3, #3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3208      	adds	r2, #8
 8003424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	220f      	movs	r2, #15
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	08da      	lsrs	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3208      	adds	r2, #8
 800345e:	69b9      	ldr	r1, [r7, #24]
 8003460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	2203      	movs	r2, #3
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 0203 	and.w	r2, r3, #3
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80b4 	beq.w	800360e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	4b5f      	ldr	r3, [pc, #380]	; (8003628 <HAL_GPIO_Init+0x308>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	4a5e      	ldr	r2, [pc, #376]	; (8003628 <HAL_GPIO_Init+0x308>)
 80034b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b4:	6453      	str	r3, [r2, #68]	; 0x44
 80034b6:	4b5c      	ldr	r3, [pc, #368]	; (8003628 <HAL_GPIO_Init+0x308>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034c2:	4a5a      	ldr	r2, [pc, #360]	; (800362c <HAL_GPIO_Init+0x30c>)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	3302      	adds	r3, #2
 80034ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	220f      	movs	r2, #15
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a51      	ldr	r2, [pc, #324]	; (8003630 <HAL_GPIO_Init+0x310>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d02b      	beq.n	8003546 <HAL_GPIO_Init+0x226>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a50      	ldr	r2, [pc, #320]	; (8003634 <HAL_GPIO_Init+0x314>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d025      	beq.n	8003542 <HAL_GPIO_Init+0x222>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a4f      	ldr	r2, [pc, #316]	; (8003638 <HAL_GPIO_Init+0x318>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01f      	beq.n	800353e <HAL_GPIO_Init+0x21e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a4e      	ldr	r2, [pc, #312]	; (800363c <HAL_GPIO_Init+0x31c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d019      	beq.n	800353a <HAL_GPIO_Init+0x21a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a4d      	ldr	r2, [pc, #308]	; (8003640 <HAL_GPIO_Init+0x320>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_GPIO_Init+0x216>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a4c      	ldr	r2, [pc, #304]	; (8003644 <HAL_GPIO_Init+0x324>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00d      	beq.n	8003532 <HAL_GPIO_Init+0x212>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a4b      	ldr	r2, [pc, #300]	; (8003648 <HAL_GPIO_Init+0x328>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d007      	beq.n	800352e <HAL_GPIO_Init+0x20e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a4a      	ldr	r2, [pc, #296]	; (800364c <HAL_GPIO_Init+0x32c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d101      	bne.n	800352a <HAL_GPIO_Init+0x20a>
 8003526:	2307      	movs	r3, #7
 8003528:	e00e      	b.n	8003548 <HAL_GPIO_Init+0x228>
 800352a:	2308      	movs	r3, #8
 800352c:	e00c      	b.n	8003548 <HAL_GPIO_Init+0x228>
 800352e:	2306      	movs	r3, #6
 8003530:	e00a      	b.n	8003548 <HAL_GPIO_Init+0x228>
 8003532:	2305      	movs	r3, #5
 8003534:	e008      	b.n	8003548 <HAL_GPIO_Init+0x228>
 8003536:	2304      	movs	r3, #4
 8003538:	e006      	b.n	8003548 <HAL_GPIO_Init+0x228>
 800353a:	2303      	movs	r3, #3
 800353c:	e004      	b.n	8003548 <HAL_GPIO_Init+0x228>
 800353e:	2302      	movs	r3, #2
 8003540:	e002      	b.n	8003548 <HAL_GPIO_Init+0x228>
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <HAL_GPIO_Init+0x228>
 8003546:	2300      	movs	r3, #0
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	f002 0203 	and.w	r2, r2, #3
 800354e:	0092      	lsls	r2, r2, #2
 8003550:	4093      	lsls	r3, r2
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003558:	4934      	ldr	r1, [pc, #208]	; (800362c <HAL_GPIO_Init+0x30c>)
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	3302      	adds	r3, #2
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003566:	4b3a      	ldr	r3, [pc, #232]	; (8003650 <HAL_GPIO_Init+0x330>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800358a:	4a31      	ldr	r2, [pc, #196]	; (8003650 <HAL_GPIO_Init+0x330>)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003590:	4b2f      	ldr	r3, [pc, #188]	; (8003650 <HAL_GPIO_Init+0x330>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035b4:	4a26      	ldr	r2, [pc, #152]	; (8003650 <HAL_GPIO_Init+0x330>)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ba:	4b25      	ldr	r3, [pc, #148]	; (8003650 <HAL_GPIO_Init+0x330>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035de:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <HAL_GPIO_Init+0x330>)
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035e4:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <HAL_GPIO_Init+0x330>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003608:	4a11      	ldr	r2, [pc, #68]	; (8003650 <HAL_GPIO_Init+0x330>)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3301      	adds	r3, #1
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	2b0f      	cmp	r3, #15
 8003618:	f67f ae90 	bls.w	800333c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800361c:	bf00      	nop
 800361e:	3724      	adds	r7, #36	; 0x24
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	40023800 	.word	0x40023800
 800362c:	40013800 	.word	0x40013800
 8003630:	40020000 	.word	0x40020000
 8003634:	40020400 	.word	0x40020400
 8003638:	40020800 	.word	0x40020800
 800363c:	40020c00 	.word	0x40020c00
 8003640:	40021000 	.word	0x40021000
 8003644:	40021400 	.word	0x40021400
 8003648:	40021800 	.word	0x40021800
 800364c:	40021c00 	.word	0x40021c00
 8003650:	40013c00 	.word	0x40013c00

08003654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
 8003660:	4613      	mov	r3, r2
 8003662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003664:	787b      	ldrb	r3, [r7, #1]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800366a:	887a      	ldrh	r2, [r7, #2]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003670:	e003      	b.n	800367a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003672:	887b      	ldrh	r3, [r7, #2]
 8003674:	041a      	lsls	r2, r3, #16
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	619a      	str	r2, [r3, #24]
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d006      	beq.n	80036ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800369e:	4a05      	ldr	r2, [pc, #20]	; (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f806 	bl	80036b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40013c00 	.word	0x40013c00

080036b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e25b      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d075      	beq.n	80037da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ee:	4ba3      	ldr	r3, [pc, #652]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d00c      	beq.n	8003714 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fa:	4ba0      	ldr	r3, [pc, #640]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003702:	2b08      	cmp	r3, #8
 8003704:	d112      	bne.n	800372c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003706:	4b9d      	ldr	r3, [pc, #628]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003712:	d10b      	bne.n	800372c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003714:	4b99      	ldr	r3, [pc, #612]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d05b      	beq.n	80037d8 <HAL_RCC_OscConfig+0x108>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d157      	bne.n	80037d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e236      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003734:	d106      	bne.n	8003744 <HAL_RCC_OscConfig+0x74>
 8003736:	4b91      	ldr	r3, [pc, #580]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a90      	ldr	r2, [pc, #576]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 800373c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e01d      	b.n	8003780 <HAL_RCC_OscConfig+0xb0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800374c:	d10c      	bne.n	8003768 <HAL_RCC_OscConfig+0x98>
 800374e:	4b8b      	ldr	r3, [pc, #556]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a8a      	ldr	r2, [pc, #552]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b88      	ldr	r3, [pc, #544]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a87      	ldr	r2, [pc, #540]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e00b      	b.n	8003780 <HAL_RCC_OscConfig+0xb0>
 8003768:	4b84      	ldr	r3, [pc, #528]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a83      	ldr	r2, [pc, #524]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 800376e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	4b81      	ldr	r3, [pc, #516]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a80      	ldr	r2, [pc, #512]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 800377a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800377e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d013      	beq.n	80037b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7ff f89e 	bl	80028c8 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003790:	f7ff f89a 	bl	80028c8 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	; 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e1fb      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b76      	ldr	r3, [pc, #472]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0xc0>
 80037ae:	e014      	b.n	80037da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7ff f88a 	bl	80028c8 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b8:	f7ff f886 	bl	80028c8 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e1e7      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ca:	4b6c      	ldr	r3, [pc, #432]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0xe8>
 80037d6:	e000      	b.n	80037da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d063      	beq.n	80038ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037e6:	4b65      	ldr	r3, [pc, #404]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f2:	4b62      	ldr	r3, [pc, #392]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d11c      	bne.n	8003838 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037fe:	4b5f      	ldr	r3, [pc, #380]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d116      	bne.n	8003838 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380a:	4b5c      	ldr	r3, [pc, #368]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_RCC_OscConfig+0x152>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d001      	beq.n	8003822 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e1bb      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003822:	4b56      	ldr	r3, [pc, #344]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4952      	ldr	r1, [pc, #328]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003836:	e03a      	b.n	80038ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003840:	4b4f      	ldr	r3, [pc, #316]	; (8003980 <HAL_RCC_OscConfig+0x2b0>)
 8003842:	2201      	movs	r2, #1
 8003844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003846:	f7ff f83f 	bl	80028c8 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800384e:	f7ff f83b 	bl	80028c8 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e19c      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003860:	4b46      	ldr	r3, [pc, #280]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386c:	4b43      	ldr	r3, [pc, #268]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4940      	ldr	r1, [pc, #256]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]
 8003880:	e015      	b.n	80038ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003882:	4b3f      	ldr	r3, [pc, #252]	; (8003980 <HAL_RCC_OscConfig+0x2b0>)
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7ff f81e 	bl	80028c8 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003890:	f7ff f81a 	bl	80028c8 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e17b      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a2:	4b36      	ldr	r3, [pc, #216]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d030      	beq.n	800391c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d016      	beq.n	80038f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c2:	4b30      	ldr	r3, [pc, #192]	; (8003984 <HAL_RCC_OscConfig+0x2b4>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fe fffe 	bl	80028c8 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d0:	f7fe fffa 	bl	80028c8 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e15b      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e2:	4b26      	ldr	r3, [pc, #152]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x200>
 80038ee:	e015      	b.n	800391c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f0:	4b24      	ldr	r3, [pc, #144]	; (8003984 <HAL_RCC_OscConfig+0x2b4>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f6:	f7fe ffe7 	bl	80028c8 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fe:	f7fe ffe3 	bl	80028c8 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e144      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003910:	4b1a      	ldr	r3, [pc, #104]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f0      	bne.n	80038fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80a0 	beq.w	8003a6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392a:	2300      	movs	r3, #0
 800392c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392e:	4b13      	ldr	r3, [pc, #76]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10f      	bne.n	800395a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	4b0f      	ldr	r3, [pc, #60]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	4a0e      	ldr	r2, [pc, #56]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003948:	6413      	str	r3, [r2, #64]	; 0x40
 800394a:	4b0c      	ldr	r3, [pc, #48]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003956:	2301      	movs	r3, #1
 8003958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_OscConfig+0x2b8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d121      	bne.n	80039aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <HAL_RCC_OscConfig+0x2b8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a07      	ldr	r2, [pc, #28]	; (8003988 <HAL_RCC_OscConfig+0x2b8>)
 800396c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003972:	f7fe ffa9 	bl	80028c8 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	e011      	b.n	800399e <HAL_RCC_OscConfig+0x2ce>
 800397a:	bf00      	nop
 800397c:	40023800 	.word	0x40023800
 8003980:	42470000 	.word	0x42470000
 8003984:	42470e80 	.word	0x42470e80
 8003988:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398c:	f7fe ff9c 	bl	80028c8 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e0fd      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399e:	4b81      	ldr	r3, [pc, #516]	; (8003ba4 <HAL_RCC_OscConfig+0x4d4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d106      	bne.n	80039c0 <HAL_RCC_OscConfig+0x2f0>
 80039b2:	4b7d      	ldr	r3, [pc, #500]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	4a7c      	ldr	r2, [pc, #496]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	6713      	str	r3, [r2, #112]	; 0x70
 80039be:	e01c      	b.n	80039fa <HAL_RCC_OscConfig+0x32a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b05      	cmp	r3, #5
 80039c6:	d10c      	bne.n	80039e2 <HAL_RCC_OscConfig+0x312>
 80039c8:	4b77      	ldr	r3, [pc, #476]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	4a76      	ldr	r2, [pc, #472]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 80039ce:	f043 0304 	orr.w	r3, r3, #4
 80039d2:	6713      	str	r3, [r2, #112]	; 0x70
 80039d4:	4b74      	ldr	r3, [pc, #464]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 80039d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d8:	4a73      	ldr	r2, [pc, #460]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	6713      	str	r3, [r2, #112]	; 0x70
 80039e0:	e00b      	b.n	80039fa <HAL_RCC_OscConfig+0x32a>
 80039e2:	4b71      	ldr	r3, [pc, #452]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	4a70      	ldr	r2, [pc, #448]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	6713      	str	r3, [r2, #112]	; 0x70
 80039ee:	4b6e      	ldr	r3, [pc, #440]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	4a6d      	ldr	r2, [pc, #436]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 80039f4:	f023 0304 	bic.w	r3, r3, #4
 80039f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d015      	beq.n	8003a2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a02:	f7fe ff61 	bl	80028c8 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a08:	e00a      	b.n	8003a20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a0a:	f7fe ff5d 	bl	80028c8 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e0bc      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a20:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ee      	beq.n	8003a0a <HAL_RCC_OscConfig+0x33a>
 8003a2c:	e014      	b.n	8003a58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2e:	f7fe ff4b 	bl	80028c8 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fe ff47 	bl	80028c8 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e0a6      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a4c:	4b56      	ldr	r3, [pc, #344]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ee      	bne.n	8003a36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5e:	4b52      	ldr	r3, [pc, #328]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	4a51      	ldr	r2, [pc, #324]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 8003a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 8092 	beq.w	8003b98 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a74:	4b4c      	ldr	r3, [pc, #304]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 030c 	and.w	r3, r3, #12
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d05c      	beq.n	8003b3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d141      	bne.n	8003b0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a88:	4b48      	ldr	r3, [pc, #288]	; (8003bac <HAL_RCC_OscConfig+0x4dc>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8e:	f7fe ff1b 	bl	80028c8 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a96:	f7fe ff17 	bl	80028c8 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e078      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa8:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f0      	bne.n	8003a96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	019b      	lsls	r3, r3, #6
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	085b      	lsrs	r3, r3, #1
 8003acc:	3b01      	subs	r3, #1
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	061b      	lsls	r3, r3, #24
 8003ad8:	4933      	ldr	r1, [pc, #204]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ade:	4b33      	ldr	r3, [pc, #204]	; (8003bac <HAL_RCC_OscConfig+0x4dc>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe fef0 	bl	80028c8 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aec:	f7fe feec 	bl	80028c8 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e04d      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afe:	4b2a      	ldr	r3, [pc, #168]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x41c>
 8003b0a:	e045      	b.n	8003b98 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0c:	4b27      	ldr	r3, [pc, #156]	; (8003bac <HAL_RCC_OscConfig+0x4dc>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7fe fed9 	bl	80028c8 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1a:	f7fe fed5 	bl	80028c8 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e036      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f0      	bne.n	8003b1a <HAL_RCC_OscConfig+0x44a>
 8003b38:	e02e      	b.n	8003b98 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e029      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b46:	4b18      	ldr	r3, [pc, #96]	; (8003ba8 <HAL_RCC_OscConfig+0x4d8>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d11c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d115      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b6e:	4013      	ands	r3, r2
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d10d      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d106      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40007000 	.word	0x40007000
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	42470060 	.word	0x42470060

08003bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0cc      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b68      	ldr	r3, [pc, #416]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d90c      	bls.n	8003bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b65      	ldr	r3, [pc, #404]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b63      	ldr	r3, [pc, #396]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0b8      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c04:	4b59      	ldr	r3, [pc, #356]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a58      	ldr	r2, [pc, #352]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c1c:	4b53      	ldr	r3, [pc, #332]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4a52      	ldr	r2, [pc, #328]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c28:	4b50      	ldr	r3, [pc, #320]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	494d      	ldr	r1, [pc, #308]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d044      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d119      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e07f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6e:	4b3f      	ldr	r3, [pc, #252]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e06f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7e:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e067      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c8e:	4b37      	ldr	r3, [pc, #220]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f023 0203 	bic.w	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	4934      	ldr	r1, [pc, #208]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca0:	f7fe fe12 	bl	80028c8 <HAL_GetTick>
 8003ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca8:	f7fe fe0e 	bl	80028c8 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e04f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 020c 	and.w	r2, r3, #12
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d1eb      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d20c      	bcs.n	8003cf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d001      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e032      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d04:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4916      	ldr	r1, [pc, #88]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	490e      	ldr	r1, [pc, #56]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d36:	f000 f821 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 8003d3a:	4601      	mov	r1, r0
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	4a0a      	ldr	r2, [pc, #40]	; (8003d70 <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	5cd3      	ldrb	r3, [r2, r3]
 8003d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d4e:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_RCC_ClockConfig+0x1c8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe fd72 	bl	8002840 <HAL_InitTick>

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40023c00 	.word	0x40023c00
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	08004864 	.word	0x08004864
 8003d74:	20000020 	.word	0x20000020
 8003d78:	20000024 	.word	0x20000024

08003d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d92:	4b50      	ldr	r3, [pc, #320]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d007      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0x32>
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d008      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x38>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f040 808d 	bne.w	8003ec2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003da8:	4b4b      	ldr	r3, [pc, #300]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003daa:	60bb      	str	r3, [r7, #8]
       break;
 8003dac:	e08c      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dae:	4b4b      	ldr	r3, [pc, #300]	; (8003edc <HAL_RCC_GetSysClockFreq+0x160>)
 8003db0:	60bb      	str	r3, [r7, #8]
      break;
 8003db2:	e089      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003db4:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dbe:	4b45      	ldr	r3, [pc, #276]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d023      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dca:	4b42      	ldr	r3, [pc, #264]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	099b      	lsrs	r3, r3, #6
 8003dd0:	f04f 0400 	mov.w	r4, #0
 8003dd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	ea03 0501 	and.w	r5, r3, r1
 8003de0:	ea04 0602 	and.w	r6, r4, r2
 8003de4:	4a3d      	ldr	r2, [pc, #244]	; (8003edc <HAL_RCC_GetSysClockFreq+0x160>)
 8003de6:	fb02 f106 	mul.w	r1, r2, r6
 8003dea:	2200      	movs	r2, #0
 8003dec:	fb02 f205 	mul.w	r2, r2, r5
 8003df0:	440a      	add	r2, r1
 8003df2:	493a      	ldr	r1, [pc, #232]	; (8003edc <HAL_RCC_GetSysClockFreq+0x160>)
 8003df4:	fba5 0101 	umull	r0, r1, r5, r1
 8003df8:	1853      	adds	r3, r2, r1
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f04f 0400 	mov.w	r4, #0
 8003e02:	461a      	mov	r2, r3
 8003e04:	4623      	mov	r3, r4
 8003e06:	f7fc fe49 	bl	8000a9c <__aeabi_uldivmod>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e049      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e12:	4b30      	ldr	r3, [pc, #192]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	f04f 0400 	mov.w	r4, #0
 8003e1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	ea03 0501 	and.w	r5, r3, r1
 8003e28:	ea04 0602 	and.w	r6, r4, r2
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	4632      	mov	r2, r6
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	f04f 0400 	mov.w	r4, #0
 8003e38:	0154      	lsls	r4, r2, #5
 8003e3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e3e:	014b      	lsls	r3, r1, #5
 8003e40:	4619      	mov	r1, r3
 8003e42:	4622      	mov	r2, r4
 8003e44:	1b49      	subs	r1, r1, r5
 8003e46:	eb62 0206 	sbc.w	r2, r2, r6
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	f04f 0400 	mov.w	r4, #0
 8003e52:	0194      	lsls	r4, r2, #6
 8003e54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e58:	018b      	lsls	r3, r1, #6
 8003e5a:	1a5b      	subs	r3, r3, r1
 8003e5c:	eb64 0402 	sbc.w	r4, r4, r2
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	00e2      	lsls	r2, r4, #3
 8003e6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e6e:	00d9      	lsls	r1, r3, #3
 8003e70:	460b      	mov	r3, r1
 8003e72:	4614      	mov	r4, r2
 8003e74:	195b      	adds	r3, r3, r5
 8003e76:	eb44 0406 	adc.w	r4, r4, r6
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	02a2      	lsls	r2, r4, #10
 8003e84:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e88:	0299      	lsls	r1, r3, #10
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4614      	mov	r4, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	4621      	mov	r1, r4
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f04f 0400 	mov.w	r4, #0
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4623      	mov	r3, r4
 8003e9c:	f7fc fdfe 	bl	8000a9c <__aeabi_uldivmod>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	0c1b      	lsrs	r3, r3, #16
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	60bb      	str	r3, [r7, #8]
      break;
 8003ec0:	e002      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003ec4:	60bb      	str	r3, [r7, #8]
      break;
 8003ec6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	00f42400 	.word	0x00f42400
 8003edc:	017d7840 	.word	0x017d7840

08003ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee4:	4b03      	ldr	r3, [pc, #12]	; (8003ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000020 	.word	0x20000020

08003ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003efc:	f7ff fff0 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003f00:	4601      	mov	r1, r0
 8003f02:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	0a9b      	lsrs	r3, r3, #10
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	4a03      	ldr	r2, [pc, #12]	; (8003f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f0e:	5cd3      	ldrb	r3, [r2, r3]
 8003f10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	08004874 	.word	0x08004874

08003f20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	220f      	movs	r2, #15
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f30:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_RCC_GetClockConfig+0x5c>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 0203 	and.w	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <HAL_RCC_GetClockConfig+0x5c>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <HAL_RCC_GetClockConfig+0x5c>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <HAL_RCC_GetClockConfig+0x5c>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	08db      	lsrs	r3, r3, #3
 8003f5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <HAL_RCC_GetClockConfig+0x60>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 020f 	and.w	r2, r3, #15
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	601a      	str	r2, [r3, #0]
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40023c00 	.word	0x40023c00

08003f84 <__errno>:
 8003f84:	4b01      	ldr	r3, [pc, #4]	; (8003f8c <__errno+0x8>)
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	2000002c 	.word	0x2000002c

08003f90 <__libc_init_array>:
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	4e0d      	ldr	r6, [pc, #52]	; (8003fc8 <__libc_init_array+0x38>)
 8003f94:	4c0d      	ldr	r4, [pc, #52]	; (8003fcc <__libc_init_array+0x3c>)
 8003f96:	1ba4      	subs	r4, r4, r6
 8003f98:	10a4      	asrs	r4, r4, #2
 8003f9a:	2500      	movs	r5, #0
 8003f9c:	42a5      	cmp	r5, r4
 8003f9e:	d109      	bne.n	8003fb4 <__libc_init_array+0x24>
 8003fa0:	4e0b      	ldr	r6, [pc, #44]	; (8003fd0 <__libc_init_array+0x40>)
 8003fa2:	4c0c      	ldr	r4, [pc, #48]	; (8003fd4 <__libc_init_array+0x44>)
 8003fa4:	f000 fc26 	bl	80047f4 <_init>
 8003fa8:	1ba4      	subs	r4, r4, r6
 8003faa:	10a4      	asrs	r4, r4, #2
 8003fac:	2500      	movs	r5, #0
 8003fae:	42a5      	cmp	r5, r4
 8003fb0:	d105      	bne.n	8003fbe <__libc_init_array+0x2e>
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fb8:	4798      	blx	r3
 8003fba:	3501      	adds	r5, #1
 8003fbc:	e7ee      	b.n	8003f9c <__libc_init_array+0xc>
 8003fbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fc2:	4798      	blx	r3
 8003fc4:	3501      	adds	r5, #1
 8003fc6:	e7f2      	b.n	8003fae <__libc_init_array+0x1e>
 8003fc8:	080048b8 	.word	0x080048b8
 8003fcc:	080048b8 	.word	0x080048b8
 8003fd0:	080048b8 	.word	0x080048b8
 8003fd4:	080048bc 	.word	0x080048bc

08003fd8 <memset>:
 8003fd8:	4402      	add	r2, r0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d100      	bne.n	8003fe2 <memset+0xa>
 8003fe0:	4770      	bx	lr
 8003fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fe6:	e7f9      	b.n	8003fdc <memset+0x4>

08003fe8 <siprintf>:
 8003fe8:	b40e      	push	{r1, r2, r3}
 8003fea:	b500      	push	{lr}
 8003fec:	b09c      	sub	sp, #112	; 0x70
 8003fee:	ab1d      	add	r3, sp, #116	; 0x74
 8003ff0:	9002      	str	r0, [sp, #8]
 8003ff2:	9006      	str	r0, [sp, #24]
 8003ff4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ff8:	4809      	ldr	r0, [pc, #36]	; (8004020 <siprintf+0x38>)
 8003ffa:	9107      	str	r1, [sp, #28]
 8003ffc:	9104      	str	r1, [sp, #16]
 8003ffe:	4909      	ldr	r1, [pc, #36]	; (8004024 <siprintf+0x3c>)
 8004000:	f853 2b04 	ldr.w	r2, [r3], #4
 8004004:	9105      	str	r1, [sp, #20]
 8004006:	6800      	ldr	r0, [r0, #0]
 8004008:	9301      	str	r3, [sp, #4]
 800400a:	a902      	add	r1, sp, #8
 800400c:	f000 f866 	bl	80040dc <_svfiprintf_r>
 8004010:	9b02      	ldr	r3, [sp, #8]
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	b01c      	add	sp, #112	; 0x70
 8004018:	f85d eb04 	ldr.w	lr, [sp], #4
 800401c:	b003      	add	sp, #12
 800401e:	4770      	bx	lr
 8004020:	2000002c 	.word	0x2000002c
 8004024:	ffff0208 	.word	0xffff0208

08004028 <__ssputs_r>:
 8004028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800402c:	688e      	ldr	r6, [r1, #8]
 800402e:	429e      	cmp	r6, r3
 8004030:	4682      	mov	sl, r0
 8004032:	460c      	mov	r4, r1
 8004034:	4690      	mov	r8, r2
 8004036:	4699      	mov	r9, r3
 8004038:	d837      	bhi.n	80040aa <__ssputs_r+0x82>
 800403a:	898a      	ldrh	r2, [r1, #12]
 800403c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004040:	d031      	beq.n	80040a6 <__ssputs_r+0x7e>
 8004042:	6825      	ldr	r5, [r4, #0]
 8004044:	6909      	ldr	r1, [r1, #16]
 8004046:	1a6f      	subs	r7, r5, r1
 8004048:	6965      	ldr	r5, [r4, #20]
 800404a:	2302      	movs	r3, #2
 800404c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004050:	fb95 f5f3 	sdiv	r5, r5, r3
 8004054:	f109 0301 	add.w	r3, r9, #1
 8004058:	443b      	add	r3, r7
 800405a:	429d      	cmp	r5, r3
 800405c:	bf38      	it	cc
 800405e:	461d      	movcc	r5, r3
 8004060:	0553      	lsls	r3, r2, #21
 8004062:	d530      	bpl.n	80040c6 <__ssputs_r+0x9e>
 8004064:	4629      	mov	r1, r5
 8004066:	f000 fb2b 	bl	80046c0 <_malloc_r>
 800406a:	4606      	mov	r6, r0
 800406c:	b950      	cbnz	r0, 8004084 <__ssputs_r+0x5c>
 800406e:	230c      	movs	r3, #12
 8004070:	f8ca 3000 	str.w	r3, [sl]
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	f04f 30ff 	mov.w	r0, #4294967295
 8004080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004084:	463a      	mov	r2, r7
 8004086:	6921      	ldr	r1, [r4, #16]
 8004088:	f000 faa8 	bl	80045dc <memcpy>
 800408c:	89a3      	ldrh	r3, [r4, #12]
 800408e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004096:	81a3      	strh	r3, [r4, #12]
 8004098:	6126      	str	r6, [r4, #16]
 800409a:	6165      	str	r5, [r4, #20]
 800409c:	443e      	add	r6, r7
 800409e:	1bed      	subs	r5, r5, r7
 80040a0:	6026      	str	r6, [r4, #0]
 80040a2:	60a5      	str	r5, [r4, #8]
 80040a4:	464e      	mov	r6, r9
 80040a6:	454e      	cmp	r6, r9
 80040a8:	d900      	bls.n	80040ac <__ssputs_r+0x84>
 80040aa:	464e      	mov	r6, r9
 80040ac:	4632      	mov	r2, r6
 80040ae:	4641      	mov	r1, r8
 80040b0:	6820      	ldr	r0, [r4, #0]
 80040b2:	f000 fa9e 	bl	80045f2 <memmove>
 80040b6:	68a3      	ldr	r3, [r4, #8]
 80040b8:	1b9b      	subs	r3, r3, r6
 80040ba:	60a3      	str	r3, [r4, #8]
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	441e      	add	r6, r3
 80040c0:	6026      	str	r6, [r4, #0]
 80040c2:	2000      	movs	r0, #0
 80040c4:	e7dc      	b.n	8004080 <__ssputs_r+0x58>
 80040c6:	462a      	mov	r2, r5
 80040c8:	f000 fb54 	bl	8004774 <_realloc_r>
 80040cc:	4606      	mov	r6, r0
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d1e2      	bne.n	8004098 <__ssputs_r+0x70>
 80040d2:	6921      	ldr	r1, [r4, #16]
 80040d4:	4650      	mov	r0, sl
 80040d6:	f000 faa5 	bl	8004624 <_free_r>
 80040da:	e7c8      	b.n	800406e <__ssputs_r+0x46>

080040dc <_svfiprintf_r>:
 80040dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e0:	461d      	mov	r5, r3
 80040e2:	898b      	ldrh	r3, [r1, #12]
 80040e4:	061f      	lsls	r7, r3, #24
 80040e6:	b09d      	sub	sp, #116	; 0x74
 80040e8:	4680      	mov	r8, r0
 80040ea:	460c      	mov	r4, r1
 80040ec:	4616      	mov	r6, r2
 80040ee:	d50f      	bpl.n	8004110 <_svfiprintf_r+0x34>
 80040f0:	690b      	ldr	r3, [r1, #16]
 80040f2:	b96b      	cbnz	r3, 8004110 <_svfiprintf_r+0x34>
 80040f4:	2140      	movs	r1, #64	; 0x40
 80040f6:	f000 fae3 	bl	80046c0 <_malloc_r>
 80040fa:	6020      	str	r0, [r4, #0]
 80040fc:	6120      	str	r0, [r4, #16]
 80040fe:	b928      	cbnz	r0, 800410c <_svfiprintf_r+0x30>
 8004100:	230c      	movs	r3, #12
 8004102:	f8c8 3000 	str.w	r3, [r8]
 8004106:	f04f 30ff 	mov.w	r0, #4294967295
 800410a:	e0c8      	b.n	800429e <_svfiprintf_r+0x1c2>
 800410c:	2340      	movs	r3, #64	; 0x40
 800410e:	6163      	str	r3, [r4, #20]
 8004110:	2300      	movs	r3, #0
 8004112:	9309      	str	r3, [sp, #36]	; 0x24
 8004114:	2320      	movs	r3, #32
 8004116:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800411a:	2330      	movs	r3, #48	; 0x30
 800411c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004120:	9503      	str	r5, [sp, #12]
 8004122:	f04f 0b01 	mov.w	fp, #1
 8004126:	4637      	mov	r7, r6
 8004128:	463d      	mov	r5, r7
 800412a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800412e:	b10b      	cbz	r3, 8004134 <_svfiprintf_r+0x58>
 8004130:	2b25      	cmp	r3, #37	; 0x25
 8004132:	d13e      	bne.n	80041b2 <_svfiprintf_r+0xd6>
 8004134:	ebb7 0a06 	subs.w	sl, r7, r6
 8004138:	d00b      	beq.n	8004152 <_svfiprintf_r+0x76>
 800413a:	4653      	mov	r3, sl
 800413c:	4632      	mov	r2, r6
 800413e:	4621      	mov	r1, r4
 8004140:	4640      	mov	r0, r8
 8004142:	f7ff ff71 	bl	8004028 <__ssputs_r>
 8004146:	3001      	adds	r0, #1
 8004148:	f000 80a4 	beq.w	8004294 <_svfiprintf_r+0x1b8>
 800414c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800414e:	4453      	add	r3, sl
 8004150:	9309      	str	r3, [sp, #36]	; 0x24
 8004152:	783b      	ldrb	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 809d 	beq.w	8004294 <_svfiprintf_r+0x1b8>
 800415a:	2300      	movs	r3, #0
 800415c:	f04f 32ff 	mov.w	r2, #4294967295
 8004160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004164:	9304      	str	r3, [sp, #16]
 8004166:	9307      	str	r3, [sp, #28]
 8004168:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800416c:	931a      	str	r3, [sp, #104]	; 0x68
 800416e:	462f      	mov	r7, r5
 8004170:	2205      	movs	r2, #5
 8004172:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004176:	4850      	ldr	r0, [pc, #320]	; (80042b8 <_svfiprintf_r+0x1dc>)
 8004178:	f7fc f82a 	bl	80001d0 <memchr>
 800417c:	9b04      	ldr	r3, [sp, #16]
 800417e:	b9d0      	cbnz	r0, 80041b6 <_svfiprintf_r+0xda>
 8004180:	06d9      	lsls	r1, r3, #27
 8004182:	bf44      	itt	mi
 8004184:	2220      	movmi	r2, #32
 8004186:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800418a:	071a      	lsls	r2, r3, #28
 800418c:	bf44      	itt	mi
 800418e:	222b      	movmi	r2, #43	; 0x2b
 8004190:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004194:	782a      	ldrb	r2, [r5, #0]
 8004196:	2a2a      	cmp	r2, #42	; 0x2a
 8004198:	d015      	beq.n	80041c6 <_svfiprintf_r+0xea>
 800419a:	9a07      	ldr	r2, [sp, #28]
 800419c:	462f      	mov	r7, r5
 800419e:	2000      	movs	r0, #0
 80041a0:	250a      	movs	r5, #10
 80041a2:	4639      	mov	r1, r7
 80041a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041a8:	3b30      	subs	r3, #48	; 0x30
 80041aa:	2b09      	cmp	r3, #9
 80041ac:	d94d      	bls.n	800424a <_svfiprintf_r+0x16e>
 80041ae:	b1b8      	cbz	r0, 80041e0 <_svfiprintf_r+0x104>
 80041b0:	e00f      	b.n	80041d2 <_svfiprintf_r+0xf6>
 80041b2:	462f      	mov	r7, r5
 80041b4:	e7b8      	b.n	8004128 <_svfiprintf_r+0x4c>
 80041b6:	4a40      	ldr	r2, [pc, #256]	; (80042b8 <_svfiprintf_r+0x1dc>)
 80041b8:	1a80      	subs	r0, r0, r2
 80041ba:	fa0b f000 	lsl.w	r0, fp, r0
 80041be:	4318      	orrs	r0, r3
 80041c0:	9004      	str	r0, [sp, #16]
 80041c2:	463d      	mov	r5, r7
 80041c4:	e7d3      	b.n	800416e <_svfiprintf_r+0x92>
 80041c6:	9a03      	ldr	r2, [sp, #12]
 80041c8:	1d11      	adds	r1, r2, #4
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	9103      	str	r1, [sp, #12]
 80041ce:	2a00      	cmp	r2, #0
 80041d0:	db01      	blt.n	80041d6 <_svfiprintf_r+0xfa>
 80041d2:	9207      	str	r2, [sp, #28]
 80041d4:	e004      	b.n	80041e0 <_svfiprintf_r+0x104>
 80041d6:	4252      	negs	r2, r2
 80041d8:	f043 0302 	orr.w	r3, r3, #2
 80041dc:	9207      	str	r2, [sp, #28]
 80041de:	9304      	str	r3, [sp, #16]
 80041e0:	783b      	ldrb	r3, [r7, #0]
 80041e2:	2b2e      	cmp	r3, #46	; 0x2e
 80041e4:	d10c      	bne.n	8004200 <_svfiprintf_r+0x124>
 80041e6:	787b      	ldrb	r3, [r7, #1]
 80041e8:	2b2a      	cmp	r3, #42	; 0x2a
 80041ea:	d133      	bne.n	8004254 <_svfiprintf_r+0x178>
 80041ec:	9b03      	ldr	r3, [sp, #12]
 80041ee:	1d1a      	adds	r2, r3, #4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	9203      	str	r2, [sp, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bfb8      	it	lt
 80041f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80041fc:	3702      	adds	r7, #2
 80041fe:	9305      	str	r3, [sp, #20]
 8004200:	4d2e      	ldr	r5, [pc, #184]	; (80042bc <_svfiprintf_r+0x1e0>)
 8004202:	7839      	ldrb	r1, [r7, #0]
 8004204:	2203      	movs	r2, #3
 8004206:	4628      	mov	r0, r5
 8004208:	f7fb ffe2 	bl	80001d0 <memchr>
 800420c:	b138      	cbz	r0, 800421e <_svfiprintf_r+0x142>
 800420e:	2340      	movs	r3, #64	; 0x40
 8004210:	1b40      	subs	r0, r0, r5
 8004212:	fa03 f000 	lsl.w	r0, r3, r0
 8004216:	9b04      	ldr	r3, [sp, #16]
 8004218:	4303      	orrs	r3, r0
 800421a:	3701      	adds	r7, #1
 800421c:	9304      	str	r3, [sp, #16]
 800421e:	7839      	ldrb	r1, [r7, #0]
 8004220:	4827      	ldr	r0, [pc, #156]	; (80042c0 <_svfiprintf_r+0x1e4>)
 8004222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004226:	2206      	movs	r2, #6
 8004228:	1c7e      	adds	r6, r7, #1
 800422a:	f7fb ffd1 	bl	80001d0 <memchr>
 800422e:	2800      	cmp	r0, #0
 8004230:	d038      	beq.n	80042a4 <_svfiprintf_r+0x1c8>
 8004232:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <_svfiprintf_r+0x1e8>)
 8004234:	bb13      	cbnz	r3, 800427c <_svfiprintf_r+0x1a0>
 8004236:	9b03      	ldr	r3, [sp, #12]
 8004238:	3307      	adds	r3, #7
 800423a:	f023 0307 	bic.w	r3, r3, #7
 800423e:	3308      	adds	r3, #8
 8004240:	9303      	str	r3, [sp, #12]
 8004242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004244:	444b      	add	r3, r9
 8004246:	9309      	str	r3, [sp, #36]	; 0x24
 8004248:	e76d      	b.n	8004126 <_svfiprintf_r+0x4a>
 800424a:	fb05 3202 	mla	r2, r5, r2, r3
 800424e:	2001      	movs	r0, #1
 8004250:	460f      	mov	r7, r1
 8004252:	e7a6      	b.n	80041a2 <_svfiprintf_r+0xc6>
 8004254:	2300      	movs	r3, #0
 8004256:	3701      	adds	r7, #1
 8004258:	9305      	str	r3, [sp, #20]
 800425a:	4619      	mov	r1, r3
 800425c:	250a      	movs	r5, #10
 800425e:	4638      	mov	r0, r7
 8004260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004264:	3a30      	subs	r2, #48	; 0x30
 8004266:	2a09      	cmp	r2, #9
 8004268:	d903      	bls.n	8004272 <_svfiprintf_r+0x196>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0c8      	beq.n	8004200 <_svfiprintf_r+0x124>
 800426e:	9105      	str	r1, [sp, #20]
 8004270:	e7c6      	b.n	8004200 <_svfiprintf_r+0x124>
 8004272:	fb05 2101 	mla	r1, r5, r1, r2
 8004276:	2301      	movs	r3, #1
 8004278:	4607      	mov	r7, r0
 800427a:	e7f0      	b.n	800425e <_svfiprintf_r+0x182>
 800427c:	ab03      	add	r3, sp, #12
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	4622      	mov	r2, r4
 8004282:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <_svfiprintf_r+0x1ec>)
 8004284:	a904      	add	r1, sp, #16
 8004286:	4640      	mov	r0, r8
 8004288:	f3af 8000 	nop.w
 800428c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004290:	4681      	mov	r9, r0
 8004292:	d1d6      	bne.n	8004242 <_svfiprintf_r+0x166>
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	065b      	lsls	r3, r3, #25
 8004298:	f53f af35 	bmi.w	8004106 <_svfiprintf_r+0x2a>
 800429c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800429e:	b01d      	add	sp, #116	; 0x74
 80042a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a4:	ab03      	add	r3, sp, #12
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	4622      	mov	r2, r4
 80042aa:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <_svfiprintf_r+0x1ec>)
 80042ac:	a904      	add	r1, sp, #16
 80042ae:	4640      	mov	r0, r8
 80042b0:	f000 f882 	bl	80043b8 <_printf_i>
 80042b4:	e7ea      	b.n	800428c <_svfiprintf_r+0x1b0>
 80042b6:	bf00      	nop
 80042b8:	0800487c 	.word	0x0800487c
 80042bc:	08004882 	.word	0x08004882
 80042c0:	08004886 	.word	0x08004886
 80042c4:	00000000 	.word	0x00000000
 80042c8:	08004029 	.word	0x08004029

080042cc <_printf_common>:
 80042cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d0:	4691      	mov	r9, r2
 80042d2:	461f      	mov	r7, r3
 80042d4:	688a      	ldr	r2, [r1, #8]
 80042d6:	690b      	ldr	r3, [r1, #16]
 80042d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042dc:	4293      	cmp	r3, r2
 80042de:	bfb8      	it	lt
 80042e0:	4613      	movlt	r3, r2
 80042e2:	f8c9 3000 	str.w	r3, [r9]
 80042e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042ea:	4606      	mov	r6, r0
 80042ec:	460c      	mov	r4, r1
 80042ee:	b112      	cbz	r2, 80042f6 <_printf_common+0x2a>
 80042f0:	3301      	adds	r3, #1
 80042f2:	f8c9 3000 	str.w	r3, [r9]
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	0699      	lsls	r1, r3, #26
 80042fa:	bf42      	ittt	mi
 80042fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004300:	3302      	addmi	r3, #2
 8004302:	f8c9 3000 	strmi.w	r3, [r9]
 8004306:	6825      	ldr	r5, [r4, #0]
 8004308:	f015 0506 	ands.w	r5, r5, #6
 800430c:	d107      	bne.n	800431e <_printf_common+0x52>
 800430e:	f104 0a19 	add.w	sl, r4, #25
 8004312:	68e3      	ldr	r3, [r4, #12]
 8004314:	f8d9 2000 	ldr.w	r2, [r9]
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	42ab      	cmp	r3, r5
 800431c:	dc28      	bgt.n	8004370 <_printf_common+0xa4>
 800431e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004322:	6822      	ldr	r2, [r4, #0]
 8004324:	3300      	adds	r3, #0
 8004326:	bf18      	it	ne
 8004328:	2301      	movne	r3, #1
 800432a:	0692      	lsls	r2, r2, #26
 800432c:	d42d      	bmi.n	800438a <_printf_common+0xbe>
 800432e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004332:	4639      	mov	r1, r7
 8004334:	4630      	mov	r0, r6
 8004336:	47c0      	blx	r8
 8004338:	3001      	adds	r0, #1
 800433a:	d020      	beq.n	800437e <_printf_common+0xb2>
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	68e5      	ldr	r5, [r4, #12]
 8004340:	f8d9 2000 	ldr.w	r2, [r9]
 8004344:	f003 0306 	and.w	r3, r3, #6
 8004348:	2b04      	cmp	r3, #4
 800434a:	bf08      	it	eq
 800434c:	1aad      	subeq	r5, r5, r2
 800434e:	68a3      	ldr	r3, [r4, #8]
 8004350:	6922      	ldr	r2, [r4, #16]
 8004352:	bf0c      	ite	eq
 8004354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004358:	2500      	movne	r5, #0
 800435a:	4293      	cmp	r3, r2
 800435c:	bfc4      	itt	gt
 800435e:	1a9b      	subgt	r3, r3, r2
 8004360:	18ed      	addgt	r5, r5, r3
 8004362:	f04f 0900 	mov.w	r9, #0
 8004366:	341a      	adds	r4, #26
 8004368:	454d      	cmp	r5, r9
 800436a:	d11a      	bne.n	80043a2 <_printf_common+0xd6>
 800436c:	2000      	movs	r0, #0
 800436e:	e008      	b.n	8004382 <_printf_common+0xb6>
 8004370:	2301      	movs	r3, #1
 8004372:	4652      	mov	r2, sl
 8004374:	4639      	mov	r1, r7
 8004376:	4630      	mov	r0, r6
 8004378:	47c0      	blx	r8
 800437a:	3001      	adds	r0, #1
 800437c:	d103      	bne.n	8004386 <_printf_common+0xba>
 800437e:	f04f 30ff 	mov.w	r0, #4294967295
 8004382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004386:	3501      	adds	r5, #1
 8004388:	e7c3      	b.n	8004312 <_printf_common+0x46>
 800438a:	18e1      	adds	r1, r4, r3
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	2030      	movs	r0, #48	; 0x30
 8004390:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004394:	4422      	add	r2, r4
 8004396:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800439a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800439e:	3302      	adds	r3, #2
 80043a0:	e7c5      	b.n	800432e <_printf_common+0x62>
 80043a2:	2301      	movs	r3, #1
 80043a4:	4622      	mov	r2, r4
 80043a6:	4639      	mov	r1, r7
 80043a8:	4630      	mov	r0, r6
 80043aa:	47c0      	blx	r8
 80043ac:	3001      	adds	r0, #1
 80043ae:	d0e6      	beq.n	800437e <_printf_common+0xb2>
 80043b0:	f109 0901 	add.w	r9, r9, #1
 80043b4:	e7d8      	b.n	8004368 <_printf_common+0x9c>
	...

080043b8 <_printf_i>:
 80043b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80043c0:	460c      	mov	r4, r1
 80043c2:	7e09      	ldrb	r1, [r1, #24]
 80043c4:	b085      	sub	sp, #20
 80043c6:	296e      	cmp	r1, #110	; 0x6e
 80043c8:	4617      	mov	r7, r2
 80043ca:	4606      	mov	r6, r0
 80043cc:	4698      	mov	r8, r3
 80043ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043d0:	f000 80b3 	beq.w	800453a <_printf_i+0x182>
 80043d4:	d822      	bhi.n	800441c <_printf_i+0x64>
 80043d6:	2963      	cmp	r1, #99	; 0x63
 80043d8:	d036      	beq.n	8004448 <_printf_i+0x90>
 80043da:	d80a      	bhi.n	80043f2 <_printf_i+0x3a>
 80043dc:	2900      	cmp	r1, #0
 80043de:	f000 80b9 	beq.w	8004554 <_printf_i+0x19c>
 80043e2:	2958      	cmp	r1, #88	; 0x58
 80043e4:	f000 8083 	beq.w	80044ee <_printf_i+0x136>
 80043e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80043f0:	e032      	b.n	8004458 <_printf_i+0xa0>
 80043f2:	2964      	cmp	r1, #100	; 0x64
 80043f4:	d001      	beq.n	80043fa <_printf_i+0x42>
 80043f6:	2969      	cmp	r1, #105	; 0x69
 80043f8:	d1f6      	bne.n	80043e8 <_printf_i+0x30>
 80043fa:	6820      	ldr	r0, [r4, #0]
 80043fc:	6813      	ldr	r3, [r2, #0]
 80043fe:	0605      	lsls	r5, r0, #24
 8004400:	f103 0104 	add.w	r1, r3, #4
 8004404:	d52a      	bpl.n	800445c <_printf_i+0xa4>
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6011      	str	r1, [r2, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	da03      	bge.n	8004416 <_printf_i+0x5e>
 800440e:	222d      	movs	r2, #45	; 0x2d
 8004410:	425b      	negs	r3, r3
 8004412:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004416:	486f      	ldr	r0, [pc, #444]	; (80045d4 <_printf_i+0x21c>)
 8004418:	220a      	movs	r2, #10
 800441a:	e039      	b.n	8004490 <_printf_i+0xd8>
 800441c:	2973      	cmp	r1, #115	; 0x73
 800441e:	f000 809d 	beq.w	800455c <_printf_i+0x1a4>
 8004422:	d808      	bhi.n	8004436 <_printf_i+0x7e>
 8004424:	296f      	cmp	r1, #111	; 0x6f
 8004426:	d020      	beq.n	800446a <_printf_i+0xb2>
 8004428:	2970      	cmp	r1, #112	; 0x70
 800442a:	d1dd      	bne.n	80043e8 <_printf_i+0x30>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	f043 0320 	orr.w	r3, r3, #32
 8004432:	6023      	str	r3, [r4, #0]
 8004434:	e003      	b.n	800443e <_printf_i+0x86>
 8004436:	2975      	cmp	r1, #117	; 0x75
 8004438:	d017      	beq.n	800446a <_printf_i+0xb2>
 800443a:	2978      	cmp	r1, #120	; 0x78
 800443c:	d1d4      	bne.n	80043e8 <_printf_i+0x30>
 800443e:	2378      	movs	r3, #120	; 0x78
 8004440:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004444:	4864      	ldr	r0, [pc, #400]	; (80045d8 <_printf_i+0x220>)
 8004446:	e055      	b.n	80044f4 <_printf_i+0x13c>
 8004448:	6813      	ldr	r3, [r2, #0]
 800444a:	1d19      	adds	r1, r3, #4
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6011      	str	r1, [r2, #0]
 8004450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004458:	2301      	movs	r3, #1
 800445a:	e08c      	b.n	8004576 <_printf_i+0x1be>
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6011      	str	r1, [r2, #0]
 8004460:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004464:	bf18      	it	ne
 8004466:	b21b      	sxthne	r3, r3
 8004468:	e7cf      	b.n	800440a <_printf_i+0x52>
 800446a:	6813      	ldr	r3, [r2, #0]
 800446c:	6825      	ldr	r5, [r4, #0]
 800446e:	1d18      	adds	r0, r3, #4
 8004470:	6010      	str	r0, [r2, #0]
 8004472:	0628      	lsls	r0, r5, #24
 8004474:	d501      	bpl.n	800447a <_printf_i+0xc2>
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	e002      	b.n	8004480 <_printf_i+0xc8>
 800447a:	0668      	lsls	r0, r5, #25
 800447c:	d5fb      	bpl.n	8004476 <_printf_i+0xbe>
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	4854      	ldr	r0, [pc, #336]	; (80045d4 <_printf_i+0x21c>)
 8004482:	296f      	cmp	r1, #111	; 0x6f
 8004484:	bf14      	ite	ne
 8004486:	220a      	movne	r2, #10
 8004488:	2208      	moveq	r2, #8
 800448a:	2100      	movs	r1, #0
 800448c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004490:	6865      	ldr	r5, [r4, #4]
 8004492:	60a5      	str	r5, [r4, #8]
 8004494:	2d00      	cmp	r5, #0
 8004496:	f2c0 8095 	blt.w	80045c4 <_printf_i+0x20c>
 800449a:	6821      	ldr	r1, [r4, #0]
 800449c:	f021 0104 	bic.w	r1, r1, #4
 80044a0:	6021      	str	r1, [r4, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d13d      	bne.n	8004522 <_printf_i+0x16a>
 80044a6:	2d00      	cmp	r5, #0
 80044a8:	f040 808e 	bne.w	80045c8 <_printf_i+0x210>
 80044ac:	4665      	mov	r5, ip
 80044ae:	2a08      	cmp	r2, #8
 80044b0:	d10b      	bne.n	80044ca <_printf_i+0x112>
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	07db      	lsls	r3, r3, #31
 80044b6:	d508      	bpl.n	80044ca <_printf_i+0x112>
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	6862      	ldr	r2, [r4, #4]
 80044bc:	429a      	cmp	r2, r3
 80044be:	bfde      	ittt	le
 80044c0:	2330      	movle	r3, #48	; 0x30
 80044c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044ca:	ebac 0305 	sub.w	r3, ip, r5
 80044ce:	6123      	str	r3, [r4, #16]
 80044d0:	f8cd 8000 	str.w	r8, [sp]
 80044d4:	463b      	mov	r3, r7
 80044d6:	aa03      	add	r2, sp, #12
 80044d8:	4621      	mov	r1, r4
 80044da:	4630      	mov	r0, r6
 80044dc:	f7ff fef6 	bl	80042cc <_printf_common>
 80044e0:	3001      	adds	r0, #1
 80044e2:	d14d      	bne.n	8004580 <_printf_i+0x1c8>
 80044e4:	f04f 30ff 	mov.w	r0, #4294967295
 80044e8:	b005      	add	sp, #20
 80044ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044ee:	4839      	ldr	r0, [pc, #228]	; (80045d4 <_printf_i+0x21c>)
 80044f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80044f4:	6813      	ldr	r3, [r2, #0]
 80044f6:	6821      	ldr	r1, [r4, #0]
 80044f8:	1d1d      	adds	r5, r3, #4
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6015      	str	r5, [r2, #0]
 80044fe:	060a      	lsls	r2, r1, #24
 8004500:	d50b      	bpl.n	800451a <_printf_i+0x162>
 8004502:	07ca      	lsls	r2, r1, #31
 8004504:	bf44      	itt	mi
 8004506:	f041 0120 	orrmi.w	r1, r1, #32
 800450a:	6021      	strmi	r1, [r4, #0]
 800450c:	b91b      	cbnz	r3, 8004516 <_printf_i+0x15e>
 800450e:	6822      	ldr	r2, [r4, #0]
 8004510:	f022 0220 	bic.w	r2, r2, #32
 8004514:	6022      	str	r2, [r4, #0]
 8004516:	2210      	movs	r2, #16
 8004518:	e7b7      	b.n	800448a <_printf_i+0xd2>
 800451a:	064d      	lsls	r5, r1, #25
 800451c:	bf48      	it	mi
 800451e:	b29b      	uxthmi	r3, r3
 8004520:	e7ef      	b.n	8004502 <_printf_i+0x14a>
 8004522:	4665      	mov	r5, ip
 8004524:	fbb3 f1f2 	udiv	r1, r3, r2
 8004528:	fb02 3311 	mls	r3, r2, r1, r3
 800452c:	5cc3      	ldrb	r3, [r0, r3]
 800452e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004532:	460b      	mov	r3, r1
 8004534:	2900      	cmp	r1, #0
 8004536:	d1f5      	bne.n	8004524 <_printf_i+0x16c>
 8004538:	e7b9      	b.n	80044ae <_printf_i+0xf6>
 800453a:	6813      	ldr	r3, [r2, #0]
 800453c:	6825      	ldr	r5, [r4, #0]
 800453e:	6961      	ldr	r1, [r4, #20]
 8004540:	1d18      	adds	r0, r3, #4
 8004542:	6010      	str	r0, [r2, #0]
 8004544:	0628      	lsls	r0, r5, #24
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	d501      	bpl.n	800454e <_printf_i+0x196>
 800454a:	6019      	str	r1, [r3, #0]
 800454c:	e002      	b.n	8004554 <_printf_i+0x19c>
 800454e:	066a      	lsls	r2, r5, #25
 8004550:	d5fb      	bpl.n	800454a <_printf_i+0x192>
 8004552:	8019      	strh	r1, [r3, #0]
 8004554:	2300      	movs	r3, #0
 8004556:	6123      	str	r3, [r4, #16]
 8004558:	4665      	mov	r5, ip
 800455a:	e7b9      	b.n	80044d0 <_printf_i+0x118>
 800455c:	6813      	ldr	r3, [r2, #0]
 800455e:	1d19      	adds	r1, r3, #4
 8004560:	6011      	str	r1, [r2, #0]
 8004562:	681d      	ldr	r5, [r3, #0]
 8004564:	6862      	ldr	r2, [r4, #4]
 8004566:	2100      	movs	r1, #0
 8004568:	4628      	mov	r0, r5
 800456a:	f7fb fe31 	bl	80001d0 <memchr>
 800456e:	b108      	cbz	r0, 8004574 <_printf_i+0x1bc>
 8004570:	1b40      	subs	r0, r0, r5
 8004572:	6060      	str	r0, [r4, #4]
 8004574:	6863      	ldr	r3, [r4, #4]
 8004576:	6123      	str	r3, [r4, #16]
 8004578:	2300      	movs	r3, #0
 800457a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800457e:	e7a7      	b.n	80044d0 <_printf_i+0x118>
 8004580:	6923      	ldr	r3, [r4, #16]
 8004582:	462a      	mov	r2, r5
 8004584:	4639      	mov	r1, r7
 8004586:	4630      	mov	r0, r6
 8004588:	47c0      	blx	r8
 800458a:	3001      	adds	r0, #1
 800458c:	d0aa      	beq.n	80044e4 <_printf_i+0x12c>
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	079b      	lsls	r3, r3, #30
 8004592:	d413      	bmi.n	80045bc <_printf_i+0x204>
 8004594:	68e0      	ldr	r0, [r4, #12]
 8004596:	9b03      	ldr	r3, [sp, #12]
 8004598:	4298      	cmp	r0, r3
 800459a:	bfb8      	it	lt
 800459c:	4618      	movlt	r0, r3
 800459e:	e7a3      	b.n	80044e8 <_printf_i+0x130>
 80045a0:	2301      	movs	r3, #1
 80045a2:	464a      	mov	r2, r9
 80045a4:	4639      	mov	r1, r7
 80045a6:	4630      	mov	r0, r6
 80045a8:	47c0      	blx	r8
 80045aa:	3001      	adds	r0, #1
 80045ac:	d09a      	beq.n	80044e4 <_printf_i+0x12c>
 80045ae:	3501      	adds	r5, #1
 80045b0:	68e3      	ldr	r3, [r4, #12]
 80045b2:	9a03      	ldr	r2, [sp, #12]
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	42ab      	cmp	r3, r5
 80045b8:	dcf2      	bgt.n	80045a0 <_printf_i+0x1e8>
 80045ba:	e7eb      	b.n	8004594 <_printf_i+0x1dc>
 80045bc:	2500      	movs	r5, #0
 80045be:	f104 0919 	add.w	r9, r4, #25
 80045c2:	e7f5      	b.n	80045b0 <_printf_i+0x1f8>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ac      	bne.n	8004522 <_printf_i+0x16a>
 80045c8:	7803      	ldrb	r3, [r0, #0]
 80045ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045d2:	e76c      	b.n	80044ae <_printf_i+0xf6>
 80045d4:	0800488d 	.word	0x0800488d
 80045d8:	0800489e 	.word	0x0800489e

080045dc <memcpy>:
 80045dc:	b510      	push	{r4, lr}
 80045de:	1e43      	subs	r3, r0, #1
 80045e0:	440a      	add	r2, r1
 80045e2:	4291      	cmp	r1, r2
 80045e4:	d100      	bne.n	80045e8 <memcpy+0xc>
 80045e6:	bd10      	pop	{r4, pc}
 80045e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045f0:	e7f7      	b.n	80045e2 <memcpy+0x6>

080045f2 <memmove>:
 80045f2:	4288      	cmp	r0, r1
 80045f4:	b510      	push	{r4, lr}
 80045f6:	eb01 0302 	add.w	r3, r1, r2
 80045fa:	d807      	bhi.n	800460c <memmove+0x1a>
 80045fc:	1e42      	subs	r2, r0, #1
 80045fe:	4299      	cmp	r1, r3
 8004600:	d00a      	beq.n	8004618 <memmove+0x26>
 8004602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004606:	f802 4f01 	strb.w	r4, [r2, #1]!
 800460a:	e7f8      	b.n	80045fe <memmove+0xc>
 800460c:	4283      	cmp	r3, r0
 800460e:	d9f5      	bls.n	80045fc <memmove+0xa>
 8004610:	1881      	adds	r1, r0, r2
 8004612:	1ad2      	subs	r2, r2, r3
 8004614:	42d3      	cmn	r3, r2
 8004616:	d100      	bne.n	800461a <memmove+0x28>
 8004618:	bd10      	pop	{r4, pc}
 800461a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800461e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004622:	e7f7      	b.n	8004614 <memmove+0x22>

08004624 <_free_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4605      	mov	r5, r0
 8004628:	2900      	cmp	r1, #0
 800462a:	d045      	beq.n	80046b8 <_free_r+0x94>
 800462c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004630:	1f0c      	subs	r4, r1, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	bfb8      	it	lt
 8004636:	18e4      	addlt	r4, r4, r3
 8004638:	f000 f8d2 	bl	80047e0 <__malloc_lock>
 800463c:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <_free_r+0x98>)
 800463e:	6813      	ldr	r3, [r2, #0]
 8004640:	4610      	mov	r0, r2
 8004642:	b933      	cbnz	r3, 8004652 <_free_r+0x2e>
 8004644:	6063      	str	r3, [r4, #4]
 8004646:	6014      	str	r4, [r2, #0]
 8004648:	4628      	mov	r0, r5
 800464a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800464e:	f000 b8c8 	b.w	80047e2 <__malloc_unlock>
 8004652:	42a3      	cmp	r3, r4
 8004654:	d90c      	bls.n	8004670 <_free_r+0x4c>
 8004656:	6821      	ldr	r1, [r4, #0]
 8004658:	1862      	adds	r2, r4, r1
 800465a:	4293      	cmp	r3, r2
 800465c:	bf04      	itt	eq
 800465e:	681a      	ldreq	r2, [r3, #0]
 8004660:	685b      	ldreq	r3, [r3, #4]
 8004662:	6063      	str	r3, [r4, #4]
 8004664:	bf04      	itt	eq
 8004666:	1852      	addeq	r2, r2, r1
 8004668:	6022      	streq	r2, [r4, #0]
 800466a:	6004      	str	r4, [r0, #0]
 800466c:	e7ec      	b.n	8004648 <_free_r+0x24>
 800466e:	4613      	mov	r3, r2
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	b10a      	cbz	r2, 8004678 <_free_r+0x54>
 8004674:	42a2      	cmp	r2, r4
 8004676:	d9fa      	bls.n	800466e <_free_r+0x4a>
 8004678:	6819      	ldr	r1, [r3, #0]
 800467a:	1858      	adds	r0, r3, r1
 800467c:	42a0      	cmp	r0, r4
 800467e:	d10b      	bne.n	8004698 <_free_r+0x74>
 8004680:	6820      	ldr	r0, [r4, #0]
 8004682:	4401      	add	r1, r0
 8004684:	1858      	adds	r0, r3, r1
 8004686:	4282      	cmp	r2, r0
 8004688:	6019      	str	r1, [r3, #0]
 800468a:	d1dd      	bne.n	8004648 <_free_r+0x24>
 800468c:	6810      	ldr	r0, [r2, #0]
 800468e:	6852      	ldr	r2, [r2, #4]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	4401      	add	r1, r0
 8004694:	6019      	str	r1, [r3, #0]
 8004696:	e7d7      	b.n	8004648 <_free_r+0x24>
 8004698:	d902      	bls.n	80046a0 <_free_r+0x7c>
 800469a:	230c      	movs	r3, #12
 800469c:	602b      	str	r3, [r5, #0]
 800469e:	e7d3      	b.n	8004648 <_free_r+0x24>
 80046a0:	6820      	ldr	r0, [r4, #0]
 80046a2:	1821      	adds	r1, r4, r0
 80046a4:	428a      	cmp	r2, r1
 80046a6:	bf04      	itt	eq
 80046a8:	6811      	ldreq	r1, [r2, #0]
 80046aa:	6852      	ldreq	r2, [r2, #4]
 80046ac:	6062      	str	r2, [r4, #4]
 80046ae:	bf04      	itt	eq
 80046b0:	1809      	addeq	r1, r1, r0
 80046b2:	6021      	streq	r1, [r4, #0]
 80046b4:	605c      	str	r4, [r3, #4]
 80046b6:	e7c7      	b.n	8004648 <_free_r+0x24>
 80046b8:	bd38      	pop	{r3, r4, r5, pc}
 80046ba:	bf00      	nop
 80046bc:	20000110 	.word	0x20000110

080046c0 <_malloc_r>:
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	1ccd      	adds	r5, r1, #3
 80046c4:	f025 0503 	bic.w	r5, r5, #3
 80046c8:	3508      	adds	r5, #8
 80046ca:	2d0c      	cmp	r5, #12
 80046cc:	bf38      	it	cc
 80046ce:	250c      	movcc	r5, #12
 80046d0:	2d00      	cmp	r5, #0
 80046d2:	4606      	mov	r6, r0
 80046d4:	db01      	blt.n	80046da <_malloc_r+0x1a>
 80046d6:	42a9      	cmp	r1, r5
 80046d8:	d903      	bls.n	80046e2 <_malloc_r+0x22>
 80046da:	230c      	movs	r3, #12
 80046dc:	6033      	str	r3, [r6, #0]
 80046de:	2000      	movs	r0, #0
 80046e0:	bd70      	pop	{r4, r5, r6, pc}
 80046e2:	f000 f87d 	bl	80047e0 <__malloc_lock>
 80046e6:	4a21      	ldr	r2, [pc, #132]	; (800476c <_malloc_r+0xac>)
 80046e8:	6814      	ldr	r4, [r2, #0]
 80046ea:	4621      	mov	r1, r4
 80046ec:	b991      	cbnz	r1, 8004714 <_malloc_r+0x54>
 80046ee:	4c20      	ldr	r4, [pc, #128]	; (8004770 <_malloc_r+0xb0>)
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	b91b      	cbnz	r3, 80046fc <_malloc_r+0x3c>
 80046f4:	4630      	mov	r0, r6
 80046f6:	f000 f863 	bl	80047c0 <_sbrk_r>
 80046fa:	6020      	str	r0, [r4, #0]
 80046fc:	4629      	mov	r1, r5
 80046fe:	4630      	mov	r0, r6
 8004700:	f000 f85e 	bl	80047c0 <_sbrk_r>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	d124      	bne.n	8004752 <_malloc_r+0x92>
 8004708:	230c      	movs	r3, #12
 800470a:	6033      	str	r3, [r6, #0]
 800470c:	4630      	mov	r0, r6
 800470e:	f000 f868 	bl	80047e2 <__malloc_unlock>
 8004712:	e7e4      	b.n	80046de <_malloc_r+0x1e>
 8004714:	680b      	ldr	r3, [r1, #0]
 8004716:	1b5b      	subs	r3, r3, r5
 8004718:	d418      	bmi.n	800474c <_malloc_r+0x8c>
 800471a:	2b0b      	cmp	r3, #11
 800471c:	d90f      	bls.n	800473e <_malloc_r+0x7e>
 800471e:	600b      	str	r3, [r1, #0]
 8004720:	50cd      	str	r5, [r1, r3]
 8004722:	18cc      	adds	r4, r1, r3
 8004724:	4630      	mov	r0, r6
 8004726:	f000 f85c 	bl	80047e2 <__malloc_unlock>
 800472a:	f104 000b 	add.w	r0, r4, #11
 800472e:	1d23      	adds	r3, r4, #4
 8004730:	f020 0007 	bic.w	r0, r0, #7
 8004734:	1ac3      	subs	r3, r0, r3
 8004736:	d0d3      	beq.n	80046e0 <_malloc_r+0x20>
 8004738:	425a      	negs	r2, r3
 800473a:	50e2      	str	r2, [r4, r3]
 800473c:	e7d0      	b.n	80046e0 <_malloc_r+0x20>
 800473e:	428c      	cmp	r4, r1
 8004740:	684b      	ldr	r3, [r1, #4]
 8004742:	bf16      	itet	ne
 8004744:	6063      	strne	r3, [r4, #4]
 8004746:	6013      	streq	r3, [r2, #0]
 8004748:	460c      	movne	r4, r1
 800474a:	e7eb      	b.n	8004724 <_malloc_r+0x64>
 800474c:	460c      	mov	r4, r1
 800474e:	6849      	ldr	r1, [r1, #4]
 8004750:	e7cc      	b.n	80046ec <_malloc_r+0x2c>
 8004752:	1cc4      	adds	r4, r0, #3
 8004754:	f024 0403 	bic.w	r4, r4, #3
 8004758:	42a0      	cmp	r0, r4
 800475a:	d005      	beq.n	8004768 <_malloc_r+0xa8>
 800475c:	1a21      	subs	r1, r4, r0
 800475e:	4630      	mov	r0, r6
 8004760:	f000 f82e 	bl	80047c0 <_sbrk_r>
 8004764:	3001      	adds	r0, #1
 8004766:	d0cf      	beq.n	8004708 <_malloc_r+0x48>
 8004768:	6025      	str	r5, [r4, #0]
 800476a:	e7db      	b.n	8004724 <_malloc_r+0x64>
 800476c:	20000110 	.word	0x20000110
 8004770:	20000114 	.word	0x20000114

08004774 <_realloc_r>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	4607      	mov	r7, r0
 8004778:	4614      	mov	r4, r2
 800477a:	460e      	mov	r6, r1
 800477c:	b921      	cbnz	r1, 8004788 <_realloc_r+0x14>
 800477e:	4611      	mov	r1, r2
 8004780:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004784:	f7ff bf9c 	b.w	80046c0 <_malloc_r>
 8004788:	b922      	cbnz	r2, 8004794 <_realloc_r+0x20>
 800478a:	f7ff ff4b 	bl	8004624 <_free_r>
 800478e:	4625      	mov	r5, r4
 8004790:	4628      	mov	r0, r5
 8004792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004794:	f000 f826 	bl	80047e4 <_malloc_usable_size_r>
 8004798:	42a0      	cmp	r0, r4
 800479a:	d20f      	bcs.n	80047bc <_realloc_r+0x48>
 800479c:	4621      	mov	r1, r4
 800479e:	4638      	mov	r0, r7
 80047a0:	f7ff ff8e 	bl	80046c0 <_malloc_r>
 80047a4:	4605      	mov	r5, r0
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d0f2      	beq.n	8004790 <_realloc_r+0x1c>
 80047aa:	4631      	mov	r1, r6
 80047ac:	4622      	mov	r2, r4
 80047ae:	f7ff ff15 	bl	80045dc <memcpy>
 80047b2:	4631      	mov	r1, r6
 80047b4:	4638      	mov	r0, r7
 80047b6:	f7ff ff35 	bl	8004624 <_free_r>
 80047ba:	e7e9      	b.n	8004790 <_realloc_r+0x1c>
 80047bc:	4635      	mov	r5, r6
 80047be:	e7e7      	b.n	8004790 <_realloc_r+0x1c>

080047c0 <_sbrk_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4c06      	ldr	r4, [pc, #24]	; (80047dc <_sbrk_r+0x1c>)
 80047c4:	2300      	movs	r3, #0
 80047c6:	4605      	mov	r5, r0
 80047c8:	4608      	mov	r0, r1
 80047ca:	6023      	str	r3, [r4, #0]
 80047cc:	f7fd ffa0 	bl	8002710 <_sbrk>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d102      	bne.n	80047da <_sbrk_r+0x1a>
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	b103      	cbz	r3, 80047da <_sbrk_r+0x1a>
 80047d8:	602b      	str	r3, [r5, #0]
 80047da:	bd38      	pop	{r3, r4, r5, pc}
 80047dc:	20000178 	.word	0x20000178

080047e0 <__malloc_lock>:
 80047e0:	4770      	bx	lr

080047e2 <__malloc_unlock>:
 80047e2:	4770      	bx	lr

080047e4 <_malloc_usable_size_r>:
 80047e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e8:	1f18      	subs	r0, r3, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	bfbc      	itt	lt
 80047ee:	580b      	ldrlt	r3, [r1, r0]
 80047f0:	18c0      	addlt	r0, r0, r3
 80047f2:	4770      	bx	lr

080047f4 <_init>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	bf00      	nop
 80047f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fa:	bc08      	pop	{r3}
 80047fc:	469e      	mov	lr, r3
 80047fe:	4770      	bx	lr

08004800 <_fini>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	bf00      	nop
 8004804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004806:	bc08      	pop	{r3}
 8004808:	469e      	mov	lr, r3
 800480a:	4770      	bx	lr
